import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    public void assertBooleanArrayEquals(boolean[] expectedArray, boolean[] actualArray) {
        if (expectedArray.length != actualArray.length) {
            throw new AssertionError("Array lengths differ: " + expectedArray.length + " != " + actualArray.length);
        }
        for (int i = 0; i < expectedArray.length; i++) {
            if (expectedArray[i] != actualArray[i]) {
                throw new AssertionError("Arrays differ at index " + i + ": " + expectedArray[i] + " != " + actualArray[i]);
            }
        }
    }

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        org.apache.commons.csv.CSVFormat cSVFormat1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: format");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Appendable appendable3 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat1.print((java.lang.Object) false, appendable3, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.io.File file2 = null;
        java.nio.charset.Charset charset3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter4 = cSVFormat1.print(file2, charset3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        java.lang.Appendable appendable0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined1.getFormat();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter4 = new org.apache.commons.csv.CSVPrinter(appendable0, cSVFormat3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.QuoteMode quoteMode1 = cSVFormat0.getQuoteMode();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        java.nio.file.Path path3 = null;
        java.nio.charset.Charset charset4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat0.print(path3, charset4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(quoteMode1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser4 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1, (long) '4', 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        java.lang.Appendable appendable0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter3 = new org.apache.commons.csv.CSVPrinter(appendable0, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat2);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        java.io.RandomAccessFile randomAccessFile7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder8 = builder4.setRandomAccessFile(randomAccessFile7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        java.io.Reader reader3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser4 = cSVFormat1.parse(reader3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((java.lang.Integer) 100);
        java.nio.file.Path path6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setPath(path6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder6 = builder2.setCharset("");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        java.sql.ResultSet resultSet3 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter2.printRecords(resultSet3, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder6 = builder2.setOutputStream(outputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        java.sql.ResultSet resultSet3 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter2.printRecords(resultSet3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((java.lang.Integer) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream6 = builder0.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder7 = builder2.setByteArray(byteArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.io.RandomAccessFile randomAccessFile8 = builder2.getRandomAccessFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getFile() for byte[] origin [B@304df5cc");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('#');
        java.io.File file2 = null;
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset(0L);
        java.nio.charset.Charset charset6 = builder5.getCharsetDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter7 = cSVFormat1.print(file2, charset6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        int int1 = builder0.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setFile("");
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream4 = builder3.getInputStream();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.io.Reader reader6 = builder5.getReader();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        int int1 = builder0.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setFile("");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset("");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        java.nio.file.Path path0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder1.setCharacterOffset(0L);
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.DEFAULT;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse(path0, charset4, cSVFormat5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(cSVFormat5);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        java.nio.file.Path path3 = null;
        java.nio.charset.Charset charset4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat1.print(path3, charset4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        int int1 = builder0.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setFile("");
        java.nio.file.Path path4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setPath(path4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setDelimiter("hi!");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        java.io.File file0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder1.setCharacterOffset(0L);
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse(file0, charset4, cSVFormat5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(cSVFormat5);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser1 = builder0.getUnchecked();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char24 = cSVFormat23.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("", cSVFormat23);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser25.spliterator();
        java.lang.String str27 = cSVParser25.getHeaderComment();
        java.lang.String str28 = cSVParser25.getFirstEndOfLine();
        cSVPrinter2.print((java.lang.Object) str28);
        org.apache.commons.csv.CSVParser.Builder builder30 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption31 = null;
        java.nio.file.OpenOption[] openOptionArray32 = new java.nio.file.OpenOption[] { openOption31 };
        org.apache.commons.csv.CSVParser.Builder builder33 = builder30.setOpenOptions(openOptionArray32);
        cSVPrinter2.printRecord((java.lang.Object[]) openOptionArray32);
        java.sql.ResultSet resultSet35 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter2.printRecords(resultSet35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(openOptionArray32);
        org.junit.Assert.assertArrayEquals(openOptionArray32, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(true);
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setHeader(resultSet7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setIgnoreHeaderCase(true);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder12 = builder8.setDuplicateHeaderMode(duplicateHeaderMode11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: duplicateHeaderMode");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.file.Path path5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder6 = builder2.setPath(path5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.io.IORandomAccessFile iORandomAccessFile1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setRandomAccessFile(iORandomAccessFile1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        java.net.URL uRL0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder1.setCharacterOffset(0L);
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char7 = cSVFormat6.getEscapeCharacter();
        org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray9 = cSVFormat8.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder10 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat8);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder10.setHeader(strArray12);
        org.apache.commons.csv.CSVFormat cSVFormat14 = builder10.get();
        boolean boolean15 = cSVFormat6.equals((java.lang.Object) builder10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse(uRL0, charset4, cSVFormat6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertArrayEquals(strArray12, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char3 = cSVFormat2.getEscapeCharacter();
        java.lang.String[] strArray4 = cSVFormat2.getHeaderComments();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNull(strArray4);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setFile("hi!");
        byte[] byteArray13 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder14 = builder9.setByteArray(byteArray13);
        org.apache.commons.csv.CSVParser.Builder builder15 = builder4.setByteArray(byteArray13);
        java.nio.file.Path path16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setPath(path16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertArrayEquals(byteArray13, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        int int1 = builder0.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setFile("");
        java.net.URI uRI4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setURI(uRI4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset(0L);
        int int3 = builder2.getBufferSize();
        java.nio.file.Path path4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setPath(path4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8192 + "'", int3 == 8192);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset(0L);
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder5.setCharset(charset9);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path11 = builder10.getPath();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MONGODB_TSV;
        java.lang.String str1 = cSVFormat0.toString();
        java.lang.Character char2 = cSVFormat0.getQuoteCharacter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str1, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + char2 + "' != '" + '\"' + "'", char2 == '\"');
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset(0L);
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream3 = builder2.getInputStream();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.io.File file5 = builder4.getFile();
        java.net.URI uRI6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder7 = builder4.setURI(uRI6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "hi!");
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder1.setCharacterOffset(0L);
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setFile("hi!");
        java.nio.charset.Charset charset15 = null;
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharset(charset15);
        java.io.Writer writer17 = builder14.getWriter();
        cSVFormat9.println((java.lang.Appendable) writer17);
        cSVFormat6.print((java.lang.Object) 10L, (java.lang.Appendable) writer17, true);
        boolean boolean22 = cSVFormat6.equals((java.lang.Object) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset4, cSVFormat6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(writer17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char3 = cSVFormat2.getEscapeCharacter();
        boolean boolean4 = cSVFormat2.getTrailingData();
        boolean boolean5 = cSVFormat2.getTrim();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser8 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat2, (long) '\\', (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray7 = builder6.getOpenOptions();
        org.apache.commons.io.IORandomAccessFile iORandomAccessFile8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder9 = builder6.setRandomAccessFile(iORandomAccessFile8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(openOptionArray7);
        org.junit.Assert.assertArrayEquals(openOptionArray7, new java.nio.file.OpenOption[] {});
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder8 = builder4.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        java.nio.file.Path path9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder10 = builder4.setPath(path9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setCharSequence((java.lang.CharSequence) "hi!");
        java.io.InputStream inputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setInputStream(inputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence3 = builder0.getCharSequence();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder8 = builder4.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setCharset("\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined4 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat5 = predefined4.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharset(charset11);
        java.io.Writer writer13 = builder10.getWriter();
        cSVFormat5.println((java.lang.Appendable) writer13);
        cSVFormat2.print((java.lang.Object) 10L, (java.lang.Appendable) writer13, true);
        org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat2.printer();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + predefined4 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined4.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(writer13);
        org.junit.Assert.assertNotNull(cSVPrinter17);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        boolean boolean3 = cSVFormat1.getTrailingDelimiter();
        java.lang.Object[] objArray4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = cSVFormat1.format(objArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset(0L);
        java.nio.charset.Charset charset3 = builder2.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setFile("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        // The following exception was thrown during execution in test generation
        try {
            java.io.Reader reader6 = builder5.getReader();
            org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException; message: Illegal char <<> at index 10: Delimiter=<?> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false");
        } catch (java.nio.file.InvalidPathException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset(0L);
        java.nio.charset.Charset charset6 = builder5.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setCharset(charset6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser8 = builder7.get();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setCharSequence((java.lang.CharSequence) "hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.io.RandomAccessFile randomAccessFile5 = builder4.getRandomAccessFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CharSequenceOrigin#getFile() for String origin hi!");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder1.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset(0L);
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder1.setCharset(charset7);
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char11 = cSVFormat10.getEscapeCharacter();
        boolean boolean12 = cSVFormat10.getTrailingDelimiter();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset7, cSVFormat10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        java.io.Writer writer7 = builder4.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder4.setCharSequence((java.lang.CharSequence) "");
        java.io.InputStream inputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setInputStream(inputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(writer7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder7 = builder2.setByteArray(byteArray6);
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setBufferSizeMax(1);
        java.io.Reader reader10 = builder9.getReader();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file11 = builder9.getFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getFile() for byte[] origin [B@11614940");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(reader10);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setQuote('#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder8.setHeader(resultSetMetaData11);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setQuote((java.lang.Character) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setDelimiter("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder4.setTrailingData(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setAllowMissingColumnNames(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder8 = builder4.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setPath("");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser11 = builder10.getUnchecked();
            org.junit.Assert.fail("Expected exception of type java.io.UncheckedIOException; message: java.nio.file.AccessDeniedException: ");
        } catch (java.io.UncheckedIOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        int int1 = builder0.getBufferSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence2 = builder0.getCharSequence();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        cSVPrinter2.close(true);
        java.sql.ResultSet resultSet5 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter2.printRecords(resultSet5, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        cSVPrinter2.flush();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char25 = cSVFormat24.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("", cSVFormat24);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser26.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream28 = cSVParser26.stream();
        cSVPrinter2.printRecords(cSVRecordStream28);
        cSVPrinter2.close();
        cSVPrinter2.println();
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char35 = cSVFormat34.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse("", cSVFormat34);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator37 = cSVParser36.spliterator();
        java.lang.String str38 = cSVParser36.getHeaderComment();
        java.lang.String str39 = cSVParser36.getFirstEndOfLine();
        boolean boolean40 = cSVParser36.hasHeaderComment();
        cSVPrinter2.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser36);
        long long42 = cSVParser36.getCurrentLineNumber();
        boolean boolean43 = cSVParser36.isClosed();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNotNull(cSVParser26);
        org.junit.Assert.assertNotNull(cSVRecordList27);
        org.junit.Assert.assertNotNull(cSVRecordStream28);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(char35);
        org.junit.Assert.assertNotNull(cSVParser36);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset(0L);
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder5.setCharset(charset9);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setFile("hi!");
        byte[] byteArray24 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder25 = builder20.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder15.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder10.setByteArray(byteArray24);
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file28 = builder10.getFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getFile() for byte[] origin [B@1a73ae7b");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharacterOffset((long) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray13 = builder12.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder5.setOpenOptions(openOptionArray13);
        java.io.InputStream inputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder16 = builder5.setInputStream(inputStream15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(openOptionArray13);
        org.junit.Assert.assertArrayEquals(openOptionArray13, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        boolean boolean1 = cSVFormat0.getTrailingData();
        boolean boolean2 = cSVFormat0.getTrailingDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char6 = cSVFormat5.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("", cSVFormat5);
        java.lang.String str8 = cSVFormat5.getRecordSeparator();
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setFile("hi!");
        java.nio.charset.Charset charset14 = null;
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharset(charset14);
        java.io.Writer writer16 = builder13.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray18 = cSVFormat17.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder19 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat17);
        java.sql.ResultSetMetaData resultSetMetaData20 = null;
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setHeader(resultSetMetaData20);
        java.sql.ResultSet resultSet22 = null;
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setHeader(resultSet22);
        java.sql.ResultSetMetaData resultSetMetaData24 = null;
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setHeader(resultSetMetaData24);
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray27 = cSVFormat26.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder28 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder28.setHeader(strArray30);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder25.setHeaderComments(strArray30);
        cSVFormat5.printRecord((java.lang.Appendable) writer16, (java.lang.Object[]) strArray30);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder0.setWriter(writer16);
        java.net.URI uRI35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder36 = builder0.setURI(uRI35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(writer16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNull(strArray27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertArrayEquals(strArray30, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder1.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset(0L);
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder1.setCharset(charset7);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char12 = cSVFormat11.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("", cSVFormat11);
        java.lang.String str14 = cSVFormat11.getRecordSeparator();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset7, cSVFormat11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNotNull(cSVParser13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char24 = cSVFormat23.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("", cSVFormat23);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser25.spliterator();
        java.lang.String str27 = cSVParser25.getHeaderComment();
        java.lang.String str28 = cSVParser25.getFirstEndOfLine();
        cSVPrinter2.print((java.lang.Object) str28);
        org.apache.commons.csv.CSVParser.Builder builder30 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption31 = null;
        java.nio.file.OpenOption[] openOptionArray32 = new java.nio.file.OpenOption[] { openOption31 };
        org.apache.commons.csv.CSVParser.Builder builder33 = builder30.setOpenOptions(openOptionArray32);
        cSVPrinter2.printRecord((java.lang.Object[]) openOptionArray32);
        org.apache.commons.csv.CSVParser.Builder builder35 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption36 = null;
        java.nio.file.OpenOption[] openOptionArray37 = new java.nio.file.OpenOption[] { openOption36 };
        org.apache.commons.csv.CSVParser.Builder builder38 = builder35.setOpenOptions(openOptionArray37);
        cSVPrinter2.printRecords((java.lang.Object[]) openOptionArray37);
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter42 = cSVFormat41.printer();
        org.apache.commons.csv.CSVParser.Builder builder43 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder45 = builder43.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder47 = builder45.setFile("hi!");
        java.nio.charset.Charset charset48 = null;
        org.apache.commons.csv.CSVParser.Builder builder49 = builder47.setCharset(charset48);
        org.apache.commons.csv.CSVParser.Builder builder51 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder53 = builder51.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder55 = builder53.setFile("hi!");
        java.nio.charset.Charset charset56 = null;
        org.apache.commons.csv.CSVParser.Builder builder57 = builder55.setCharset(charset56);
        org.apache.commons.csv.CSVFormat.Predefined predefined58 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray59 = new java.lang.Object[] { builder47, 1L, charset56, predefined58 };
        cSVPrinter42.printRecord(objArray59);
        cSVPrinter42.flush();
        org.apache.commons.csv.CSVFormat cSVFormat64 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char65 = cSVFormat64.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser66 = org.apache.commons.csv.CSVParser.parse("", cSVFormat64);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList67 = cSVParser66.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream68 = cSVParser66.stream();
        cSVPrinter42.printRecords(cSVRecordStream68);
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter2.printRecord(cSVRecordStream68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(openOptionArray32);
        org.junit.Assert.assertArrayEquals(openOptionArray32, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(openOptionArray37);
        org.junit.Assert.assertArrayEquals(openOptionArray37, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(cSVPrinter42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + predefined58 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined58.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNull(char65);
        org.junit.Assert.assertNotNull(cSVParser66);
        org.junit.Assert.assertNotNull(cSVRecordList67);
        org.junit.Assert.assertNotNull(cSVRecordStream68);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.io.File file5 = builder4.getFile();
        int int6 = builder4.getBufferSize();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8192 + "'", int6 == 8192);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        java.lang.String[] strArray3 = cSVFormat1.getHeaderComments();
        boolean boolean4 = cSVFormat1.getIgnoreSurroundingSpaces();
        boolean boolean5 = cSVFormat1.getAllowMissingColumnNames();
        boolean boolean6 = cSVFormat1.getAutoFlush();
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path14 = builder13.getPath();
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.MONGODB_TSV;
        java.lang.String str16 = cSVFormat15.toString();
        org.apache.commons.csv.CSVParser.Builder builder17 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder25 = builder21.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder26 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder28 = builder26.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder32 = builder30.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path33 = builder32.getPath();
        org.apache.commons.csv.CSVParser.Builder builder34 = builder25.setPath(path33);
        org.apache.commons.csv.CSVParser.Builder builder35 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption36 = null;
        java.nio.file.OpenOption[] openOptionArray37 = new java.nio.file.OpenOption[] { openOption36 };
        org.apache.commons.csv.CSVParser.Builder builder38 = builder35.setOpenOptions(openOptionArray37);
        org.apache.commons.csv.CSVParser.Builder builder40 = builder35.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder41 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder41.setCharacterOffset(0L);
        java.nio.charset.Charset charset44 = builder43.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder45 = builder40.setCharset(charset44);
        org.apache.commons.csv.CSVParser.Builder builder46 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder50 = builder48.setFile("hi!");
        java.nio.charset.Charset charset51 = null;
        org.apache.commons.csv.CSVParser.Builder builder52 = builder50.setCharset(charset51);
        org.apache.commons.csv.CSVParser.Builder builder53 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder55 = builder53.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder57 = builder55.setFile("hi!");
        byte[] byteArray59 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder60 = builder55.setByteArray(byteArray59);
        org.apache.commons.csv.CSVParser.Builder builder61 = builder50.setByteArray(byteArray59);
        org.apache.commons.csv.CSVParser.Builder builder62 = builder45.setByteArray(byteArray59);
        org.apache.commons.csv.CSVParser.Builder builder63 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder65 = builder63.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder66 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder68 = builder66.setCharacterOffset(0L);
        java.nio.charset.Charset charset69 = builder68.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder70 = builder63.setCharset(charset69);
        org.apache.commons.csv.CSVParser.Builder builder71 = builder62.setCharset(charset69);
        org.apache.commons.csv.CSVPrinter cSVPrinter72 = cSVFormat15.print(path33, charset69);
        org.apache.commons.csv.CSVFormat cSVFormat74 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char75 = cSVFormat74.getEscapeCharacter();
        java.lang.String[] strArray76 = cSVFormat74.getHeaderComments();
        boolean boolean77 = cSVFormat74.getIgnoreSurroundingSpaces();
        java.lang.Character char78 = cSVFormat74.getCommentMarker();
        org.apache.commons.csv.CSVParser cSVParser79 = org.apache.commons.csv.CSVParser.parse(path14, charset69, cSVFormat74);
        org.apache.commons.csv.CSVParser.Builder builder80 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder82 = builder80.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder84 = builder82.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder86 = builder84.setCharacterOffset((long) (byte) 10);
        java.nio.charset.Charset charset87 = builder86.getCharset();
        org.apache.commons.csv.CSVPrinter cSVPrinter88 = cSVFormat1.print(path14, charset87);
        java.sql.ResultSet resultSet89 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter88.printRecords(resultSet89, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(path14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str16, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(path33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(openOptionArray37);
        org.junit.Assert.assertArrayEquals(openOptionArray37, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertArrayEquals(byteArray59, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(cSVPrinter72);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNull(char75);
        org.junit.Assert.assertNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(char78);
        org.junit.Assert.assertNotNull(cSVParser79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(charset87);
        org.junit.Assert.assertNotNull(cSVPrinter88);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        java.net.URL uRL0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption2 = null;
        java.nio.file.OpenOption[] openOptionArray3 = new java.nio.file.OpenOption[] { openOption2 };
        org.apache.commons.csv.CSVParser.Builder builder4 = builder1.setOpenOptions(openOptionArray3);
        org.apache.commons.csv.CSVParser.Builder builder6 = builder1.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharacterOffset(0L);
        java.nio.charset.Charset charset10 = builder9.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder6.setCharset(charset10);
        org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV;
        org.apache.commons.csv.CSVParser.Builder builder13 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setFile("hi!");
        java.io.File file18 = builder17.getFile();
        org.apache.commons.csv.CSVParser.Builder builder19 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder22 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setCharacterOffset(0L);
        java.nio.charset.Charset charset25 = builder24.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder26 = builder19.setCharset(charset25);
        org.apache.commons.csv.CSVPrinter cSVPrinter27 = cSVFormat12.print(file18, charset25);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser28 = org.apache.commons.csv.CSVParser.parse(uRL0, charset10, cSVFormat12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(openOptionArray3);
        org.junit.Assert.assertArrayEquals(openOptionArray3, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertNull("file18.getParent() == null", file18.getParent());
        org.junit.Assert.assertEquals(file18.toString(), "hi!");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVPrinter27);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharset(charset11);
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setFile("hi!");
        java.nio.charset.Charset charset19 = null;
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharset(charset19);
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray22 = new java.lang.Object[] { builder10, 1L, charset19, predefined21 };
        cSVPrinter5.printRecord(objArray22);
        cSVPrinter2.printRecords(objArray22);
        java.sql.ResultSet resultSet25 = null;
        cSVPrinter2.printHeaders(resultSet25);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray22);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSet5);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray10 = cSVFormat9.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat9);
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder11.setHeader(strArray13);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder8.setHeaderComments(strArray13);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder17.setCommentMarker('\"');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertArrayEquals(strArray13, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char3 = cSVFormat2.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList5 = cSVParser4.getRecords();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser4.getRecords();
        boolean boolean7 = cSVParser4.isClosed();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(cSVRecordList5);
        org.junit.Assert.assertNotNull(cSVRecordList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter8 = cSVFormat7.printer();
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setFile("hi!");
        java.nio.charset.Charset charset14 = null;
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharset(charset14);
        org.apache.commons.csv.CSVParser.Builder builder17 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setFile("hi!");
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharset(charset22);
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray25 = new java.lang.Object[] { builder13, 1L, charset22, predefined24 };
        cSVPrinter8.printRecord(objArray25);
        cSVPrinter8.flush();
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char31 = cSVFormat30.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse("", cSVFormat30);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList33 = cSVParser32.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream34 = cSVParser32.stream();
        cSVPrinter8.printRecords(cSVRecordStream34);
        cSVPrinter8.close();
        cSVPrinter8.println();
        cSVPrinter8.printComment("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter42 = cSVFormat41.printer();
        org.apache.commons.csv.CSVParser.Builder builder43 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder45 = builder43.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder47 = builder45.setFile("hi!");
        java.nio.charset.Charset charset48 = null;
        org.apache.commons.csv.CSVParser.Builder builder49 = builder47.setCharset(charset48);
        org.apache.commons.csv.CSVParser.Builder builder51 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder53 = builder51.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder55 = builder53.setFile("hi!");
        java.nio.charset.Charset charset56 = null;
        org.apache.commons.csv.CSVParser.Builder builder57 = builder55.setCharset(charset56);
        org.apache.commons.csv.CSVFormat.Predefined predefined58 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray59 = new java.lang.Object[] { builder47, 1L, charset56, predefined58 };
        cSVPrinter42.printRecord(objArray59);
        org.apache.commons.csv.CSVFormat cSVFormat63 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char64 = cSVFormat63.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser65 = org.apache.commons.csv.CSVParser.parse("", cSVFormat63);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator66 = cSVParser65.spliterator();
        java.lang.String str67 = cSVParser65.getHeaderComment();
        java.lang.String str68 = cSVParser65.getFirstEndOfLine();
        cSVPrinter42.print((java.lang.Object) str68);
        cSVPrinter42.println();
        org.apache.commons.csv.CSVParser.Builder builder71 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder73 = builder71.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder75 = builder73.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder77 = builder75.setCharacterOffset((long) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray78 = builder77.getOpenOptions();
        cSVPrinter42.printRecords((java.lang.Object[]) openOptionArray78);
        cSVPrinter8.printRecords((java.lang.Object[]) openOptionArray78);
        org.apache.commons.csv.CSVParser.Builder builder81 = builder5.setOpenOptions(openOptionArray78);
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream82 = builder81.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVPrinter8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(char31);
        org.junit.Assert.assertNotNull(cSVParser32);
        org.junit.Assert.assertNotNull(cSVRecordList33);
        org.junit.Assert.assertNotNull(cSVRecordStream34);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(cSVPrinter42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + predefined58 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined58.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNull(char64);
        org.junit.Assert.assertNotNull(cSVParser65);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(openOptionArray78);
        org.junit.Assert.assertArrayEquals(openOptionArray78, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        java.lang.String[] strArray3 = cSVFormat1.getHeaderComments();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        java.lang.Character char5 = cSVFormat1.getQuoteCharacter();
        boolean boolean6 = cSVFormat1.getIgnoreHeaderCase();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(char5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder7 = builder2.setByteArray(byteArray6);
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setCharacterOffset(0L);
        java.nio.charset.Charset charset11 = builder10.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder7.setCharset(charset11);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path13 = builder7.getPath();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getPath() for byte[] origin [B@67ae9858");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder7 = builder2.setByteArray(byteArray6);
        java.nio.file.OpenOption[] openOptionArray8 = builder7.getOpenOptions();
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream9 = builder7.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getPath() for byte[] origin [B@5c954983");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(openOptionArray8);
        org.junit.Assert.assertArrayEquals(openOptionArray8, new java.nio.file.OpenOption[] {});
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream6 = builder5.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        java.net.URL uRL0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption2 = null;
        java.nio.file.OpenOption[] openOptionArray3 = new java.nio.file.OpenOption[] { openOption2 };
        org.apache.commons.csv.CSVParser.Builder builder4 = builder1.setOpenOptions(openOptionArray3);
        org.apache.commons.csv.CSVParser.Builder builder6 = builder1.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharacterOffset(0L);
        java.nio.charset.Charset charset10 = builder9.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder6.setCharset(charset10);
        org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean13 = cSVFormat12.isEscapeCharacterSet();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse(uRL0, charset10, cSVFormat12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(openOptionArray3);
        org.junit.Assert.assertArrayEquals(openOptionArray3, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.Delimiter=<,> QuoteChar=<\"> RecordSeparator=<??> SkipHeaderRecord:false");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption2 = null;
        java.nio.file.OpenOption[] openOptionArray3 = new java.nio.file.OpenOption[] { openOption2 };
        org.apache.commons.csv.CSVParser.Builder builder4 = builder1.setOpenOptions(openOptionArray3);
        org.apache.commons.csv.CSVParser.Builder builder6 = builder1.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharacterOffset(0L);
        java.nio.charset.Charset charset10 = builder9.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder6.setCharset(charset10);
        org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.QuoteMode quoteMode13 = cSVFormat12.getQuoteMode();
        boolean boolean14 = cSVFormat12.isEscapeCharacterSet();
        boolean boolean15 = cSVFormat12.isCommentMarkerSet();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset10, cSVFormat12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(openOptionArray3);
        org.junit.Assert.assertArrayEquals(openOptionArray3, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(quoteMode13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setCharset("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: Delimiter=<,> QuoteChar=<\"> RecordSeparator=<??> SkipHeaderRecord:false");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset(0L);
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder5.setCharset(charset9);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setFile("hi!");
        byte[] byteArray24 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder25 = builder20.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder15.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder10.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharacterOffset(0L);
        java.nio.charset.Charset charset34 = builder33.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder28.setCharset(charset34);
        org.apache.commons.csv.CSVParser.Builder builder36 = builder27.setCharset(charset34);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder38 = builder36.setCharset("\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharset(charset11);
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setFile("hi!");
        java.nio.charset.Charset charset19 = null;
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharset(charset19);
        org.apache.commons.csv.CSVFormat.Predefined predefined21 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray22 = new java.lang.Object[] { builder10, 1L, charset19, predefined21 };
        cSVPrinter5.printRecord(objArray22);
        cSVPrinter2.printRecords(objArray22);
        java.lang.Class<?> wildcardClass25 = cSVPrinter2.getClass();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + predefined21 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined21.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder1.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset(0L);
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder1.setCharset(charset7);
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined9.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.DEFAULT;
        boolean boolean13 = cSVFormat11.equals((java.lang.Object) predefined12);
        boolean boolean14 = cSVFormat11.getAutoFlush();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset7, cSVFormat11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.DEFAULT + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.DEFAULT));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder6 = builder2.setCharset("Delimiter=<4> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: Delimiter=<4> SkipHeaderRecord:false");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder10.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray16 = cSVFormat15.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder17 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat15);
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder17.setHeader(strArray19);
        org.apache.commons.csv.CSVFormat cSVFormat21 = builder17.get();
        org.apache.commons.csv.CSVParser.Builder builder22 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setFile("hi!");
        java.nio.charset.Charset charset27 = null;
        org.apache.commons.csv.CSVParser.Builder builder28 = builder26.setCharset(charset27);
        java.io.Writer writer29 = builder26.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat31.printer();
        org.apache.commons.csv.CSVParser.Builder builder33 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder33.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setFile("hi!");
        java.nio.charset.Charset charset38 = null;
        org.apache.commons.csv.CSVParser.Builder builder39 = builder37.setCharset(charset38);
        org.apache.commons.csv.CSVParser.Builder builder41 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder41.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder45 = builder43.setFile("hi!");
        java.nio.charset.Charset charset46 = null;
        org.apache.commons.csv.CSVParser.Builder builder47 = builder45.setCharset(charset46);
        org.apache.commons.csv.CSVFormat.Predefined predefined48 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray49 = new java.lang.Object[] { builder37, 1L, charset46, predefined48 };
        cSVPrinter32.printRecord(objArray49);
        cSVFormat21.printRecord((java.lang.Appendable) writer29, objArray49);
        org.apache.commons.csv.CSVParser.Builder builder52 = builder10.setWriter(writer29);
        org.apache.commons.csv.CSVParser.Builder builder53 = builder0.setWriter(writer29);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Reader reader54 = builder53.getReader();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: WriterOrigin#getPath() for BufferedWriter origin java.io.BufferedWriter@741dde40");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertArrayEquals(strArray19, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(writer29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVPrinter32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + predefined48 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined48.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        int int1 = builder0.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setFile("");
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setFile("hi!");
        java.nio.charset.Charset charset9 = null;
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setCharset(charset9);
        java.io.Writer writer11 = builder8.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder8.setCharSequence((java.lang.CharSequence) "");
        java.io.Reader reader14 = builder8.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char18 = cSVFormat17.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("", cSVFormat17);
        java.lang.String str20 = cSVFormat17.getRecordSeparator();
        org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse(reader14, cSVFormat17);
        org.apache.commons.csv.CSVParser.Builder builder22 = builder0.setReader(reader14);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Writer writer23 = builder0.getWriter();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ReaderOrigin#getPath() for CharSequenceReader origin ");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(writer11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(reader14);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(char18);
        org.junit.Assert.assertNotNull(cSVParser19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVParser21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        java.net.URL uRL0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder1.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setFile("hi!");
        byte[] byteArray7 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder3.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharacterOffset(0L);
        java.nio.charset.Charset charset12 = builder11.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder8.setCharset(charset12);
        java.nio.charset.Charset charset14 = builder13.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat16.printer();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse(uRL0, charset14, cSVFormat16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVPrinter17);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char3 = cSVFormat2.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList5 = cSVParser4.getRecords();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser4.spliterator();
        java.lang.String str7 = cSVParser4.getFirstEndOfLine();
        java.lang.String str8 = cSVParser4.getFirstEndOfLine();
        long long9 = cSVParser4.getRecordNumber();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(cSVRecordList5);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setRecordNumber((long) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.io.Writer writer6 = builder3.getWriter();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        cSVPrinter2.flush();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char25 = cSVFormat24.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("", cSVFormat24);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser26.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream28 = cSVParser26.stream();
        cSVPrinter2.printRecords(cSVRecordStream28);
        cSVPrinter2.close();
        java.sql.ResultSet resultSet31 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter2.printRecords(resultSet31, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNotNull(cSVParser26);
        org.junit.Assert.assertNotNull(cSVRecordList27);
        org.junit.Assert.assertNotNull(cSVRecordStream28);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char3 = cSVFormat2.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser4.spliterator();
        java.lang.String str6 = cSVParser4.getHeaderComment();
        java.lang.String str7 = cSVParser4.getFirstEndOfLine();
        java.util.List<java.lang.String> strList8 = cSVParser4.getHeaderNames();
        long long9 = cSVParser4.getRecordNumber();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder1.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setFile("hi!");
        byte[] byteArray7 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder3.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharacterOffset(0L);
        java.nio.charset.Charset charset12 = builder11.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder8.setCharset(charset12);
        java.nio.charset.Charset charset14 = builder13.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char17 = cSVFormat16.getEscapeCharacter();
        java.lang.String[] strArray18 = cSVFormat16.getHeaderComments();
        boolean boolean19 = cSVFormat16.isEscapeCharacterSet();
        java.lang.Character char20 = cSVFormat16.getQuoteCharacter();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode21 = cSVFormat16.getDuplicateHeaderMode();
        java.lang.String str22 = cSVFormat16.toString();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined26 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat27 = predefined26.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder32 = builder30.setFile("hi!");
        java.nio.charset.Charset charset33 = null;
        org.apache.commons.csv.CSVParser.Builder builder34 = builder32.setCharset(charset33);
        java.io.Writer writer35 = builder32.getWriter();
        cSVFormat27.println((java.lang.Appendable) writer35);
        cSVFormat24.print((java.lang.Object) 10L, (java.lang.Appendable) writer35, true);
        org.apache.commons.csv.CSVPrinter cSVPrinter39 = cSVFormat16.print((java.lang.Appendable) writer35);
        java.lang.String str40 = cSVFormat16.getRecordSeparator();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser41 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset14, cSVFormat16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(char17);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode21 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode21.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Delimiter=<4> SkipHeaderRecord:false" + "'", str22, "Delimiter=<4> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + predefined26 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined26.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(writer35);
        org.junit.Assert.assertNotNull(cSVPrinter39);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        java.lang.String[] strArray3 = cSVFormat1.getHeaderComments();
        boolean boolean4 = cSVFormat1.getIgnoreSurroundingSpaces();
        java.lang.Character char5 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption7 = null;
        java.nio.file.OpenOption[] openOptionArray8 = new java.nio.file.OpenOption[] { openOption7 };
        org.apache.commons.csv.CSVParser.Builder builder9 = builder6.setOpenOptions(openOptionArray8);
        org.apache.commons.csv.CSVParser.Builder builder11 = builder6.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder16.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray22 = cSVFormat21.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder23 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat21);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder23.setHeader(strArray25);
        org.apache.commons.csv.CSVFormat cSVFormat27 = builder23.get();
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder32 = builder30.setFile("hi!");
        java.nio.charset.Charset charset33 = null;
        org.apache.commons.csv.CSVParser.Builder builder34 = builder32.setCharset(charset33);
        java.io.Writer writer35 = builder32.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter38 = cSVFormat37.printer();
        org.apache.commons.csv.CSVParser.Builder builder39 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder41 = builder39.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder43 = builder41.setFile("hi!");
        java.nio.charset.Charset charset44 = null;
        org.apache.commons.csv.CSVParser.Builder builder45 = builder43.setCharset(charset44);
        org.apache.commons.csv.CSVParser.Builder builder47 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder49 = builder47.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder51 = builder49.setFile("hi!");
        java.nio.charset.Charset charset52 = null;
        org.apache.commons.csv.CSVParser.Builder builder53 = builder51.setCharset(charset52);
        org.apache.commons.csv.CSVFormat.Predefined predefined54 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray55 = new java.lang.Object[] { builder43, 1L, charset52, predefined54 };
        cSVPrinter38.printRecord(objArray55);
        cSVFormat27.printRecord((java.lang.Appendable) writer35, objArray55);
        org.apache.commons.csv.CSVParser.Builder builder58 = builder16.setWriter(writer35);
        org.apache.commons.csv.CSVParser.Builder builder59 = builder6.setWriter(writer35);
        java.lang.Object[] objArray60 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat1.printRecord((java.lang.Appendable) writer35, objArray60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(char5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(openOptionArray8);
        org.junit.Assert.assertArrayEquals(openOptionArray8, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertArrayEquals(strArray25, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(writer35);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVPrinter38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + predefined54 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined54.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.Delimiter=<,> QuoteChar=<\"> RecordSeparator=<?> EmptyLines:ignored SkipHeaderRecord:false");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setQuote('#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder8.setHeader(resultSetMetaData11);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setQuote((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setEscape((java.lang.Character) 'a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char24 = cSVFormat23.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("", cSVFormat23);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser25.spliterator();
        java.lang.String str27 = cSVParser25.getHeaderComment();
        java.lang.String str28 = cSVParser25.getFirstEndOfLine();
        cSVPrinter2.print((java.lang.Object) str28);
        cSVPrinter2.println();
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder35 = builder33.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setCharacterOffset((long) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray38 = builder37.getOpenOptions();
        cSVPrinter2.printRecords((java.lang.Object[]) openOptionArray38);
        org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray41 = cSVFormat40.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder42 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat40);
        java.sql.ResultSetMetaData resultSetMetaData43 = null;
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder42.setHeader(resultSetMetaData43);
        java.sql.ResultSet resultSet45 = null;
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder44.setHeader(resultSet45);
        java.sql.ResultSetMetaData resultSetMetaData47 = null;
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder46.setHeader(resultSetMetaData47);
        org.apache.commons.csv.CSVFormat cSVFormat49 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray50 = cSVFormat49.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder51 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat49);
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder51.setHeader(strArray53);
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder48.setHeaderComments(strArray53);
        cSVPrinter2.printRecords((java.lang.Object[]) strArray53);
        org.apache.commons.csv.CSVFormat cSVFormat58 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined60 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat61 = predefined60.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder62 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder64 = builder62.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder66 = builder64.setFile("hi!");
        java.nio.charset.Charset charset67 = null;
        org.apache.commons.csv.CSVParser.Builder builder68 = builder66.setCharset(charset67);
        java.io.Writer writer69 = builder66.getWriter();
        cSVFormat61.println((java.lang.Appendable) writer69);
        cSVFormat58.print((java.lang.Object) 10L, (java.lang.Appendable) writer69, true);
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat58.printer();
        org.apache.commons.csv.CSVParser.Builder builder74 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder76 = builder74.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder78 = builder76.setFile("hi!");
        byte[] byteArray80 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder81 = builder76.setByteArray(byteArray80);
        java.nio.file.OpenOption[] openOptionArray82 = builder81.getOpenOptions();
        cSVPrinter73.printRecord((java.lang.Object[]) openOptionArray82);
        cSVPrinter2.printRecord((java.lang.Object[]) openOptionArray82);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(openOptionArray38);
        org.junit.Assert.assertArrayEquals(openOptionArray38, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNull(strArray50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertArrayEquals(strArray53, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertTrue("'" + predefined60 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined60.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(writer69);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertArrayEquals(byteArray80, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(openOptionArray82);
        org.junit.Assert.assertArrayEquals(openOptionArray82, new java.nio.file.OpenOption[] {});
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MONGODB_CSV;
        org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVParser2);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        cSVPrinter2.flush();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char25 = cSVFormat24.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("", cSVFormat24);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser26.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream28 = cSVParser26.stream();
        cSVPrinter2.printRecords(cSVRecordStream28);
        cSVPrinter2.close();
        cSVPrinter2.println();
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char35 = cSVFormat34.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse("", cSVFormat34);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator37 = cSVParser36.spliterator();
        java.lang.String str38 = cSVParser36.getHeaderComment();
        java.lang.String str39 = cSVParser36.getFirstEndOfLine();
        boolean boolean40 = cSVParser36.hasHeaderComment();
        cSVPrinter2.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser36);
        java.util.List<java.lang.String> strList42 = cSVParser36.getHeaderNames();
        java.util.Spliterator<java.lang.String> strSpliterator43 = strList42.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator44 = strList42.spliterator();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNotNull(cSVParser26);
        org.junit.Assert.assertNotNull(cSVRecordList27);
        org.junit.Assert.assertNotNull(cSVRecordStream28);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(char35);
        org.junit.Assert.assertNotNull(cSVParser36);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strSpliterator43);
        org.junit.Assert.assertNotNull(strSpliterator44);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setFile("hi!");
        java.io.File file12 = builder11.getFile();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder4.setFile(file12);
        java.net.URI uRI14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder15 = builder4.setURI(uRI14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertNull("file12.getParent() == null", file12.getParent());
        org.junit.Assert.assertEquals(file12.toString(), "hi!");
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset(0L);
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder5.setCharset(charset9);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setFile("hi!");
        byte[] byteArray24 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder25 = builder20.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder15.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder10.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharacterOffset(0L);
        java.nio.charset.Charset charset34 = builder33.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder28.setCharset(charset34);
        org.apache.commons.csv.CSVParser.Builder builder36 = builder27.setCharset(charset34);
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder42 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder44 = builder42.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder46 = builder44.setFile("hi!");
        java.nio.charset.Charset charset47 = null;
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setCharset(charset47);
        java.io.Writer writer49 = builder46.getWriter();
        cSVFormat41.println((java.lang.Appendable) writer49);
        cSVFormat38.print((java.lang.Object) 10L, (java.lang.Appendable) writer49, true);
        org.apache.commons.csv.CSVParser.Builder builder53 = builder27.setFormat(cSVFormat38);
        boolean boolean54 = cSVFormat38.getTrailingData();
        boolean boolean55 = cSVFormat38.getTrailingDelimiter();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(writer49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char3 = cSVFormat2.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        java.lang.String str5 = cSVParser4.getTrailerComment();
        java.lang.String str6 = cSVParser4.getHeaderComment();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.ORACLE;
        java.lang.Character char1 = cSVFormat0.getEscapeCharacter();
        java.io.Reader reader2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser3 = cSVFormat0.parse(reader2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + '\\' + "'", char1 == '\\');
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder7 = builder2.setByteArray(byteArray6);
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setCharacterOffset(0L);
        java.nio.charset.Charset charset11 = builder10.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder7.setCharset(charset11);
        java.nio.charset.Charset charset13 = builder12.getCharsetDefault();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Writer writer14 = builder12.getWriter();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getPath() for byte[] origin [B@27a280bf");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(charset13);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("\001");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.?");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        java.net.URL uRL0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder1.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setFile("hi!");
        java.nio.charset.Charset charset6 = builder5.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setFile("hi!");
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharset(charset17);
        java.io.Writer writer19 = builder16.getWriter();
        cSVFormat11.println((java.lang.Appendable) writer19);
        cSVFormat8.print((java.lang.Object) 10L, (java.lang.Appendable) writer19, true);
        boolean boolean24 = cSVFormat8.equals((java.lang.Object) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse(uRL0, charset6, cSVFormat8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(writer19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF;
        java.lang.String str1 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder2 = cSVFormat0.builder();
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char6 = cSVFormat5.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("", cSVFormat5);
        java.lang.String str8 = cSVFormat5.getRecordSeparator();
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setFile("hi!");
        java.nio.charset.Charset charset14 = null;
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharset(charset14);
        java.io.Writer writer16 = builder13.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray18 = cSVFormat17.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder19 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat17);
        java.sql.ResultSetMetaData resultSetMetaData20 = null;
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setHeader(resultSetMetaData20);
        java.sql.ResultSet resultSet22 = null;
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setHeader(resultSet22);
        java.sql.ResultSetMetaData resultSetMetaData24 = null;
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setHeader(resultSetMetaData24);
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray27 = cSVFormat26.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder28 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder28.setHeader(strArray30);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder25.setHeaderComments(strArray30);
        cSVFormat5.printRecord((java.lang.Appendable) writer16, (java.lang.Object[]) strArray30);
        org.apache.commons.csv.CSVPrinter cSVPrinter34 = cSVFormat0.print((java.lang.Appendable) writer16);
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined35.getFormat();
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.DEFAULT;
        boolean boolean39 = cSVFormat37.equals((java.lang.Object) predefined38);
        boolean boolean40 = cSVFormat37.getAutoFlush();
        org.apache.commons.csv.CSVPrinter cSVPrinter41 = new org.apache.commons.csv.CSVPrinter((java.lang.Appendable) writer16, cSVFormat37);
        java.sql.ResultSet resultSet42 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter41.printRecords(resultSet42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\r\n" + "'", str1, "\r\n");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(writer16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNull(strArray27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertArrayEquals(strArray30, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(cSVPrinter34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.DEFAULT + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.DEFAULT));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        cSVPrinter2.flush();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char25 = cSVFormat24.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("", cSVFormat24);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser26.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream28 = cSVParser26.stream();
        cSVPrinter2.printRecords(cSVRecordStream28);
        cSVPrinter2.println();
        java.sql.ResultSet resultSet31 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter2.printRecords(resultSet31, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNotNull(cSVParser26);
        org.junit.Assert.assertNotNull(cSVRecordList27);
        org.junit.Assert.assertNotNull(cSVRecordStream28);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        java.lang.String[] strArray3 = cSVFormat1.getHeaderComments();
        boolean boolean4 = cSVFormat1.getIgnoreSurroundingSpaces();
        boolean boolean5 = cSVFormat1.getAllowMissingColumnNames();
        boolean boolean6 = cSVFormat1.getAutoFlush();
        boolean boolean7 = cSVFormat1.isEscapeCharacterSet();
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setFile("hi!");
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setCharset(charset13);
        java.io.Writer writer15 = builder12.getWriter();
        org.apache.commons.csv.CSVPrinter cSVPrinter16 = cSVFormat1.print((java.lang.Appendable) writer15);
        cSVPrinter16.println();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(writer15);
        org.junit.Assert.assertNotNull(cSVPrinter16);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.QuoteMode quoteMode1 = cSVFormat0.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder2 = cSVFormat0.builder();
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setIgnoreSurroundingSpaces(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(quoteMode1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder7 = builder2.setByteArray(byteArray6);
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setBufferSizeMax(1);
        java.io.Reader reader10 = builder9.getReader();
        java.net.URI uRI11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder12 = builder9.setURI(uRI11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(reader10);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset(0L);
        java.nio.charset.Charset charset3 = builder2.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setFile("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        java.nio.file.OpenOption[] openOptionArray6 = builder2.getOpenOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser7 = builder2.getUnchecked();
            org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException; message: Illegal char <<> at index 10: Delimiter=<?> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false");
        } catch (java.nio.file.InvalidPathException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(openOptionArray6);
        org.junit.Assert.assertArrayEquals(openOptionArray6, new java.nio.file.OpenOption[] {});
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder7 = builder2.setByteArray(byteArray6);
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setBufferSizeMax(1);
        java.io.Reader reader10 = builder9.getReader();
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        java.io.OutputStream outputStream18 = builder17.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder9.setOutputStream(outputStream18);
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setFile("hi!");
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharset(charset25);
        java.io.Writer writer27 = builder24.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder24.setCharSequence((java.lang.CharSequence) "");
        java.io.InputStream inputStream30 = builder29.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder31 = builder19.setInputStream(inputStream30);
        org.apache.commons.csv.CSVParser.Builder builder32 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder34 = builder32.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder36 = builder34.setFile("hi!");
        java.nio.charset.Charset charset37 = null;
        org.apache.commons.csv.CSVParser.Builder builder38 = builder36.setCharset(charset37);
        int int39 = builder36.getBufferSizeDefault();
        java.nio.file.Path path40 = builder36.getPath();
        org.apache.commons.csv.CSVParser.Builder builder41 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder41.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder45 = builder43.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder47 = builder45.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder49 = builder45.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder50 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder52 = builder50.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder54 = builder52.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder56 = builder54.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path57 = builder56.getPath();
        org.apache.commons.csv.CSVParser.Builder builder58 = builder49.setPath(path57);
        org.apache.commons.csv.CSVParser.Builder builder59 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder61 = builder59.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder63 = builder61.setFile("hi!");
        byte[] byteArray65 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder66 = builder61.setByteArray(byteArray65);
        org.apache.commons.csv.CSVParser.Builder builder67 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder69 = builder67.setCharacterOffset(0L);
        java.nio.charset.Charset charset70 = builder69.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder71 = builder66.setCharset(charset70);
        org.apache.commons.csv.CSVFormat.Predefined predefined72 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat73 = predefined72.getFormat();
        org.apache.commons.csv.CSVFormat cSVFormat74 = predefined72.getFormat();
        org.apache.commons.csv.CSVParser cSVParser75 = org.apache.commons.csv.CSVParser.parse(path57, charset70, cSVFormat74);
        org.apache.commons.csv.CSVFormat cSVFormat77 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char78 = cSVFormat77.getEscapeCharacter();
        java.lang.String[] strArray79 = cSVFormat77.getHeaderComments();
        boolean boolean80 = cSVFormat77.isEscapeCharacterSet();
        java.lang.Character char81 = cSVFormat77.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser82 = org.apache.commons.csv.CSVParser.parse(path40, charset70, cSVFormat77);
        org.apache.commons.csv.CSVFormat cSVFormat85 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char86 = cSVFormat85.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser87 = org.apache.commons.csv.CSVParser.parse("", cSVFormat85);
        org.apache.commons.csv.CSVParser cSVParser88 = org.apache.commons.csv.CSVParser.parse(inputStream30, charset70, cSVFormat85);
        java.lang.Class<?> wildcardClass89 = cSVParser88.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(reader10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(outputStream18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(writer27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(inputStream30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8192 + "'", int39 == 8192);
        org.junit.Assert.assertNotNull(path40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(path57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertArrayEquals(byteArray65, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(charset70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + predefined72 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined72.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat73);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNotNull(cSVParser75);
        org.junit.Assert.assertNotNull(cSVFormat77);
        org.junit.Assert.assertNull(char78);
        org.junit.Assert.assertNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(char81);
        org.junit.Assert.assertNotNull(cSVParser82);
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertNull(char86);
        org.junit.Assert.assertNotNull(cSVParser87);
        org.junit.Assert.assertNotNull(cSVParser88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        java.net.URL uRL0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder1.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setFile("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV;
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setFile("hi!");
        java.io.File file12 = builder11.getFile();
        org.apache.commons.csv.CSVParser.Builder builder13 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder16 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharacterOffset(0L);
        java.nio.charset.Charset charset19 = builder18.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder13.setCharset(charset19);
        org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat6.print(file12, charset19);
        org.apache.commons.csv.CSVParser.Builder builder22 = builder3.setFile(file12);
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder26 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder28 = builder26.setCharacterOffset(0L);
        java.nio.charset.Charset charset29 = builder28.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder23.setCharset(charset29);
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat32);
        org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse(file12, charset29, cSVFormat32);
        org.apache.commons.csv.CSVFormat cSVFormat35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse(uRL0, charset29, cSVFormat35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertNull("file12.getParent() == null", file12.getParent());
        org.junit.Assert.assertEquals(file12.toString(), "hi!");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(cSVPrinter21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVParser33);
        org.junit.Assert.assertNotNull(cSVParser34);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        java.net.URL uRL0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder1.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path8 = builder7.getPath();
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.MONGODB_TSV;
        java.lang.String str10 = cSVFormat9.toString();
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder15.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path27 = builder26.getPath();
        org.apache.commons.csv.CSVParser.Builder builder28 = builder19.setPath(path27);
        org.apache.commons.csv.CSVParser.Builder builder29 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption30 = null;
        java.nio.file.OpenOption[] openOptionArray31 = new java.nio.file.OpenOption[] { openOption30 };
        org.apache.commons.csv.CSVParser.Builder builder32 = builder29.setOpenOptions(openOptionArray31);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder29.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder35 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setCharacterOffset(0L);
        java.nio.charset.Charset charset38 = builder37.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder39 = builder34.setCharset(charset38);
        org.apache.commons.csv.CSVParser.Builder builder40 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder42 = builder40.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder44 = builder42.setFile("hi!");
        java.nio.charset.Charset charset45 = null;
        org.apache.commons.csv.CSVParser.Builder builder46 = builder44.setCharset(charset45);
        org.apache.commons.csv.CSVParser.Builder builder47 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder49 = builder47.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder51 = builder49.setFile("hi!");
        byte[] byteArray53 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder54 = builder49.setByteArray(byteArray53);
        org.apache.commons.csv.CSVParser.Builder builder55 = builder44.setByteArray(byteArray53);
        org.apache.commons.csv.CSVParser.Builder builder56 = builder39.setByteArray(byteArray53);
        org.apache.commons.csv.CSVParser.Builder builder57 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder59 = builder57.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder60 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder62 = builder60.setCharacterOffset(0L);
        java.nio.charset.Charset charset63 = builder62.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder64 = builder57.setCharset(charset63);
        org.apache.commons.csv.CSVParser.Builder builder65 = builder56.setCharset(charset63);
        org.apache.commons.csv.CSVPrinter cSVPrinter66 = cSVFormat9.print(path27, charset63);
        org.apache.commons.csv.CSVFormat cSVFormat68 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char69 = cSVFormat68.getEscapeCharacter();
        java.lang.String[] strArray70 = cSVFormat68.getHeaderComments();
        boolean boolean71 = cSVFormat68.getIgnoreSurroundingSpaces();
        java.lang.Character char72 = cSVFormat68.getCommentMarker();
        org.apache.commons.csv.CSVParser cSVParser73 = org.apache.commons.csv.CSVParser.parse(path8, charset63, cSVFormat68);
        org.apache.commons.csv.CSVFormat cSVFormat75 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser76 = org.apache.commons.csv.CSVParser.parse(uRL0, charset63, cSVFormat75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(path8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str10, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(path27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(openOptionArray31);
        org.junit.Assert.assertArrayEquals(openOptionArray31, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertArrayEquals(byteArray53, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(charset63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(cSVPrinter66);
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertNull(char69);
        org.junit.Assert.assertNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(char72);
        org.junit.Assert.assertNotNull(cSVParser73);
        org.junit.Assert.assertNotNull(cSVFormat75);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined3 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat4 = predefined3.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setFile("hi!");
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharset(charset10);
        java.io.Writer writer12 = builder9.getWriter();
        cSVFormat4.println((java.lang.Appendable) writer12);
        cSVFormat1.print((java.lang.Object) 10L, (java.lang.Appendable) writer12, true);
        boolean boolean17 = cSVFormat1.equals((java.lang.Object) (byte) 10);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode18 = cSVFormat1.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVPrinter cSVPrinter19 = cSVFormat1.printer();
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat21.printer();
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setFile("hi!");
        java.nio.charset.Charset charset28 = null;
        org.apache.commons.csv.CSVParser.Builder builder29 = builder27.setCharset(charset28);
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder35 = builder33.setFile("hi!");
        java.nio.charset.Charset charset36 = null;
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setCharset(charset36);
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray39 = new java.lang.Object[] { builder27, 1L, charset36, predefined38 };
        cSVPrinter22.printRecord(objArray39);
        cSVPrinter22.flush();
        org.apache.commons.csv.CSVFormat cSVFormat44 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char45 = cSVFormat44.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser46 = org.apache.commons.csv.CSVParser.parse("", cSVFormat44);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser46.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream48 = cSVParser46.stream();
        cSVPrinter22.printRecords(cSVRecordStream48);
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter19.printRecord(cSVRecordStream48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + predefined3 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined3.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(writer12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode18 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode18.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVPrinter19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVPrinter22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(char45);
        org.junit.Assert.assertNotNull(cSVParser46);
        org.junit.Assert.assertNotNull(cSVRecordList47);
        org.junit.Assert.assertNotNull(cSVRecordStream48);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset(0L);
        java.nio.charset.Charset charset3 = builder2.getCharsetDefault();
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream4 = builder2.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(charset3);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("\\N");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.\\N");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption2 = null;
        java.nio.file.OpenOption[] openOptionArray3 = new java.nio.file.OpenOption[] { openOption2 };
        org.apache.commons.csv.CSVParser.Builder builder4 = builder1.setOpenOptions(openOptionArray3);
        org.apache.commons.csv.CSVParser.Builder builder6 = builder1.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharacterOffset(0L);
        java.nio.charset.Charset charset10 = builder9.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder6.setCharset(charset10);
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setFile("hi!");
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharset(charset17);
        org.apache.commons.csv.CSVParser.Builder builder19 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setFile("hi!");
        byte[] byteArray25 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder26 = builder21.setByteArray(byteArray25);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder16.setByteArray(byteArray25);
        org.apache.commons.csv.CSVParser.Builder builder28 = builder11.setByteArray(byteArray25);
        org.apache.commons.csv.CSVParser.Builder builder29 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder31 = builder29.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder32 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder34 = builder32.setCharacterOffset(0L);
        java.nio.charset.Charset charset35 = builder34.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder36 = builder29.setCharset(charset35);
        org.apache.commons.csv.CSVParser.Builder builder37 = builder28.setCharset(charset35);
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.MONGODB_TSV;
        boolean boolean39 = cSVFormat38.getLenientEof();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser40 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset35, cSVFormat38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(openOptionArray3);
        org.junit.Assert.assertArrayEquals(openOptionArray3, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertArrayEquals(byteArray25, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        java.io.Writer writer7 = builder4.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder4.setCharSequence((java.lang.CharSequence) "");
        java.io.Reader reader10 = builder4.getReader();
        int int11 = builder4.getBufferSize();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(writer7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(reader10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8192 + "'", int11 == 8192);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        boolean boolean2 = cSVFormat0.getLenientEof();
        java.lang.Character char3 = cSVFormat0.getQuoteCharacter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + '\"' + "'", char3 == '\"');
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        java.io.Writer writer7 = builder4.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder4.setCharSequence((java.lang.CharSequence) "");
        java.io.Reader reader10 = builder4.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char14 = cSVFormat13.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat13);
        java.lang.String str16 = cSVFormat13.getRecordSeparator();
        org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse(reader10, cSVFormat13);
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        boolean boolean19 = cSVFormat18.isCommentMarkerSet();
        boolean boolean20 = cSVFormat18.isCommentMarkerSet();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode21 = cSVFormat18.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse(reader10, cSVFormat18);
        java.lang.String str23 = cSVParser22.getTrailerComment();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(writer7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(reader10);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(cSVParser15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVParser17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode21 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode21.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVParser22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        cSVPrinter2.flush();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char25 = cSVFormat24.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("", cSVFormat24);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser26.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream28 = cSVParser26.stream();
        cSVPrinter2.printRecords(cSVRecordStream28);
        cSVPrinter2.close(false);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNotNull(cSVParser26);
        org.junit.Assert.assertNotNull(cSVRecordList27);
        org.junit.Assert.assertNotNull(cSVRecordStream28);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        int int1 = builder0.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setFile("");
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setCharacterOffset((long) (byte) 10);
        java.nio.charset.Charset charset11 = builder10.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setFile("hi!");
        byte[] byteArray18 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder19 = builder14.setByteArray(byteArray18);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setBufferSizeMax(1);
        java.io.Reader reader22 = builder21.getReader();
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setFile("hi!");
        java.nio.charset.Charset charset28 = null;
        org.apache.commons.csv.CSVParser.Builder builder29 = builder27.setCharset(charset28);
        java.io.OutputStream outputStream30 = builder29.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder31 = builder21.setOutputStream(outputStream30);
        org.apache.commons.csv.CSVParser.Builder builder32 = builder10.setOutputStream(outputStream30);
        org.apache.commons.csv.CSVParser.Builder builder33 = builder0.setOutputStream(outputStream30);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Reader reader34 = builder33.getReader();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OutputStreamOrigin#getPath() for  origin java.nio.channels.Channels$1@35ca9433");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(reader22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(outputStream30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        java.net.URL uRL0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder1.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setFile("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV;
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setFile("hi!");
        java.io.File file12 = builder11.getFile();
        org.apache.commons.csv.CSVParser.Builder builder13 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder16 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharacterOffset(0L);
        java.nio.charset.Charset charset19 = builder18.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder13.setCharset(charset19);
        org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat6.print(file12, charset19);
        org.apache.commons.csv.CSVParser.Builder builder22 = builder3.setFile(file12);
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder26 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder28 = builder26.setCharacterOffset(0L);
        java.nio.charset.Charset charset29 = builder28.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder23.setCharset(charset29);
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat32);
        org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse(file12, charset29, cSVFormat32);
        org.apache.commons.csv.CSVParser.Builder builder35 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setCharacterOffset(0L);
        java.nio.charset.Charset charset38 = builder37.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char41 = cSVFormat40.getEscapeCharacter();
        java.lang.String[] strArray42 = cSVFormat40.getHeaderComments();
        boolean boolean43 = cSVFormat40.isEscapeCharacterSet();
        java.lang.String[] strArray44 = cSVFormat40.getHeaderComments();
        org.apache.commons.csv.CSVParser cSVParser45 = org.apache.commons.csv.CSVParser.parse(file12, charset38, cSVFormat40);
        org.apache.commons.csv.CSVFormat cSVFormat46 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.QuoteMode quoteMode47 = cSVFormat46.getQuoteMode();
        boolean boolean48 = cSVFormat46.isEscapeCharacterSet();
        boolean boolean49 = cSVFormat46.isCommentMarkerSet();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser50 = org.apache.commons.csv.CSVParser.parse(uRL0, charset38, cSVFormat46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertNull("file12.getParent() == null", file12.getParent());
        org.junit.Assert.assertEquals(file12.toString(), "hi!");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(cSVPrinter21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVParser33);
        org.junit.Assert.assertNotNull(cSVParser34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNull(char41);
        org.junit.Assert.assertNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(strArray44);
        org.junit.Assert.assertNotNull(cSVParser45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNull(quoteMode47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        java.nio.charset.Charset charset7 = builder6.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setFile("hi!");
        byte[] byteArray14 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder10.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setBufferSizeMax(1);
        java.io.Reader reader18 = builder17.getReader();
        org.apache.commons.csv.CSVParser.Builder builder19 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setFile("hi!");
        java.nio.charset.Charset charset24 = null;
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setCharset(charset24);
        java.io.OutputStream outputStream26 = builder25.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder17.setOutputStream(outputStream26);
        org.apache.commons.csv.CSVParser.Builder builder28 = builder6.setOutputStream(outputStream26);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser29 = builder28.get();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OutputStreamOrigin#getPath() for  origin java.nio.channels.Channels$1@67870494");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(reader18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(outputStream26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        java.nio.charset.Charset charset7 = builder6.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setFile("hi!");
        byte[] byteArray14 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder10.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setBufferSizeMax(1);
        java.io.Reader reader18 = builder17.getReader();
        org.apache.commons.csv.CSVParser.Builder builder19 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setFile("hi!");
        java.nio.charset.Charset charset24 = null;
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setCharset(charset24);
        java.io.OutputStream outputStream26 = builder25.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder17.setOutputStream(outputStream26);
        org.apache.commons.csv.CSVParser.Builder builder28 = builder6.setOutputStream(outputStream26);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser29 = builder6.get();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OutputStreamOrigin#getPath() for  origin java.nio.channels.Channels$1@4b0bcc26");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(reader18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(outputStream26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char24 = cSVFormat23.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("", cSVFormat23);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser25.spliterator();
        java.lang.String str27 = cSVParser25.getHeaderComment();
        java.lang.String str28 = cSVParser25.getFirstEndOfLine();
        cSVPrinter2.print((java.lang.Object) str28);
        java.lang.Appendable appendable30 = cSVPrinter2.getOut();
        long long31 = cSVPrinter2.getRecordCount();
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char35 = cSVFormat34.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse("", cSVFormat34);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator37 = cSVParser36.spliterator();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList38 = cSVParser36.getRecords();
        cSVPrinter2.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVRecordList38);
        cSVPrinter2.println();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(appendable30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(char35);
        org.junit.Assert.assertNotNull(cSVParser36);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator37);
        org.junit.Assert.assertNotNull(cSVRecordList38);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        java.io.Writer writer7 = builder4.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder4.setCharSequence((java.lang.CharSequence) "");
        java.net.URI uRI10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder11 = builder4.setURI(uRI10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(writer7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        java.lang.Appendable appendable0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.ORACLE;
        boolean boolean2 = cSVFormat1.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter4 = new org.apache.commons.csv.CSVPrinter(appendable0, cSVFormat1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char3 = cSVFormat2.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        int int6 = builder5.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder5.setFile("");
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setBufferSizeMax((int) (short) -1);
        java.nio.file.Path path11 = builder8.getPath();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharacterOffset(0L);
        java.nio.charset.Charset charset18 = builder17.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder12.setCharset(charset18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter20 = cSVFormat2.print(path11, charset18);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8192 + "'", int6 == 8192);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        java.io.Writer writer7 = builder4.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder4.setCharSequence((java.lang.CharSequence) "");
        java.io.Reader reader10 = builder4.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT;
        boolean boolean12 = cSVFormat11.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char15 = cSVFormat14.getEscapeCharacter();
        java.lang.String[] strArray16 = cSVFormat14.getHeaderComments();
        boolean boolean17 = cSVFormat14.isEscapeCharacterSet();
        java.lang.String[] strArray18 = cSVFormat14.getHeaderComments();
        boolean boolean19 = cSVFormat14.getLenientEof();
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat21.printer();
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setFile("hi!");
        java.nio.charset.Charset charset28 = null;
        org.apache.commons.csv.CSVParser.Builder builder29 = builder27.setCharset(charset28);
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder35 = builder33.setFile("hi!");
        java.nio.charset.Charset charset36 = null;
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setCharset(charset36);
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray39 = new java.lang.Object[] { builder27, 1L, charset36, predefined38 };
        cSVPrinter22.printRecord(objArray39);
        cSVPrinter22.flush();
        org.apache.commons.csv.CSVFormat cSVFormat44 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char45 = cSVFormat44.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser46 = org.apache.commons.csv.CSVParser.parse("", cSVFormat44);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser46.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream48 = cSVParser46.stream();
        cSVPrinter22.printRecords(cSVRecordStream48);
        java.lang.Appendable appendable50 = cSVPrinter22.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter51 = cSVFormat14.print(appendable50);
        org.apache.commons.csv.CSVPrinter cSVPrinter52 = cSVFormat11.print(appendable50);
        org.apache.commons.csv.CSVParser cSVParser55 = new org.apache.commons.csv.CSVParser(reader10, cSVFormat11, (long) ' ', (long) '\"');
        org.apache.commons.csv.CSVFormat cSVFormat56 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVParser cSVParser59 = new org.apache.commons.csv.CSVParser(reader10, cSVFormat56, (long) (short) 1, (long) '\"');
        boolean boolean60 = cSVFormat56.getTrailingDelimiter();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(writer7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(reader10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(char15);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVPrinter22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(char45);
        org.junit.Assert.assertNotNull(cSVParser46);
        org.junit.Assert.assertNotNull(cSVRecordList47);
        org.junit.Assert.assertNotNull(cSVRecordStream48);
        org.junit.Assert.assertNotNull(appendable50);
        org.junit.Assert.assertNotNull(cSVPrinter51);
        org.junit.Assert.assertNotNull(cSVPrinter52);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset(0L);
        java.nio.charset.Charset charset6 = builder5.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setCharset(charset6);
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream8 = builder0.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset(0L);
        java.nio.charset.Charset charset3 = builder2.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setFile("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        java.nio.file.OpenOption[] openOptionArray6 = builder2.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder2.setCharacterOffset((-1L));
        java.net.URI uRI9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setURI(uRI9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(openOptionArray6);
        org.junit.Assert.assertArrayEquals(openOptionArray6, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        cSVPrinter2.flush();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char25 = cSVFormat24.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("", cSVFormat24);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser26.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream28 = cSVParser26.stream();
        cSVPrinter2.printRecords(cSVRecordStream28);
        cSVPrinter2.close();
        cSVPrinter2.println();
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char35 = cSVFormat34.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse("", cSVFormat34);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator37 = cSVParser36.spliterator();
        java.lang.String str38 = cSVParser36.getHeaderComment();
        java.lang.String str39 = cSVParser36.getFirstEndOfLine();
        boolean boolean40 = cSVParser36.hasHeaderComment();
        cSVPrinter2.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser36);
        java.sql.ResultSet resultSet42 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter2.printRecords(resultSet42, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNotNull(cSVParser26);
        org.junit.Assert.assertNotNull(cSVRecordList27);
        org.junit.Assert.assertNotNull(cSVRecordStream28);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(char35);
        org.junit.Assert.assertNotNull(cSVParser36);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray7 = builder6.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setFile("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter15 = cSVFormat14.printer();
        org.apache.commons.csv.CSVParser.Builder builder16 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setFile("hi!");
        java.nio.charset.Charset charset21 = null;
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharset(charset21);
        org.apache.commons.csv.CSVParser.Builder builder24 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder28 = builder26.setFile("hi!");
        java.nio.charset.Charset charset29 = null;
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setCharset(charset29);
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray32 = new java.lang.Object[] { builder20, 1L, charset29, predefined31 };
        cSVPrinter15.printRecord(objArray32);
        org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char37 = cSVFormat36.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse("", cSVFormat36);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator39 = cSVParser38.spliterator();
        java.lang.String str40 = cSVParser38.getHeaderComment();
        java.lang.String str41 = cSVParser38.getFirstEndOfLine();
        cSVPrinter15.print((java.lang.Object) str41);
        cSVPrinter15.println();
        org.apache.commons.csv.CSVParser.Builder builder44 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder46 = builder44.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder50 = builder48.setCharacterOffset((long) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray51 = builder50.getOpenOptions();
        cSVPrinter15.printRecords((java.lang.Object[]) openOptionArray51);
        org.apache.commons.csv.CSVParser.Builder builder53 = builder12.setOpenOptions(openOptionArray51);
        org.apache.commons.csv.CSVParser.Builder builder54 = builder6.setOpenOptions(openOptionArray51);
        java.net.URI uRI55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder56 = builder6.setURI(uRI55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(openOptionArray7);
        org.junit.Assert.assertArrayEquals(openOptionArray7, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVPrinter15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(char37);
        org.junit.Assert.assertNotNull(cSVParser38);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(openOptionArray51);
        org.junit.Assert.assertArrayEquals(openOptionArray51, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setBufferSizeMax((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path13 = builder12.getPath();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder16 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setFile("hi!");
        java.nio.charset.Charset charset21 = null;
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharset(charset21);
        java.io.Writer writer23 = builder20.getWriter();
        cSVFormat15.println((java.lang.Appendable) writer23);
        org.apache.commons.csv.CSVParser.Builder builder25 = builder12.setWriter(writer23);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder5.setWriter(writer23);
        // The following exception was thrown during execution in test generation
        try {
            java.io.RandomAccessFile randomAccessFile27 = builder5.getRandomAccessFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: WriterOrigin#getFile() for BufferedWriter origin java.io.BufferedWriter@4800732b");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(writer23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isEscapeCharacterSet();
        java.lang.String str2 = cSVFormat0.getDelimiterString();
        java.lang.String str3 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode4 = cSVFormat0.getDuplicateHeaderMode();
        boolean boolean5 = cSVFormat0.getSkipHeaderRecord();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "," + "'", str2, ",");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "," + "'", str3, ",");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode4 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode4.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setBufferSizeMax((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path13 = builder12.getPath();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder16 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setFile("hi!");
        java.nio.charset.Charset charset21 = null;
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharset(charset21);
        java.io.Writer writer23 = builder20.getWriter();
        cSVFormat15.println((java.lang.Appendable) writer23);
        org.apache.commons.csv.CSVParser.Builder builder25 = builder12.setWriter(writer23);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder5.setWriter(writer23);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder28 = builder5.setCharset("\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(writer23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder2.setHeader(strArray4);
        org.apache.commons.csv.CSVFormat cSVFormat6 = builder2.get();
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setEscape((java.lang.Character) '4');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertArrayEquals(strArray4, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        java.net.URL uRL0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder1.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder9 = builder5.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray11 = cSVFormat10.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder12 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat10);
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder12.setHeader(strArray14);
        org.apache.commons.csv.CSVFormat cSVFormat16 = builder12.get();
        org.apache.commons.csv.CSVParser.Builder builder17 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setFile("hi!");
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharset(charset22);
        java.io.Writer writer24 = builder21.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter27 = cSVFormat26.printer();
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder32 = builder30.setFile("hi!");
        java.nio.charset.Charset charset33 = null;
        org.apache.commons.csv.CSVParser.Builder builder34 = builder32.setCharset(charset33);
        org.apache.commons.csv.CSVParser.Builder builder36 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder38 = builder36.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder40 = builder38.setFile("hi!");
        java.nio.charset.Charset charset41 = null;
        org.apache.commons.csv.CSVParser.Builder builder42 = builder40.setCharset(charset41);
        org.apache.commons.csv.CSVFormat.Predefined predefined43 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray44 = new java.lang.Object[] { builder32, 1L, charset41, predefined43 };
        cSVPrinter27.printRecord(objArray44);
        cSVFormat16.printRecord((java.lang.Appendable) writer24, objArray44);
        org.apache.commons.csv.CSVParser.Builder builder47 = builder5.setWriter(writer24);
        java.nio.charset.Charset charset48 = builder47.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat50 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char51 = cSVFormat50.getEscapeCharacter();
        java.lang.Character char52 = cSVFormat50.getCommentMarker();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser53 = org.apache.commons.csv.CSVParser.parse(uRL0, charset48, cSVFormat50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertArrayEquals(strArray14, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(writer24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVPrinter27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + predefined43 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined43.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNull(char51);
        org.junit.Assert.assertNull(char52);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSet5);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode9 = org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setDuplicateHeaderMode(duplicateHeaderMode9);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setRecordSeparator("hi!");
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setDelimiter("\001");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode9 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY + "'", duplicateHeaderMode9.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("4");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        int int1 = builder0.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setFile("");
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setBufferSizeMax((int) (short) -1);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier6 = builder5.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder5.setBufferSize((java.lang.Integer) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVParserSupplier6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char3 = cSVFormat2.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser4.spliterator();
        java.lang.String str6 = cSVParser4.getHeaderComment();
        java.lang.String str7 = cSVParser4.getFirstEndOfLine();
        boolean boolean8 = cSVParser4.hasHeaderComment();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser4.iterator();
        java.lang.Class<?> wildcardClass10 = cSVRecordItor9.getClass();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVRecordItor9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char24 = cSVFormat23.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("", cSVFormat23);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser25.spliterator();
        java.lang.String str27 = cSVParser25.getHeaderComment();
        java.lang.String str28 = cSVParser25.getFirstEndOfLine();
        cSVPrinter2.print((java.lang.Object) str28);
        java.lang.Appendable appendable30 = cSVPrinter2.getOut();
        long long31 = cSVPrinter2.getRecordCount();
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char35 = cSVFormat34.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse("", cSVFormat34);
        java.util.List<java.lang.String> strList37 = cSVParser36.getHeaderNames();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList38 = cSVParser36.getRecords();
        cSVPrinter2.print((java.lang.Object) cSVRecordList38);
        cSVPrinter2.printComment("\r\n");
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(appendable30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(char35);
        org.junit.Assert.assertNotNull(cSVParser36);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(cSVRecordList38);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('\\');
        org.junit.Assert.assertNotNull(cSVFormat1);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        cSVPrinter2.flush();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char25 = cSVFormat24.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("", cSVFormat24);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser26.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream28 = cSVParser26.stream();
        cSVPrinter2.printRecords(cSVRecordStream28);
        cSVPrinter2.println();
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter33 = cSVFormat32.printer();
        org.apache.commons.csv.CSVParser.Builder builder34 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder36 = builder34.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder38 = builder36.setFile("hi!");
        java.nio.charset.Charset charset39 = null;
        org.apache.commons.csv.CSVParser.Builder builder40 = builder38.setCharset(charset39);
        org.apache.commons.csv.CSVParser.Builder builder42 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder44 = builder42.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder46 = builder44.setFile("hi!");
        java.nio.charset.Charset charset47 = null;
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setCharset(charset47);
        org.apache.commons.csv.CSVFormat.Predefined predefined49 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray50 = new java.lang.Object[] { builder38, 1L, charset47, predefined49 };
        cSVPrinter33.printRecord(objArray50);
        cSVPrinter33.flush();
        org.apache.commons.csv.CSVFormat cSVFormat55 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char56 = cSVFormat55.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser57 = org.apache.commons.csv.CSVParser.parse("", cSVFormat55);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList58 = cSVParser57.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream59 = cSVParser57.stream();
        cSVPrinter33.printRecords(cSVRecordStream59);
        cSVPrinter33.close();
        cSVPrinter33.println();
        cSVPrinter33.printComment("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        cSVPrinter33.close(true);
        org.apache.commons.csv.CSVFormat cSVFormat69 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char70 = cSVFormat69.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser71 = org.apache.commons.csv.CSVParser.parse("", cSVFormat69);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList72 = cSVParser71.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream73 = cSVParser71.stream();
        cSVPrinter33.printRecord(cSVRecordStream73);
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter2.printRecord(cSVRecordStream73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNotNull(cSVParser26);
        org.junit.Assert.assertNotNull(cSVRecordList27);
        org.junit.Assert.assertNotNull(cSVRecordStream28);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVPrinter33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + predefined49 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined49.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertNotNull(cSVFormat55);
        org.junit.Assert.assertNull(char56);
        org.junit.Assert.assertNotNull(cSVParser57);
        org.junit.Assert.assertNotNull(cSVRecordList58);
        org.junit.Assert.assertNotNull(cSVRecordStream59);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNull(char70);
        org.junit.Assert.assertNotNull(cSVParser71);
        org.junit.Assert.assertNotNull(cSVRecordList72);
        org.junit.Assert.assertNotNull(cSVRecordStream73);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        java.io.Writer writer7 = builder4.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder4.setCharSequence((java.lang.CharSequence) "");
        // The following exception was thrown during execution in test generation
        try {
            java.io.RandomAccessFile randomAccessFile10 = builder9.getRandomAccessFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CharSequenceOrigin#getFile() for String origin ");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(writer7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        cSVPrinter2.close(true);
        cSVPrinter2.close();
        cSVPrinter2.println();
        java.lang.Class<?> wildcardClass7 = cSVPrinter2.getClass();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char24 = cSVFormat23.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("", cSVFormat23);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser25.spliterator();
        java.lang.String str27 = cSVParser25.getHeaderComment();
        java.lang.String str28 = cSVParser25.getFirstEndOfLine();
        cSVPrinter2.print((java.lang.Object) str28);
        cSVPrinter2.println();
        java.sql.ResultSet resultSet31 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter2.printRecords(resultSet31, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined3 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat4 = predefined3.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setFile("hi!");
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharset(charset10);
        java.io.Writer writer12 = builder9.getWriter();
        cSVFormat4.println((java.lang.Appendable) writer12);
        cSVFormat1.print((java.lang.Object) 10L, (java.lang.Appendable) writer12, true);
        org.apache.commons.csv.CSVPrinter cSVPrinter16 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder17 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setFile("hi!");
        byte[] byteArray23 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder24 = builder19.setByteArray(byteArray23);
        java.nio.file.OpenOption[] openOptionArray25 = builder24.getOpenOptions();
        cSVPrinter16.printRecord((java.lang.Object[]) openOptionArray25);
        org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char29 = cSVFormat28.getEscapeCharacter();
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray31 = cSVFormat30.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder32 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat30);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder32.setHeader(strArray34);
        org.apache.commons.csv.CSVFormat cSVFormat36 = builder32.get();
        boolean boolean37 = cSVFormat28.equals((java.lang.Object) builder32);
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder32.setDelimiter('a');
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder39.setSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder41.setDelimiter('\"');
        org.apache.commons.csv.CSVParser.Builder builder44 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder46 = builder44.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder50 = builder48.setCharacterOffset((long) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray51 = builder50.getOpenOptions();
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder41.setHeaderComments((java.lang.Object[]) openOptionArray51);
        cSVPrinter16.printRecords((java.lang.Object[]) openOptionArray51);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + predefined3 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined3.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(writer12);
        org.junit.Assert.assertNotNull(cSVPrinter16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertArrayEquals(byteArray23, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(openOptionArray25);
        org.junit.Assert.assertArrayEquals(openOptionArray25, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(char29);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(strArray31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertArrayEquals(strArray34, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(openOptionArray51);
        org.junit.Assert.assertArrayEquals(openOptionArray51, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.QuoteMode quoteMode1 = cSVFormat0.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char4 = cSVFormat3.getEscapeCharacter();
        java.lang.String[] strArray5 = cSVFormat3.getHeaderComments();
        boolean boolean6 = cSVFormat3.isEscapeCharacterSet();
        java.lang.String[] strArray7 = cSVFormat3.getHeaderComments();
        boolean boolean8 = cSVFormat3.getLenientEof();
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat10.printer();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setFile("hi!");
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharset(charset17);
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setFile("hi!");
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharset(charset25);
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray28 = new java.lang.Object[] { builder16, 1L, charset25, predefined27 };
        cSVPrinter11.printRecord(objArray28);
        cSVPrinter11.flush();
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char34 = cSVFormat33.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse("", cSVFormat33);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList36 = cSVParser35.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream37 = cSVParser35.stream();
        cSVPrinter11.printRecords(cSVRecordStream37);
        java.lang.Appendable appendable39 = cSVPrinter11.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter40 = cSVFormat3.print(appendable39);
        org.apache.commons.csv.CSVParser.Builder builder41 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder41.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder45 = builder43.setFile("hi!");
        java.nio.charset.Charset charset46 = null;
        org.apache.commons.csv.CSVParser.Builder builder47 = builder45.setCharset(charset46);
        java.io.Writer writer48 = builder45.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder50 = builder45.setCharSequence((java.lang.CharSequence) "");
        java.io.Reader reader51 = builder45.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char55 = cSVFormat54.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser56 = org.apache.commons.csv.CSVParser.parse("", cSVFormat54);
        java.lang.String str57 = cSVFormat54.getRecordSeparator();
        org.apache.commons.csv.CSVParser cSVParser58 = org.apache.commons.csv.CSVParser.parse(reader51, cSVFormat54);
        org.apache.commons.csv.CSVFormat cSVFormat60 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char61 = cSVFormat60.getEscapeCharacter();
        java.lang.String[] strArray62 = cSVFormat60.getHeaderComments();
        boolean boolean63 = cSVFormat60.isEscapeCharacterSet();
        java.lang.String[] strArray64 = cSVFormat60.getHeaderComments();
        boolean boolean65 = cSVFormat60.getLenientEof();
        org.apache.commons.csv.CSVFormat cSVFormat68 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char69 = cSVFormat68.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser70 = org.apache.commons.csv.CSVParser.parse("", cSVFormat68);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator71 = cSVParser70.spliterator();
        java.lang.String str72 = cSVParser70.getHeaderComment();
        java.lang.String str73 = cSVParser70.getFirstEndOfLine();
        boolean boolean74 = cSVParser70.hasHeaderComment();
        boolean boolean75 = cSVFormat60.equals((java.lang.Object) cSVParser70);
        org.apache.commons.csv.CSVParser cSVParser78 = new org.apache.commons.csv.CSVParser(reader51, cSVFormat60, (long) (byte) 10, 10L);
        org.apache.commons.csv.CSVParser cSVParser79 = cSVFormat3.parse(reader51);
        org.apache.commons.csv.CSVParser cSVParser80 = cSVFormat0.parse(reader51);
        boolean boolean81 = cSVParser80.isClosed();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(quoteMode1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVPrinter11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(char34);
        org.junit.Assert.assertNotNull(cSVParser35);
        org.junit.Assert.assertNotNull(cSVRecordList36);
        org.junit.Assert.assertNotNull(cSVRecordStream37);
        org.junit.Assert.assertNotNull(appendable39);
        org.junit.Assert.assertNotNull(cSVPrinter40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(writer48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(reader51);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNull(char55);
        org.junit.Assert.assertNotNull(cSVParser56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(cSVParser58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNull(char61);
        org.junit.Assert.assertNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertNull(char69);
        org.junit.Assert.assertNotNull(cSVParser70);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(cSVParser79);
        org.junit.Assert.assertNotNull(cSVParser80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        java.lang.String[] strArray3 = cSVFormat1.getHeaderComments();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        java.lang.String[] strArray5 = cSVFormat1.getHeaderComments();
        boolean boolean6 = cSVFormat1.isNullStringSet();
        boolean boolean7 = cSVFormat1.getSkipHeaderRecord();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder0.setTrailingDelimiter(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        java.io.Writer writer7 = builder4.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder4.setCharSequence((java.lang.CharSequence) "");
        java.io.Reader reader10 = builder4.getReader();
        java.net.URI uRI11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder12 = builder4.setURI(uRI11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(writer7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(reader10);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char3 = cSVFormat2.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList5 = cSVParser4.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream6 = cSVParser4.stream();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor7 = cSVParser4.iterator();
        boolean boolean8 = cSVParser4.hasHeaderComment();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(cSVRecordList5);
        org.junit.Assert.assertNotNull(cSVRecordStream6);
        org.junit.Assert.assertNotNull(cSVRecordItor7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        int int1 = builder0.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setFile("");
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setBufferSizeMax((int) (short) -1);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier6 = builder5.asSupplier();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser7 = builder5.getUnchecked();
            org.junit.Assert.fail("Expected exception of type java.io.UncheckedIOException; message: java.nio.file.AccessDeniedException: ");
        } catch (java.io.UncheckedIOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVParserSupplier6);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset(0L);
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder5.setCharset(charset9);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setFile("hi!");
        byte[] byteArray24 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder25 = builder20.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder15.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder10.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharacterOffset(0L);
        java.nio.charset.Charset charset34 = builder33.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder28.setCharset(charset34);
        org.apache.commons.csv.CSVParser.Builder builder36 = builder27.setCharset(charset34);
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder42 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder44 = builder42.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder46 = builder44.setFile("hi!");
        java.nio.charset.Charset charset47 = null;
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setCharset(charset47);
        java.io.Writer writer49 = builder46.getWriter();
        cSVFormat41.println((java.lang.Appendable) writer49);
        cSVFormat38.print((java.lang.Object) 10L, (java.lang.Appendable) writer49, true);
        org.apache.commons.csv.CSVParser.Builder builder53 = builder27.setFormat(cSVFormat38);
        boolean boolean54 = cSVFormat38.getTrailingData();
        java.lang.Character char55 = cSVFormat38.getCommentMarker();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(writer49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(char55);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder7 = builder2.setByteArray(byteArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path8 = builder7.getPath();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getPath() for byte[] origin [B@1c9f5eff");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray4 = cSVFormat3.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder5 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder5.setHeader(strArray7);
        org.apache.commons.csv.CSVFormat cSVFormat9 = builder5.get();
        boolean boolean10 = cSVFormat1.equals((java.lang.Object) builder5);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder5.setDelimiter('a');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder5.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setEscape((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder14.setDelimiter('a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder20 = builder14.setDelimiter("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertArrayEquals(strArray7, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setBufferSizeMax((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path13 = builder12.getPath();
        org.apache.commons.csv.CSVFormat.Predefined predefined14 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat15 = predefined14.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder16 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setFile("hi!");
        java.nio.charset.Charset charset21 = null;
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharset(charset21);
        java.io.Writer writer23 = builder20.getWriter();
        cSVFormat15.println((java.lang.Appendable) writer23);
        org.apache.commons.csv.CSVParser.Builder builder25 = builder12.setWriter(writer23);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder5.setWriter(writer23);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray28 = cSVFormat27.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder29 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat27);
        java.sql.ResultSetMetaData resultSetMetaData30 = null;
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setHeader(resultSetMetaData30);
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setAutoFlush(true);
        java.sql.ResultSet resultSet34 = null;
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder31.setHeader(resultSet34);
        org.apache.commons.csv.CSVFormat cSVFormat36 = builder31.get();
        org.apache.commons.csv.CSVPrinter cSVPrinter37 = new org.apache.commons.csv.CSVPrinter((java.lang.Appendable) writer23, cSVFormat36);
        java.sql.ResultSet resultSet38 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter37.printRecords(resultSet38, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertTrue("'" + predefined14 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined14.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(writer23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNull(strArray28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(cSVFormat36);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char3 = cSVFormat2.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser4.spliterator();
        java.lang.String str6 = cSVParser4.getHeaderComment();
        java.lang.String str7 = cSVParser4.getFirstEndOfLine();
        java.util.List<java.lang.String> strList8 = cSVParser4.getHeaderNames();
        java.lang.String str9 = cSVParser4.getTrailerComment();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = cSVParser4.getHeaderMap();
        long long11 = cSVParser4.getRecordNumber();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        boolean boolean2 = cSVFormat0.getLenientEof();
        boolean boolean3 = cSVFormat0.isCommentMarkerSet();
        boolean boolean4 = cSVFormat0.getLenientEof();
        java.io.Reader reader5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser6 = cSVFormat0.parse(reader5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder8 = builder4.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray10 = cSVFormat9.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat9);
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder11.setHeader(strArray13);
        org.apache.commons.csv.CSVFormat cSVFormat15 = builder11.get();
        org.apache.commons.csv.CSVParser.Builder builder16 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setFile("hi!");
        java.nio.charset.Charset charset21 = null;
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharset(charset21);
        java.io.Writer writer23 = builder20.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat25.printer();
        org.apache.commons.csv.CSVParser.Builder builder27 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder27.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder31 = builder29.setFile("hi!");
        java.nio.charset.Charset charset32 = null;
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharset(charset32);
        org.apache.commons.csv.CSVParser.Builder builder35 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder39 = builder37.setFile("hi!");
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.csv.CSVParser.Builder builder41 = builder39.setCharset(charset40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray43 = new java.lang.Object[] { builder31, 1L, charset40, predefined42 };
        cSVPrinter26.printRecord(objArray43);
        cSVFormat15.printRecord((java.lang.Appendable) writer23, objArray43);
        org.apache.commons.csv.CSVParser.Builder builder46 = builder4.setWriter(writer23);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder48 = builder4.setCharset("Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: Delimiter=<|> Escape=<\\> QuoteChar=<\"> RecordSeparator=<?> EmptyLines:ignored SkipHeaderRecord:false");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertArrayEquals(strArray13, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(writer23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(cSVPrinter26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path7 = builder6.getPath();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setFile("hi!");
        java.nio.charset.Charset charset15 = null;
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharset(charset15);
        java.io.Writer writer17 = builder14.getWriter();
        cSVFormat9.println((java.lang.Appendable) writer17);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder6.setWriter(writer17);
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder25 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder29 = builder27.setFile("hi!");
        java.nio.charset.Charset charset30 = null;
        org.apache.commons.csv.CSVParser.Builder builder31 = builder29.setCharset(charset30);
        java.io.Writer writer32 = builder29.getWriter();
        cSVFormat24.println((java.lang.Appendable) writer32);
        cSVFormat21.print((java.lang.Object) 10L, (java.lang.Appendable) writer32, true);
        boolean boolean37 = cSVFormat21.equals((java.lang.Object) (byte) 10);
        org.apache.commons.csv.CSVFormat cSVFormat39 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter40 = cSVFormat39.printer();
        org.apache.commons.csv.CSVParser.Builder builder41 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder41.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder45 = builder43.setFile("hi!");
        java.nio.charset.Charset charset46 = null;
        org.apache.commons.csv.CSVParser.Builder builder47 = builder45.setCharset(charset46);
        org.apache.commons.csv.CSVParser.Builder builder49 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder51 = builder49.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder53 = builder51.setFile("hi!");
        java.nio.charset.Charset charset54 = null;
        org.apache.commons.csv.CSVParser.Builder builder55 = builder53.setCharset(charset54);
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray57 = new java.lang.Object[] { builder45, 1L, charset54, predefined56 };
        cSVPrinter40.printRecord(objArray57);
        org.apache.commons.csv.CSVFormat cSVFormat61 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char62 = cSVFormat61.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser63 = org.apache.commons.csv.CSVParser.parse("", cSVFormat61);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator64 = cSVParser63.spliterator();
        java.lang.String str65 = cSVParser63.getHeaderComment();
        java.lang.String str66 = cSVParser63.getFirstEndOfLine();
        cSVPrinter40.print((java.lang.Object) str66);
        org.apache.commons.csv.CSVParser.Builder builder68 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption69 = null;
        java.nio.file.OpenOption[] openOptionArray70 = new java.nio.file.OpenOption[] { openOption69 };
        org.apache.commons.csv.CSVParser.Builder builder71 = builder68.setOpenOptions(openOptionArray70);
        cSVPrinter40.printRecord((java.lang.Object[]) openOptionArray70);
        java.lang.String str73 = cSVFormat21.format((java.lang.Object[]) openOptionArray70);
        boolean boolean74 = cSVFormat21.isNullStringSet();
        java.lang.String str75 = cSVFormat21.toString();
        org.apache.commons.csv.CSVPrinter cSVPrinter76 = new org.apache.commons.csv.CSVPrinter((java.lang.Appendable) writer17, cSVFormat21);
        org.apache.commons.csv.CSVFormat cSVFormat77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter78 = new org.apache.commons.csv.CSVPrinter((java.lang.Appendable) writer17, cSVFormat77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: format");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(path7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(writer17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(writer32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(cSVPrinter40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertNull(char62);
        org.junit.Assert.assertNotNull(cSVParser63);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(openOptionArray70);
        org.junit.Assert.assertArrayEquals(openOptionArray70, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false" + "'", str75, "Delimiter=<#> SkipHeaderRecord:false");
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        cSVPrinter2.flush();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char25 = cSVFormat24.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("", cSVFormat24);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser26.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream28 = cSVParser26.stream();
        cSVPrinter2.printRecords(cSVRecordStream28);
        cSVPrinter2.close();
        cSVPrinter2.println();
        cSVPrinter2.printComment("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        cSVPrinter2.close(true);
        org.apache.commons.csv.CSVParser.Builder builder36 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder38 = builder36.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder40 = builder38.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder42 = builder40.setCharacterOffset((long) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray43 = builder42.getOpenOptions();
        cSVPrinter2.print((java.lang.Object) openOptionArray43);
        java.sql.ResultSet resultSet45 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter2.printRecords(resultSet45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNotNull(cSVParser26);
        org.junit.Assert.assertNotNull(cSVRecordList27);
        org.junit.Assert.assertNotNull(cSVRecordStream28);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(openOptionArray43);
        org.junit.Assert.assertArrayEquals(openOptionArray43, new java.nio.file.OpenOption[] {});
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder8 = builder4.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray10 = cSVFormat9.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat9);
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder11.setHeader(strArray13);
        org.apache.commons.csv.CSVFormat cSVFormat15 = builder11.get();
        org.apache.commons.csv.CSVParser.Builder builder16 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setFile("hi!");
        java.nio.charset.Charset charset21 = null;
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharset(charset21);
        java.io.Writer writer23 = builder20.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat25.printer();
        org.apache.commons.csv.CSVParser.Builder builder27 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder27.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder31 = builder29.setFile("hi!");
        java.nio.charset.Charset charset32 = null;
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharset(charset32);
        org.apache.commons.csv.CSVParser.Builder builder35 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder39 = builder37.setFile("hi!");
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.csv.CSVParser.Builder builder41 = builder39.setCharset(charset40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray43 = new java.lang.Object[] { builder31, 1L, charset40, predefined42 };
        cSVPrinter26.printRecord(objArray43);
        cSVFormat15.printRecord((java.lang.Appendable) writer23, objArray43);
        org.apache.commons.csv.CSVParser.Builder builder46 = builder4.setWriter(writer23);
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setFile("Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Predefined predefined49 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat50 = predefined49.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder51 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder53 = builder51.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder55 = builder53.setFile("hi!");
        java.nio.charset.Charset charset56 = null;
        org.apache.commons.csv.CSVParser.Builder builder57 = builder55.setCharset(charset56);
        java.io.Writer writer58 = builder55.getWriter();
        cSVFormat50.println((java.lang.Appendable) writer58);
        org.apache.commons.csv.CSVParser.Builder builder60 = builder48.setWriter(writer58);
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream61 = builder48.getInputStream();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: WriterOrigin#getPath() for BufferedWriter origin java.io.BufferedWriter@1cfccf31");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertArrayEquals(strArray13, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(writer23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(cSVPrinter26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + predefined49 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined49.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(writer58);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char3 = cSVFormat2.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat2.getDuplicateHeaderMode();
        boolean boolean6 = cSVFormat2.getIgnoreHeaderCase();
        org.apache.commons.csv.CSVFormat.Builder builder7 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat2);
        boolean boolean8 = cSVFormat2.isQuoteCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        java.lang.Appendable appendable0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MYSQL;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter2 = new org.apache.commons.csv.CSVPrinter(appendable0, cSVFormat1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined3 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat4 = predefined3.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setFile("hi!");
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharset(charset10);
        java.io.Writer writer12 = builder9.getWriter();
        cSVFormat4.println((java.lang.Appendable) writer12);
        cSVFormat1.print((java.lang.Object) 10L, (java.lang.Appendable) writer12, true);
        boolean boolean17 = cSVFormat1.equals((java.lang.Object) (byte) 10);
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter20 = cSVFormat19.printer();
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setFile("hi!");
        java.nio.charset.Charset charset26 = null;
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setCharset(charset26);
        org.apache.commons.csv.CSVParser.Builder builder29 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder31 = builder29.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setFile("hi!");
        java.nio.charset.Charset charset34 = null;
        org.apache.commons.csv.CSVParser.Builder builder35 = builder33.setCharset(charset34);
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray37 = new java.lang.Object[] { builder25, 1L, charset34, predefined36 };
        cSVPrinter20.printRecord(objArray37);
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char42 = cSVFormat41.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser43 = org.apache.commons.csv.CSVParser.parse("", cSVFormat41);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator44 = cSVParser43.spliterator();
        java.lang.String str45 = cSVParser43.getHeaderComment();
        java.lang.String str46 = cSVParser43.getFirstEndOfLine();
        cSVPrinter20.print((java.lang.Object) str46);
        org.apache.commons.csv.CSVParser.Builder builder48 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption49 = null;
        java.nio.file.OpenOption[] openOptionArray50 = new java.nio.file.OpenOption[] { openOption49 };
        org.apache.commons.csv.CSVParser.Builder builder51 = builder48.setOpenOptions(openOptionArray50);
        cSVPrinter20.printRecord((java.lang.Object[]) openOptionArray50);
        java.lang.String str53 = cSVFormat1.format((java.lang.Object[]) openOptionArray50);
        boolean boolean54 = cSVFormat1.isNullStringSet();
        boolean boolean55 = cSVFormat1.isQuoteCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + predefined3 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined3.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(writer12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVPrinter20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(char42);
        org.junit.Assert.assertNotNull(cSVParser43);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(openOptionArray50);
        org.junit.Assert.assertArrayEquals(openOptionArray50, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        java.lang.Appendable appendable3 = null;
        cSVFormat1.println(appendable3);
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path12 = builder11.getPath();
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder15 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setFile("hi!");
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setCharset(charset20);
        java.io.Writer writer22 = builder19.getWriter();
        cSVFormat14.println((java.lang.Appendable) writer22);
        org.apache.commons.csv.CSVParser.Builder builder24 = builder11.setWriter(writer22);
        cSVFormat1.println((java.lang.Appendable) writer22);
        org.apache.commons.csv.CSVParser.Builder builder26 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder28 = builder26.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder32 = builder30.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder30.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray36 = cSVFormat35.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder37 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat35);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder37.setHeader(strArray39);
        org.apache.commons.csv.CSVFormat cSVFormat41 = builder37.get();
        org.apache.commons.csv.CSVParser.Builder builder42 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder44 = builder42.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder46 = builder44.setFile("hi!");
        java.nio.charset.Charset charset47 = null;
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setCharset(charset47);
        java.io.Writer writer49 = builder46.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat51 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter52 = cSVFormat51.printer();
        org.apache.commons.csv.CSVParser.Builder builder53 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder55 = builder53.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder57 = builder55.setFile("hi!");
        java.nio.charset.Charset charset58 = null;
        org.apache.commons.csv.CSVParser.Builder builder59 = builder57.setCharset(charset58);
        org.apache.commons.csv.CSVParser.Builder builder61 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder63 = builder61.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder65 = builder63.setFile("hi!");
        java.nio.charset.Charset charset66 = null;
        org.apache.commons.csv.CSVParser.Builder builder67 = builder65.setCharset(charset66);
        org.apache.commons.csv.CSVFormat.Predefined predefined68 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray69 = new java.lang.Object[] { builder57, 1L, charset66, predefined68 };
        cSVPrinter52.printRecord(objArray69);
        cSVFormat41.printRecord((java.lang.Appendable) writer49, objArray69);
        org.apache.commons.csv.CSVParser.Builder builder72 = builder30.setWriter(writer49);
        org.apache.commons.csv.CSVParser.Builder builder74 = builder72.setFile("Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Predefined predefined75 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat76 = predefined75.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder77 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder79 = builder77.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder81 = builder79.setFile("hi!");
        java.nio.charset.Charset charset82 = null;
        org.apache.commons.csv.CSVParser.Builder builder83 = builder81.setCharset(charset82);
        java.io.Writer writer84 = builder81.getWriter();
        cSVFormat76.println((java.lang.Appendable) writer84);
        org.apache.commons.csv.CSVParser.Builder builder86 = builder74.setWriter(writer84);
        org.apache.commons.csv.CSVParser.Builder builder87 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder89 = builder87.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder91 = builder89.setFile("hi!");
        java.nio.charset.Charset charset92 = null;
        org.apache.commons.csv.CSVParser.Builder builder93 = builder91.setCharset(charset92);
        java.io.Writer writer94 = builder91.getWriter();
        cSVFormat1.print((java.lang.Object) builder86, (java.lang.Appendable) writer94, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser97 = builder86.get();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: WriterOrigin#getPath() for BufferedWriter origin java.io.BufferedWriter@34cf257");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(path12);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(writer22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNull(strArray36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertArrayEquals(strArray39, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(writer49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVPrinter52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + predefined68 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined68.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + predefined75 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined75.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(writer84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(writer94);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        java.nio.charset.Charset charset7 = builder6.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setFile("hi!");
        byte[] byteArray14 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder10.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setBufferSizeMax(1);
        java.io.Reader reader18 = builder17.getReader();
        org.apache.commons.csv.CSVParser.Builder builder19 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setFile("hi!");
        java.nio.charset.Charset charset24 = null;
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setCharset(charset24);
        java.io.OutputStream outputStream26 = builder25.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder17.setOutputStream(outputStream26);
        org.apache.commons.csv.CSVParser.Builder builder28 = builder6.setOutputStream(outputStream26);
        int int29 = builder28.getBufferSizeDefault();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(reader18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(outputStream26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8192 + "'", int29 == 8192);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        java.lang.String[] strArray3 = cSVFormat1.getHeaderComments();
        boolean boolean4 = cSVFormat1.getIgnoreSurroundingSpaces();
        boolean boolean5 = cSVFormat1.getAllowMissingColumnNames();
        boolean boolean6 = cSVFormat1.getAutoFlush();
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path14 = builder13.getPath();
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.MONGODB_TSV;
        java.lang.String str16 = cSVFormat15.toString();
        org.apache.commons.csv.CSVParser.Builder builder17 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder25 = builder21.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder26 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder28 = builder26.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder32 = builder30.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path33 = builder32.getPath();
        org.apache.commons.csv.CSVParser.Builder builder34 = builder25.setPath(path33);
        org.apache.commons.csv.CSVParser.Builder builder35 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption36 = null;
        java.nio.file.OpenOption[] openOptionArray37 = new java.nio.file.OpenOption[] { openOption36 };
        org.apache.commons.csv.CSVParser.Builder builder38 = builder35.setOpenOptions(openOptionArray37);
        org.apache.commons.csv.CSVParser.Builder builder40 = builder35.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder41 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder41.setCharacterOffset(0L);
        java.nio.charset.Charset charset44 = builder43.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder45 = builder40.setCharset(charset44);
        org.apache.commons.csv.CSVParser.Builder builder46 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder50 = builder48.setFile("hi!");
        java.nio.charset.Charset charset51 = null;
        org.apache.commons.csv.CSVParser.Builder builder52 = builder50.setCharset(charset51);
        org.apache.commons.csv.CSVParser.Builder builder53 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder55 = builder53.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder57 = builder55.setFile("hi!");
        byte[] byteArray59 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder60 = builder55.setByteArray(byteArray59);
        org.apache.commons.csv.CSVParser.Builder builder61 = builder50.setByteArray(byteArray59);
        org.apache.commons.csv.CSVParser.Builder builder62 = builder45.setByteArray(byteArray59);
        org.apache.commons.csv.CSVParser.Builder builder63 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder65 = builder63.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder66 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder68 = builder66.setCharacterOffset(0L);
        java.nio.charset.Charset charset69 = builder68.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder70 = builder63.setCharset(charset69);
        org.apache.commons.csv.CSVParser.Builder builder71 = builder62.setCharset(charset69);
        org.apache.commons.csv.CSVPrinter cSVPrinter72 = cSVFormat15.print(path33, charset69);
        org.apache.commons.csv.CSVFormat cSVFormat74 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char75 = cSVFormat74.getEscapeCharacter();
        java.lang.String[] strArray76 = cSVFormat74.getHeaderComments();
        boolean boolean77 = cSVFormat74.getIgnoreSurroundingSpaces();
        java.lang.Character char78 = cSVFormat74.getCommentMarker();
        org.apache.commons.csv.CSVParser cSVParser79 = org.apache.commons.csv.CSVParser.parse(path14, charset69, cSVFormat74);
        org.apache.commons.csv.CSVParser.Builder builder80 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder82 = builder80.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder84 = builder82.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder86 = builder84.setCharacterOffset((long) (byte) 10);
        java.nio.charset.Charset charset87 = builder86.getCharset();
        org.apache.commons.csv.CSVPrinter cSVPrinter88 = cSVFormat1.print(path14, charset87);
        boolean boolean89 = cSVFormat1.getLenientEof();
        boolean boolean90 = cSVFormat1.getIgnoreHeaderCase();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(path14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str16, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(path33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(openOptionArray37);
        org.junit.Assert.assertArrayEquals(openOptionArray37, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertArrayEquals(byteArray59, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(cSVPrinter72);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNull(char75);
        org.junit.Assert.assertNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(char78);
        org.junit.Assert.assertNotNull(cSVParser79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(charset87);
        org.junit.Assert.assertNotNull(cSVPrinter88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        java.lang.Object[] objArray4 = new java.lang.Object[] { (short) 1 };
        cSVPrinter2.printRecords(objArray4);
        cSVPrinter2.close(false);
        cSVPrinter2.printComment("\r\n");
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[1]");
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder2.setHeader(strArray4);
        org.apache.commons.csv.CSVFormat cSVFormat6 = builder2.get();
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setHeader(resultSet7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder2.setLenientEof(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder2.setRecordSeparator('\"');
        java.lang.Class<?> wildcardClass13 = builder12.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertArrayEquals(strArray4, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (short) 100);
        int int6 = builder5.getBufferSizeDefault();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Writer writer7 = builder5.getWriter();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8192 + "'", int6 == 8192);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        cSVPrinter2.flush();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char25 = cSVFormat24.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("", cSVFormat24);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser26.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream28 = cSVParser26.stream();
        cSVPrinter2.printRecords(cSVRecordStream28);
        cSVPrinter2.close();
        cSVPrinter2.println();
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char35 = cSVFormat34.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse("", cSVFormat34);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator37 = cSVParser36.spliterator();
        java.lang.String str38 = cSVParser36.getHeaderComment();
        java.lang.String str39 = cSVParser36.getFirstEndOfLine();
        boolean boolean40 = cSVParser36.hasHeaderComment();
        cSVPrinter2.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser36);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator42 = cSVParser36.spliterator();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator43 = cSVParser36.spliterator();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNotNull(cSVParser26);
        org.junit.Assert.assertNotNull(cSVRecordList27);
        org.junit.Assert.assertNotNull(cSVRecordStream28);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(char35);
        org.junit.Assert.assertNotNull(cSVParser36);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator42);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator43);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setBufferSize((int) '\"');
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setFile("hi!");
        byte[] byteArray11 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder12 = builder7.setByteArray(byteArray11);
        org.apache.commons.csv.CSVParser.Builder builder13 = builder0.setByteArray(byteArray11);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path14 = builder0.getPath();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getPath() for byte[] origin [B@232ab4cd");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertArrayEquals(byteArray11, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter8 = cSVFormat7.printer();
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setFile("hi!");
        java.nio.charset.Charset charset14 = null;
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharset(charset14);
        org.apache.commons.csv.CSVParser.Builder builder17 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setFile("hi!");
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharset(charset22);
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray25 = new java.lang.Object[] { builder13, 1L, charset22, predefined24 };
        cSVPrinter8.printRecord(objArray25);
        cSVPrinter8.flush();
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char31 = cSVFormat30.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse("", cSVFormat30);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList33 = cSVParser32.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream34 = cSVParser32.stream();
        cSVPrinter8.printRecords(cSVRecordStream34);
        cSVPrinter8.close();
        cSVPrinter8.println();
        cSVPrinter8.printComment("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter42 = cSVFormat41.printer();
        org.apache.commons.csv.CSVParser.Builder builder43 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder45 = builder43.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder47 = builder45.setFile("hi!");
        java.nio.charset.Charset charset48 = null;
        org.apache.commons.csv.CSVParser.Builder builder49 = builder47.setCharset(charset48);
        org.apache.commons.csv.CSVParser.Builder builder51 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder53 = builder51.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder55 = builder53.setFile("hi!");
        java.nio.charset.Charset charset56 = null;
        org.apache.commons.csv.CSVParser.Builder builder57 = builder55.setCharset(charset56);
        org.apache.commons.csv.CSVFormat.Predefined predefined58 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray59 = new java.lang.Object[] { builder47, 1L, charset56, predefined58 };
        cSVPrinter42.printRecord(objArray59);
        org.apache.commons.csv.CSVFormat cSVFormat63 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char64 = cSVFormat63.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser65 = org.apache.commons.csv.CSVParser.parse("", cSVFormat63);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator66 = cSVParser65.spliterator();
        java.lang.String str67 = cSVParser65.getHeaderComment();
        java.lang.String str68 = cSVParser65.getFirstEndOfLine();
        cSVPrinter42.print((java.lang.Object) str68);
        cSVPrinter42.println();
        org.apache.commons.csv.CSVParser.Builder builder71 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder73 = builder71.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder75 = builder73.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder77 = builder75.setCharacterOffset((long) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray78 = builder77.getOpenOptions();
        cSVPrinter42.printRecords((java.lang.Object[]) openOptionArray78);
        cSVPrinter8.printRecords((java.lang.Object[]) openOptionArray78);
        org.apache.commons.csv.CSVParser.Builder builder81 = builder5.setOpenOptions(openOptionArray78);
        org.apache.commons.csv.CSVParser.Builder builder83 = builder81.setBufferSize((java.lang.Integer) 0);
        org.apache.commons.csv.CSVParser.Builder builder85 = builder81.setBufferSizeMax((int) '\\');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser86 = builder85.getUnchecked();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVPrinter8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(char31);
        org.junit.Assert.assertNotNull(cSVParser32);
        org.junit.Assert.assertNotNull(cSVRecordList33);
        org.junit.Assert.assertNotNull(cSVRecordStream34);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(cSVPrinter42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + predefined58 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined58.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNull(char64);
        org.junit.Assert.assertNotNull(cSVParser65);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(openOptionArray78);
        org.junit.Assert.assertArrayEquals(openOptionArray78, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharacterOffset((long) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray13 = builder12.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder5.setOpenOptions(openOptionArray13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharSequence((java.lang.CharSequence) ",");
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path17 = builder14.getPath();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CharSequenceOrigin#getPath() for String origin ,");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(openOptionArray13);
        org.junit.Assert.assertArrayEquals(openOptionArray13, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char24 = cSVFormat23.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("", cSVFormat23);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser25.spliterator();
        java.lang.String str27 = cSVParser25.getHeaderComment();
        java.lang.String str28 = cSVParser25.getFirstEndOfLine();
        cSVPrinter2.print((java.lang.Object) str28);
        org.apache.commons.csv.CSVParser.Builder builder30 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption31 = null;
        java.nio.file.OpenOption[] openOptionArray32 = new java.nio.file.OpenOption[] { openOption31 };
        org.apache.commons.csv.CSVParser.Builder builder33 = builder30.setOpenOptions(openOptionArray32);
        cSVPrinter2.printRecord((java.lang.Object[]) openOptionArray32);
        org.apache.commons.csv.CSVParser.Builder builder35 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption36 = null;
        java.nio.file.OpenOption[] openOptionArray37 = new java.nio.file.OpenOption[] { openOption36 };
        org.apache.commons.csv.CSVParser.Builder builder38 = builder35.setOpenOptions(openOptionArray37);
        cSVPrinter2.printRecords((java.lang.Object[]) openOptionArray37);
        cSVPrinter2.close();
        cSVPrinter2.println();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(openOptionArray32);
        org.junit.Assert.assertArrayEquals(openOptionArray32, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(openOptionArray37);
        org.junit.Assert.assertArrayEquals(openOptionArray37, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder4.setTrailingData(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder4.setLenientEof(true);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setIgnoreHeaderCase(true);
        java.sql.ResultSetMetaData resultSetMetaData17 = null;
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setHeader(resultSetMetaData17);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset(0L);
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder5.setCharset(charset9);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setFile("hi!");
        byte[] byteArray24 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder25 = builder20.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder15.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder10.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharacterOffset(0L);
        java.nio.charset.Charset charset34 = builder33.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder28.setCharset(charset34);
        org.apache.commons.csv.CSVParser.Builder builder36 = builder27.setCharset(charset34);
        org.apache.commons.csv.CSVFormat.Predefined predefined37 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat38 = predefined37.getFormat();
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined37.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder40 = builder36.setFormat(cSVFormat39);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder42 = builder36.setCharset("");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + predefined37 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined37.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF;
        java.lang.String str1 = cSVFormat0.getRecordSeparator();
        boolean boolean2 = cSVFormat0.isCommentMarkerSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\r\n" + "'", str1, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        cSVPrinter2.close();
        java.lang.Appendable appendable22 = cSVPrinter2.getOut();
        java.sql.ResultSet resultSet23 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter2.printRecords(resultSet23, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(appendable22);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSet5);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode9 = org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setDuplicateHeaderMode(duplicateHeaderMode9);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder8.setRecordSeparator("Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat cSVFormat13 = builder12.get();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray15 = cSVFormat14.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder16 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat14);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder16.setHeader(strArray18);
        org.apache.commons.csv.CSVFormat cSVFormat20 = builder16.get();
        java.sql.ResultSet resultSet21 = null;
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder16.setHeader(resultSet21);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder16.setLenientEof(false);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setTrailingData(false);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder24.setDelimiter('4');
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter31 = cSVFormat30.printer();
        org.apache.commons.csv.CSVParser.Builder builder32 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder34 = builder32.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder36 = builder34.setFile("hi!");
        java.nio.charset.Charset charset37 = null;
        org.apache.commons.csv.CSVParser.Builder builder38 = builder36.setCharset(charset37);
        org.apache.commons.csv.CSVParser.Builder builder40 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder42 = builder40.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder44 = builder42.setFile("hi!");
        java.nio.charset.Charset charset45 = null;
        org.apache.commons.csv.CSVParser.Builder builder46 = builder44.setCharset(charset45);
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray48 = new java.lang.Object[] { builder36, 1L, charset45, predefined47 };
        cSVPrinter31.printRecord(objArray48);
        org.apache.commons.csv.CSVFormat cSVFormat52 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char53 = cSVFormat52.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser54 = org.apache.commons.csv.CSVParser.parse("", cSVFormat52);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator55 = cSVParser54.spliterator();
        java.lang.String str56 = cSVParser54.getHeaderComment();
        java.lang.String str57 = cSVParser54.getFirstEndOfLine();
        cSVPrinter31.print((java.lang.Object) str57);
        java.lang.Appendable appendable59 = cSVPrinter31.getOut();
        cSVFormat13.print((java.lang.Object) '4', appendable59, true);
        boolean boolean62 = cSVFormat13.getAutoFlush();
        boolean boolean63 = cSVFormat13.isEscapeCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode9 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY + "'", duplicateHeaderMode9.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(strArray15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertArrayEquals(strArray18, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVPrinter31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNull(char53);
        org.junit.Assert.assertNotNull(cSVParser54);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(appendable59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        int int1 = builder0.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setFile("");
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setFile("hi!");
        java.nio.charset.Charset charset9 = null;
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setCharset(charset9);
        java.io.Writer writer11 = builder8.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder8.setCharSequence((java.lang.CharSequence) "");
        java.io.Reader reader14 = builder8.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char18 = cSVFormat17.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("", cSVFormat17);
        java.lang.String str20 = cSVFormat17.getRecordSeparator();
        org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse(reader14, cSVFormat17);
        org.apache.commons.csv.CSVParser.Builder builder22 = builder0.setReader(reader14);
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setFile("hi!");
        byte[] byteArray29 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder30 = builder25.setByteArray(byteArray29);
        org.apache.commons.csv.CSVParser.Builder builder31 = builder0.setByteArray(byteArray29);
        java.util.function.IntUnaryOperator intUnaryOperator32 = null;
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setBufferSizeChecker(intUnaryOperator32);
        // The following exception was thrown during execution in test generation
        try {
            java.io.RandomAccessFile randomAccessFile34 = builder31.getRandomAccessFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getFile() for byte[] origin [B@571ccadd");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(writer11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(reader14);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(char18);
        org.junit.Assert.assertNotNull(cSVParser19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVParser21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertArrayEquals(byteArray29, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder8 = builder4.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        java.net.URI uRI9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder10 = builder4.setURI(uRI9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset(0L);
        int int3 = builder2.getBufferSize();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Writer writer4 = builder2.getWriter();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8192 + "'", int3 == 8192);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        int int1 = builder0.getBufferSize();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser2 = builder0.get();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        int int7 = builder4.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder4.setRecordNumber((long) 10);
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharacterOffset(0L);
        org.apache.commons.csv.CSVParser.Builder builder13 = builder9.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setFile("hi!");
        java.nio.charset.Charset charset19 = null;
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharset(charset19);
        java.io.Writer writer21 = builder18.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder18.setCharSequence((java.lang.CharSequence) "");
        java.io.Reader reader24 = builder18.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV;
        org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse(reader24, cSVFormat25);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.MONGODB_TSV;
        java.lang.String str28 = cSVFormat27.toString();
        org.apache.commons.csv.CSVParser cSVParser31 = new org.apache.commons.csv.CSVParser(reader24, cSVFormat27, (long) 1, (long) 1);
        org.apache.commons.csv.CSVParser.Builder builder32 = builder9.setReader(reader24);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder9.setBufferSizeMax(100);
        org.apache.commons.io.IORandomAccessFile iORandomAccessFile35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder36 = builder9.setRandomAccessFile(iORandomAccessFile35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8192 + "'", int7 == 8192);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(writer21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(reader24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(cSVParser26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str28, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        int int1 = builder0.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setFile("");
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setFile("hi!");
        java.nio.charset.Charset charset9 = null;
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setCharset(charset9);
        java.io.Writer writer11 = builder8.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder8.setCharSequence((java.lang.CharSequence) "");
        java.io.Reader reader14 = builder8.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char18 = cSVFormat17.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("", cSVFormat17);
        java.lang.String str20 = cSVFormat17.getRecordSeparator();
        org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse(reader14, cSVFormat17);
        org.apache.commons.csv.CSVParser.Builder builder22 = builder0.setReader(reader14);
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setFile("hi!");
        byte[] byteArray29 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder30 = builder25.setByteArray(byteArray29);
        org.apache.commons.csv.CSVParser.Builder builder31 = builder0.setByteArray(byteArray29);
        java.util.function.IntUnaryOperator intUnaryOperator32 = null;
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setBufferSizeChecker(intUnaryOperator32);
        java.nio.file.Path path34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder35 = builder33.setPath(path34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(writer11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(reader14);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(char18);
        org.junit.Assert.assertNotNull(cSVParser19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVParser21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertArrayEquals(byteArray29, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder7 = builder2.setByteArray(byteArray6);
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setBufferSizeMax(1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setPath("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException; message: Illegal char <<> at index 10: Delimiter=<?> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false");
        } catch (java.nio.file.InvalidPathException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder7 = builder2.setByteArray(byteArray6);
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setCharacterOffset(0L);
        java.nio.charset.Charset charset11 = builder10.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder7.setCharset(charset11);
        java.nio.charset.Charset charset13 = builder12.getCharsetDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder15 = builder12.setCharset("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: Delimiter=<,> QuoteChar=<\"> RecordSeparator=<?> EmptyLines:ignored SkipHeaderRecord:false");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(charset13);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset(0L);
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder5.setCharset(charset9);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setFile("hi!");
        byte[] byteArray24 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder25 = builder20.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder15.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder10.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharacterOffset(0L);
        java.nio.charset.Charset charset34 = builder33.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder28.setCharset(charset34);
        org.apache.commons.csv.CSVParser.Builder builder36 = builder27.setCharset(charset34);
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder42 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder44 = builder42.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder46 = builder44.setFile("hi!");
        java.nio.charset.Charset charset47 = null;
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setCharset(charset47);
        java.io.Writer writer49 = builder46.getWriter();
        cSVFormat41.println((java.lang.Appendable) writer49);
        cSVFormat38.print((java.lang.Object) 10L, (java.lang.Appendable) writer49, true);
        org.apache.commons.csv.CSVParser.Builder builder53 = builder27.setFormat(cSVFormat38);
        boolean boolean54 = cSVFormat38.isEscapeCharacterSet();
        boolean boolean55 = cSVFormat38.getIgnoreHeaderCase();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(writer49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        java.net.URL uRL0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder1.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setFile("hi!");
        java.nio.charset.Charset charset6 = null;
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setCharset(charset6);
        java.util.function.IntUnaryOperator intUnaryOperator8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder5.setBufferSizeChecker(intUnaryOperator8);
        java.nio.charset.Charset charset10 = builder5.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.newFormat('#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse(uRL0, charset10, cSVFormat12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        java.lang.String[] strArray3 = cSVFormat1.getHeaderComments();
        boolean boolean4 = cSVFormat1.getIgnoreSurroundingSpaces();
        boolean boolean5 = cSVFormat1.getAllowMissingColumnNames();
        java.lang.String[] strArray6 = cSVFormat1.getHeaderComments();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strArray6);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char3 = cSVFormat2.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser4.spliterator();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser4.getRecords();
        java.lang.String str7 = cSVParser4.getHeaderComment();
        boolean boolean8 = cSVParser4.isClosed();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator5);
        org.junit.Assert.assertNotNull(cSVRecordList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setEscape('\\');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        java.net.URL uRL0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder1.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder9 = builder5.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path17 = builder16.getPath();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder9.setPath(path17);
        org.apache.commons.csv.CSVParser.Builder builder19 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setFile("hi!");
        byte[] byteArray25 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder26 = builder21.setByteArray(byteArray25);
        org.apache.commons.csv.CSVParser.Builder builder27 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder27.setCharacterOffset(0L);
        java.nio.charset.Charset charset30 = builder29.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder31 = builder26.setCharset(charset30);
        org.apache.commons.csv.CSVFormat.Predefined predefined32 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined32.getFormat();
        org.apache.commons.csv.CSVFormat cSVFormat34 = predefined32.getFormat();
        org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse(path17, charset30, cSVFormat34);
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char38 = cSVFormat37.getEscapeCharacter();
        boolean boolean39 = cSVFormat37.getTrailingData();
        java.lang.Character char40 = cSVFormat37.getEscapeCharacter();
        boolean boolean41 = cSVFormat37.getTrailingDelimiter();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse(uRL0, charset30, cSVFormat37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(path17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertArrayEquals(byteArray25, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + predefined32 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined32.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(cSVParser35);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNull(char38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(char40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.ORACLE;
        boolean boolean1 = cSVFormat0.isCommentMarkerSet();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.String[] strArray3 = cSVFormat0.getHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\r\n" + "'", str2, "\r\n");
        org.junit.Assert.assertNull(strArray3);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.io.IORandomAccessFile iORandomAccessFile5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder6 = builder2.setRandomAccessFile(iORandomAccessFile5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.QuoteMode quoteMode1 = cSVFormat0.getQuoteMode();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        boolean boolean3 = cSVFormat0.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char6 = cSVFormat5.getEscapeCharacter();
        java.lang.String[] strArray7 = cSVFormat5.getHeaderComments();
        boolean boolean8 = cSVFormat5.getIgnoreSurroundingSpaces();
        boolean boolean9 = cSVFormat5.getAllowMissingColumnNames();
        boolean boolean10 = cSVFormat5.getAutoFlush();
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path18 = builder17.getPath();
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.MONGODB_TSV;
        java.lang.String str20 = cSVFormat19.toString();
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder29 = builder25.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder30 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder30.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder34 = builder32.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder36 = builder34.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path37 = builder36.getPath();
        org.apache.commons.csv.CSVParser.Builder builder38 = builder29.setPath(path37);
        org.apache.commons.csv.CSVParser.Builder builder39 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption40 = null;
        java.nio.file.OpenOption[] openOptionArray41 = new java.nio.file.OpenOption[] { openOption40 };
        org.apache.commons.csv.CSVParser.Builder builder42 = builder39.setOpenOptions(openOptionArray41);
        org.apache.commons.csv.CSVParser.Builder builder44 = builder39.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder45 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder47 = builder45.setCharacterOffset(0L);
        java.nio.charset.Charset charset48 = builder47.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder49 = builder44.setCharset(charset48);
        org.apache.commons.csv.CSVParser.Builder builder50 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder52 = builder50.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder54 = builder52.setFile("hi!");
        java.nio.charset.Charset charset55 = null;
        org.apache.commons.csv.CSVParser.Builder builder56 = builder54.setCharset(charset55);
        org.apache.commons.csv.CSVParser.Builder builder57 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder59 = builder57.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder61 = builder59.setFile("hi!");
        byte[] byteArray63 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder64 = builder59.setByteArray(byteArray63);
        org.apache.commons.csv.CSVParser.Builder builder65 = builder54.setByteArray(byteArray63);
        org.apache.commons.csv.CSVParser.Builder builder66 = builder49.setByteArray(byteArray63);
        org.apache.commons.csv.CSVParser.Builder builder67 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder69 = builder67.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder70 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder72 = builder70.setCharacterOffset(0L);
        java.nio.charset.Charset charset73 = builder72.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder74 = builder67.setCharset(charset73);
        org.apache.commons.csv.CSVParser.Builder builder75 = builder66.setCharset(charset73);
        org.apache.commons.csv.CSVPrinter cSVPrinter76 = cSVFormat19.print(path37, charset73);
        org.apache.commons.csv.CSVFormat cSVFormat78 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char79 = cSVFormat78.getEscapeCharacter();
        java.lang.String[] strArray80 = cSVFormat78.getHeaderComments();
        boolean boolean81 = cSVFormat78.getIgnoreSurroundingSpaces();
        java.lang.Character char82 = cSVFormat78.getCommentMarker();
        org.apache.commons.csv.CSVParser cSVParser83 = org.apache.commons.csv.CSVParser.parse(path18, charset73, cSVFormat78);
        org.apache.commons.csv.CSVParser.Builder builder84 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder86 = builder84.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder88 = builder86.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder90 = builder88.setCharacterOffset((long) (byte) 10);
        java.nio.charset.Charset charset91 = builder90.getCharset();
        org.apache.commons.csv.CSVPrinter cSVPrinter92 = cSVFormat5.print(path18, charset91);
        org.apache.commons.csv.CSVParser.Builder builder93 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder95 = builder93.setCharacterOffset(0L);
        java.nio.charset.Charset charset96 = builder95.getCharsetDefault();
        org.apache.commons.csv.CSVPrinter cSVPrinter97 = cSVFormat0.print(path18, charset96);
        java.sql.ResultSet resultSet98 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter97.printRecords(resultSet98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(quoteMode1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(path18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str20, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(path37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(openOptionArray41);
        org.junit.Assert.assertArrayEquals(openOptionArray41, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertArrayEquals(byteArray63, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(charset73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(cSVPrinter76);
        org.junit.Assert.assertNotNull(cSVFormat78);
        org.junit.Assert.assertNull(char79);
        org.junit.Assert.assertNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(char82);
        org.junit.Assert.assertNotNull(cSVParser83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(charset91);
        org.junit.Assert.assertNotNull(cSVPrinter92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(charset96);
        org.junit.Assert.assertNotNull(cSVPrinter97);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char24 = cSVFormat23.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("", cSVFormat23);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser25.spliterator();
        java.lang.String str27 = cSVParser25.getHeaderComment();
        java.lang.String str28 = cSVParser25.getFirstEndOfLine();
        cSVPrinter2.print((java.lang.Object) str28);
        cSVPrinter2.println();
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder35 = builder33.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setCharacterOffset((long) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray38 = builder37.getOpenOptions();
        cSVPrinter2.printRecords((java.lang.Object[]) openOptionArray38);
        org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray41 = cSVFormat40.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder42 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat40);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder42.setHeader(strArray44);
        cSVPrinter2.printRecord((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVParser.Builder builder47 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder49 = builder47.setCharacterOffset(0L);
        java.nio.charset.Charset charset50 = builder49.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder52 = builder49.setFile("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        java.nio.file.OpenOption[] openOptionArray53 = builder49.getOpenOptions();
        cSVPrinter2.printRecord((java.lang.Object[]) openOptionArray53);
        cSVPrinter2.close();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(openOptionArray38);
        org.junit.Assert.assertArrayEquals(openOptionArray38, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertArrayEquals(strArray44, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(openOptionArray53);
        org.junit.Assert.assertArrayEquals(openOptionArray53, new java.nio.file.OpenOption[] {});
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        java.lang.Appendable appendable3 = null;
        cSVFormat1.println(appendable3);
        boolean boolean5 = cSVFormat1.isEscapeCharacterSet();
        org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat1.printer();
        org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter9 = cSVFormat8.printer();
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setFile("hi!");
        java.nio.charset.Charset charset15 = null;
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharset(charset15);
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setFile("hi!");
        java.nio.charset.Charset charset23 = null;
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setCharset(charset23);
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray26 = new java.lang.Object[] { builder14, 1L, charset23, predefined25 };
        cSVPrinter9.printRecord(objArray26);
        cSVPrinter9.flush();
        org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char32 = cSVFormat31.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse("", cSVFormat31);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList34 = cSVParser33.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream35 = cSVParser33.stream();
        cSVPrinter9.printRecords(cSVRecordStream35);
        cSVPrinter9.close();
        cSVPrinter9.println();
        cSVPrinter9.printComment("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        cSVPrinter9.close(true);
        org.apache.commons.csv.CSVFormat cSVFormat45 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char46 = cSVFormat45.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser47 = org.apache.commons.csv.CSVParser.parse("", cSVFormat45);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList48 = cSVParser47.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream49 = cSVParser47.stream();
        cSVPrinter9.printRecord(cSVRecordStream49);
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter6.printRecord(cSVRecordStream49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVPrinter6);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVPrinter9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNull(char32);
        org.junit.Assert.assertNotNull(cSVParser33);
        org.junit.Assert.assertNotNull(cSVRecordList34);
        org.junit.Assert.assertNotNull(cSVRecordStream35);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNull(char46);
        org.junit.Assert.assertNotNull(cSVParser47);
        org.junit.Assert.assertNotNull(cSVRecordList48);
        org.junit.Assert.assertNotNull(cSVRecordStream49);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder10.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray16 = cSVFormat15.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder17 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat15);
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder17.setHeader(strArray19);
        org.apache.commons.csv.CSVFormat cSVFormat21 = builder17.get();
        org.apache.commons.csv.CSVParser.Builder builder22 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setFile("hi!");
        java.nio.charset.Charset charset27 = null;
        org.apache.commons.csv.CSVParser.Builder builder28 = builder26.setCharset(charset27);
        java.io.Writer writer29 = builder26.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat31.printer();
        org.apache.commons.csv.CSVParser.Builder builder33 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder33.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setFile("hi!");
        java.nio.charset.Charset charset38 = null;
        org.apache.commons.csv.CSVParser.Builder builder39 = builder37.setCharset(charset38);
        org.apache.commons.csv.CSVParser.Builder builder41 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder41.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder45 = builder43.setFile("hi!");
        java.nio.charset.Charset charset46 = null;
        org.apache.commons.csv.CSVParser.Builder builder47 = builder45.setCharset(charset46);
        org.apache.commons.csv.CSVFormat.Predefined predefined48 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray49 = new java.lang.Object[] { builder37, 1L, charset46, predefined48 };
        cSVPrinter32.printRecord(objArray49);
        cSVFormat21.printRecord((java.lang.Appendable) writer29, objArray49);
        org.apache.commons.csv.CSVParser.Builder builder52 = builder10.setWriter(writer29);
        org.apache.commons.csv.CSVParser.Builder builder53 = builder0.setWriter(writer29);
        java.io.Writer writer54 = builder53.getWriter();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser55 = builder53.getUnchecked();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: WriterOrigin#getPath() for BufferedWriter origin java.io.BufferedWriter@4b2e7d72");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertArrayEquals(strArray19, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(writer29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVPrinter32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + predefined48 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined48.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(writer54);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset(0L);
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder5.setCharset(charset9);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setFile("hi!");
        byte[] byteArray24 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder25 = builder20.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder15.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder10.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharacterOffset(0L);
        java.nio.charset.Charset charset34 = builder33.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder28.setCharset(charset34);
        org.apache.commons.csv.CSVParser.Builder builder36 = builder27.setCharset(charset34);
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file37 = builder27.getFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getFile() for byte[] origin [B@6c129607");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setBufferSizeMax((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Reader reader6 = builder3.getReader();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        java.lang.String str2 = cSVFormat0.getNullString();
        boolean boolean3 = cSVFormat0.getAllowMissingColumnNames();
        java.lang.String str4 = cSVFormat0.getRecordSeparator();
        boolean boolean5 = cSVFormat0.getTrailingDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\r\n" + "'", str4, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("\n");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.?");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char3 = cSVFormat2.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList5 = cSVParser4.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream6 = cSVParser4.stream();
        java.lang.String str7 = cSVParser4.getFirstEndOfLine();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(cSVRecordList5);
        org.junit.Assert.assertNotNull(cSVRecordStream6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(true);
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setHeader(resultSet7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray14 = cSVFormat13.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder15 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat13);
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder15.setHeader(strArray17);
        org.apache.commons.csv.CSVFormat cSVFormat19 = builder15.get();
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setFile("hi!");
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharset(charset25);
        java.io.Writer writer27 = builder24.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter30 = cSVFormat29.printer();
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder35 = builder33.setFile("hi!");
        java.nio.charset.Charset charset36 = null;
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setCharset(charset36);
        org.apache.commons.csv.CSVParser.Builder builder39 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder41 = builder39.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder43 = builder41.setFile("hi!");
        java.nio.charset.Charset charset44 = null;
        org.apache.commons.csv.CSVParser.Builder builder45 = builder43.setCharset(charset44);
        org.apache.commons.csv.CSVFormat.Predefined predefined46 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray47 = new java.lang.Object[] { builder35, 1L, charset44, predefined46 };
        cSVPrinter30.printRecord(objArray47);
        cSVFormat19.printRecord((java.lang.Appendable) writer27, objArray47);
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder12.setHeaderComments(objArray47);
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder12.setCommentMarker((java.lang.Character) 'a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(strArray14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertArrayEquals(strArray17, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(writer27);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNotNull(cSVPrinter30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + predefined46 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined46.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        int int7 = builder4.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder4.setRecordNumber((long) 10);
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharacterOffset(0L);
        org.apache.commons.csv.CSVParser.Builder builder13 = builder9.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setFile("hi!");
        java.nio.charset.Charset charset19 = null;
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharset(charset19);
        java.io.Writer writer21 = builder18.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder18.setCharSequence((java.lang.CharSequence) "");
        java.io.Reader reader24 = builder18.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV;
        org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse(reader24, cSVFormat25);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.MONGODB_TSV;
        java.lang.String str28 = cSVFormat27.toString();
        org.apache.commons.csv.CSVParser cSVParser31 = new org.apache.commons.csv.CSVParser(reader24, cSVFormat27, (long) 1, (long) 1);
        org.apache.commons.csv.CSVParser.Builder builder32 = builder9.setReader(reader24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder34 = builder9.setCharset("");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8192 + "'", int7 == 8192);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(writer21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(reader24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(cSVParser26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str28, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined3 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat4 = predefined3.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setFile("hi!");
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharset(charset10);
        java.io.Writer writer12 = builder9.getWriter();
        cSVFormat4.println((java.lang.Appendable) writer12);
        cSVFormat1.print((java.lang.Object) 10L, (java.lang.Appendable) writer12, true);
        boolean boolean17 = cSVFormat1.equals((java.lang.Object) (byte) 10);
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter20 = cSVFormat19.printer();
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setFile("hi!");
        java.nio.charset.Charset charset26 = null;
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setCharset(charset26);
        org.apache.commons.csv.CSVParser.Builder builder29 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder31 = builder29.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setFile("hi!");
        java.nio.charset.Charset charset34 = null;
        org.apache.commons.csv.CSVParser.Builder builder35 = builder33.setCharset(charset34);
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray37 = new java.lang.Object[] { builder25, 1L, charset34, predefined36 };
        cSVPrinter20.printRecord(objArray37);
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char42 = cSVFormat41.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser43 = org.apache.commons.csv.CSVParser.parse("", cSVFormat41);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator44 = cSVParser43.spliterator();
        java.lang.String str45 = cSVParser43.getHeaderComment();
        java.lang.String str46 = cSVParser43.getFirstEndOfLine();
        cSVPrinter20.print((java.lang.Object) str46);
        org.apache.commons.csv.CSVParser.Builder builder48 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption49 = null;
        java.nio.file.OpenOption[] openOptionArray50 = new java.nio.file.OpenOption[] { openOption49 };
        org.apache.commons.csv.CSVParser.Builder builder51 = builder48.setOpenOptions(openOptionArray50);
        cSVPrinter20.printRecord((java.lang.Object[]) openOptionArray50);
        java.lang.String str53 = cSVFormat1.format((java.lang.Object[]) openOptionArray50);
        boolean boolean54 = cSVFormat1.isNullStringSet();
        boolean boolean55 = cSVFormat1.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + predefined3 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined3.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(writer12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(cSVPrinter20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(char42);
        org.junit.Assert.assertNotNull(cSVParser43);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(openOptionArray50);
        org.junit.Assert.assertArrayEquals(openOptionArray50, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(true);
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setHeader(resultSet7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setQuote((java.lang.Character) ' ');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setCommentMarker((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setCommentMarker((java.lang.Character) 'a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        java.lang.String[] strArray3 = cSVFormat1.getHeaderComments();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        java.lang.Character char5 = cSVFormat1.getQuoteCharacter();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode6 = cSVFormat1.getDuplicateHeaderMode();
        java.lang.String str7 = cSVFormat1.toString();
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder13 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setFile("hi!");
        java.nio.charset.Charset charset18 = null;
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setCharset(charset18);
        java.io.Writer writer20 = builder17.getWriter();
        cSVFormat12.println((java.lang.Appendable) writer20);
        cSVFormat9.print((java.lang.Object) 10L, (java.lang.Appendable) writer20, true);
        org.apache.commons.csv.CSVPrinter cSVPrinter24 = cSVFormat1.print((java.lang.Appendable) writer20);
        java.lang.String[] strArray25 = cSVFormat1.getHeader();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(char5);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode6 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode6.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Delimiter=<4> SkipHeaderRecord:false" + "'", str7, "Delimiter=<4> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(writer20);
        org.junit.Assert.assertNotNull(cSVPrinter24);
        org.junit.Assert.assertNull(strArray25);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        java.util.function.IntUnaryOperator intUnaryOperator7 = null;
        org.apache.commons.csv.CSVParser.Builder builder8 = builder4.setBufferSizeChecker(intUnaryOperator7);
        java.util.function.IntUnaryOperator intUnaryOperator9 = null;
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setBufferSizeChecker(intUnaryOperator9);
        java.io.RandomAccessFile randomAccessFile11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder12 = builder8.setRandomAccessFile(randomAccessFile11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        java.lang.String[] strArray3 = cSVFormat1.getHeaderComments();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        java.lang.Character char5 = cSVFormat1.getQuoteCharacter();
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder10.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder15 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setFile("hi!");
        byte[] byteArray21 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder22 = builder17.setByteArray(byteArray21);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder10.setByteArray(byteArray21);
        int int24 = builder23.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder26 = builder23.setCharacterOffset(1L);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        boolean boolean28 = cSVFormat27.isCommentMarkerSet();
        org.apache.commons.csv.CSVParser.Builder builder29 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder31 = builder29.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setFile("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV;
        org.apache.commons.csv.CSVParser.Builder builder35 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder39 = builder37.setFile("hi!");
        java.io.File file40 = builder39.getFile();
        org.apache.commons.csv.CSVParser.Builder builder41 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder41.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder44 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder46 = builder44.setCharacterOffset(0L);
        java.nio.charset.Charset charset47 = builder46.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder48 = builder41.setCharset(charset47);
        org.apache.commons.csv.CSVPrinter cSVPrinter49 = cSVFormat34.print(file40, charset47);
        org.apache.commons.csv.CSVParser.Builder builder50 = builder31.setFile(file40);
        org.apache.commons.csv.CSVParser.Builder builder51 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder53 = builder51.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder54 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder56 = builder54.setCharacterOffset(0L);
        java.nio.charset.Charset charset57 = builder56.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder58 = builder51.setCharset(charset57);
        org.apache.commons.csv.CSVFormat cSVFormat60 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVParser cSVParser61 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat60);
        org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse(file40, charset57, cSVFormat60);
        org.apache.commons.csv.CSVParser.Builder builder63 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder65 = builder63.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder67 = builder65.setCharSequence((java.lang.CharSequence) "hi!");
        org.apache.commons.csv.CSVParser.Builder builder68 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder70 = builder68.setCharacterOffset(0L);
        java.nio.charset.Charset charset71 = builder70.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder73 = builder70.setFile("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder74 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder76 = builder74.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder78 = builder76.setFile("hi!");
        java.nio.charset.Charset charset79 = null;
        org.apache.commons.csv.CSVParser.Builder builder80 = builder78.setCharset(charset79);
        java.io.OutputStream outputStream81 = builder80.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder82 = builder70.setOutputStream(outputStream81);
        org.apache.commons.csv.CSVParser.Builder builder84 = builder70.setPath("hi!");
        java.io.RandomAccessFile randomAccessFile85 = builder84.getRandomAccessFile();
        org.apache.commons.csv.CSVParser.Builder builder86 = builder65.setRandomAccessFile(randomAccessFile85);
        java.nio.charset.Charset charset87 = builder65.getCharsetDefault();
        org.apache.commons.csv.CSVPrinter cSVPrinter88 = cSVFormat27.print(file40, charset87);
        org.apache.commons.csv.CSVParser.Builder builder89 = builder26.setFile(file40);
        java.nio.charset.Charset charset90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter91 = cSVFormat1.print(file40, charset90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(char5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertArrayEquals(byteArray21, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8192 + "'", int24 == 8192);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(file40);
        org.junit.Assert.assertNull("file40.getParent() == null", file40.getParent());
        org.junit.Assert.assertEquals(file40.toString(), "hi!");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(cSVPrinter49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(charset57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(cSVParser61);
        org.junit.Assert.assertNotNull(cSVParser62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(charset71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(outputStream81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(randomAccessFile85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(charset87);
        org.junit.Assert.assertNotNull(cSVPrinter88);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        cSVPrinter2.flush();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char25 = cSVFormat24.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("", cSVFormat24);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser26.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream28 = cSVParser26.stream();
        cSVPrinter2.printRecords(cSVRecordStream28);
        cSVPrinter2.close();
        cSVPrinter2.println();
        cSVPrinter2.println();
        java.sql.ResultSet resultSet33 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter2.printRecords(resultSet33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNotNull(cSVParser26);
        org.junit.Assert.assertNotNull(cSVRecordList27);
        org.junit.Assert.assertNotNull(cSVRecordStream28);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char6 = cSVFormat5.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("", cSVFormat5);
        java.lang.String str8 = cSVFormat5.getRecordSeparator();
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setFile("hi!");
        java.nio.charset.Charset charset14 = null;
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharset(charset14);
        java.io.Writer writer16 = builder13.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray18 = cSVFormat17.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder19 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat17);
        java.sql.ResultSetMetaData resultSetMetaData20 = null;
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setHeader(resultSetMetaData20);
        java.sql.ResultSet resultSet22 = null;
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setHeader(resultSet22);
        java.sql.ResultSetMetaData resultSetMetaData24 = null;
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setHeader(resultSetMetaData24);
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray27 = cSVFormat26.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder28 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder28.setHeader(strArray30);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder25.setHeaderComments(strArray30);
        cSVFormat5.printRecord((java.lang.Appendable) writer16, (java.lang.Object[]) strArray30);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder0.setWriter(writer16);
        org.apache.commons.csv.CSVParser.Builder builder35 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder39 = builder37.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder41 = builder39.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder43 = builder39.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder44 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder46 = builder44.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setFile("hi!");
        byte[] byteArray50 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder51 = builder46.setByteArray(byteArray50);
        org.apache.commons.csv.CSVParser.Builder builder52 = builder39.setByteArray(byteArray50);
        org.apache.commons.csv.CSVParser.Builder builder53 = builder34.setByteArray(byteArray50);
        java.io.Writer writer54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder55 = builder53.setWriter(writer54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(writer16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNull(strArray27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertArrayEquals(strArray30, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertArrayEquals(byteArray50, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset(0L);
        java.nio.charset.Charset charset3 = builder2.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setFile("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharset(charset11);
        java.io.OutputStream outputStream13 = builder12.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder2.setOutputStream(outputStream13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder2.setPath("hi!");
        java.lang.CharSequence charSequence17 = builder16.getCharSequence();
        java.nio.file.Path path18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder19 = builder16.setPath(path18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(outputStream13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharacterOffset((long) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray13 = builder12.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder5.setOpenOptions(openOptionArray13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharSequence((java.lang.CharSequence) ",");
        org.apache.commons.csv.CSVParser.Builder builder18 = builder14.setBufferSizeMax((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharset("Delimiter=<#> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: Delimiter=<#> SkipHeaderRecord:false");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(openOptionArray13);
        org.junit.Assert.assertArrayEquals(openOptionArray13, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        java.util.function.IntUnaryOperator intUnaryOperator7 = null;
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setBufferSizeChecker(intUnaryOperator7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setCharset("Delimiter=<#> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: Delimiter=<#> SkipHeaderRecord:false");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.QuoteMode quoteMode1 = cSVFormat0.getQuoteMode();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        boolean boolean3 = cSVFormat0.isCommentMarkerSet();
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path16 = builder15.getPath();
        org.apache.commons.csv.CSVFormat.Predefined predefined17 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat18 = predefined17.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder19 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setFile("hi!");
        java.nio.charset.Charset charset24 = null;
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setCharset(charset24);
        java.io.Writer writer26 = builder23.getWriter();
        cSVFormat18.println((java.lang.Appendable) writer26);
        org.apache.commons.csv.CSVParser.Builder builder28 = builder15.setWriter(writer26);
        org.apache.commons.csv.CSVParser.Builder builder29 = builder6.setWriter(writer26);
        cSVFormat0.println((java.lang.Appendable) writer26);
        boolean boolean31 = cSVFormat0.isCommentMarkerSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(quoteMode1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(path16);
        org.junit.Assert.assertTrue("'" + predefined17 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined17.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(writer26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.io.File file5 = builder4.getFile();
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption7 = null;
        java.nio.file.OpenOption[] openOptionArray8 = new java.nio.file.OpenOption[] { openOption7 };
        org.apache.commons.csv.CSVParser.Builder builder9 = builder6.setOpenOptions(openOptionArray8);
        org.apache.commons.csv.CSVParser.Builder builder11 = builder6.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setCharacterOffset(0L);
        java.nio.charset.Charset charset15 = builder14.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder11.setCharset(charset15);
        org.apache.commons.csv.CSVParser.Builder builder17 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setFile("hi!");
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharset(charset22);
        org.apache.commons.csv.CSVParser.Builder builder24 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder28 = builder26.setFile("hi!");
        byte[] byteArray30 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder31 = builder26.setByteArray(byteArray30);
        org.apache.commons.csv.CSVParser.Builder builder32 = builder21.setByteArray(byteArray30);
        org.apache.commons.csv.CSVParser.Builder builder33 = builder16.setByteArray(byteArray30);
        org.apache.commons.csv.CSVParser.Builder builder34 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder36 = builder34.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder37 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder39 = builder37.setCharacterOffset(0L);
        java.nio.charset.Charset charset40 = builder39.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder41 = builder34.setCharset(charset40);
        org.apache.commons.csv.CSVParser.Builder builder42 = builder33.setCharset(charset40);
        org.apache.commons.csv.CSVParser.Builder builder43 = builder4.setCharset(charset40);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier44 = builder4.asSupplier();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertNull("file5.getParent() == null", file5.getParent());
        org.junit.Assert.assertEquals(file5.toString(), "hi!");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(openOptionArray8);
        org.junit.Assert.assertArrayEquals(openOptionArray8, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertArrayEquals(byteArray30, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(cSVParserSupplier44);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        java.net.URL uRL0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder1.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setFile("hi!");
        java.nio.charset.Charset charset6 = null;
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setCharset(charset6);
        int int8 = builder5.getBufferSizeDefault();
        java.io.OutputStream outputStream9 = builder5.getOutputStream();
        java.nio.charset.Charset charset10 = builder5.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray12 = cSVFormat11.getHeader();
        boolean boolean13 = cSVFormat11.getLenientEof();
        boolean boolean14 = cSVFormat11.getIgnoreSurroundingSpaces();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse(uRL0, charset10, cSVFormat11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNotNull(outputStream9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset(0L);
        java.nio.charset.Charset charset3 = builder2.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setFile("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        java.nio.file.OpenOption[] openOptionArray6 = builder2.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder2.setBufferSize((int) (short) 10);
        org.apache.commons.io.IORandomAccessFile iORandomAccessFile9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder10 = builder2.setRandomAccessFile(iORandomAccessFile9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(openOptionArray6);
        org.junit.Assert.assertArrayEquals(openOptionArray6, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        cSVPrinter2.flush();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char25 = cSVFormat24.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("", cSVFormat24);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser26.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream28 = cSVParser26.stream();
        cSVPrinter2.printRecords(cSVRecordStream28);
        cSVPrinter2.close();
        cSVPrinter2.println();
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char35 = cSVFormat34.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse("", cSVFormat34);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator37 = cSVParser36.spliterator();
        java.lang.String str38 = cSVParser36.getHeaderComment();
        java.lang.String str39 = cSVParser36.getFirstEndOfLine();
        boolean boolean40 = cSVParser36.hasHeaderComment();
        cSVPrinter2.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser36);
        cSVPrinter2.close();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNotNull(cSVParser26);
        org.junit.Assert.assertNotNull(cSVRecordList27);
        org.junit.Assert.assertNotNull(cSVRecordStream28);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(char35);
        org.junit.Assert.assertNotNull(cSVParser36);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder4.setTrailingData(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder4.setLenientEof(true);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setQuote('a');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder16.setEscape('a');
        java.sql.ResultSetMetaData resultSetMetaData21 = null;
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setHeader(resultSetMetaData21);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        java.lang.String[] strArray3 = cSVFormat1.getHeaderComments();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        java.lang.Character char5 = cSVFormat1.getQuoteCharacter();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode6 = cSVFormat1.getDuplicateHeaderMode();
        java.lang.String str7 = cSVFormat1.toString();
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder13 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setFile("hi!");
        java.nio.charset.Charset charset18 = null;
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setCharset(charset18);
        java.io.Writer writer20 = builder17.getWriter();
        cSVFormat12.println((java.lang.Appendable) writer20);
        cSVFormat9.print((java.lang.Object) 10L, (java.lang.Appendable) writer20, true);
        org.apache.commons.csv.CSVPrinter cSVPrinter24 = cSVFormat1.print((java.lang.Appendable) writer20);
        long long25 = cSVPrinter24.getRecordCount();
        java.sql.ResultSet resultSet26 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter24.printRecords(resultSet26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(char5);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode6 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode6.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Delimiter=<4> SkipHeaderRecord:false" + "'", str7, "Delimiter=<4> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(writer20);
        org.junit.Assert.assertNotNull(cSVPrinter24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.QuoteMode quoteMode1 = cSVFormat0.getQuoteMode();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        boolean boolean3 = cSVFormat0.isCommentMarkerSet();
        boolean boolean4 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.QuoteMode quoteMode6 = cSVFormat5.getQuoteMode();
        boolean boolean7 = cSVFormat5.isEscapeCharacterSet();
        boolean boolean8 = cSVFormat5.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.QuoteMode quoteMode10 = cSVFormat9.getQuoteMode();
        boolean boolean11 = cSVFormat9.isEscapeCharacterSet();
        boolean boolean12 = cSVFormat9.isCommentMarkerSet();
        java.lang.String str13 = cSVFormat9.toString();
        org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char17 = cSVFormat16.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse("", cSVFormat16);
        java.lang.String str19 = cSVFormat16.getRecordSeparator();
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setFile("hi!");
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharset(charset25);
        java.io.Writer writer27 = builder24.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray29 = cSVFormat28.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder30 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat28);
        java.sql.ResultSetMetaData resultSetMetaData31 = null;
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder30.setHeader(resultSetMetaData31);
        java.sql.ResultSet resultSet33 = null;
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder32.setHeader(resultSet33);
        java.sql.ResultSetMetaData resultSetMetaData35 = null;
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setHeader(resultSetMetaData35);
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray38 = cSVFormat37.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder39 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat37);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder39.setHeader(strArray41);
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder36.setHeaderComments(strArray41);
        cSVFormat16.printRecord((java.lang.Appendable) writer27, (java.lang.Object[]) strArray41);
        cSVFormat9.println((java.lang.Appendable) writer27);
        cSVFormat0.print((java.lang.Object) cSVFormat5, (java.lang.Appendable) writer27, false);
        boolean boolean48 = cSVFormat5.isCommentMarkerSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(quoteMode1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(quoteMode6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(quoteMode10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false" + "'", str13, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(char17);
        org.junit.Assert.assertNotNull(cSVParser18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(writer27);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(strArray29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertArrayEquals(strArray41, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char3 = cSVFormat2.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList5 = cSVParser4.getRecords();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser4.getRecords();
        java.util.List<java.lang.String> strList7 = cSVParser4.getHeaderNames();
        java.lang.Class<?> wildcardClass8 = cSVParser4.getClass();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(cSVRecordList5);
        org.junit.Assert.assertNotNull(cSVRecordList6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder1.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setFile("hi!");
        java.io.File file6 = builder5.getFile();
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharacterOffset(0L);
        java.nio.charset.Charset charset13 = builder12.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder7.setCharset(charset13);
        org.apache.commons.csv.CSVPrinter cSVPrinter15 = cSVFormat0.print(file6, charset13);
        cSVPrinter15.close();
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter19 = cSVFormat18.printer();
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setFile("hi!");
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharset(charset25);
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder32 = builder30.setFile("hi!");
        java.nio.charset.Charset charset33 = null;
        org.apache.commons.csv.CSVParser.Builder builder34 = builder32.setCharset(charset33);
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray36 = new java.lang.Object[] { builder24, 1L, charset33, predefined35 };
        cSVPrinter19.printRecord(objArray36);
        cSVPrinter19.flush();
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char42 = cSVFormat41.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser43 = org.apache.commons.csv.CSVParser.parse("", cSVFormat41);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList44 = cSVParser43.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream45 = cSVParser43.stream();
        cSVPrinter19.printRecords(cSVRecordStream45);
        cSVPrinter19.close();
        cSVPrinter19.println();
        org.apache.commons.csv.CSVFormat cSVFormat51 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char52 = cSVFormat51.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser53 = org.apache.commons.csv.CSVParser.parse("", cSVFormat51);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator54 = cSVParser53.spliterator();
        java.lang.String str55 = cSVParser53.getHeaderComment();
        java.lang.String str56 = cSVParser53.getFirstEndOfLine();
        boolean boolean57 = cSVParser53.hasHeaderComment();
        cSVPrinter19.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser53);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList59 = cSVParser53.getRecords();
        cSVPrinter15.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVRecordList59);
        cSVPrinter15.close();
        cSVPrinter15.close();
        long long63 = cSVPrinter15.getRecordCount();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "hi!");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVPrinter15);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVPrinter19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(char42);
        org.junit.Assert.assertNotNull(cSVParser43);
        org.junit.Assert.assertNotNull(cSVRecordList44);
        org.junit.Assert.assertNotNull(cSVRecordStream45);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNull(char52);
        org.junit.Assert.assertNotNull(cSVParser53);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(cSVRecordList59);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset(0L);
        java.nio.charset.Charset charset3 = builder2.getCharsetDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setCharset("Delimiter=<#> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: Delimiter=<#> SkipHeaderRecord:false");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(charset3);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char3 = cSVFormat2.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser4.spliterator();
        java.lang.String str6 = cSVParser4.getHeaderComment();
        java.lang.String str7 = cSVParser4.getFirstEndOfLine();
        java.util.List<java.lang.String> strList8 = cSVParser4.getHeaderNames();
        java.lang.String str9 = cSVParser4.getTrailerComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream10 = cSVParser4.stream();
        java.lang.String str11 = cSVParser4.getTrailerComment();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(cSVRecordStream10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(true);
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setHeader(resultSet7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setQuote((java.lang.Character) ' ');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder8.setTrailingData(false);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder8.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setRecordSeparator("4");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path7 = builder6.getPath();
        int int8 = builder6.getBufferSize();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(path7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        java.io.Writer writer7 = builder4.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder4.setCharSequence((java.lang.CharSequence) "");
        java.io.Reader reader10 = builder4.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char14 = cSVFormat13.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat13);
        java.lang.String str16 = cSVFormat13.getRecordSeparator();
        org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse(reader10, cSVFormat13);
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        boolean boolean19 = cSVFormat18.isCommentMarkerSet();
        boolean boolean20 = cSVFormat18.isCommentMarkerSet();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode21 = cSVFormat18.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse(reader10, cSVFormat18);
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char25 = cSVFormat24.getEscapeCharacter();
        java.lang.String[] strArray26 = cSVFormat24.getHeaderComments();
        boolean boolean27 = cSVFormat24.isEscapeCharacterSet();
        java.lang.String[] strArray28 = cSVFormat24.getHeaderComments();
        java.lang.Character char29 = cSVFormat24.getQuoteCharacter();
        org.apache.commons.csv.CSVParser cSVParser32 = new org.apache.commons.csv.CSVParser(reader10, cSVFormat24, (long) (byte) 100, (long) 8192);
        java.util.Map<java.lang.String, java.lang.Integer> strMap33 = cSVParser32.getHeaderMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(writer7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(reader10);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(cSVParser15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVParser17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode21 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode21.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVParser22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(strArray28);
        org.junit.Assert.assertNull(char29);
        org.junit.Assert.assertNotNull(strMap33);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        java.io.Writer writer7 = builder4.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder4.setCharSequence((java.lang.CharSequence) "");
        java.io.Reader reader10 = builder4.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT;
        boolean boolean12 = cSVFormat11.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char15 = cSVFormat14.getEscapeCharacter();
        java.lang.String[] strArray16 = cSVFormat14.getHeaderComments();
        boolean boolean17 = cSVFormat14.isEscapeCharacterSet();
        java.lang.String[] strArray18 = cSVFormat14.getHeaderComments();
        boolean boolean19 = cSVFormat14.getLenientEof();
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat21.printer();
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setFile("hi!");
        java.nio.charset.Charset charset28 = null;
        org.apache.commons.csv.CSVParser.Builder builder29 = builder27.setCharset(charset28);
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder35 = builder33.setFile("hi!");
        java.nio.charset.Charset charset36 = null;
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setCharset(charset36);
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray39 = new java.lang.Object[] { builder27, 1L, charset36, predefined38 };
        cSVPrinter22.printRecord(objArray39);
        cSVPrinter22.flush();
        org.apache.commons.csv.CSVFormat cSVFormat44 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char45 = cSVFormat44.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser46 = org.apache.commons.csv.CSVParser.parse("", cSVFormat44);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser46.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream48 = cSVParser46.stream();
        cSVPrinter22.printRecords(cSVRecordStream48);
        java.lang.Appendable appendable50 = cSVPrinter22.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter51 = cSVFormat14.print(appendable50);
        org.apache.commons.csv.CSVPrinter cSVPrinter52 = cSVFormat11.print(appendable50);
        org.apache.commons.csv.CSVParser cSVParser55 = new org.apache.commons.csv.CSVParser(reader10, cSVFormat11, (long) ' ', (long) '\"');
        boolean boolean56 = cSVParser55.isClosed();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(writer7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(reader10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(char15);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVPrinter22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(char45);
        org.junit.Assert.assertNotNull(cSVParser46);
        org.junit.Assert.assertNotNull(cSVRecordList47);
        org.junit.Assert.assertNotNull(cSVRecordStream48);
        org.junit.Assert.assertNotNull(appendable50);
        org.junit.Assert.assertNotNull(cSVPrinter51);
        org.junit.Assert.assertNotNull(cSVPrinter52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSet5);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setQuote('a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setTrailingData(true);
        org.apache.commons.csv.CSVFormat cSVFormat15 = builder14.get();
        java.lang.Character char16 = cSVFormat15.getQuoteCharacter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + char16 + "' != '" + 'a' + "'", char16 == 'a');
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.ORACLE;
        java.lang.Character char1 = cSVFormat0.getEscapeCharacter();
        java.lang.String str2 = cSVFormat0.getNullString();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode3 = cSVFormat0.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char6 = cSVFormat5.getEscapeCharacter();
        java.lang.String[] strArray7 = cSVFormat5.getHeaderComments();
        boolean boolean8 = cSVFormat5.isEscapeCharacterSet();
        java.lang.String[] strArray9 = cSVFormat5.getHeaderComments();
        boolean boolean10 = cSVFormat5.getLenientEof();
        org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat12.printer();
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setFile("hi!");
        java.nio.charset.Charset charset19 = null;
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharset(charset19);
        org.apache.commons.csv.CSVParser.Builder builder22 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setFile("hi!");
        java.nio.charset.Charset charset27 = null;
        org.apache.commons.csv.CSVParser.Builder builder28 = builder26.setCharset(charset27);
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray30 = new java.lang.Object[] { builder18, 1L, charset27, predefined29 };
        cSVPrinter13.printRecord(objArray30);
        cSVPrinter13.flush();
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char36 = cSVFormat35.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser37 = org.apache.commons.csv.CSVParser.parse("", cSVFormat35);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList38 = cSVParser37.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream39 = cSVParser37.stream();
        cSVPrinter13.printRecords(cSVRecordStream39);
        java.lang.Appendable appendable41 = cSVPrinter13.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter42 = cSVFormat5.print(appendable41);
        cSVFormat0.println(appendable41);
        org.apache.commons.csv.CSVFormat cSVFormat44 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray45 = cSVFormat44.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder46 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat44);
        java.sql.ResultSetMetaData resultSetMetaData47 = null;
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder46.setHeader(resultSetMetaData47);
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder48.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder50.setQuote('#');
        org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char55 = cSVFormat54.getEscapeCharacter();
        org.apache.commons.csv.CSVFormat cSVFormat56 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray57 = cSVFormat56.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder58 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat56);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder58.setHeader(strArray60);
        org.apache.commons.csv.CSVFormat cSVFormat62 = builder58.get();
        boolean boolean63 = cSVFormat54.equals((java.lang.Object) builder58);
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder58.setDelimiter('a');
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder65.setTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat.Builder builder69 = builder67.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat cSVFormat70 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray71 = cSVFormat70.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder72 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat70);
        java.sql.ResultSetMetaData resultSetMetaData73 = null;
        org.apache.commons.csv.CSVFormat.Builder builder74 = builder72.setHeader(resultSetMetaData73);
        java.sql.ResultSet resultSet75 = null;
        org.apache.commons.csv.CSVFormat.Builder builder76 = builder74.setHeader(resultSet75);
        java.sql.ResultSetMetaData resultSetMetaData77 = null;
        org.apache.commons.csv.CSVFormat.Builder builder78 = builder76.setHeader(resultSetMetaData77);
        org.apache.commons.csv.CSVFormat cSVFormat79 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray80 = cSVFormat79.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder81 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat79);
        java.lang.String[] strArray83 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder84 = builder81.setHeader(strArray83);
        org.apache.commons.csv.CSVFormat.Builder builder85 = builder78.setHeaderComments(strArray83);
        org.apache.commons.csv.CSVFormat.Builder builder86 = builder69.setHeaderComments((java.lang.Object[]) strArray83);
        org.apache.commons.csv.CSVFormat.Builder builder87 = builder50.setHeader(strArray83);
        java.lang.String str88 = cSVFormat0.format((java.lang.Object[]) strArray83);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + '\\' + "'", char1 == '\\');
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\\N" + "'", str2, "\\N");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode3 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode3.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVPrinter13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNull(char36);
        org.junit.Assert.assertNotNull(cSVParser37);
        org.junit.Assert.assertNotNull(cSVRecordList38);
        org.junit.Assert.assertNotNull(cSVRecordStream39);
        org.junit.Assert.assertNotNull(appendable41);
        org.junit.Assert.assertNotNull(cSVPrinter42);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(strArray45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNull(char55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNull(strArray57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertArrayEquals(strArray60, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertNull(strArray71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNull(strArray80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertArrayEquals(strArray83, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "hi!" + "'", str88, "hi!");
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder2.setHeader(strArray4);
        org.apache.commons.csv.CSVFormat cSVFormat6 = builder2.get();
        boolean boolean7 = cSVFormat6.getSkipHeaderRecord();
        boolean boolean8 = cSVFormat6.getTrailingData();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertArrayEquals(strArray4, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MONGODB_TSV;
        boolean boolean1 = cSVFormat0.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        boolean boolean3 = cSVFormat0.isNullStringSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char3 = cSVFormat2.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        java.util.List<java.lang.String> strList5 = cSVParser4.getHeaderNames();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser4.getRecords();
        boolean boolean7 = cSVParser4.hasTrailerComment();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor8 = cSVParser4.iterator();
        boolean boolean9 = cSVParser4.hasHeaderComment();
        boolean boolean10 = cSVParser4.isClosed();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(cSVRecordList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVRecordItor8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser3 = builder0.getUnchecked();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset(0L);
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder5.setCharset(charset9);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setFile("hi!");
        byte[] byteArray24 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder25 = builder20.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder15.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder10.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharacterOffset(0L);
        java.nio.charset.Charset charset34 = builder33.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder28.setCharset(charset34);
        org.apache.commons.csv.CSVParser.Builder builder36 = builder27.setCharset(charset34);
        org.apache.commons.csv.CSVFormat.Predefined predefined37 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat38 = predefined37.getFormat();
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined37.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder40 = builder36.setFormat(cSVFormat39);
        java.io.InputStream inputStream41 = builder40.getInputStream();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + predefined37 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined37.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(inputStream41);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        java.lang.String[] strArray3 = cSVFormat1.getHeaderComments();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        java.lang.String[] strArray5 = cSVFormat1.getHeaderComments();
        java.lang.Character char6 = cSVFormat1.getQuoteCharacter();
        boolean boolean7 = cSVFormat1.getTrailingData();
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setFile("hi!");
        byte[] byteArray14 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder10.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setBufferSizeMax(1);
        java.io.Reader reader18 = builder17.getReader();
        org.apache.commons.csv.CSVParser cSVParser19 = cSVFormat1.parse(reader18);
        boolean boolean20 = cSVParser19.isClosed();
        boolean boolean21 = cSVParser19.hasTrailerComment();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(reader18);
        org.junit.Assert.assertNotNull(cSVParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        cSVPrinter2.close();
        java.lang.Appendable appendable22 = cSVPrinter2.getOut();
        java.lang.Class<?> wildcardClass23 = cSVPrinter2.getClass();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(appendable22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray4 = cSVFormat3.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder5 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder5.setHeader(strArray7);
        org.apache.commons.csv.CSVFormat cSVFormat9 = builder5.get();
        boolean boolean10 = cSVFormat1.equals((java.lang.Object) builder5);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder5.setDelimiter('a');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder5.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setEscape((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder14.setDelimiter('a');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder14.setRecordSeparator('4');
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder14.setIgnoreSurroundingSpaces(false);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertArrayEquals(strArray7, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset(0L);
        java.nio.charset.Charset charset3 = builder2.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setFile("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharset(charset11);
        java.io.OutputStream outputStream13 = builder12.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder2.setOutputStream(outputStream13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder2.setPath("hi!");
        java.lang.CharSequence charSequence17 = builder16.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        int int19 = builder18.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder18.setFile("");
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setBufferSizeMax((int) (short) -1);
        java.nio.file.Path path24 = builder21.getPath();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder16.setPath(path24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setCharset("\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(outputStream13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8192 + "'", int19 == 8192);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(path24);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setBufferSize((int) '\"');
        java.net.URI uRI5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setURI(uRI5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        java.lang.String[] strArray3 = cSVFormat1.getHeaderComments();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        int int6 = builder5.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder5.setFile("");
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setBufferSizeMax((int) (short) -1);
        java.nio.file.Path path11 = builder8.getPath();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV;
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setFile("hi!");
        java.io.File file19 = builder18.getFile();
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setCharacterOffset(0L);
        java.nio.charset.Charset charset26 = builder25.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder20.setCharset(charset26);
        org.apache.commons.csv.CSVPrinter cSVPrinter28 = cSVFormat13.print(file19, charset26);
        org.apache.commons.csv.CSVParser.Builder builder29 = builder12.setCharset(charset26);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter30 = cSVFormat1.print(path11, charset26);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8192 + "'", int6 == 8192);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(path11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertNull("file19.getParent() == null", file19.getParent());
        org.junit.Assert.assertEquals(file19.toString(), "hi!");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(cSVPrinter28);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char3 = cSVFormat2.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList5 = cSVParser4.getRecords();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVRecordList5.spliterator();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(cSVRecordList5);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator6);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder7 = builder2.setByteArray(byteArray6);
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setBufferSizeMax(1);
        java.nio.charset.Charset charset10 = builder7.getCharsetDefault();
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier11 = builder7.asSupplier();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(cSVParserSupplier11);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setPath("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException; message: Illegal char <<> at index 10: Delimiter=<,> QuoteChar=<\"> RecordSeparator=<??> SkipHeaderRecord:false");
        } catch (java.nio.file.InvalidPathException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char3 = cSVFormat2.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        java.util.List<java.lang.String> strList5 = cSVParser4.getHeaderNames();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser4.getRecords();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor7 = cSVParser4.iterator();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(cSVRecordList6);
        org.junit.Assert.assertNotNull(cSVRecordItor7);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSet5);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setRecordSeparator("Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setTrailingData(false);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setLenientEof(true);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setIgnoreHeaderCase(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.QuoteMode quoteMode1 = cSVFormat0.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char4 = cSVFormat3.getEscapeCharacter();
        java.lang.String[] strArray5 = cSVFormat3.getHeaderComments();
        boolean boolean6 = cSVFormat3.isEscapeCharacterSet();
        java.lang.String[] strArray7 = cSVFormat3.getHeaderComments();
        boolean boolean8 = cSVFormat3.getLenientEof();
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat10.printer();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setFile("hi!");
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharset(charset17);
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setFile("hi!");
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharset(charset25);
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray28 = new java.lang.Object[] { builder16, 1L, charset25, predefined27 };
        cSVPrinter11.printRecord(objArray28);
        cSVPrinter11.flush();
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char34 = cSVFormat33.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse("", cSVFormat33);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList36 = cSVParser35.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream37 = cSVParser35.stream();
        cSVPrinter11.printRecords(cSVRecordStream37);
        java.lang.Appendable appendable39 = cSVPrinter11.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter40 = cSVFormat3.print(appendable39);
        org.apache.commons.csv.CSVParser.Builder builder41 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder41.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder45 = builder43.setFile("hi!");
        java.nio.charset.Charset charset46 = null;
        org.apache.commons.csv.CSVParser.Builder builder47 = builder45.setCharset(charset46);
        java.io.Writer writer48 = builder45.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder50 = builder45.setCharSequence((java.lang.CharSequence) "");
        java.io.Reader reader51 = builder45.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char55 = cSVFormat54.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser56 = org.apache.commons.csv.CSVParser.parse("", cSVFormat54);
        java.lang.String str57 = cSVFormat54.getRecordSeparator();
        org.apache.commons.csv.CSVParser cSVParser58 = org.apache.commons.csv.CSVParser.parse(reader51, cSVFormat54);
        org.apache.commons.csv.CSVFormat cSVFormat60 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char61 = cSVFormat60.getEscapeCharacter();
        java.lang.String[] strArray62 = cSVFormat60.getHeaderComments();
        boolean boolean63 = cSVFormat60.isEscapeCharacterSet();
        java.lang.String[] strArray64 = cSVFormat60.getHeaderComments();
        boolean boolean65 = cSVFormat60.getLenientEof();
        org.apache.commons.csv.CSVFormat cSVFormat68 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char69 = cSVFormat68.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser70 = org.apache.commons.csv.CSVParser.parse("", cSVFormat68);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator71 = cSVParser70.spliterator();
        java.lang.String str72 = cSVParser70.getHeaderComment();
        java.lang.String str73 = cSVParser70.getFirstEndOfLine();
        boolean boolean74 = cSVParser70.hasHeaderComment();
        boolean boolean75 = cSVFormat60.equals((java.lang.Object) cSVParser70);
        org.apache.commons.csv.CSVParser cSVParser78 = new org.apache.commons.csv.CSVParser(reader51, cSVFormat60, (long) (byte) 10, 10L);
        org.apache.commons.csv.CSVParser cSVParser79 = cSVFormat3.parse(reader51);
        org.apache.commons.csv.CSVParser cSVParser80 = cSVFormat0.parse(reader51);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator81 = cSVParser80.spliterator();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(quoteMode1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVPrinter11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(char34);
        org.junit.Assert.assertNotNull(cSVParser35);
        org.junit.Assert.assertNotNull(cSVRecordList36);
        org.junit.Assert.assertNotNull(cSVRecordStream37);
        org.junit.Assert.assertNotNull(appendable39);
        org.junit.Assert.assertNotNull(cSVPrinter40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(writer48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(reader51);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNull(char55);
        org.junit.Assert.assertNotNull(cSVParser56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(cSVParser58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNull(char61);
        org.junit.Assert.assertNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertNull(char69);
        org.junit.Assert.assertNotNull(cSVParser70);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(cSVParser79);
        org.junit.Assert.assertNotNull(cSVParser80);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator81);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder8 = builder4.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray10 = cSVFormat9.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat9);
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder11.setHeader(strArray13);
        org.apache.commons.csv.CSVFormat cSVFormat15 = builder11.get();
        org.apache.commons.csv.CSVParser.Builder builder16 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setFile("hi!");
        java.nio.charset.Charset charset21 = null;
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharset(charset21);
        java.io.Writer writer23 = builder20.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat25.printer();
        org.apache.commons.csv.CSVParser.Builder builder27 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder27.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder31 = builder29.setFile("hi!");
        java.nio.charset.Charset charset32 = null;
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharset(charset32);
        org.apache.commons.csv.CSVParser.Builder builder35 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder39 = builder37.setFile("hi!");
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.csv.CSVParser.Builder builder41 = builder39.setCharset(charset40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray43 = new java.lang.Object[] { builder31, 1L, charset40, predefined42 };
        cSVPrinter26.printRecord(objArray43);
        cSVFormat15.printRecord((java.lang.Appendable) writer23, objArray43);
        org.apache.commons.csv.CSVParser.Builder builder46 = builder4.setWriter(writer23);
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setFile("Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Predefined predefined49 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat50 = predefined49.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder51 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder53 = builder51.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder55 = builder53.setFile("hi!");
        java.nio.charset.Charset charset56 = null;
        org.apache.commons.csv.CSVParser.Builder builder57 = builder55.setCharset(charset56);
        java.io.Writer writer58 = builder55.getWriter();
        cSVFormat50.println((java.lang.Appendable) writer58);
        org.apache.commons.csv.CSVParser.Builder builder60 = builder48.setWriter(writer58);
        java.net.URI uRI61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder62 = builder60.setURI(uRI61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertArrayEquals(strArray13, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(writer23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(cSVPrinter26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + predefined49 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined49.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(writer58);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder7 = builder2.setByteArray(byteArray6);
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setBufferSizeMax(1);
        java.io.Reader reader10 = builder9.getReader();
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder15.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path27 = builder26.getPath();
        org.apache.commons.csv.CSVParser.Builder builder28 = builder19.setPath(path27);
        org.apache.commons.csv.CSVParser.Builder builder29 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder31 = builder29.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setFile("hi!");
        byte[] byteArray35 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder36 = builder31.setByteArray(byteArray35);
        org.apache.commons.csv.CSVParser.Builder builder37 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder39 = builder37.setCharacterOffset(0L);
        java.nio.charset.Charset charset40 = builder39.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder41 = builder36.setCharset(charset40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined42.getFormat();
        org.apache.commons.csv.CSVParser cSVParser45 = org.apache.commons.csv.CSVParser.parse(path27, charset40, cSVFormat44);
        org.apache.commons.csv.CSVParser cSVParser48 = new org.apache.commons.csv.CSVParser(reader10, cSVFormat44, (long) (byte) 10, (long) '\"');
        java.lang.Character char49 = cSVFormat44.getQuoteCharacter();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(reader10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(path27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertArrayEquals(byteArray35, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVParser45);
        org.junit.Assert.assertTrue("'" + char49 + "' != '" + '\"' + "'", char49 == '\"');
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder4.setTrailingData(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder4.setLenientEof(true);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        boolean boolean18 = cSVFormat17.isCommentMarkerSet();
        boolean boolean19 = cSVFormat17.isCommentMarkerSet();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode20 = cSVFormat17.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder16.setDuplicateHeaderMode(duplicateHeaderMode20);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder16.setCommentMarker((java.lang.Character) ' ');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode20 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode20.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset(0L);
        java.nio.charset.Charset charset3 = builder2.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setFile("hi!");
        byte[] byteArray10 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder11 = builder6.setByteArray(byteArray10);
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setBufferSizeMax(1);
        java.io.Reader reader14 = builder13.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.ORACLE;
        boolean boolean16 = cSVFormat15.isCommentMarkerSet();
        org.apache.commons.csv.CSVParser cSVParser19 = new org.apache.commons.csv.CSVParser(reader14, cSVFormat15, (long) (byte) 1, (long) '#');
        org.apache.commons.csv.CSVParser.Builder builder20 = builder2.setReader(reader14);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder22 = builder2.setCharset("4");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: 4");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertArrayEquals(byteArray10, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(reader14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder7 = builder2.setByteArray(byteArray6);
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setBufferSizeMax(1);
        java.nio.charset.Charset charset10 = builder7.getCharsetDefault();
        java.util.function.IntUnaryOperator intUnaryOperator11 = null;
        org.apache.commons.csv.CSVParser.Builder builder12 = builder7.setBufferSizeChecker(intUnaryOperator11);
        org.apache.commons.io.IORandomAccessFile iORandomAccessFile13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder14 = builder7.setRandomAccessFile(iORandomAccessFile13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MYSQL;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MYSQL + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MYSQL));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        cSVPrinter2.flush();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char25 = cSVFormat24.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("", cSVFormat24);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser26.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream28 = cSVParser26.stream();
        cSVPrinter2.printRecords(cSVRecordStream28);
        cSVPrinter2.close();
        cSVPrinter2.println();
        cSVPrinter2.printComment("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        cSVPrinter2.close(true);
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char38 = cSVFormat37.getEscapeCharacter();
        java.lang.String[] strArray39 = cSVFormat37.getHeaderComments();
        boolean boolean40 = cSVFormat37.isEscapeCharacterSet();
        java.lang.String[] strArray41 = cSVFormat37.getHeaderComments();
        java.lang.Character char42 = cSVFormat37.getQuoteCharacter();
        boolean boolean43 = cSVFormat37.getTrailingData();
        org.apache.commons.csv.CSVParser.Builder builder44 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder46 = builder44.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setFile("hi!");
        byte[] byteArray50 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder51 = builder46.setByteArray(byteArray50);
        org.apache.commons.csv.CSVParser.Builder builder53 = builder51.setBufferSizeMax(1);
        java.io.Reader reader54 = builder53.getReader();
        org.apache.commons.csv.CSVParser cSVParser55 = cSVFormat37.parse(reader54);
        cSVPrinter2.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser55);
        java.sql.ResultSet resultSet57 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter2.printRecords(resultSet57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNotNull(cSVParser26);
        org.junit.Assert.assertNotNull(cSVRecordList27);
        org.junit.Assert.assertNotNull(cSVRecordStream28);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNull(char38);
        org.junit.Assert.assertNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertNull(char42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertArrayEquals(byteArray50, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(reader54);
        org.junit.Assert.assertNotNull(cSVParser55);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        java.lang.String[] strArray3 = cSVFormat1.getHeaderComments();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        java.lang.Character char5 = cSVFormat1.getQuoteCharacter();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode6 = cSVFormat1.getDuplicateHeaderMode();
        java.lang.String str7 = cSVFormat1.toString();
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder13 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setFile("hi!");
        java.nio.charset.Charset charset18 = null;
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setCharset(charset18);
        java.io.Writer writer20 = builder17.getWriter();
        cSVFormat12.println((java.lang.Appendable) writer20);
        cSVFormat9.print((java.lang.Object) 10L, (java.lang.Appendable) writer20, true);
        org.apache.commons.csv.CSVPrinter cSVPrinter24 = cSVFormat9.printer();
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char28 = cSVFormat27.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser29 = org.apache.commons.csv.CSVParser.parse("", cSVFormat27);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator30 = cSVParser29.spliterator();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList31 = cSVParser29.getRecords();
        cSVPrinter24.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVRecordList31);
        java.lang.Appendable appendable33 = cSVPrinter24.getOut();
        cSVFormat1.println(appendable33);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(char5);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode6 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode6.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Delimiter=<4> SkipHeaderRecord:false" + "'", str7, "Delimiter=<4> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(writer20);
        org.junit.Assert.assertNotNull(cSVPrinter24);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNull(char28);
        org.junit.Assert.assertNotNull(cSVParser29);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator30);
        org.junit.Assert.assertNotNull(cSVRecordList31);
        org.junit.Assert.assertNotNull(appendable33);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        java.io.Writer writer7 = builder4.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder4.setCharSequence((java.lang.CharSequence) "");
        java.io.Reader reader10 = builder4.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT;
        boolean boolean12 = cSVFormat11.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char15 = cSVFormat14.getEscapeCharacter();
        java.lang.String[] strArray16 = cSVFormat14.getHeaderComments();
        boolean boolean17 = cSVFormat14.isEscapeCharacterSet();
        java.lang.String[] strArray18 = cSVFormat14.getHeaderComments();
        boolean boolean19 = cSVFormat14.getLenientEof();
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat21.printer();
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setFile("hi!");
        java.nio.charset.Charset charset28 = null;
        org.apache.commons.csv.CSVParser.Builder builder29 = builder27.setCharset(charset28);
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder35 = builder33.setFile("hi!");
        java.nio.charset.Charset charset36 = null;
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setCharset(charset36);
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray39 = new java.lang.Object[] { builder27, 1L, charset36, predefined38 };
        cSVPrinter22.printRecord(objArray39);
        cSVPrinter22.flush();
        org.apache.commons.csv.CSVFormat cSVFormat44 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char45 = cSVFormat44.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser46 = org.apache.commons.csv.CSVParser.parse("", cSVFormat44);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser46.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream48 = cSVParser46.stream();
        cSVPrinter22.printRecords(cSVRecordStream48);
        java.lang.Appendable appendable50 = cSVPrinter22.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter51 = cSVFormat14.print(appendable50);
        org.apache.commons.csv.CSVPrinter cSVPrinter52 = cSVFormat11.print(appendable50);
        org.apache.commons.csv.CSVParser cSVParser55 = new org.apache.commons.csv.CSVParser(reader10, cSVFormat11, (long) ' ', (long) '\"');
        org.apache.commons.csv.CSVFormat cSVFormat56 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.apache.commons.csv.CSVParser cSVParser59 = new org.apache.commons.csv.CSVParser(reader10, cSVFormat56, (long) (short) 1, (long) '\"');
        java.lang.String str60 = cSVParser59.getTrailerComment();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(writer7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(reader10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(char15);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVPrinter22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(char45);
        org.junit.Assert.assertNotNull(cSVParser46);
        org.junit.Assert.assertNotNull(cSVRecordList47);
        org.junit.Assert.assertNotNull(cSVRecordStream48);
        org.junit.Assert.assertNotNull(appendable50);
        org.junit.Assert.assertNotNull(cSVPrinter51);
        org.junit.Assert.assertNotNull(cSVPrinter52);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset(0L);
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder5.setCharset(charset9);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setFile("hi!");
        byte[] byteArray24 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder25 = builder20.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder15.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder10.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharacterOffset(0L);
        java.nio.charset.Charset charset34 = builder33.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder28.setCharset(charset34);
        org.apache.commons.csv.CSVParser.Builder builder36 = builder27.setCharset(charset34);
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray38 = cSVFormat37.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder39 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat37);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder39.setHeader(strArray41);
        org.apache.commons.csv.CSVFormat cSVFormat43 = builder39.get();
        org.apache.commons.csv.CSVParser.Builder builder44 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder46 = builder44.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setFile("hi!");
        java.nio.charset.Charset charset49 = null;
        org.apache.commons.csv.CSVParser.Builder builder50 = builder48.setCharset(charset49);
        java.io.Writer writer51 = builder48.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat53 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter54 = cSVFormat53.printer();
        org.apache.commons.csv.CSVParser.Builder builder55 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder57 = builder55.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder59 = builder57.setFile("hi!");
        java.nio.charset.Charset charset60 = null;
        org.apache.commons.csv.CSVParser.Builder builder61 = builder59.setCharset(charset60);
        org.apache.commons.csv.CSVParser.Builder builder63 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder65 = builder63.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder67 = builder65.setFile("hi!");
        java.nio.charset.Charset charset68 = null;
        org.apache.commons.csv.CSVParser.Builder builder69 = builder67.setCharset(charset68);
        org.apache.commons.csv.CSVFormat.Predefined predefined70 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray71 = new java.lang.Object[] { builder59, 1L, charset68, predefined70 };
        cSVPrinter54.printRecord(objArray71);
        cSVFormat43.printRecord((java.lang.Appendable) writer51, objArray71);
        boolean boolean74 = cSVFormat43.isCommentMarkerSet();
        org.apache.commons.csv.CSVParser.Builder builder75 = builder36.setFormat(cSVFormat43);
        org.apache.commons.csv.CSVParser.Builder builder77 = builder36.setCharacterOffset((long) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder79 = builder36.setCharset("4");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: 4");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertArrayEquals(strArray41, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(writer51);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(cSVPrinter54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + predefined70 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined70.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        int int1 = builder0.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setFile("");
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setFile("hi!");
        java.nio.charset.Charset charset9 = null;
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setCharset(charset9);
        java.io.Writer writer11 = builder8.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder8.setCharSequence((java.lang.CharSequence) "");
        java.io.Reader reader14 = builder8.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char18 = cSVFormat17.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser19 = org.apache.commons.csv.CSVParser.parse("", cSVFormat17);
        java.lang.String str20 = cSVFormat17.getRecordSeparator();
        org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse(reader14, cSVFormat17);
        org.apache.commons.csv.CSVParser.Builder builder22 = builder0.setReader(reader14);
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setFile("hi!");
        byte[] byteArray29 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder30 = builder25.setByteArray(byteArray29);
        org.apache.commons.csv.CSVParser.Builder builder31 = builder0.setByteArray(byteArray29);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path32 = builder31.getPath();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getPath() for byte[] origin [B@110e4aa");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(writer11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(reader14);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(char18);
        org.junit.Assert.assertNotNull(cSVParser19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVParser21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertArrayEquals(byteArray29, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        boolean boolean1 = cSVFormat0.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char4 = cSVFormat3.getEscapeCharacter();
        java.lang.String[] strArray5 = cSVFormat3.getHeaderComments();
        boolean boolean6 = cSVFormat3.isEscapeCharacterSet();
        java.lang.String[] strArray7 = cSVFormat3.getHeaderComments();
        boolean boolean8 = cSVFormat3.getLenientEof();
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat10.printer();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setFile("hi!");
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharset(charset17);
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setFile("hi!");
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharset(charset25);
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray28 = new java.lang.Object[] { builder16, 1L, charset25, predefined27 };
        cSVPrinter11.printRecord(objArray28);
        cSVPrinter11.flush();
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char34 = cSVFormat33.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse("", cSVFormat33);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList36 = cSVParser35.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream37 = cSVParser35.stream();
        cSVPrinter11.printRecords(cSVRecordStream37);
        java.lang.Appendable appendable39 = cSVPrinter11.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter40 = cSVFormat3.print(appendable39);
        org.apache.commons.csv.CSVPrinter cSVPrinter41 = cSVFormat0.print(appendable39);
        java.sql.ResultSet resultSet42 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter41.printRecords(resultSet42, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVPrinter11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(char34);
        org.junit.Assert.assertNotNull(cSVParser35);
        org.junit.Assert.assertNotNull(cSVRecordList36);
        org.junit.Assert.assertNotNull(cSVRecordStream37);
        org.junit.Assert.assertNotNull(appendable39);
        org.junit.Assert.assertNotNull(cSVPrinter40);
        org.junit.Assert.assertNotNull(cSVPrinter41);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setRecordNumber((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharset(charset11);
        org.apache.commons.csv.CSVParser.Builder builder13 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setFile("hi!");
        byte[] byteArray19 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder20 = builder15.setByteArray(byteArray19);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder10.setByteArray(byteArray19);
        org.apache.commons.csv.CSVParser.Builder builder22 = builder5.setByteArray(byteArray19);
        org.apache.commons.csv.CSVParser.Builder builder24 = builder5.setBufferSize((java.lang.Integer) (-1));
        java.util.function.IntUnaryOperator intUnaryOperator25 = null;
        org.apache.commons.csv.CSVParser.Builder builder26 = builder5.setBufferSizeChecker(intUnaryOperator25);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertArrayEquals(byteArray19, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder7 = builder2.setByteArray(byteArray6);
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setFile("hi!");
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setCharset(charset13);
        java.io.Writer writer15 = builder12.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder17 = builder12.setCharSequence((java.lang.CharSequence) "");
        java.io.Reader reader18 = builder12.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char22 = cSVFormat21.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("", cSVFormat21);
        java.lang.String str24 = cSVFormat21.getRecordSeparator();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse(reader18, cSVFormat21);
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        boolean boolean27 = cSVFormat26.isCommentMarkerSet();
        boolean boolean28 = cSVFormat26.isCommentMarkerSet();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode29 = cSVFormat26.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse(reader18, cSVFormat26);
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char33 = cSVFormat32.getEscapeCharacter();
        java.lang.String[] strArray34 = cSVFormat32.getHeaderComments();
        boolean boolean35 = cSVFormat32.isEscapeCharacterSet();
        java.lang.String[] strArray36 = cSVFormat32.getHeaderComments();
        java.lang.Character char37 = cSVFormat32.getQuoteCharacter();
        org.apache.commons.csv.CSVParser cSVParser40 = new org.apache.commons.csv.CSVParser(reader18, cSVFormat32, (long) (byte) 100, (long) 8192);
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.QuoteMode quoteMode42 = cSVFormat41.getQuoteMode();
        boolean boolean43 = cSVFormat41.isEscapeCharacterSet();
        boolean boolean44 = cSVFormat41.isCommentMarkerSet();
        java.lang.String str45 = cSVFormat41.toString();
        org.apache.commons.csv.CSVParser cSVParser48 = new org.apache.commons.csv.CSVParser(reader18, cSVFormat41, (long) (short) 100, (long) (byte) -1);
        org.apache.commons.csv.CSVParser.Builder builder49 = builder2.setReader(reader18);
        java.nio.charset.Charset charset50 = builder2.getCharset();
        org.apache.commons.io.IORandomAccessFile iORandomAccessFile51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder52 = builder2.setRandomAccessFile(iORandomAccessFile51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(writer15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(reader18);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(char22);
        org.junit.Assert.assertNotNull(cSVParser23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode29 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode29.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVParser30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(char33);
        org.junit.Assert.assertNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(strArray36);
        org.junit.Assert.assertNull(char37);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(quoteMode42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false" + "'", str45, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(charset50);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder8 = builder4.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray10 = cSVFormat9.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat9);
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder11.setHeader(strArray13);
        org.apache.commons.csv.CSVFormat cSVFormat15 = builder11.get();
        org.apache.commons.csv.CSVParser.Builder builder16 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setFile("hi!");
        java.nio.charset.Charset charset21 = null;
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharset(charset21);
        java.io.Writer writer23 = builder20.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat25.printer();
        org.apache.commons.csv.CSVParser.Builder builder27 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder27.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder31 = builder29.setFile("hi!");
        java.nio.charset.Charset charset32 = null;
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharset(charset32);
        org.apache.commons.csv.CSVParser.Builder builder35 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder39 = builder37.setFile("hi!");
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.csv.CSVParser.Builder builder41 = builder39.setCharset(charset40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray43 = new java.lang.Object[] { builder31, 1L, charset40, predefined42 };
        cSVPrinter26.printRecord(objArray43);
        cSVFormat15.printRecord((java.lang.Appendable) writer23, objArray43);
        org.apache.commons.csv.CSVParser.Builder builder46 = builder4.setWriter(writer23);
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setFile("Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Predefined predefined49 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat50 = predefined49.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder51 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder53 = builder51.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder55 = builder53.setFile("hi!");
        java.nio.charset.Charset charset56 = null;
        org.apache.commons.csv.CSVParser.Builder builder57 = builder55.setCharset(charset56);
        java.io.Writer writer58 = builder55.getWriter();
        cSVFormat50.println((java.lang.Appendable) writer58);
        org.apache.commons.csv.CSVParser.Builder builder60 = builder48.setWriter(writer58);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Reader reader61 = builder60.getReader();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: WriterOrigin#getPath() for BufferedWriter origin java.io.BufferedWriter@120d6faa");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertArrayEquals(strArray13, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(writer23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(cSVPrinter26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + predefined49 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined49.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(writer58);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset(0L);
        java.nio.charset.Charset charset3 = builder2.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setFile("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        java.nio.file.OpenOption[] openOptionArray6 = builder2.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder2.setCharacterOffset((-1L));
        // The following exception was thrown during execution in test generation
        try {
            java.io.Writer writer9 = builder8.getWriter();
            org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException; message: Illegal char <<> at index 10: Delimiter=<?> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false");
        } catch (java.nio.file.InvalidPathException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(openOptionArray6);
        org.junit.Assert.assertArrayEquals(openOptionArray6, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSet5);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode9 = org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setDuplicateHeaderMode(duplicateHeaderMode9);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder8.setRecordSeparator("Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder8.setNullString("hi!");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode9 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY + "'", duplicateHeaderMode9.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder7 = builder2.setByteArray(byteArray6);
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setBufferSizeMax(1);
        java.io.Reader reader10 = builder9.getReader();
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        java.io.OutputStream outputStream18 = builder17.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder9.setOutputStream(outputStream18);
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setFile("hi!");
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharset(charset25);
        java.io.Writer writer27 = builder24.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder24.setCharSequence((java.lang.CharSequence) "");
        java.io.InputStream inputStream30 = builder29.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder31 = builder19.setInputStream(inputStream30);
        org.apache.commons.csv.CSVParser.Builder builder32 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder34 = builder32.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder36 = builder34.setFile("hi!");
        java.nio.charset.Charset charset37 = null;
        org.apache.commons.csv.CSVParser.Builder builder38 = builder36.setCharset(charset37);
        int int39 = builder36.getBufferSizeDefault();
        java.nio.file.Path path40 = builder36.getPath();
        org.apache.commons.csv.CSVParser.Builder builder41 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder41.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder45 = builder43.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder47 = builder45.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder49 = builder45.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder50 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder52 = builder50.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder54 = builder52.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder56 = builder54.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path57 = builder56.getPath();
        org.apache.commons.csv.CSVParser.Builder builder58 = builder49.setPath(path57);
        org.apache.commons.csv.CSVParser.Builder builder59 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder61 = builder59.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder63 = builder61.setFile("hi!");
        byte[] byteArray65 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder66 = builder61.setByteArray(byteArray65);
        org.apache.commons.csv.CSVParser.Builder builder67 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder69 = builder67.setCharacterOffset(0L);
        java.nio.charset.Charset charset70 = builder69.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder71 = builder66.setCharset(charset70);
        org.apache.commons.csv.CSVFormat.Predefined predefined72 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat73 = predefined72.getFormat();
        org.apache.commons.csv.CSVFormat cSVFormat74 = predefined72.getFormat();
        org.apache.commons.csv.CSVParser cSVParser75 = org.apache.commons.csv.CSVParser.parse(path57, charset70, cSVFormat74);
        org.apache.commons.csv.CSVFormat cSVFormat77 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char78 = cSVFormat77.getEscapeCharacter();
        java.lang.String[] strArray79 = cSVFormat77.getHeaderComments();
        boolean boolean80 = cSVFormat77.isEscapeCharacterSet();
        java.lang.Character char81 = cSVFormat77.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser82 = org.apache.commons.csv.CSVParser.parse(path40, charset70, cSVFormat77);
        org.apache.commons.csv.CSVFormat cSVFormat85 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char86 = cSVFormat85.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser87 = org.apache.commons.csv.CSVParser.parse("", cSVFormat85);
        org.apache.commons.csv.CSVParser cSVParser88 = org.apache.commons.csv.CSVParser.parse(inputStream30, charset70, cSVFormat85);
        java.lang.Character char89 = cSVFormat85.getEscapeCharacter();
        java.lang.String str90 = cSVFormat85.toString();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(reader10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(outputStream18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(writer27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(inputStream30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8192 + "'", int39 == 8192);
        org.junit.Assert.assertNotNull(path40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(path57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertArrayEquals(byteArray65, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(charset70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + predefined72 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined72.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat73);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNotNull(cSVParser75);
        org.junit.Assert.assertNotNull(cSVFormat77);
        org.junit.Assert.assertNull(char78);
        org.junit.Assert.assertNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(char81);
        org.junit.Assert.assertNotNull(cSVParser82);
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertNull(char86);
        org.junit.Assert.assertNotNull(cSVParser87);
        org.junit.Assert.assertNotNull(cSVParser88);
        org.junit.Assert.assertNull(char89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Delimiter=<4> SkipHeaderRecord:false" + "'", str90, "Delimiter=<4> SkipHeaderRecord:false");
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setBufferSize(0);
        org.apache.commons.io.IORandomAccessFile iORandomAccessFile8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder9 = builder5.setRandomAccessFile(iORandomAccessFile8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        java.util.function.IntUnaryOperator intUnaryOperator7 = null;
        org.apache.commons.csv.CSVParser.Builder builder8 = builder4.setBufferSizeChecker(intUnaryOperator7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder4.setBufferSize((int) (byte) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        java.lang.Appendable appendable3 = null;
        cSVFormat1.println(appendable3);
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path12 = builder11.getPath();
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder15 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setFile("hi!");
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setCharset(charset20);
        java.io.Writer writer22 = builder19.getWriter();
        cSVFormat14.println((java.lang.Appendable) writer22);
        org.apache.commons.csv.CSVParser.Builder builder24 = builder11.setWriter(writer22);
        cSVFormat1.println((java.lang.Appendable) writer22);
        org.apache.commons.csv.CSVParser.Builder builder26 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder28 = builder26.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder32 = builder30.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder30.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray36 = cSVFormat35.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder37 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat35);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder37.setHeader(strArray39);
        org.apache.commons.csv.CSVFormat cSVFormat41 = builder37.get();
        org.apache.commons.csv.CSVParser.Builder builder42 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder44 = builder42.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder46 = builder44.setFile("hi!");
        java.nio.charset.Charset charset47 = null;
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setCharset(charset47);
        java.io.Writer writer49 = builder46.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat51 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter52 = cSVFormat51.printer();
        org.apache.commons.csv.CSVParser.Builder builder53 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder55 = builder53.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder57 = builder55.setFile("hi!");
        java.nio.charset.Charset charset58 = null;
        org.apache.commons.csv.CSVParser.Builder builder59 = builder57.setCharset(charset58);
        org.apache.commons.csv.CSVParser.Builder builder61 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder63 = builder61.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder65 = builder63.setFile("hi!");
        java.nio.charset.Charset charset66 = null;
        org.apache.commons.csv.CSVParser.Builder builder67 = builder65.setCharset(charset66);
        org.apache.commons.csv.CSVFormat.Predefined predefined68 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray69 = new java.lang.Object[] { builder57, 1L, charset66, predefined68 };
        cSVPrinter52.printRecord(objArray69);
        cSVFormat41.printRecord((java.lang.Appendable) writer49, objArray69);
        org.apache.commons.csv.CSVParser.Builder builder72 = builder30.setWriter(writer49);
        org.apache.commons.csv.CSVParser.Builder builder74 = builder72.setFile("Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Predefined predefined75 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat76 = predefined75.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder77 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder79 = builder77.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder81 = builder79.setFile("hi!");
        java.nio.charset.Charset charset82 = null;
        org.apache.commons.csv.CSVParser.Builder builder83 = builder81.setCharset(charset82);
        java.io.Writer writer84 = builder81.getWriter();
        cSVFormat76.println((java.lang.Appendable) writer84);
        org.apache.commons.csv.CSVParser.Builder builder86 = builder74.setWriter(writer84);
        org.apache.commons.csv.CSVParser.Builder builder87 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder89 = builder87.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder91 = builder89.setFile("hi!");
        java.nio.charset.Charset charset92 = null;
        org.apache.commons.csv.CSVParser.Builder builder93 = builder91.setCharset(charset92);
        java.io.Writer writer94 = builder91.getWriter();
        cSVFormat1.print((java.lang.Object) builder86, (java.lang.Appendable) writer94, false);
        java.lang.String str97 = cSVFormat1.getRecordSeparator();
        java.lang.Character char98 = cSVFormat1.getEscapeCharacter();
        java.lang.String str99 = cSVFormat1.toString();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(path12);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(writer22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNull(strArray36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertArrayEquals(strArray39, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(writer49);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNotNull(cSVPrinter52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + predefined68 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined68.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + predefined75 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined75.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(writer84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(writer94);
        org.junit.Assert.assertNull(str97);
        org.junit.Assert.assertNull(char98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "Delimiter=<4> SkipHeaderRecord:false" + "'", str99, "Delimiter=<4> SkipHeaderRecord:false");
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder7 = builder2.setByteArray(byteArray6);
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setBufferSizeMax(1);
        java.io.Reader reader10 = builder9.getReader();
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        java.io.OutputStream outputStream18 = builder17.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder9.setOutputStream(outputStream18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser20 = builder9.getUnchecked();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OutputStreamOrigin#getPath() for  origin java.nio.channels.Channels$1@24047ef8");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(reader10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(outputStream18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray4 = cSVFormat3.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder5 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder5.setHeader(strArray7);
        org.apache.commons.csv.CSVFormat cSVFormat9 = builder5.get();
        boolean boolean10 = cSVFormat1.equals((java.lang.Object) builder5);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder5.setDelimiter('a');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder5.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setEscape((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setCommentMarker('#');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.DEFAULT;
        boolean boolean22 = cSVFormat21.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char25 = cSVFormat24.getEscapeCharacter();
        java.lang.String[] strArray26 = cSVFormat24.getHeaderComments();
        boolean boolean27 = cSVFormat24.isEscapeCharacterSet();
        java.lang.String[] strArray28 = cSVFormat24.getHeaderComments();
        boolean boolean29 = cSVFormat24.getLenientEof();
        org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat31.printer();
        org.apache.commons.csv.CSVParser.Builder builder33 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder33.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setFile("hi!");
        java.nio.charset.Charset charset38 = null;
        org.apache.commons.csv.CSVParser.Builder builder39 = builder37.setCharset(charset38);
        org.apache.commons.csv.CSVParser.Builder builder41 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder41.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder45 = builder43.setFile("hi!");
        java.nio.charset.Charset charset46 = null;
        org.apache.commons.csv.CSVParser.Builder builder47 = builder45.setCharset(charset46);
        org.apache.commons.csv.CSVFormat.Predefined predefined48 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray49 = new java.lang.Object[] { builder37, 1L, charset46, predefined48 };
        cSVPrinter32.printRecord(objArray49);
        cSVPrinter32.flush();
        org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char55 = cSVFormat54.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser56 = org.apache.commons.csv.CSVParser.parse("", cSVFormat54);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList57 = cSVParser56.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream58 = cSVParser56.stream();
        cSVPrinter32.printRecords(cSVRecordStream58);
        java.lang.Appendable appendable60 = cSVPrinter32.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter61 = cSVFormat24.print(appendable60);
        org.apache.commons.csv.CSVPrinter cSVPrinter62 = cSVFormat21.print(appendable60);
        org.apache.commons.csv.CSVFormat cSVFormat64 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char65 = cSVFormat64.getEscapeCharacter();
        org.apache.commons.csv.CSVFormat cSVFormat66 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray67 = cSVFormat66.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder68 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat66);
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder71 = builder68.setHeader(strArray70);
        org.apache.commons.csv.CSVFormat cSVFormat72 = builder68.get();
        boolean boolean73 = cSVFormat64.equals((java.lang.Object) builder68);
        org.apache.commons.csv.CSVFormat.Builder builder75 = builder68.setDelimiter('a');
        org.apache.commons.csv.CSVFormat.Builder builder77 = builder75.setTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat.Builder builder79 = builder77.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat cSVFormat80 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray81 = cSVFormat80.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder82 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat80);
        java.sql.ResultSetMetaData resultSetMetaData83 = null;
        org.apache.commons.csv.CSVFormat.Builder builder84 = builder82.setHeader(resultSetMetaData83);
        java.sql.ResultSet resultSet85 = null;
        org.apache.commons.csv.CSVFormat.Builder builder86 = builder84.setHeader(resultSet85);
        java.sql.ResultSetMetaData resultSetMetaData87 = null;
        org.apache.commons.csv.CSVFormat.Builder builder88 = builder86.setHeader(resultSetMetaData87);
        org.apache.commons.csv.CSVFormat cSVFormat89 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray90 = cSVFormat89.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder91 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat89);
        java.lang.String[] strArray93 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder94 = builder91.setHeader(strArray93);
        org.apache.commons.csv.CSVFormat.Builder builder95 = builder88.setHeaderComments(strArray93);
        org.apache.commons.csv.CSVFormat.Builder builder96 = builder79.setHeaderComments((java.lang.Object[]) strArray93);
        cSVPrinter62.printRecords((java.lang.Object[]) strArray93);
        org.apache.commons.csv.CSVFormat.Builder builder98 = builder20.setHeaderComments(strArray93);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertArrayEquals(strArray7, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVPrinter32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + predefined48 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined48.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNull(char55);
        org.junit.Assert.assertNotNull(cSVParser56);
        org.junit.Assert.assertNotNull(cSVRecordList57);
        org.junit.Assert.assertNotNull(cSVRecordStream58);
        org.junit.Assert.assertNotNull(appendable60);
        org.junit.Assert.assertNotNull(cSVPrinter61);
        org.junit.Assert.assertNotNull(cSVPrinter62);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNull(char65);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(strArray67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertArrayEquals(strArray70, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(cSVFormat72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(cSVFormat80);
        org.junit.Assert.assertNull(strArray81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(cSVFormat89);
        org.junit.Assert.assertNull(strArray90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertArrayEquals(strArray93, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder98);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char3 = cSVFormat2.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList5 = cSVParser4.getRecords();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser4.getRecords();
        java.util.List<java.lang.String> strList7 = cSVParser4.getHeaderNames();
        java.lang.String str8 = cSVParser4.getHeaderComment();
        long long9 = cSVParser4.getRecordNumber();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(cSVRecordList5);
        org.junit.Assert.assertNotNull(cSVRecordList6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder7 = builder2.setByteArray(byteArray6);
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setCharacterOffset(0L);
        java.nio.charset.Charset charset11 = builder10.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder7.setCharset(charset11);
        java.lang.Class<?> wildcardClass13 = builder7.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        int int7 = builder4.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder4.setRecordNumber((long) 10);
        org.apache.commons.io.IORandomAccessFile iORandomAccessFile10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder11 = builder4.setRandomAccessFile(iORandomAccessFile10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8192 + "'", int7 == 8192);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined3 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat4 = predefined3.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setFile("hi!");
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharset(charset10);
        java.io.Writer writer12 = builder9.getWriter();
        cSVFormat4.println((java.lang.Appendable) writer12);
        cSVFormat1.print((java.lang.Object) 10L, (java.lang.Appendable) writer12, true);
        boolean boolean17 = cSVFormat1.equals((java.lang.Object) (byte) 10);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode18 = cSVFormat1.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder24 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder28 = builder26.setFile("hi!");
        java.nio.charset.Charset charset29 = null;
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setCharset(charset29);
        java.io.Writer writer31 = builder28.getWriter();
        cSVFormat23.println((java.lang.Appendable) writer31);
        cSVFormat20.print((java.lang.Object) 10L, (java.lang.Appendable) writer31, true);
        boolean boolean36 = cSVFormat20.equals((java.lang.Object) (byte) 10);
        boolean boolean37 = cSVFormat20.getIgnoreHeaderCase();
        boolean boolean38 = cSVFormat1.equals((java.lang.Object) boolean37);
        java.lang.String str39 = cSVFormat1.toString();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + predefined3 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined3.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(writer12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode18 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode18.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(writer31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Delimiter=<#> SkipHeaderRecord:false" + "'", str39, "Delimiter=<#> SkipHeaderRecord:false");
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        boolean boolean3 = cSVFormat1.isNullStringSet();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        boolean boolean1 = cSVFormat0.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char4 = cSVFormat3.getEscapeCharacter();
        java.lang.String[] strArray5 = cSVFormat3.getHeaderComments();
        boolean boolean6 = cSVFormat3.isEscapeCharacterSet();
        java.lang.String[] strArray7 = cSVFormat3.getHeaderComments();
        boolean boolean8 = cSVFormat3.getLenientEof();
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat10.printer();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setFile("hi!");
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharset(charset17);
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setFile("hi!");
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharset(charset25);
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray28 = new java.lang.Object[] { builder16, 1L, charset25, predefined27 };
        cSVPrinter11.printRecord(objArray28);
        cSVPrinter11.flush();
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char34 = cSVFormat33.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse("", cSVFormat33);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList36 = cSVParser35.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream37 = cSVParser35.stream();
        cSVPrinter11.printRecords(cSVRecordStream37);
        java.lang.Appendable appendable39 = cSVPrinter11.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter40 = cSVFormat3.print(appendable39);
        org.apache.commons.csv.CSVPrinter cSVPrinter41 = cSVFormat0.print(appendable39);
        boolean boolean42 = cSVFormat0.getAutoFlush();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVPrinter11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(char34);
        org.junit.Assert.assertNotNull(cSVParser35);
        org.junit.Assert.assertNotNull(cSVRecordList36);
        org.junit.Assert.assertNotNull(cSVRecordStream37);
        org.junit.Assert.assertNotNull(appendable39);
        org.junit.Assert.assertNotNull(cSVPrinter40);
        org.junit.Assert.assertNotNull(cSVPrinter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        int int7 = builder4.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder4.setRecordNumber((long) 10);
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharacterOffset(0L);
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setFile(",");
        org.apache.commons.csv.CSVParser cSVParser14 = builder11.getUnchecked();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8192 + "'", int7 == 8192);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(cSVParser14);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset(0L);
        java.nio.charset.Charset charset3 = builder2.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setFile("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharset(charset11);
        java.io.OutputStream outputStream13 = builder12.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder2.setOutputStream(outputStream13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder2.setPath("hi!");
        java.lang.CharSequence charSequence17 = builder16.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        int int19 = builder18.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder18.setFile("");
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setBufferSizeMax((int) (short) -1);
        java.nio.file.Path path24 = builder21.getPath();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder16.setPath(path24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setCharset("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: Delimiter=<,> QuoteChar=<\"> RecordSeparator=<??> SkipHeaderRecord:false");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(outputStream13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8192 + "'", int19 == 8192);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(path24);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setCharSequence((java.lang.CharSequence) "hi!");
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setCharacterOffset(0L);
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder7.setFile("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        java.io.OutputStream outputStream18 = builder17.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder7.setOutputStream(outputStream18);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder7.setPath("hi!");
        java.io.RandomAccessFile randomAccessFile22 = builder21.getRandomAccessFile();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder2.setRandomAccessFile(randomAccessFile22);
        java.nio.charset.Charset charset24 = builder2.getCharsetDefault();
        org.apache.commons.io.IORandomAccessFile iORandomAccessFile25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder26 = builder2.setRandomAccessFile(iORandomAccessFile25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(outputStream18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(randomAccessFile22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(charset24);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char6 = cSVFormat5.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("", cSVFormat5);
        java.lang.String str8 = cSVFormat5.getRecordSeparator();
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setFile("hi!");
        java.nio.charset.Charset charset14 = null;
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharset(charset14);
        java.io.Writer writer16 = builder13.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray18 = cSVFormat17.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder19 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat17);
        java.sql.ResultSetMetaData resultSetMetaData20 = null;
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setHeader(resultSetMetaData20);
        java.sql.ResultSet resultSet22 = null;
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setHeader(resultSet22);
        java.sql.ResultSetMetaData resultSetMetaData24 = null;
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setHeader(resultSetMetaData24);
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray27 = cSVFormat26.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder28 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder28.setHeader(strArray30);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder25.setHeaderComments(strArray30);
        cSVFormat5.printRecord((java.lang.Appendable) writer16, (java.lang.Object[]) strArray30);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder2.setHeader(strArray30);
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder2.setRecordSeparator("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean38 = cSVFormat37.isEscapeCharacterSet();
        org.apache.commons.csv.CSVParser.Builder builder39 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder41 = builder39.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder43 = builder41.setFile("hi!");
        byte[] byteArray45 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder46 = builder41.setByteArray(byteArray45);
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setBufferSizeMax(1);
        java.io.Reader reader49 = builder48.getReader();
        org.apache.commons.csv.CSVParser.Builder builder50 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder52 = builder50.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder54 = builder52.setFile("hi!");
        java.nio.charset.Charset charset55 = null;
        org.apache.commons.csv.CSVParser.Builder builder56 = builder54.setCharset(charset55);
        java.io.OutputStream outputStream57 = builder56.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder58 = builder48.setOutputStream(outputStream57);
        java.nio.file.OpenOption[] openOptionArray59 = new java.nio.file.OpenOption[] {};
        org.apache.commons.csv.CSVParser.Builder builder60 = builder58.setOpenOptions(openOptionArray59);
        java.lang.String str61 = cSVFormat37.format((java.lang.Object[]) openOptionArray59);
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder2.setHeaderComments((java.lang.Object[]) openOptionArray59);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder2.setLenientEof(false);
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder2.setEscape('\\');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(writer16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNull(strArray27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertArrayEquals(strArray30, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertArrayEquals(byteArray45, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(reader49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(outputStream57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(openOptionArray59);
        org.junit.Assert.assertArrayEquals(openOptionArray59, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder7 = builder2.setByteArray(byteArray6);
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setBufferSizeMax(1);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path10 = builder9.getPath();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getPath() for byte[] origin [B@d94324c");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder1.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setFile("hi!");
        java.io.File file6 = builder5.getFile();
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharacterOffset(0L);
        java.nio.charset.Charset charset13 = builder12.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder7.setCharset(charset13);
        org.apache.commons.csv.CSVPrinter cSVPrinter15 = cSVFormat0.print(file6, charset13);
        cSVPrinter15.close();
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter19 = cSVFormat18.printer();
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setFile("hi!");
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharset(charset25);
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder32 = builder30.setFile("hi!");
        java.nio.charset.Charset charset33 = null;
        org.apache.commons.csv.CSVParser.Builder builder34 = builder32.setCharset(charset33);
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray36 = new java.lang.Object[] { builder24, 1L, charset33, predefined35 };
        cSVPrinter19.printRecord(objArray36);
        cSVPrinter19.flush();
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char42 = cSVFormat41.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser43 = org.apache.commons.csv.CSVParser.parse("", cSVFormat41);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList44 = cSVParser43.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream45 = cSVParser43.stream();
        cSVPrinter19.printRecords(cSVRecordStream45);
        cSVPrinter19.close();
        cSVPrinter19.println();
        org.apache.commons.csv.CSVFormat cSVFormat51 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char52 = cSVFormat51.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser53 = org.apache.commons.csv.CSVParser.parse("", cSVFormat51);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator54 = cSVParser53.spliterator();
        java.lang.String str55 = cSVParser53.getHeaderComment();
        java.lang.String str56 = cSVParser53.getFirstEndOfLine();
        boolean boolean57 = cSVParser53.hasHeaderComment();
        cSVPrinter19.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser53);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList59 = cSVParser53.getRecords();
        cSVPrinter15.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVRecordList59);
        cSVPrinter15.close();
        cSVPrinter15.close();
        java.sql.ResultSet resultSet63 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter15.printHeaders(resultSet63);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "hi!");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVPrinter15);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(cSVPrinter19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(char42);
        org.junit.Assert.assertNotNull(cSVParser43);
        org.junit.Assert.assertNotNull(cSVRecordList44);
        org.junit.Assert.assertNotNull(cSVRecordStream45);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNull(char52);
        org.junit.Assert.assertNotNull(cSVParser53);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(cSVRecordList59);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char3 = cSVFormat2.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser4.spliterator();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser4.getRecords();
        cSVParser4.close();
        boolean boolean8 = cSVParser4.hasTrailerComment();
        boolean boolean9 = cSVParser4.hasHeaderComment();
        cSVParser4.close();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator5);
        org.junit.Assert.assertNotNull(cSVRecordList6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        java.net.URL uRL0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder1.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setFile("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV;
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setFile("hi!");
        java.io.File file12 = builder11.getFile();
        org.apache.commons.csv.CSVParser.Builder builder13 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder16 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharacterOffset(0L);
        java.nio.charset.Charset charset19 = builder18.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder13.setCharset(charset19);
        org.apache.commons.csv.CSVPrinter cSVPrinter21 = cSVFormat6.print(file12, charset19);
        org.apache.commons.csv.CSVParser.Builder builder22 = builder3.setFile(file12);
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder26 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder28 = builder26.setCharacterOffset(0L);
        java.nio.charset.Charset charset29 = builder28.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder23.setCharset(charset29);
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat32);
        org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse(file12, charset29, cSVFormat32);
        org.apache.commons.csv.CSVParser.Builder builder35 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder39 = builder37.setCharSequence((java.lang.CharSequence) "hi!");
        org.apache.commons.csv.CSVParser.Builder builder40 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder42 = builder40.setCharacterOffset(0L);
        java.nio.charset.Charset charset43 = builder42.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder45 = builder42.setFile("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder46 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder50 = builder48.setFile("hi!");
        java.nio.charset.Charset charset51 = null;
        org.apache.commons.csv.CSVParser.Builder builder52 = builder50.setCharset(charset51);
        java.io.OutputStream outputStream53 = builder52.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder54 = builder42.setOutputStream(outputStream53);
        org.apache.commons.csv.CSVParser.Builder builder56 = builder42.setPath("hi!");
        java.io.RandomAccessFile randomAccessFile57 = builder56.getRandomAccessFile();
        org.apache.commons.csv.CSVParser.Builder builder58 = builder37.setRandomAccessFile(randomAccessFile57);
        java.nio.charset.Charset charset59 = builder37.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat61 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter62 = cSVFormat61.printer();
        org.apache.commons.csv.CSVFormat.Builder builder63 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat61);
        org.apache.commons.csv.CSVParser cSVParser64 = org.apache.commons.csv.CSVParser.parse(file12, charset59, cSVFormat61);
        org.apache.commons.csv.CSVFormat cSVFormat66 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char67 = cSVFormat66.getEscapeCharacter();
        java.lang.String[] strArray68 = cSVFormat66.getHeaderComments();
        boolean boolean69 = cSVFormat66.getIgnoreSurroundingSpaces();
        boolean boolean70 = cSVFormat66.getAllowMissingColumnNames();
        boolean boolean71 = cSVFormat66.getAutoFlush();
        boolean boolean72 = cSVFormat66.isEscapeCharacterSet();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser73 = org.apache.commons.csv.CSVParser.parse(uRL0, charset59, cSVFormat66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertNull("file12.getParent() == null", file12.getParent());
        org.junit.Assert.assertEquals(file12.toString(), "hi!");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(cSVPrinter21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVParser33);
        org.junit.Assert.assertNotNull(cSVParser34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(outputStream53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(randomAccessFile57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(charset59);
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertNotNull(cSVPrinter62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(cSVParser64);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNull(char67);
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder7 = builder2.setByteArray(byteArray6);
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setBufferSizeMax(1);
        java.io.Reader reader10 = builder9.getReader();
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        java.io.OutputStream outputStream18 = builder17.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder9.setOutputStream(outputStream18);
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setFile("hi!");
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharset(charset25);
        java.io.Writer writer27 = builder24.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder24.setCharSequence((java.lang.CharSequence) "");
        java.io.InputStream inputStream30 = builder29.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder31 = builder19.setInputStream(inputStream30);
        org.apache.commons.csv.CSVParser.Builder builder32 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder34 = builder32.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder36 = builder34.setFile("hi!");
        java.nio.charset.Charset charset37 = null;
        org.apache.commons.csv.CSVParser.Builder builder38 = builder36.setCharset(charset37);
        int int39 = builder36.getBufferSizeDefault();
        java.nio.file.Path path40 = builder36.getPath();
        org.apache.commons.csv.CSVParser.Builder builder41 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder41.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder45 = builder43.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder47 = builder45.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder49 = builder45.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder50 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder52 = builder50.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder54 = builder52.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder56 = builder54.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path57 = builder56.getPath();
        org.apache.commons.csv.CSVParser.Builder builder58 = builder49.setPath(path57);
        org.apache.commons.csv.CSVParser.Builder builder59 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder61 = builder59.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder63 = builder61.setFile("hi!");
        byte[] byteArray65 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder66 = builder61.setByteArray(byteArray65);
        org.apache.commons.csv.CSVParser.Builder builder67 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder69 = builder67.setCharacterOffset(0L);
        java.nio.charset.Charset charset70 = builder69.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder71 = builder66.setCharset(charset70);
        org.apache.commons.csv.CSVFormat.Predefined predefined72 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat73 = predefined72.getFormat();
        org.apache.commons.csv.CSVFormat cSVFormat74 = predefined72.getFormat();
        org.apache.commons.csv.CSVParser cSVParser75 = org.apache.commons.csv.CSVParser.parse(path57, charset70, cSVFormat74);
        org.apache.commons.csv.CSVFormat cSVFormat77 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char78 = cSVFormat77.getEscapeCharacter();
        java.lang.String[] strArray79 = cSVFormat77.getHeaderComments();
        boolean boolean80 = cSVFormat77.isEscapeCharacterSet();
        java.lang.Character char81 = cSVFormat77.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser82 = org.apache.commons.csv.CSVParser.parse(path40, charset70, cSVFormat77);
        org.apache.commons.csv.CSVFormat cSVFormat85 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char86 = cSVFormat85.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser87 = org.apache.commons.csv.CSVParser.parse("", cSVFormat85);
        org.apache.commons.csv.CSVParser cSVParser88 = org.apache.commons.csv.CSVParser.parse(inputStream30, charset70, cSVFormat85);
        boolean boolean89 = cSVParser88.isClosed();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(reader10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(outputStream18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(writer27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(inputStream30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8192 + "'", int39 == 8192);
        org.junit.Assert.assertNotNull(path40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(path57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertArrayEquals(byteArray65, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(charset70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + predefined72 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined72.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat73);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNotNull(cSVParser75);
        org.junit.Assert.assertNotNull(cSVFormat77);
        org.junit.Assert.assertNull(char78);
        org.junit.Assert.assertNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(char81);
        org.junit.Assert.assertNotNull(cSVParser82);
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertNull(char86);
        org.junit.Assert.assertNotNull(cSVParser87);
        org.junit.Assert.assertNotNull(cSVParser88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode2 = cSVFormat1.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> SkipHeaderRecord:false", cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode2 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode2.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVParser3);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char6 = cSVFormat5.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("", cSVFormat5);
        java.lang.String str8 = cSVFormat5.getRecordSeparator();
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setFile("hi!");
        java.nio.charset.Charset charset14 = null;
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharset(charset14);
        java.io.Writer writer16 = builder13.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray18 = cSVFormat17.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder19 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat17);
        java.sql.ResultSetMetaData resultSetMetaData20 = null;
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setHeader(resultSetMetaData20);
        java.sql.ResultSet resultSet22 = null;
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setHeader(resultSet22);
        java.sql.ResultSetMetaData resultSetMetaData24 = null;
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setHeader(resultSetMetaData24);
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray27 = cSVFormat26.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder28 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder28.setHeader(strArray30);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder25.setHeaderComments(strArray30);
        cSVFormat5.printRecord((java.lang.Appendable) writer16, (java.lang.Object[]) strArray30);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder2.setHeader(strArray30);
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder2.setRecordSeparator("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean38 = cSVFormat37.isEscapeCharacterSet();
        org.apache.commons.csv.CSVParser.Builder builder39 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder41 = builder39.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder43 = builder41.setFile("hi!");
        byte[] byteArray45 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder46 = builder41.setByteArray(byteArray45);
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setBufferSizeMax(1);
        java.io.Reader reader49 = builder48.getReader();
        org.apache.commons.csv.CSVParser.Builder builder50 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder52 = builder50.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder54 = builder52.setFile("hi!");
        java.nio.charset.Charset charset55 = null;
        org.apache.commons.csv.CSVParser.Builder builder56 = builder54.setCharset(charset55);
        java.io.OutputStream outputStream57 = builder56.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder58 = builder48.setOutputStream(outputStream57);
        java.nio.file.OpenOption[] openOptionArray59 = new java.nio.file.OpenOption[] {};
        org.apache.commons.csv.CSVParser.Builder builder60 = builder58.setOpenOptions(openOptionArray59);
        java.lang.String str61 = cSVFormat37.format((java.lang.Object[]) openOptionArray59);
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder2.setHeaderComments((java.lang.Object[]) openOptionArray59);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder2.setIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder2.setTrailingData(false);
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder66.setEscape((java.lang.Character) '4');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(writer16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNull(strArray27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertArrayEquals(strArray30, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertArrayEquals(byteArray45, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(reader49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(outputStream57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(openOptionArray59);
        org.junit.Assert.assertArrayEquals(openOptionArray59, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder8 = builder4.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        java.io.Reader reader9 = builder8.getReader();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file10 = builder8.getFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CharSequenceOrigin#getFile() for String origin Delimiter=<4> SkipHeaderRecord:false");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(reader9);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        java.io.Writer writer7 = builder4.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder4.setCharSequence((java.lang.CharSequence) "");
        java.io.Reader reader10 = builder4.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV;
        org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse(reader10, cSVFormat11);
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.MONGODB_TSV;
        java.lang.String str14 = cSVFormat13.toString();
        org.apache.commons.csv.CSVParser cSVParser17 = new org.apache.commons.csv.CSVParser(reader10, cSVFormat13, (long) 1, (long) 1);
        long long18 = cSVParser17.getCurrentLineNumber();
        java.lang.String str19 = cSVParser17.getHeaderComment();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(writer7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(reader10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVParser12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str14, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setCharSequence((java.lang.CharSequence) "hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharSequence((java.lang.CharSequence) "hi!");
        java.io.Reader reader7 = builder4.getReader();
        org.apache.commons.csv.CSVFormat.Builder builder8 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char14 = cSVFormat13.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat13);
        java.lang.String str16 = cSVFormat13.getRecordSeparator();
        org.apache.commons.csv.CSVParser.Builder builder17 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setFile("hi!");
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharset(charset22);
        java.io.Writer writer24 = builder21.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray26 = cSVFormat25.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder27 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat25);
        java.sql.ResultSetMetaData resultSetMetaData28 = null;
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setHeader(resultSetMetaData28);
        java.sql.ResultSet resultSet30 = null;
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setHeader(resultSet30);
        java.sql.ResultSetMetaData resultSetMetaData32 = null;
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setHeader(resultSetMetaData32);
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray35 = cSVFormat34.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder36 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat34);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder36.setHeader(strArray38);
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder33.setHeaderComments(strArray38);
        cSVFormat13.printRecord((java.lang.Appendable) writer24, (java.lang.Object[]) strArray38);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder10.setHeader(strArray38);
        org.apache.commons.csv.CSVFormat cSVFormat43 = builder42.get();
        org.apache.commons.csv.CSVParser cSVParser46 = new org.apache.commons.csv.CSVParser(reader7, cSVFormat43, (long) 1, 0L);
        boolean boolean47 = cSVFormat43.isCommentMarkerSet();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(reader7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(cSVParser15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(writer24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(strArray26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(strArray35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertArrayEquals(strArray38, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        int int1 = builder0.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setFile("");
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setBufferSizeMax((int) (short) -1);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier6 = builder5.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder5.setBufferSizeMax((int) (byte) 0);
        java.util.function.IntUnaryOperator intUnaryOperator9 = null;
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setBufferSizeChecker(intUnaryOperator9);
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream11 = builder10.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVParserSupplier6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder8 = builder4.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        java.io.Reader reader9 = builder8.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.QuoteMode quoteMode11 = cSVFormat10.getQuoteMode();
        boolean boolean12 = cSVFormat10.isEscapeCharacterSet();
        boolean boolean13 = cSVFormat10.isCommentMarkerSet();
        java.lang.String str14 = cSVFormat10.toString();
        org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse(reader9, cSVFormat10);
        org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.MONGODB_TSV;
        java.lang.String str17 = cSVFormat16.toString();
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder22.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder27 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder27.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder31 = builder29.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path34 = builder33.getPath();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder26.setPath(path34);
        org.apache.commons.csv.CSVParser.Builder builder36 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption37 = null;
        java.nio.file.OpenOption[] openOptionArray38 = new java.nio.file.OpenOption[] { openOption37 };
        org.apache.commons.csv.CSVParser.Builder builder39 = builder36.setOpenOptions(openOptionArray38);
        org.apache.commons.csv.CSVParser.Builder builder41 = builder36.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder42 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder44 = builder42.setCharacterOffset(0L);
        java.nio.charset.Charset charset45 = builder44.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder46 = builder41.setCharset(charset45);
        org.apache.commons.csv.CSVParser.Builder builder47 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder49 = builder47.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder51 = builder49.setFile("hi!");
        java.nio.charset.Charset charset52 = null;
        org.apache.commons.csv.CSVParser.Builder builder53 = builder51.setCharset(charset52);
        org.apache.commons.csv.CSVParser.Builder builder54 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder56 = builder54.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder58 = builder56.setFile("hi!");
        byte[] byteArray60 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder61 = builder56.setByteArray(byteArray60);
        org.apache.commons.csv.CSVParser.Builder builder62 = builder51.setByteArray(byteArray60);
        org.apache.commons.csv.CSVParser.Builder builder63 = builder46.setByteArray(byteArray60);
        org.apache.commons.csv.CSVParser.Builder builder64 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder66 = builder64.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder67 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder69 = builder67.setCharacterOffset(0L);
        java.nio.charset.Charset charset70 = builder69.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder71 = builder64.setCharset(charset70);
        org.apache.commons.csv.CSVParser.Builder builder72 = builder63.setCharset(charset70);
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat16.print(path34, charset70);
        org.apache.commons.csv.CSVParser cSVParser74 = org.apache.commons.csv.CSVParser.parse(reader9, cSVFormat16);
        boolean boolean75 = cSVFormat16.isNullStringSet();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(reader9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(quoteMode11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false" + "'", str14, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVParser15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str17, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(path34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(openOptionArray38);
        org.junit.Assert.assertArrayEquals(openOptionArray38, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertArrayEquals(byteArray60, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(charset70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertNotNull(cSVParser74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        java.io.Writer writer7 = builder4.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder4.setCharSequence((java.lang.CharSequence) "");
        java.io.InputStream inputStream10 = builder9.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder15.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray21 = cSVFormat20.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder22 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat20);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder22.setHeader(strArray24);
        org.apache.commons.csv.CSVFormat cSVFormat26 = builder22.get();
        org.apache.commons.csv.CSVParser.Builder builder27 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder27.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder31 = builder29.setFile("hi!");
        java.nio.charset.Charset charset32 = null;
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharset(charset32);
        java.io.Writer writer34 = builder31.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter37 = cSVFormat36.printer();
        org.apache.commons.csv.CSVParser.Builder builder38 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder40 = builder38.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder42 = builder40.setFile("hi!");
        java.nio.charset.Charset charset43 = null;
        org.apache.commons.csv.CSVParser.Builder builder44 = builder42.setCharset(charset43);
        org.apache.commons.csv.CSVParser.Builder builder46 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder50 = builder48.setFile("hi!");
        java.nio.charset.Charset charset51 = null;
        org.apache.commons.csv.CSVParser.Builder builder52 = builder50.setCharset(charset51);
        org.apache.commons.csv.CSVFormat.Predefined predefined53 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray54 = new java.lang.Object[] { builder42, 1L, charset51, predefined53 };
        cSVPrinter37.printRecord(objArray54);
        cSVFormat26.printRecord((java.lang.Appendable) writer34, objArray54);
        org.apache.commons.csv.CSVParser.Builder builder57 = builder15.setWriter(writer34);
        java.nio.charset.Charset charset58 = builder57.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat59 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.QuoteMode quoteMode60 = cSVFormat59.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder61 = cSVFormat59.builder();
        org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse(inputStream10, charset58, cSVFormat59);
        org.apache.commons.csv.CSVParser.Builder builder63 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder65 = builder63.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder67 = builder65.setCharSequence((java.lang.CharSequence) "hi!");
        org.apache.commons.csv.CSVParser.Builder builder68 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder70 = builder68.setCharacterOffset(0L);
        java.nio.charset.Charset charset71 = builder70.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder73 = builder70.setFile("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder74 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder76 = builder74.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder78 = builder76.setFile("hi!");
        java.nio.charset.Charset charset79 = null;
        org.apache.commons.csv.CSVParser.Builder builder80 = builder78.setCharset(charset79);
        java.io.OutputStream outputStream81 = builder80.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder82 = builder70.setOutputStream(outputStream81);
        org.apache.commons.csv.CSVParser.Builder builder84 = builder70.setPath("hi!");
        java.io.RandomAccessFile randomAccessFile85 = builder84.getRandomAccessFile();
        org.apache.commons.csv.CSVParser.Builder builder86 = builder65.setRandomAccessFile(randomAccessFile85);
        java.nio.charset.Charset charset87 = builder65.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat89 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char90 = cSVFormat89.getEscapeCharacter();
        java.lang.String[] strArray91 = cSVFormat89.getHeaderComments();
        boolean boolean92 = cSVFormat89.getIgnoreSurroundingSpaces();
        boolean boolean93 = cSVFormat89.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVParser cSVParser94 = org.apache.commons.csv.CSVParser.parse(inputStream10, charset87, cSVFormat89);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode95 = cSVFormat89.getDuplicateHeaderMode();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(writer7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(inputStream10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(strArray21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertArrayEquals(strArray24, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(writer34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVPrinter37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + predefined53 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined53.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNull(quoteMode60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(cSVParser62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(charset71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(outputStream81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(randomAccessFile85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(charset87);
        org.junit.Assert.assertNotNull(cSVFormat89);
        org.junit.Assert.assertNull(char90);
        org.junit.Assert.assertNull(strArray91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(cSVParser94);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode95 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode95.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char24 = cSVFormat23.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("", cSVFormat23);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser25.spliterator();
        java.lang.String str27 = cSVParser25.getHeaderComment();
        java.lang.String str28 = cSVParser25.getFirstEndOfLine();
        cSVPrinter2.print((java.lang.Object) str28);
        cSVPrinter2.println();
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder35 = builder33.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setCharacterOffset((long) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray38 = builder37.getOpenOptions();
        cSVPrinter2.printRecords((java.lang.Object[]) openOptionArray38);
        org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray41 = cSVFormat40.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder42 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat40);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder42.setHeader(strArray44);
        cSVPrinter2.printRecord((java.lang.Object[]) strArray44);
        org.apache.commons.csv.CSVParser.Builder builder47 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder49 = builder47.setCharacterOffset(0L);
        java.nio.charset.Charset charset50 = builder49.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder52 = builder49.setFile("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        java.nio.file.OpenOption[] openOptionArray53 = builder49.getOpenOptions();
        cSVPrinter2.printRecord((java.lang.Object[]) openOptionArray53);
        org.apache.commons.csv.CSVFormat cSVFormat56 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char57 = cSVFormat56.getEscapeCharacter();
        java.lang.String[] strArray58 = cSVFormat56.getHeaderComments();
        boolean boolean59 = cSVFormat56.isEscapeCharacterSet();
        java.lang.String[] strArray60 = cSVFormat56.getHeaderComments();
        java.lang.Character char61 = cSVFormat56.getQuoteCharacter();
        boolean boolean62 = cSVFormat56.getTrailingData();
        org.apache.commons.csv.CSVParser.Builder builder63 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder65 = builder63.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder67 = builder65.setFile("hi!");
        byte[] byteArray69 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder70 = builder65.setByteArray(byteArray69);
        org.apache.commons.csv.CSVParser.Builder builder72 = builder70.setBufferSizeMax(1);
        java.io.Reader reader73 = builder72.getReader();
        org.apache.commons.csv.CSVParser cSVParser74 = cSVFormat56.parse(reader73);
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream75 = cSVParser74.stream();
        cSVPrinter2.printRecord(cSVRecordStream75);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(openOptionArray38);
        org.junit.Assert.assertArrayEquals(openOptionArray38, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertArrayEquals(strArray44, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(openOptionArray53);
        org.junit.Assert.assertArrayEquals(openOptionArray53, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNull(char57);
        org.junit.Assert.assertNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(strArray60);
        org.junit.Assert.assertNull(char61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertArrayEquals(byteArray69, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(reader73);
        org.junit.Assert.assertNotNull(cSVParser74);
        org.junit.Assert.assertNotNull(cSVRecordStream75);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setFile("hi!");
        java.io.File file12 = builder11.getFile();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder4.setFile(file12);
        java.nio.file.Path path14 = builder4.getPath();
        org.apache.commons.csv.CSVParser.Builder builder15 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption16 = null;
        java.nio.file.OpenOption[] openOptionArray17 = new java.nio.file.OpenOption[] { openOption16 };
        org.apache.commons.csv.CSVParser.Builder builder18 = builder15.setOpenOptions(openOptionArray17);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder15.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset(0L);
        java.nio.charset.Charset charset24 = builder23.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder20.setCharset(charset24);
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        boolean boolean27 = cSVFormat26.isCommentMarkerSet();
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder32 = builder30.setFile("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV;
        org.apache.commons.csv.CSVParser.Builder builder34 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder36 = builder34.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder38 = builder36.setFile("hi!");
        java.io.File file39 = builder38.getFile();
        org.apache.commons.csv.CSVParser.Builder builder40 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder42 = builder40.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder43 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder45 = builder43.setCharacterOffset(0L);
        java.nio.charset.Charset charset46 = builder45.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder47 = builder40.setCharset(charset46);
        org.apache.commons.csv.CSVPrinter cSVPrinter48 = cSVFormat33.print(file39, charset46);
        org.apache.commons.csv.CSVParser.Builder builder49 = builder30.setFile(file39);
        org.apache.commons.csv.CSVParser.Builder builder50 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder52 = builder50.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder53 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder55 = builder53.setCharacterOffset(0L);
        java.nio.charset.Charset charset56 = builder55.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder57 = builder50.setCharset(charset56);
        org.apache.commons.csv.CSVFormat cSVFormat59 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVParser cSVParser60 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat59);
        org.apache.commons.csv.CSVParser cSVParser61 = org.apache.commons.csv.CSVParser.parse(file39, charset56, cSVFormat59);
        org.apache.commons.csv.CSVParser.Builder builder62 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder64 = builder62.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder66 = builder64.setCharSequence((java.lang.CharSequence) "hi!");
        org.apache.commons.csv.CSVParser.Builder builder67 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder69 = builder67.setCharacterOffset(0L);
        java.nio.charset.Charset charset70 = builder69.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder72 = builder69.setFile("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder73 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder75 = builder73.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder77 = builder75.setFile("hi!");
        java.nio.charset.Charset charset78 = null;
        org.apache.commons.csv.CSVParser.Builder builder79 = builder77.setCharset(charset78);
        java.io.OutputStream outputStream80 = builder79.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder81 = builder69.setOutputStream(outputStream80);
        org.apache.commons.csv.CSVParser.Builder builder83 = builder69.setPath("hi!");
        java.io.RandomAccessFile randomAccessFile84 = builder83.getRandomAccessFile();
        org.apache.commons.csv.CSVParser.Builder builder85 = builder64.setRandomAccessFile(randomAccessFile84);
        java.nio.charset.Charset charset86 = builder64.getCharsetDefault();
        org.apache.commons.csv.CSVPrinter cSVPrinter87 = cSVFormat26.print(file39, charset86);
        java.lang.String[] strArray88 = cSVFormat26.getHeader();
        org.apache.commons.csv.CSVParser cSVParser89 = org.apache.commons.csv.CSVParser.parse(path14, charset24, cSVFormat26);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertNull("file12.getParent() == null", file12.getParent());
        org.junit.Assert.assertEquals(file12.toString(), "hi!");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(path14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(openOptionArray17);
        org.junit.Assert.assertArrayEquals(openOptionArray17, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(file39);
        org.junit.Assert.assertNull("file39.getParent() == null", file39.getParent());
        org.junit.Assert.assertEquals(file39.toString(), "hi!");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(cSVPrinter48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNotNull(cSVParser60);
        org.junit.Assert.assertNotNull(cSVParser61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(charset70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(outputStream80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(randomAccessFile84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(charset86);
        org.junit.Assert.assertNotNull(cSVPrinter87);
        org.junit.Assert.assertNull(strArray88);
        org.junit.Assert.assertNotNull(cSVParser89);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.isNullStringSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_TSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.QuoteMode quoteMode3 = cSVFormat2.getQuoteMode();
        boolean boolean4 = cSVFormat2.isEscapeCharacterSet();
        boolean boolean5 = cSVFormat2.isCommentMarkerSet();
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path18 = builder17.getPath();
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setFile("hi!");
        java.nio.charset.Charset charset26 = null;
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setCharset(charset26);
        java.io.Writer writer28 = builder25.getWriter();
        cSVFormat20.println((java.lang.Appendable) writer28);
        org.apache.commons.csv.CSVParser.Builder builder30 = builder17.setWriter(writer28);
        org.apache.commons.csv.CSVParser.Builder builder31 = builder8.setWriter(writer28);
        cSVFormat2.println((java.lang.Appendable) writer28);
        org.apache.commons.csv.CSVPrinter cSVPrinter33 = cSVFormat1.print((java.lang.Appendable) writer28);
        long long34 = cSVPrinter33.getRecordCount();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_TSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_TSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(quoteMode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(path18);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(writer28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(cSVPrinter33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder8 = builder4.setFile("\\N");
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("4");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser11 = builder10.getUnchecked();
            org.junit.Assert.fail("Expected exception of type java.io.UncheckedIOException; message: java.nio.file.NoSuchFileException: 4");
        } catch (java.io.UncheckedIOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path7 = builder6.getPath();
        org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.MONGODB_TSV;
        java.lang.String str9 = cSVFormat8.toString();
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder18 = builder14.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder19 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path26 = builder25.getPath();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder18.setPath(path26);
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption29 = null;
        java.nio.file.OpenOption[] openOptionArray30 = new java.nio.file.OpenOption[] { openOption29 };
        org.apache.commons.csv.CSVParser.Builder builder31 = builder28.setOpenOptions(openOptionArray30);
        org.apache.commons.csv.CSVParser.Builder builder33 = builder28.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder34 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder36 = builder34.setCharacterOffset(0L);
        java.nio.charset.Charset charset37 = builder36.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder38 = builder33.setCharset(charset37);
        org.apache.commons.csv.CSVParser.Builder builder39 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder41 = builder39.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder43 = builder41.setFile("hi!");
        java.nio.charset.Charset charset44 = null;
        org.apache.commons.csv.CSVParser.Builder builder45 = builder43.setCharset(charset44);
        org.apache.commons.csv.CSVParser.Builder builder46 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder50 = builder48.setFile("hi!");
        byte[] byteArray52 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder53 = builder48.setByteArray(byteArray52);
        org.apache.commons.csv.CSVParser.Builder builder54 = builder43.setByteArray(byteArray52);
        org.apache.commons.csv.CSVParser.Builder builder55 = builder38.setByteArray(byteArray52);
        org.apache.commons.csv.CSVParser.Builder builder56 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder58 = builder56.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder59 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder61 = builder59.setCharacterOffset(0L);
        java.nio.charset.Charset charset62 = builder61.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder63 = builder56.setCharset(charset62);
        org.apache.commons.csv.CSVParser.Builder builder64 = builder55.setCharset(charset62);
        org.apache.commons.csv.CSVPrinter cSVPrinter65 = cSVFormat8.print(path26, charset62);
        org.apache.commons.csv.CSVFormat cSVFormat67 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char68 = cSVFormat67.getEscapeCharacter();
        java.lang.String[] strArray69 = cSVFormat67.getHeaderComments();
        boolean boolean70 = cSVFormat67.getIgnoreSurroundingSpaces();
        java.lang.Character char71 = cSVFormat67.getCommentMarker();
        org.apache.commons.csv.CSVParser cSVParser72 = org.apache.commons.csv.CSVParser.parse(path7, charset62, cSVFormat67);
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat67.printer();
        cSVPrinter73.printComment("Delimiter=<#> SkipHeaderRecord:false");
        cSVPrinter73.flush();
        cSVPrinter73.close(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(path7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str9, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(path26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(openOptionArray30);
        org.junit.Assert.assertArrayEquals(openOptionArray30, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertArrayEquals(byteArray52, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(charset62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(cSVPrinter65);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertNull(char68);
        org.junit.Assert.assertNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(char71);
        org.junit.Assert.assertNotNull(cSVParser72);
        org.junit.Assert.assertNotNull(cSVPrinter73);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        cSVPrinter2.flush();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char25 = cSVFormat24.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("", cSVFormat24);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser26.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream28 = cSVParser26.stream();
        cSVPrinter2.printRecords(cSVRecordStream28);
        cSVPrinter2.close();
        cSVPrinter2.println();
        cSVPrinter2.printComment("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        cSVPrinter2.close(true);
        org.apache.commons.csv.CSVParser.Builder builder36 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder38 = builder36.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder40 = builder38.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder42 = builder40.setCharacterOffset((long) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray43 = builder42.getOpenOptions();
        cSVPrinter2.print((java.lang.Object) openOptionArray43);
        java.lang.Class<?> wildcardClass45 = cSVPrinter2.getClass();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNotNull(cSVParser26);
        org.junit.Assert.assertNotNull(cSVRecordList27);
        org.junit.Assert.assertNotNull(cSVRecordStream28);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(openOptionArray43);
        org.junit.Assert.assertArrayEquals(openOptionArray43, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        cSVPrinter2.flush();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char25 = cSVFormat24.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("", cSVFormat24);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser26.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream28 = cSVParser26.stream();
        cSVPrinter2.printRecords(cSVRecordStream28);
        cSVPrinter2.close();
        cSVPrinter2.println();
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char35 = cSVFormat34.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse("", cSVFormat34);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator37 = cSVParser36.spliterator();
        java.lang.String str38 = cSVParser36.getHeaderComment();
        java.lang.String str39 = cSVParser36.getFirstEndOfLine();
        boolean boolean40 = cSVParser36.hasHeaderComment();
        cSVPrinter2.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser36);
        cSVParser36.close();
        cSVParser36.close();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNotNull(cSVParser26);
        org.junit.Assert.assertNotNull(cSVRecordList27);
        org.junit.Assert.assertNotNull(cSVRecordStream28);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(char35);
        org.junit.Assert.assertNotNull(cSVParser36);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined3 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat4 = predefined3.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setFile("hi!");
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharset(charset10);
        java.io.Writer writer12 = builder9.getWriter();
        cSVFormat4.println((java.lang.Appendable) writer12);
        cSVFormat1.print((java.lang.Object) 10L, (java.lang.Appendable) writer12, true);
        boolean boolean17 = cSVFormat1.equals((java.lang.Object) (byte) 10);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode18 = cSVFormat1.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVPrinter cSVPrinter19 = cSVFormat1.printer();
        org.apache.commons.csv.CSVFormat.Builder builder20 = cSVFormat1.builder();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + predefined3 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined3.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(writer12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode18 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode18.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVPrinter19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setQuote('#');
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char11 = cSVFormat10.getEscapeCharacter();
        org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray13 = cSVFormat12.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder14 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat12);
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder14.setHeader(strArray16);
        org.apache.commons.csv.CSVFormat cSVFormat18 = builder14.get();
        boolean boolean19 = cSVFormat10.equals((java.lang.Object) builder14);
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder14.setDelimiter('a');
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray27 = cSVFormat26.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder28 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat26);
        java.sql.ResultSetMetaData resultSetMetaData29 = null;
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setHeader(resultSetMetaData29);
        java.sql.ResultSet resultSet31 = null;
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder30.setHeader(resultSet31);
        java.sql.ResultSetMetaData resultSetMetaData33 = null;
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder32.setHeader(resultSetMetaData33);
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray36 = cSVFormat35.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder37 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat35);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder37.setHeader(strArray39);
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder34.setHeaderComments(strArray39);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder25.setHeaderComments((java.lang.Object[]) strArray39);
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder6.setHeader(strArray39);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder6.setLenientEof(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(char11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(strArray13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertArrayEquals(strArray16, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNull(strArray27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNull(strArray36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertArrayEquals(strArray39, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        boolean boolean3 = cSVFormat1.getTrailingDelimiter();
        boolean boolean4 = cSVFormat1.getSkipHeaderRecord();
        boolean boolean5 = cSVFormat1.getIgnoreHeaderCase();
        boolean boolean6 = cSVFormat1.isEscapeCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSet5);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode9 = org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setDuplicateHeaderMode(duplicateHeaderMode9);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder8.setRecordSeparator("Delimiter=<4> SkipHeaderRecord:false");
        java.sql.ResultSet resultSet13 = null;
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setHeader(resultSet13);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setCommentMarker('4');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode9 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY + "'", duplicateHeaderMode9.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setCharSequence((java.lang.CharSequence) "hi!");
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setCharacterOffset(0L);
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder7.setFile("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        java.io.OutputStream outputStream18 = builder17.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder7.setOutputStream(outputStream18);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder7.setPath("hi!");
        java.io.RandomAccessFile randomAccessFile22 = builder21.getRandomAccessFile();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder2.setRandomAccessFile(randomAccessFile22);
        java.nio.charset.Charset charset24 = builder2.getCharsetDefault();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file25 = builder2.getFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: RandomAccessFileOrigin#getFile() for IORandomAccessFile origin hi!");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(outputStream18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(randomAccessFile22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(charset24);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setQuote('#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder8.setHeader(resultSetMetaData11);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setEscape((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setRecordSeparator('a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSet5);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setSkipHeaderRecord(false);
        java.sql.ResultSet resultSet11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder6.setHeader(resultSet11);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setCommentMarker('a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        boolean boolean3 = cSVFormat1.getTrailingData();
        org.apache.commons.csv.CSVPrinter cSVPrinter4 = cSVFormat1.printer();
        cSVPrinter4.close();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(cSVPrinter4);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSet5);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setSkipHeaderRecord(false);
        java.sql.ResultSet resultSet11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder6.setHeader(resultSet11);
        java.sql.ResultSet resultSet13 = null;
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setHeader(resultSet13);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setEscape('#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setRecordNumber((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharset(charset11);
        org.apache.commons.csv.CSVParser.Builder builder13 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setFile("hi!");
        byte[] byteArray19 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder20 = builder15.setByteArray(byteArray19);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder10.setByteArray(byteArray19);
        org.apache.commons.csv.CSVParser.Builder builder22 = builder5.setByteArray(byteArray19);
        org.apache.commons.csv.CSVParser.Builder builder24 = builder5.setBufferSize((java.lang.Integer) (-1));
        org.apache.commons.csv.CSVParser.Builder builder26 = builder5.setRecordNumber((long) (short) 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertArrayEquals(byteArray19, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.QuoteMode quoteMode1 = cSVFormat0.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char4 = cSVFormat3.getEscapeCharacter();
        java.lang.String[] strArray5 = cSVFormat3.getHeaderComments();
        boolean boolean6 = cSVFormat3.isEscapeCharacterSet();
        java.lang.String[] strArray7 = cSVFormat3.getHeaderComments();
        boolean boolean8 = cSVFormat3.getLenientEof();
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat10.printer();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setFile("hi!");
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharset(charset17);
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setFile("hi!");
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharset(charset25);
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray28 = new java.lang.Object[] { builder16, 1L, charset25, predefined27 };
        cSVPrinter11.printRecord(objArray28);
        cSVPrinter11.flush();
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char34 = cSVFormat33.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse("", cSVFormat33);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList36 = cSVParser35.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream37 = cSVParser35.stream();
        cSVPrinter11.printRecords(cSVRecordStream37);
        java.lang.Appendable appendable39 = cSVPrinter11.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter40 = cSVFormat3.print(appendable39);
        org.apache.commons.csv.CSVParser.Builder builder41 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder41.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder45 = builder43.setFile("hi!");
        java.nio.charset.Charset charset46 = null;
        org.apache.commons.csv.CSVParser.Builder builder47 = builder45.setCharset(charset46);
        java.io.Writer writer48 = builder45.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder50 = builder45.setCharSequence((java.lang.CharSequence) "");
        java.io.Reader reader51 = builder45.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char55 = cSVFormat54.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser56 = org.apache.commons.csv.CSVParser.parse("", cSVFormat54);
        java.lang.String str57 = cSVFormat54.getRecordSeparator();
        org.apache.commons.csv.CSVParser cSVParser58 = org.apache.commons.csv.CSVParser.parse(reader51, cSVFormat54);
        org.apache.commons.csv.CSVFormat cSVFormat60 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char61 = cSVFormat60.getEscapeCharacter();
        java.lang.String[] strArray62 = cSVFormat60.getHeaderComments();
        boolean boolean63 = cSVFormat60.isEscapeCharacterSet();
        java.lang.String[] strArray64 = cSVFormat60.getHeaderComments();
        boolean boolean65 = cSVFormat60.getLenientEof();
        org.apache.commons.csv.CSVFormat cSVFormat68 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char69 = cSVFormat68.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser70 = org.apache.commons.csv.CSVParser.parse("", cSVFormat68);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator71 = cSVParser70.spliterator();
        java.lang.String str72 = cSVParser70.getHeaderComment();
        java.lang.String str73 = cSVParser70.getFirstEndOfLine();
        boolean boolean74 = cSVParser70.hasHeaderComment();
        boolean boolean75 = cSVFormat60.equals((java.lang.Object) cSVParser70);
        org.apache.commons.csv.CSVParser cSVParser78 = new org.apache.commons.csv.CSVParser(reader51, cSVFormat60, (long) (byte) 10, 10L);
        org.apache.commons.csv.CSVParser cSVParser79 = cSVFormat3.parse(reader51);
        org.apache.commons.csv.CSVParser cSVParser80 = cSVFormat0.parse(reader51);
        boolean boolean81 = cSVParser80.hasTrailerComment();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator82 = cSVParser80.spliterator();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(quoteMode1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVPrinter11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(char34);
        org.junit.Assert.assertNotNull(cSVParser35);
        org.junit.Assert.assertNotNull(cSVRecordList36);
        org.junit.Assert.assertNotNull(cSVRecordStream37);
        org.junit.Assert.assertNotNull(appendable39);
        org.junit.Assert.assertNotNull(cSVPrinter40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(writer48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(reader51);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNull(char55);
        org.junit.Assert.assertNotNull(cSVParser56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(cSVParser58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNull(char61);
        org.junit.Assert.assertNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertNull(char69);
        org.junit.Assert.assertNotNull(cSVParser70);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(cSVParser79);
        org.junit.Assert.assertNotNull(cSVParser80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator82);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder1.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setFile("hi!");
        java.io.File file6 = builder5.getFile();
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharacterOffset(0L);
        java.nio.charset.Charset charset13 = builder12.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder7.setCharset(charset13);
        org.apache.commons.csv.CSVPrinter cSVPrinter15 = cSVFormat0.print(file6, charset13);
        cSVPrinter15.close();
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter15.print((java.lang.Object) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "hi!");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVPrinter15);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        int int7 = builder4.getBufferSizeDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder9 = builder4.setCharset("\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8192 + "'", int7 == 8192);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter8 = cSVFormat7.printer();
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setFile("hi!");
        java.nio.charset.Charset charset14 = null;
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharset(charset14);
        org.apache.commons.csv.CSVParser.Builder builder17 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setFile("hi!");
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharset(charset22);
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray25 = new java.lang.Object[] { builder13, 1L, charset22, predefined24 };
        cSVPrinter8.printRecord(objArray25);
        cSVPrinter8.flush();
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char31 = cSVFormat30.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse("", cSVFormat30);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList33 = cSVParser32.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream34 = cSVParser32.stream();
        cSVPrinter8.printRecords(cSVRecordStream34);
        cSVPrinter8.close();
        cSVPrinter8.println();
        cSVPrinter8.printComment("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter42 = cSVFormat41.printer();
        org.apache.commons.csv.CSVParser.Builder builder43 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder45 = builder43.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder47 = builder45.setFile("hi!");
        java.nio.charset.Charset charset48 = null;
        org.apache.commons.csv.CSVParser.Builder builder49 = builder47.setCharset(charset48);
        org.apache.commons.csv.CSVParser.Builder builder51 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder53 = builder51.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder55 = builder53.setFile("hi!");
        java.nio.charset.Charset charset56 = null;
        org.apache.commons.csv.CSVParser.Builder builder57 = builder55.setCharset(charset56);
        org.apache.commons.csv.CSVFormat.Predefined predefined58 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray59 = new java.lang.Object[] { builder47, 1L, charset56, predefined58 };
        cSVPrinter42.printRecord(objArray59);
        org.apache.commons.csv.CSVFormat cSVFormat63 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char64 = cSVFormat63.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser65 = org.apache.commons.csv.CSVParser.parse("", cSVFormat63);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator66 = cSVParser65.spliterator();
        java.lang.String str67 = cSVParser65.getHeaderComment();
        java.lang.String str68 = cSVParser65.getFirstEndOfLine();
        cSVPrinter42.print((java.lang.Object) str68);
        cSVPrinter42.println();
        org.apache.commons.csv.CSVParser.Builder builder71 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder73 = builder71.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder75 = builder73.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder77 = builder75.setCharacterOffset((long) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray78 = builder77.getOpenOptions();
        cSVPrinter42.printRecords((java.lang.Object[]) openOptionArray78);
        cSVPrinter8.printRecords((java.lang.Object[]) openOptionArray78);
        org.apache.commons.csv.CSVParser.Builder builder81 = builder5.setOpenOptions(openOptionArray78);
        org.apache.commons.csv.CSVParser.Builder builder83 = builder5.setFile("\n");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVPrinter8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(char31);
        org.junit.Assert.assertNotNull(cSVParser32);
        org.junit.Assert.assertNotNull(cSVRecordList33);
        org.junit.Assert.assertNotNull(cSVRecordStream34);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(cSVPrinter42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + predefined58 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined58.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNull(char64);
        org.junit.Assert.assertNotNull(cSVParser65);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(openOptionArray78);
        org.junit.Assert.assertArrayEquals(openOptionArray78, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(true);
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setHeader(resultSet7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder8.setDelimiter('a');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder8.setIgnoreEmptyLines(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setRecordNumber((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharset(charset11);
        org.apache.commons.csv.CSVParser.Builder builder13 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setFile("hi!");
        byte[] byteArray19 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder20 = builder15.setByteArray(byteArray19);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder10.setByteArray(byteArray19);
        org.apache.commons.csv.CSVParser.Builder builder22 = builder5.setByteArray(byteArray19);
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setFile("hi!");
        java.io.File file28 = builder27.getFile();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder22.setFile(file28);
        java.io.Reader reader30 = builder29.getReader();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder29.setCharSequence((java.lang.CharSequence) "\n");
        org.apache.commons.csv.CSVParser.Builder builder34 = builder32.setBufferSize((java.lang.Integer) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertArrayEquals(byteArray19, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertNull("file28.getParent() == null", file28.getParent());
        org.junit.Assert.assertEquals(file28.toString(), "hi!");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(reader30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        java.io.Writer writer7 = builder4.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder4.setCharSequence((java.lang.CharSequence) "");
        java.io.Reader reader10 = builder4.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV;
        org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse(reader10, cSVFormat11);
        java.lang.Character char13 = cSVFormat11.getCommentMarker();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(writer7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(reader10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVParser12);
        org.junit.Assert.assertNull(char13);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        java.net.URL uRL0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder1.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setFile("hi!");
        java.nio.charset.Charset charset6 = null;
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setCharset(charset6);
        java.io.Writer writer8 = builder5.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder5.setCharSequence((java.lang.CharSequence) "");
        java.nio.charset.Charset charset11 = builder10.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char15 = cSVFormat14.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("", cSVFormat14);
        java.lang.String str17 = cSVFormat14.getRecordSeparator();
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setFile("hi!");
        java.nio.charset.Charset charset23 = null;
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setCharset(charset23);
        java.io.Writer writer25 = builder22.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray27 = cSVFormat26.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder28 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat26);
        java.sql.ResultSetMetaData resultSetMetaData29 = null;
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setHeader(resultSetMetaData29);
        java.sql.ResultSet resultSet31 = null;
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder30.setHeader(resultSet31);
        java.sql.ResultSetMetaData resultSetMetaData33 = null;
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder32.setHeader(resultSetMetaData33);
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray36 = cSVFormat35.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder37 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat35);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder37.setHeader(strArray39);
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder34.setHeaderComments(strArray39);
        cSVFormat14.printRecord((java.lang.Appendable) writer25, (java.lang.Object[]) strArray39);
        org.apache.commons.csv.CSVFormat.Builder builder43 = cSVFormat14.builder();
        boolean boolean44 = cSVFormat14.isCommentMarkerSet();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser45 = org.apache.commons.csv.CSVParser.parse(uRL0, charset11, cSVFormat14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(writer8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(char15);
        org.junit.Assert.assertNotNull(cSVParser16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(writer25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNull(strArray27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNull(strArray36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertArrayEquals(strArray39, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset(0L);
        java.nio.charset.Charset charset6 = builder5.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setCharset(charset6);
        org.apache.commons.io.IORandomAccessFile iORandomAccessFile8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setRandomAccessFile(iORandomAccessFile8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        java.io.Writer writer7 = builder4.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder4.setCharSequence((java.lang.CharSequence) "");
        java.io.Reader reader10 = builder4.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.DEFAULT;
        boolean boolean12 = cSVFormat11.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char15 = cSVFormat14.getEscapeCharacter();
        java.lang.String[] strArray16 = cSVFormat14.getHeaderComments();
        boolean boolean17 = cSVFormat14.isEscapeCharacterSet();
        java.lang.String[] strArray18 = cSVFormat14.getHeaderComments();
        boolean boolean19 = cSVFormat14.getLenientEof();
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter22 = cSVFormat21.printer();
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setFile("hi!");
        java.nio.charset.Charset charset28 = null;
        org.apache.commons.csv.CSVParser.Builder builder29 = builder27.setCharset(charset28);
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder35 = builder33.setFile("hi!");
        java.nio.charset.Charset charset36 = null;
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setCharset(charset36);
        org.apache.commons.csv.CSVFormat.Predefined predefined38 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray39 = new java.lang.Object[] { builder27, 1L, charset36, predefined38 };
        cSVPrinter22.printRecord(objArray39);
        cSVPrinter22.flush();
        org.apache.commons.csv.CSVFormat cSVFormat44 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char45 = cSVFormat44.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser46 = org.apache.commons.csv.CSVParser.parse("", cSVFormat44);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser46.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream48 = cSVParser46.stream();
        cSVPrinter22.printRecords(cSVRecordStream48);
        java.lang.Appendable appendable50 = cSVPrinter22.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter51 = cSVFormat14.print(appendable50);
        org.apache.commons.csv.CSVPrinter cSVPrinter52 = cSVFormat11.print(appendable50);
        org.apache.commons.csv.CSVParser cSVParser55 = new org.apache.commons.csv.CSVParser(reader10, cSVFormat11, (long) ' ', (long) '\"');
        boolean boolean56 = cSVParser55.hasTrailerComment();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(writer7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(reader10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(char15);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(cSVPrinter22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + predefined38 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined38.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(char45);
        org.junit.Assert.assertNotNull(cSVParser46);
        org.junit.Assert.assertNotNull(cSVRecordList47);
        org.junit.Assert.assertNotNull(cSVRecordStream48);
        org.junit.Assert.assertNotNull(appendable50);
        org.junit.Assert.assertNotNull(cSVPrinter51);
        org.junit.Assert.assertNotNull(cSVPrinter52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setRecordNumber((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharset(charset11);
        org.apache.commons.csv.CSVParser.Builder builder13 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setFile("hi!");
        byte[] byteArray19 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder20 = builder15.setByteArray(byteArray19);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder10.setByteArray(byteArray19);
        org.apache.commons.csv.CSVParser.Builder builder22 = builder5.setByteArray(byteArray19);
        org.apache.commons.csv.CSVParser.Builder builder24 = builder5.setBufferSize((java.lang.Integer) (-1));
        java.nio.file.OpenOption[] openOptionArray25 = builder5.getOpenOptions();
        java.net.URI uRI26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder27 = builder5.setURI(uRI26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertArrayEquals(byteArray19, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(openOptionArray25);
        org.junit.Assert.assertArrayEquals(openOptionArray25, new java.nio.file.OpenOption[] { null });
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter7 = cSVFormat6.printer();
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setFile("hi!");
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setCharset(charset13);
        org.apache.commons.csv.CSVParser.Builder builder16 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setFile("hi!");
        java.nio.charset.Charset charset21 = null;
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharset(charset21);
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray24 = new java.lang.Object[] { builder12, 1L, charset21, predefined23 };
        cSVPrinter7.printRecord(objArray24);
        org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char29 = cSVFormat28.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse("", cSVFormat28);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator31 = cSVParser30.spliterator();
        java.lang.String str32 = cSVParser30.getHeaderComment();
        java.lang.String str33 = cSVParser30.getFirstEndOfLine();
        cSVPrinter7.print((java.lang.Object) str33);
        cSVPrinter7.println();
        org.apache.commons.csv.CSVParser.Builder builder36 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder38 = builder36.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder40 = builder38.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder42 = builder40.setCharacterOffset((long) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray43 = builder42.getOpenOptions();
        cSVPrinter7.printRecords((java.lang.Object[]) openOptionArray43);
        org.apache.commons.csv.CSVParser.Builder builder45 = builder4.setOpenOptions(openOptionArray43);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder47 = builder4.setCharset("\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVPrinter7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNull(char29);
        org.junit.Assert.assertNotNull(cSVParser30);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(openOptionArray43);
        org.junit.Assert.assertArrayEquals(openOptionArray43, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset(0L);
        java.nio.charset.Charset charset3 = builder2.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setFile("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharset(charset11);
        java.io.OutputStream outputStream13 = builder12.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder2.setOutputStream(outputStream13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder2.setPath("hi!");
        java.nio.file.Path path17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder18 = builder2.setPath(path17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(outputStream13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.QuoteMode quoteMode1 = cSVFormat0.getQuoteMode();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        boolean boolean3 = cSVFormat0.isCommentMarkerSet();
        boolean boolean4 = cSVFormat0.isEscapeCharacterSet();
        boolean boolean5 = cSVFormat0.getTrailingData();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(quoteMode1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        java.lang.String[] strArray3 = cSVFormat1.getHeaderComments();
        boolean boolean4 = cSVFormat1.getIgnoreSurroundingSpaces();
        boolean boolean5 = cSVFormat1.getAllowMissingColumnNames();
        boolean boolean6 = cSVFormat1.getAutoFlush();
        boolean boolean7 = cSVFormat1.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter10 = cSVFormat9.printer();
        cSVPrinter10.close(true);
        cSVPrinter10.close();
        java.lang.Appendable appendable14 = cSVPrinter10.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter15 = cSVFormat1.print(appendable14);
        cSVPrinter15.close(false);
        java.sql.ResultSet resultSet18 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter15.printRecords(resultSet18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVPrinter10);
        org.junit.Assert.assertNotNull(appendable14);
        org.junit.Assert.assertNotNull(cSVPrinter15);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        org.apache.commons.csv.CSVParser.Builder builder2 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        byte[] byteArray17 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder18 = builder13.setByteArray(byteArray17);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder6.setByteArray(byteArray17);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setBufferSize((int) (short) 100);
        org.apache.commons.csv.CSVParser.Builder builder22 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder28 = builder26.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path29 = builder28.getPath();
        org.apache.commons.csv.CSVParser.Builder builder30 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder30.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder34 = builder32.setFile("hi!");
        byte[] byteArray36 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder37 = builder32.setByteArray(byteArray36);
        org.apache.commons.csv.CSVParser.Builder builder39 = builder37.setBufferSizeMax(1);
        java.nio.charset.Charset charset40 = builder37.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char43 = cSVFormat42.getEscapeCharacter();
        java.lang.Character char44 = cSVFormat42.getCommentMarker();
        org.apache.commons.csv.CSVParser cSVParser45 = org.apache.commons.csv.CSVParser.parse(path29, charset40, cSVFormat42);
        org.apache.commons.csv.CSVParser.Builder builder46 = builder19.setCharset(charset40);
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_TSV;
        org.apache.commons.csv.CSVFormat cSVFormat48 = predefined47.getFormat();
        java.lang.String str49 = cSVFormat48.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat51 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char52 = cSVFormat51.getEscapeCharacter();
        java.lang.Appendable appendable53 = null;
        cSVFormat51.println(appendable53);
        org.apache.commons.csv.CSVParser.Builder builder55 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder57 = builder55.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder59 = builder57.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder61 = builder59.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path62 = builder61.getPath();
        org.apache.commons.csv.CSVFormat.Predefined predefined63 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat64 = predefined63.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder65 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder67 = builder65.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder69 = builder67.setFile("hi!");
        java.nio.charset.Charset charset70 = null;
        org.apache.commons.csv.CSVParser.Builder builder71 = builder69.setCharset(charset70);
        java.io.Writer writer72 = builder69.getWriter();
        cSVFormat64.println((java.lang.Appendable) writer72);
        org.apache.commons.csv.CSVParser.Builder builder74 = builder61.setWriter(writer72);
        cSVFormat51.println((java.lang.Appendable) writer72);
        org.apache.commons.csv.CSVPrinter cSVPrinter76 = cSVFormat48.print((java.lang.Appendable) writer72);
        cSVFormat0.print((java.lang.Object) builder46, (java.lang.Appendable) writer72, true);
        org.apache.commons.csv.CSVParser.Builder builder79 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder81 = builder79.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder83 = builder81.setFile("hi!");
        byte[] byteArray85 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder86 = builder81.setByteArray(byteArray85);
        org.apache.commons.csv.CSVParser.Builder builder88 = builder86.setBufferSizeMax(1);
        java.io.Reader reader89 = builder88.getReader();
        org.apache.commons.csv.CSVParser.Builder builder90 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder92 = builder90.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder94 = builder92.setFile("hi!");
        byte[] byteArray96 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder97 = builder92.setByteArray(byteArray96);
        org.apache.commons.csv.CSVParser.Builder builder98 = builder88.setByteArray(byteArray96);
        org.apache.commons.csv.CSVParser.Builder builder99 = builder46.setByteArray(byteArray96);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(path29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertArrayEquals(byteArray36, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNull(char43);
        org.junit.Assert.assertNull(char44);
        org.junit.Assert.assertNotNull(cSVParser45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_TSV + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_TSV));
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\r\n" + "'", str49, "\r\n");
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNull(char52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(path62);
        org.junit.Assert.assertTrue("'" + predefined63 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined63.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(writer72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(cSVPrinter76);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertArrayEquals(byteArray85, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(reader89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertArrayEquals(byteArray96, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        cSVPrinter2.flush();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char25 = cSVFormat24.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("", cSVFormat24);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser26.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream28 = cSVParser26.stream();
        cSVPrinter2.printRecords(cSVRecordStream28);
        cSVPrinter2.close();
        cSVPrinter2.println();
        cSVPrinter2.printComment("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        cSVPrinter2.close(true);
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char38 = cSVFormat37.getEscapeCharacter();
        java.lang.String[] strArray39 = cSVFormat37.getHeaderComments();
        boolean boolean40 = cSVFormat37.isEscapeCharacterSet();
        java.lang.String[] strArray41 = cSVFormat37.getHeaderComments();
        java.lang.Character char42 = cSVFormat37.getQuoteCharacter();
        boolean boolean43 = cSVFormat37.getTrailingData();
        org.apache.commons.csv.CSVParser.Builder builder44 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder46 = builder44.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setFile("hi!");
        byte[] byteArray50 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder51 = builder46.setByteArray(byteArray50);
        org.apache.commons.csv.CSVParser.Builder builder53 = builder51.setBufferSizeMax(1);
        java.io.Reader reader54 = builder53.getReader();
        org.apache.commons.csv.CSVParser cSVParser55 = cSVFormat37.parse(reader54);
        cSVPrinter2.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser55);
        long long57 = cSVParser55.getCurrentLineNumber();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList58 = cSVParser55.getRecords();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator59 = cSVParser55.spliterator();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNotNull(cSVParser26);
        org.junit.Assert.assertNotNull(cSVRecordList27);
        org.junit.Assert.assertNotNull(cSVRecordStream28);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNull(char38);
        org.junit.Assert.assertNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertNull(char42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertArrayEquals(byteArray50, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(reader54);
        org.junit.Assert.assertNotNull(cSVParser55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(cSVRecordList58);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator59);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder4.setTrailingData(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_TSV;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        org.apache.commons.csv.QuoteMode quoteMode15 = cSVFormat14.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setQuoteMode(quoteMode15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder12.setDelimiter(' ');
        java.sql.ResultSet resultSet19 = null;
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder12.setHeader(resultSet19);
        java.sql.ResultSet resultSet21 = null;
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder12.setHeader(resultSet21);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_TSV + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_TSV));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + quoteMode15 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode15.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        java.io.Writer writer7 = builder4.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder4.setCharSequence((java.lang.CharSequence) "");
        java.io.Reader reader10 = builder4.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char14 = cSVFormat13.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat13);
        java.lang.String str16 = cSVFormat13.getRecordSeparator();
        org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse(reader10, cSVFormat13);
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        boolean boolean19 = cSVFormat18.isCommentMarkerSet();
        boolean boolean20 = cSVFormat18.isCommentMarkerSet();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode21 = cSVFormat18.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse(reader10, cSVFormat18);
        boolean boolean23 = cSVParser22.isClosed();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(writer7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(reader10);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(cSVParser15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVParser17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode21 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode21.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVParser22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset(0L);
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray4 = cSVFormat3.getHeader();
        boolean boolean5 = cSVFormat3.getLenientEof();
        boolean boolean6 = cSVFormat3.isCommentMarkerSet();
        java.lang.String str7 = cSVFormat3.getRecordSeparator();
        boolean boolean8 = cSVFormat3.getTrim();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder0.setFormat(cSVFormat3);
        boolean boolean10 = cSVFormat3.getTrim();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\r\n" + "'", str7, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setBufferSize((int) '\"');
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setFile("hi!");
        byte[] byteArray11 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder12 = builder7.setByteArray(byteArray11);
        org.apache.commons.csv.CSVParser.Builder builder13 = builder0.setByteArray(byteArray11);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder15 = builder0.setCharset("Delimiter=<4> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: Delimiter=<4> SkipHeaderRecord:false");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertArrayEquals(byteArray11, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char3 = cSVFormat2.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        java.lang.String str5 = cSVParser4.getHeaderComment();
        java.lang.String str6 = cSVParser4.getHeaderComment();
        cSVParser4.close();
        boolean boolean8 = cSVParser4.hasHeaderComment();
        java.lang.String str9 = cSVParser4.getHeaderComment();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSet5);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray10 = cSVFormat9.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat9);
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder11.setHeader(strArray13);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder8.setHeaderComments(strArray13);
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char19 = cSVFormat18.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser20 = org.apache.commons.csv.CSVParser.parse("", cSVFormat18);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode21 = cSVFormat18.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder8.setDuplicateHeaderMode(duplicateHeaderMode21);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder8.setEscape('a');
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setAllowMissingColumnNames(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertArrayEquals(strArray13, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNull(char19);
        org.junit.Assert.assertNotNull(cSVParser20);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode21 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode21.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setQuote('#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setLenientEof(false);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setTrim(true);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder10.setIgnoreEmptyLines(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset(0L);
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder5.setCharset(charset9);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setFile("hi!");
        byte[] byteArray24 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder25 = builder20.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder15.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder10.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharacterOffset(0L);
        java.nio.charset.Charset charset34 = builder33.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder28.setCharset(charset34);
        org.apache.commons.csv.CSVParser.Builder builder36 = builder27.setCharset(charset34);
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray38 = cSVFormat37.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder39 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat37);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder39.setHeader(strArray41);
        org.apache.commons.csv.CSVFormat cSVFormat43 = builder39.get();
        org.apache.commons.csv.CSVParser.Builder builder44 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder46 = builder44.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setFile("hi!");
        java.nio.charset.Charset charset49 = null;
        org.apache.commons.csv.CSVParser.Builder builder50 = builder48.setCharset(charset49);
        java.io.Writer writer51 = builder48.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat53 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter54 = cSVFormat53.printer();
        org.apache.commons.csv.CSVParser.Builder builder55 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder57 = builder55.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder59 = builder57.setFile("hi!");
        java.nio.charset.Charset charset60 = null;
        org.apache.commons.csv.CSVParser.Builder builder61 = builder59.setCharset(charset60);
        org.apache.commons.csv.CSVParser.Builder builder63 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder65 = builder63.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder67 = builder65.setFile("hi!");
        java.nio.charset.Charset charset68 = null;
        org.apache.commons.csv.CSVParser.Builder builder69 = builder67.setCharset(charset68);
        org.apache.commons.csv.CSVFormat.Predefined predefined70 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray71 = new java.lang.Object[] { builder59, 1L, charset68, predefined70 };
        cSVPrinter54.printRecord(objArray71);
        cSVFormat43.printRecord((java.lang.Appendable) writer51, objArray71);
        boolean boolean74 = cSVFormat43.isCommentMarkerSet();
        org.apache.commons.csv.CSVParser.Builder builder75 = builder36.setFormat(cSVFormat43);
        org.apache.commons.csv.CSVParser.Builder builder77 = builder36.setCharacterOffset((long) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder79 = builder36.setCharset("Delimiter=<#> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: Delimiter=<#> SkipHeaderRecord:false");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertArrayEquals(strArray41, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(writer51);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(cSVPrinter54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + predefined70 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined70.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder2.setHeader(strArray4);
        org.apache.commons.csv.CSVFormat cSVFormat6 = builder2.get();
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setHeader(resultSet7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder2.setLenientEof(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setTrailingData(false);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setDelimiter('4');
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setQuote('\"');
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder14.setSkipHeaderRecord(false);
        java.sql.ResultSetMetaData resultSetMetaData19 = null;
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder14.setHeader(resultSetMetaData19);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setLenientEof(true);
        java.sql.ResultSet resultSet23 = null;
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setHeader(resultSet23);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertArrayEquals(strArray4, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset(0L);
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder5.setCharset(charset9);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setFile("hi!");
        byte[] byteArray24 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder25 = builder20.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder15.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder10.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharacterOffset(0L);
        java.nio.charset.Charset charset34 = builder33.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder28.setCharset(charset34);
        org.apache.commons.csv.CSVParser.Builder builder36 = builder27.setCharset(charset34);
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder42 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder44 = builder42.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder46 = builder44.setFile("hi!");
        java.nio.charset.Charset charset47 = null;
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setCharset(charset47);
        java.io.Writer writer49 = builder46.getWriter();
        cSVFormat41.println((java.lang.Appendable) writer49);
        cSVFormat38.print((java.lang.Object) 10L, (java.lang.Appendable) writer49, true);
        org.apache.commons.csv.CSVParser.Builder builder53 = builder27.setFormat(cSVFormat38);
        org.apache.commons.csv.CSVFormat cSVFormat56 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char57 = cSVFormat56.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser58 = org.apache.commons.csv.CSVParser.parse("", cSVFormat56);
        java.lang.String str59 = cSVFormat56.getRecordSeparator();
        org.apache.commons.csv.CSVParser.Builder builder60 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder62 = builder60.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder64 = builder62.setFile("hi!");
        java.nio.charset.Charset charset65 = null;
        org.apache.commons.csv.CSVParser.Builder builder66 = builder64.setCharset(charset65);
        java.io.Writer writer67 = builder64.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat68 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray69 = cSVFormat68.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder70 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat68);
        java.sql.ResultSetMetaData resultSetMetaData71 = null;
        org.apache.commons.csv.CSVFormat.Builder builder72 = builder70.setHeader(resultSetMetaData71);
        java.sql.ResultSet resultSet73 = null;
        org.apache.commons.csv.CSVFormat.Builder builder74 = builder72.setHeader(resultSet73);
        java.sql.ResultSetMetaData resultSetMetaData75 = null;
        org.apache.commons.csv.CSVFormat.Builder builder76 = builder74.setHeader(resultSetMetaData75);
        org.apache.commons.csv.CSVFormat cSVFormat77 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray78 = cSVFormat77.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder79 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat77);
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder82 = builder79.setHeader(strArray81);
        org.apache.commons.csv.CSVFormat.Builder builder83 = builder76.setHeaderComments(strArray81);
        cSVFormat56.printRecord((java.lang.Appendable) writer67, (java.lang.Object[]) strArray81);
        org.apache.commons.csv.CSVParser.Builder builder85 = builder53.setWriter(writer67);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path86 = builder53.getPath();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: WriterOrigin#getPath() for BufferedWriter origin java.io.BufferedWriter@5e56f03c");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(writer49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNull(char57);
        org.junit.Assert.assertNotNull(cSVParser58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(writer67);
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertNull(strArray69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(cSVFormat77);
        org.junit.Assert.assertNull(strArray78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertArrayEquals(strArray81, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray7 = builder6.getOpenOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder9 = builder6.setPath("\001");
            org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException; message: Illegal char <?> at index 0: ?");
        } catch (java.nio.file.InvalidPathException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(openOptionArray7);
        org.junit.Assert.assertArrayEquals(openOptionArray7, new java.nio.file.OpenOption[] {});
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        cSVPrinter2.close(true);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char8 = cSVFormat7.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("", cSVFormat7);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator10 = cSVParser9.spliterator();
        java.lang.String str11 = cSVParser9.getHeaderComment();
        java.lang.String str12 = cSVParser9.getTrailerComment();
        long long13 = cSVParser9.getRecordNumber();
        cSVPrinter2.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser9);
        cSVPrinter2.printComment("");
        cSVPrinter2.close();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertNotNull(cSVParser9);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setDelimiter('\"');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setTrailingData(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset(0L);
        java.nio.charset.Charset charset6 = builder5.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setCharset(charset6);
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setFile("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char13 = cSVFormat12.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("", cSVFormat12);
        java.lang.String str15 = cSVFormat12.getRecordSeparator();
        org.apache.commons.csv.CSVParser.Builder builder16 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setFile("hi!");
        java.nio.charset.Charset charset21 = null;
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharset(charset21);
        java.io.Writer writer23 = builder20.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray25 = cSVFormat24.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder26 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat24);
        java.sql.ResultSetMetaData resultSetMetaData27 = null;
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setHeader(resultSetMetaData27);
        java.sql.ResultSet resultSet29 = null;
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setHeader(resultSet29);
        java.sql.ResultSetMetaData resultSetMetaData31 = null;
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder30.setHeader(resultSetMetaData31);
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray34 = cSVFormat33.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder35 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat33);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder35.setHeader(strArray37);
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder32.setHeaderComments(strArray37);
        cSVFormat12.printRecord((java.lang.Appendable) writer23, (java.lang.Object[]) strArray37);
        org.apache.commons.csv.CSVParser.Builder builder41 = builder9.setWriter(writer23);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Reader reader42 = builder41.getReader();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: WriterOrigin#getPath() for BufferedWriter origin java.io.BufferedWriter@196107f9");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(char13);
        org.junit.Assert.assertNotNull(cSVParser14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(writer23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(strArray25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(strArray34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertArrayEquals(strArray37, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char3 = cSVFormat2.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        java.lang.String str5 = cSVFormat2.getRecordSeparator();
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharset(charset11);
        java.io.Writer writer13 = builder10.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray15 = cSVFormat14.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder16 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat14);
        java.sql.ResultSetMetaData resultSetMetaData17 = null;
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setHeader(resultSetMetaData17);
        java.sql.ResultSet resultSet19 = null;
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setHeader(resultSet19);
        java.sql.ResultSetMetaData resultSetMetaData21 = null;
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setHeader(resultSetMetaData21);
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray24 = cSVFormat23.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder25 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat23);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder25.setHeader(strArray27);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder22.setHeaderComments(strArray27);
        cSVFormat2.printRecord((java.lang.Appendable) writer13, (java.lang.Object[]) strArray27);
        org.apache.commons.csv.CSVFormat.Builder builder31 = cSVFormat2.builder();
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setQuote(' ');
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(writer13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(strArray15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(strArray24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertArrayEquals(strArray27, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        boolean boolean1 = cSVFormat0.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char4 = cSVFormat3.getEscapeCharacter();
        java.lang.String[] strArray5 = cSVFormat3.getHeaderComments();
        boolean boolean6 = cSVFormat3.isEscapeCharacterSet();
        java.lang.String[] strArray7 = cSVFormat3.getHeaderComments();
        boolean boolean8 = cSVFormat3.getLenientEof();
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat10.printer();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setFile("hi!");
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharset(charset17);
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setFile("hi!");
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharset(charset25);
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray28 = new java.lang.Object[] { builder16, 1L, charset25, predefined27 };
        cSVPrinter11.printRecord(objArray28);
        cSVPrinter11.flush();
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char34 = cSVFormat33.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse("", cSVFormat33);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList36 = cSVParser35.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream37 = cSVParser35.stream();
        cSVPrinter11.printRecords(cSVRecordStream37);
        java.lang.Appendable appendable39 = cSVPrinter11.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter40 = cSVFormat3.print(appendable39);
        org.apache.commons.csv.CSVPrinter cSVPrinter41 = cSVFormat0.print(appendable39);
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.MONGODB_TSV;
        boolean boolean43 = cSVFormat42.getTrailingData();
        org.apache.commons.csv.CSVPrinter cSVPrinter44 = new org.apache.commons.csv.CSVPrinter(appendable39, cSVFormat42);
        java.sql.ResultSet resultSet45 = null;
        cSVPrinter44.printHeaders(resultSet45);
        java.sql.ResultSet resultSet47 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter44.printRecords(resultSet47, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVPrinter11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(char34);
        org.junit.Assert.assertNotNull(cSVParser35);
        org.junit.Assert.assertNotNull(cSVRecordList36);
        org.junit.Assert.assertNotNull(cSVRecordStream37);
        org.junit.Assert.assertNotNull(appendable39);
        org.junit.Assert.assertNotNull(cSVPrinter40);
        org.junit.Assert.assertNotNull(cSVPrinter41);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder7 = builder2.setByteArray(byteArray6);
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setCharacterOffset(0L);
        java.nio.charset.Charset charset11 = builder10.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder7.setCharset(charset11);
        org.apache.commons.csv.CSVParser cSVParser13 = builder12.getUnchecked();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList14 = cSVParser13.getRecords();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVParser13);
        org.junit.Assert.assertNotNull(cSVRecordList14);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.QuoteMode quoteMode1 = cSVFormat0.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char4 = cSVFormat3.getEscapeCharacter();
        java.lang.String[] strArray5 = cSVFormat3.getHeaderComments();
        boolean boolean6 = cSVFormat3.isEscapeCharacterSet();
        java.lang.String[] strArray7 = cSVFormat3.getHeaderComments();
        boolean boolean8 = cSVFormat3.getLenientEof();
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat10.printer();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setFile("hi!");
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharset(charset17);
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setFile("hi!");
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharset(charset25);
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray28 = new java.lang.Object[] { builder16, 1L, charset25, predefined27 };
        cSVPrinter11.printRecord(objArray28);
        cSVPrinter11.flush();
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char34 = cSVFormat33.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse("", cSVFormat33);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList36 = cSVParser35.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream37 = cSVParser35.stream();
        cSVPrinter11.printRecords(cSVRecordStream37);
        java.lang.Appendable appendable39 = cSVPrinter11.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter40 = cSVFormat3.print(appendable39);
        org.apache.commons.csv.CSVParser.Builder builder41 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder41.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder45 = builder43.setFile("hi!");
        java.nio.charset.Charset charset46 = null;
        org.apache.commons.csv.CSVParser.Builder builder47 = builder45.setCharset(charset46);
        java.io.Writer writer48 = builder45.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder50 = builder45.setCharSequence((java.lang.CharSequence) "");
        java.io.Reader reader51 = builder45.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char55 = cSVFormat54.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser56 = org.apache.commons.csv.CSVParser.parse("", cSVFormat54);
        java.lang.String str57 = cSVFormat54.getRecordSeparator();
        org.apache.commons.csv.CSVParser cSVParser58 = org.apache.commons.csv.CSVParser.parse(reader51, cSVFormat54);
        org.apache.commons.csv.CSVFormat cSVFormat60 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char61 = cSVFormat60.getEscapeCharacter();
        java.lang.String[] strArray62 = cSVFormat60.getHeaderComments();
        boolean boolean63 = cSVFormat60.isEscapeCharacterSet();
        java.lang.String[] strArray64 = cSVFormat60.getHeaderComments();
        boolean boolean65 = cSVFormat60.getLenientEof();
        org.apache.commons.csv.CSVFormat cSVFormat68 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char69 = cSVFormat68.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser70 = org.apache.commons.csv.CSVParser.parse("", cSVFormat68);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator71 = cSVParser70.spliterator();
        java.lang.String str72 = cSVParser70.getHeaderComment();
        java.lang.String str73 = cSVParser70.getFirstEndOfLine();
        boolean boolean74 = cSVParser70.hasHeaderComment();
        boolean boolean75 = cSVFormat60.equals((java.lang.Object) cSVParser70);
        org.apache.commons.csv.CSVParser cSVParser78 = new org.apache.commons.csv.CSVParser(reader51, cSVFormat60, (long) (byte) 10, 10L);
        org.apache.commons.csv.CSVParser cSVParser79 = cSVFormat3.parse(reader51);
        org.apache.commons.csv.CSVParser cSVParser80 = cSVFormat0.parse(reader51);
        boolean boolean81 = cSVParser80.hasTrailerComment();
        long long82 = cSVParser80.getCurrentLineNumber();
        java.util.List<java.lang.String> strList83 = cSVParser80.getHeaderNames();
        java.util.Spliterator<java.lang.String> strSpliterator84 = strList83.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator85 = strList83.spliterator();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(quoteMode1);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVPrinter11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(char34);
        org.junit.Assert.assertNotNull(cSVParser35);
        org.junit.Assert.assertNotNull(cSVRecordList36);
        org.junit.Assert.assertNotNull(cSVRecordStream37);
        org.junit.Assert.assertNotNull(appendable39);
        org.junit.Assert.assertNotNull(cSVPrinter40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(writer48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(reader51);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNull(char55);
        org.junit.Assert.assertNotNull(cSVParser56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(cSVParser58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNull(char61);
        org.junit.Assert.assertNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertNull(char69);
        org.junit.Assert.assertNotNull(cSVParser70);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(cSVParser79);
        org.junit.Assert.assertNotNull(cSVParser80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertNotNull(strSpliterator84);
        org.junit.Assert.assertNotNull(strSpliterator85);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        boolean boolean1 = cSVFormat0.getLenientEof();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char3 = cSVFormat2.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList5 = cSVParser4.getRecords();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser4.spliterator();
        java.lang.String str7 = cSVParser4.getFirstEndOfLine();
        java.lang.String str8 = cSVParser4.getTrailerComment();
        java.lang.String str9 = cSVParser4.getHeaderComment();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = cSVParser4.getHeaderMap();
        long long11 = cSVParser4.getRecordNumber();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(cSVRecordList5);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined3 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat4 = predefined3.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setFile("hi!");
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharset(charset10);
        java.io.Writer writer12 = builder9.getWriter();
        cSVFormat4.println((java.lang.Appendable) writer12);
        cSVFormat1.print((java.lang.Object) 10L, (java.lang.Appendable) writer12, true);
        org.apache.commons.csv.CSVPrinter cSVPrinter16 = cSVFormat1.printer();
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char20 = cSVFormat19.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse("", cSVFormat19);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator22 = cSVParser21.spliterator();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList23 = cSVParser21.getRecords();
        cSVPrinter16.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVRecordList23);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator25 = cSVRecordList23.spliterator();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + predefined3 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined3.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(writer12);
        org.junit.Assert.assertNotNull(cSVPrinter16);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(cSVParser21);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator22);
        org.junit.Assert.assertNotNull(cSVRecordList23);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator25);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset(0L);
        java.nio.charset.Charset charset3 = builder2.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setCharacterOffset(0L);
        java.net.URI uRI6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setURI(uRI6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setBufferSizeMax((int) (byte) 10);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char8 = cSVFormat7.getEscapeCharacter();
        java.lang.String[] strArray9 = cSVFormat7.getHeaderComments();
        boolean boolean10 = cSVFormat7.getIgnoreSurroundingSpaces();
        boolean boolean11 = cSVFormat7.getAllowMissingColumnNames();
        boolean boolean12 = cSVFormat7.getAutoFlush();
        org.apache.commons.csv.CSVParser.Builder builder13 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path20 = builder19.getPath();
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.MONGODB_TSV;
        java.lang.String str22 = cSVFormat21.toString();
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder29 = builder27.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder31 = builder27.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder32 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder34 = builder32.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder36 = builder34.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder38 = builder36.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path39 = builder38.getPath();
        org.apache.commons.csv.CSVParser.Builder builder40 = builder31.setPath(path39);
        org.apache.commons.csv.CSVParser.Builder builder41 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption42 = null;
        java.nio.file.OpenOption[] openOptionArray43 = new java.nio.file.OpenOption[] { openOption42 };
        org.apache.commons.csv.CSVParser.Builder builder44 = builder41.setOpenOptions(openOptionArray43);
        org.apache.commons.csv.CSVParser.Builder builder46 = builder41.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder47 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder49 = builder47.setCharacterOffset(0L);
        java.nio.charset.Charset charset50 = builder49.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder51 = builder46.setCharset(charset50);
        org.apache.commons.csv.CSVParser.Builder builder52 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder54 = builder52.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder56 = builder54.setFile("hi!");
        java.nio.charset.Charset charset57 = null;
        org.apache.commons.csv.CSVParser.Builder builder58 = builder56.setCharset(charset57);
        org.apache.commons.csv.CSVParser.Builder builder59 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder61 = builder59.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder63 = builder61.setFile("hi!");
        byte[] byteArray65 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder66 = builder61.setByteArray(byteArray65);
        org.apache.commons.csv.CSVParser.Builder builder67 = builder56.setByteArray(byteArray65);
        org.apache.commons.csv.CSVParser.Builder builder68 = builder51.setByteArray(byteArray65);
        org.apache.commons.csv.CSVParser.Builder builder69 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder71 = builder69.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder72 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder74 = builder72.setCharacterOffset(0L);
        java.nio.charset.Charset charset75 = builder74.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder76 = builder69.setCharset(charset75);
        org.apache.commons.csv.CSVParser.Builder builder77 = builder68.setCharset(charset75);
        org.apache.commons.csv.CSVPrinter cSVPrinter78 = cSVFormat21.print(path39, charset75);
        org.apache.commons.csv.CSVFormat cSVFormat80 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char81 = cSVFormat80.getEscapeCharacter();
        java.lang.String[] strArray82 = cSVFormat80.getHeaderComments();
        boolean boolean83 = cSVFormat80.getIgnoreSurroundingSpaces();
        java.lang.Character char84 = cSVFormat80.getCommentMarker();
        org.apache.commons.csv.CSVParser cSVParser85 = org.apache.commons.csv.CSVParser.parse(path20, charset75, cSVFormat80);
        org.apache.commons.csv.CSVParser.Builder builder86 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder88 = builder86.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder90 = builder88.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder92 = builder90.setCharacterOffset((long) (byte) 10);
        java.nio.charset.Charset charset93 = builder92.getCharset();
        org.apache.commons.csv.CSVPrinter cSVPrinter94 = cSVFormat7.print(path20, charset93);
        java.lang.String str95 = cSVFormat7.getRecordSeparator();
        org.apache.commons.csv.CSVParser.Builder builder96 = builder3.setFormat(cSVFormat7);
        org.apache.commons.io.IORandomAccessFile iORandomAccessFile97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder98 = builder3.setRandomAccessFile(iORandomAccessFile97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(path20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str22, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(path39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(openOptionArray43);
        org.junit.Assert.assertArrayEquals(openOptionArray43, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertArrayEquals(byteArray65, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(charset75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(cSVPrinter78);
        org.junit.Assert.assertNotNull(cSVFormat80);
        org.junit.Assert.assertNull(char81);
        org.junit.Assert.assertNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(char84);
        org.junit.Assert.assertNotNull(cSVParser85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(charset93);
        org.junit.Assert.assertNotNull(cSVPrinter94);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char3 = cSVFormat2.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser4.spliterator();
        java.lang.String str6 = cSVParser4.getHeaderComment();
        java.lang.String str7 = cSVParser4.getFirstEndOfLine();
        java.util.List<java.lang.String> strList8 = cSVParser4.getHeaderNames();
        java.lang.String str9 = cSVParser4.getTrailerComment();
        java.lang.String str10 = cSVParser4.getFirstEndOfLine();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV;
        org.apache.commons.csv.CSVParser.Builder builder2 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setFile("hi!");
        java.io.File file7 = builder6.getFile();
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset(0L);
        java.nio.charset.Charset charset14 = builder13.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder8.setCharset(charset14);
        org.apache.commons.csv.CSVPrinter cSVPrinter16 = cSVFormat1.print(file7, charset14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder0.setCharset(charset14);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser18 = builder17.getUnchecked();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertNull("file7.getParent() == null", file7.getParent());
        org.junit.Assert.assertEquals(file7.toString(), "hi!");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(cSVPrinter16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setNullString(",");
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setQuote((java.lang.Character) ' ');
        org.apache.commons.csv.QuoteMode quoteMode11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder8.setQuoteMode(quoteMode11);
        org.apache.commons.csv.CSVFormat cSVFormat13 = builder8.get();
        boolean boolean14 = cSVFormat13.getTrim();
        boolean boolean15 = cSVFormat13.getTrailingDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder8 = builder4.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setFile("hi!");
        byte[] byteArray15 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder16 = builder11.setByteArray(byteArray15);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder4.setByteArray(byteArray15);
        int int18 = builder17.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder17.setCharacterOffset(1L);
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        boolean boolean22 = cSVFormat21.isCommentMarkerSet();
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setFile("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV;
        org.apache.commons.csv.CSVParser.Builder builder29 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder31 = builder29.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setFile("hi!");
        java.io.File file34 = builder33.getFile();
        org.apache.commons.csv.CSVParser.Builder builder35 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder38 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder40 = builder38.setCharacterOffset(0L);
        java.nio.charset.Charset charset41 = builder40.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder42 = builder35.setCharset(charset41);
        org.apache.commons.csv.CSVPrinter cSVPrinter43 = cSVFormat28.print(file34, charset41);
        org.apache.commons.csv.CSVParser.Builder builder44 = builder25.setFile(file34);
        org.apache.commons.csv.CSVParser.Builder builder45 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder47 = builder45.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder48 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder50 = builder48.setCharacterOffset(0L);
        java.nio.charset.Charset charset51 = builder50.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder52 = builder45.setCharset(charset51);
        org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVParser cSVParser55 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat54);
        org.apache.commons.csv.CSVParser cSVParser56 = org.apache.commons.csv.CSVParser.parse(file34, charset51, cSVFormat54);
        org.apache.commons.csv.CSVParser.Builder builder57 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder59 = builder57.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder61 = builder59.setCharSequence((java.lang.CharSequence) "hi!");
        org.apache.commons.csv.CSVParser.Builder builder62 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder64 = builder62.setCharacterOffset(0L);
        java.nio.charset.Charset charset65 = builder64.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder67 = builder64.setFile("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder68 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder70 = builder68.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder72 = builder70.setFile("hi!");
        java.nio.charset.Charset charset73 = null;
        org.apache.commons.csv.CSVParser.Builder builder74 = builder72.setCharset(charset73);
        java.io.OutputStream outputStream75 = builder74.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder76 = builder64.setOutputStream(outputStream75);
        org.apache.commons.csv.CSVParser.Builder builder78 = builder64.setPath("hi!");
        java.io.RandomAccessFile randomAccessFile79 = builder78.getRandomAccessFile();
        org.apache.commons.csv.CSVParser.Builder builder80 = builder59.setRandomAccessFile(randomAccessFile79);
        java.nio.charset.Charset charset81 = builder59.getCharsetDefault();
        org.apache.commons.csv.CSVPrinter cSVPrinter82 = cSVFormat21.print(file34, charset81);
        org.apache.commons.csv.CSVParser.Builder builder83 = builder20.setFile(file34);
        org.apache.commons.csv.CSVParser.Builder builder85 = builder83.setBufferSize((java.lang.Integer) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertArrayEquals(byteArray15, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8192 + "'", int18 == 8192);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertNull("file34.getParent() == null", file34.getParent());
        org.junit.Assert.assertEquals(file34.toString(), "hi!");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(cSVPrinter43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(cSVParser55);
        org.junit.Assert.assertNotNull(cSVParser56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(charset65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(outputStream75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(randomAccessFile79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(charset81);
        org.junit.Assert.assertNotNull(cSVPrinter82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        java.lang.String[] strArray3 = cSVFormat1.getHeaderComments();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        java.lang.String[] strArray5 = cSVFormat1.getHeaderComments();
        boolean boolean6 = cSVFormat1.getLenientEof();
        org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter9 = cSVFormat8.printer();
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setFile("hi!");
        java.nio.charset.Charset charset15 = null;
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharset(charset15);
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setFile("hi!");
        java.nio.charset.Charset charset23 = null;
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setCharset(charset23);
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray26 = new java.lang.Object[] { builder14, 1L, charset23, predefined25 };
        cSVPrinter9.printRecord(objArray26);
        cSVPrinter9.flush();
        org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char32 = cSVFormat31.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse("", cSVFormat31);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList34 = cSVParser33.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream35 = cSVParser33.stream();
        cSVPrinter9.printRecords(cSVRecordStream35);
        java.lang.Appendable appendable37 = cSVPrinter9.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter38 = cSVFormat1.print(appendable37);
        org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder44 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder46 = builder44.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setFile("hi!");
        java.nio.charset.Charset charset49 = null;
        org.apache.commons.csv.CSVParser.Builder builder50 = builder48.setCharset(charset49);
        java.io.Writer writer51 = builder48.getWriter();
        cSVFormat43.println((java.lang.Appendable) writer51);
        cSVFormat40.print((java.lang.Object) 10L, (java.lang.Appendable) writer51, true);
        boolean boolean56 = cSVFormat40.equals((java.lang.Object) (byte) 10);
        org.apache.commons.csv.CSVFormat cSVFormat58 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter59 = cSVFormat58.printer();
        org.apache.commons.csv.CSVParser.Builder builder60 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder62 = builder60.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder64 = builder62.setFile("hi!");
        java.nio.charset.Charset charset65 = null;
        org.apache.commons.csv.CSVParser.Builder builder66 = builder64.setCharset(charset65);
        org.apache.commons.csv.CSVParser.Builder builder68 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder70 = builder68.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder72 = builder70.setFile("hi!");
        java.nio.charset.Charset charset73 = null;
        org.apache.commons.csv.CSVParser.Builder builder74 = builder72.setCharset(charset73);
        org.apache.commons.csv.CSVFormat.Predefined predefined75 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray76 = new java.lang.Object[] { builder64, 1L, charset73, predefined75 };
        cSVPrinter59.printRecord(objArray76);
        org.apache.commons.csv.CSVFormat cSVFormat80 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char81 = cSVFormat80.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser82 = org.apache.commons.csv.CSVParser.parse("", cSVFormat80);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator83 = cSVParser82.spliterator();
        java.lang.String str84 = cSVParser82.getHeaderComment();
        java.lang.String str85 = cSVParser82.getFirstEndOfLine();
        cSVPrinter59.print((java.lang.Object) str85);
        org.apache.commons.csv.CSVParser.Builder builder87 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption88 = null;
        java.nio.file.OpenOption[] openOptionArray89 = new java.nio.file.OpenOption[] { openOption88 };
        org.apache.commons.csv.CSVParser.Builder builder90 = builder87.setOpenOptions(openOptionArray89);
        cSVPrinter59.printRecord((java.lang.Object[]) openOptionArray89);
        java.lang.String str92 = cSVFormat40.format((java.lang.Object[]) openOptionArray89);
        cSVPrinter38.printRecords((java.lang.Object[]) openOptionArray89);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertNotNull(cSVPrinter9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNull(char32);
        org.junit.Assert.assertNotNull(cSVParser33);
        org.junit.Assert.assertNotNull(cSVRecordList34);
        org.junit.Assert.assertNotNull(cSVRecordStream35);
        org.junit.Assert.assertNotNull(appendable37);
        org.junit.Assert.assertNotNull(cSVPrinter38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(writer51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertNotNull(cSVPrinter59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + predefined75 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined75.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(cSVFormat80);
        org.junit.Assert.assertNull(char81);
        org.junit.Assert.assertNotNull(cSVParser82);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(openOptionArray89);
        org.junit.Assert.assertArrayEquals(openOptionArray89, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSet5);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode9 = org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setDuplicateHeaderMode(duplicateHeaderMode9);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder8.setRecordSeparator("Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat cSVFormat13 = builder12.get();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray15 = cSVFormat14.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder16 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat14);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder16.setHeader(strArray18);
        org.apache.commons.csv.CSVFormat cSVFormat20 = builder16.get();
        java.sql.ResultSet resultSet21 = null;
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder16.setHeader(resultSet21);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder16.setLenientEof(false);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setTrailingData(false);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder24.setDelimiter('4');
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter31 = cSVFormat30.printer();
        org.apache.commons.csv.CSVParser.Builder builder32 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder34 = builder32.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder36 = builder34.setFile("hi!");
        java.nio.charset.Charset charset37 = null;
        org.apache.commons.csv.CSVParser.Builder builder38 = builder36.setCharset(charset37);
        org.apache.commons.csv.CSVParser.Builder builder40 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder42 = builder40.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder44 = builder42.setFile("hi!");
        java.nio.charset.Charset charset45 = null;
        org.apache.commons.csv.CSVParser.Builder builder46 = builder44.setCharset(charset45);
        org.apache.commons.csv.CSVFormat.Predefined predefined47 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray48 = new java.lang.Object[] { builder36, 1L, charset45, predefined47 };
        cSVPrinter31.printRecord(objArray48);
        org.apache.commons.csv.CSVFormat cSVFormat52 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char53 = cSVFormat52.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser54 = org.apache.commons.csv.CSVParser.parse("", cSVFormat52);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator55 = cSVParser54.spliterator();
        java.lang.String str56 = cSVParser54.getHeaderComment();
        java.lang.String str57 = cSVParser54.getFirstEndOfLine();
        cSVPrinter31.print((java.lang.Object) str57);
        java.lang.Appendable appendable59 = cSVPrinter31.getOut();
        cSVFormat13.print((java.lang.Object) '4', appendable59, true);
        boolean boolean62 = cSVFormat13.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat64 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter65 = cSVFormat64.printer();
        org.apache.commons.csv.CSVParser.Builder builder66 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder68 = builder66.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder70 = builder68.setFile("hi!");
        java.nio.charset.Charset charset71 = null;
        org.apache.commons.csv.CSVParser.Builder builder72 = builder70.setCharset(charset71);
        org.apache.commons.csv.CSVParser.Builder builder74 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder76 = builder74.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder78 = builder76.setFile("hi!");
        java.nio.charset.Charset charset79 = null;
        org.apache.commons.csv.CSVParser.Builder builder80 = builder78.setCharset(charset79);
        org.apache.commons.csv.CSVFormat.Predefined predefined81 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray82 = new java.lang.Object[] { builder70, 1L, charset79, predefined81 };
        cSVPrinter65.printRecord(objArray82);
        cSVPrinter65.close();
        java.lang.Appendable appendable85 = cSVPrinter65.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter86 = cSVFormat13.print(appendable85);
        cSVPrinter86.printComment("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat cSVFormat91 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char92 = cSVFormat91.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser93 = org.apache.commons.csv.CSVParser.parse("", cSVFormat91);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList94 = cSVParser93.getRecords();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator95 = cSVParser93.spliterator();
        java.lang.String str96 = cSVParser93.getFirstEndOfLine();
        java.lang.String str97 = cSVParser93.getFirstEndOfLine();
        cSVPrinter86.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser93);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode9 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY + "'", duplicateHeaderMode9.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(strArray15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertArrayEquals(strArray18, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(cSVPrinter31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + predefined47 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined47.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertNull(char53);
        org.junit.Assert.assertNotNull(cSVParser54);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(appendable59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(cSVPrinter65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertTrue("'" + predefined81 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined81.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertNotNull(appendable85);
        org.junit.Assert.assertNotNull(cSVPrinter86);
        org.junit.Assert.assertNotNull(cSVFormat91);
        org.junit.Assert.assertNull(char92);
        org.junit.Assert.assertNotNull(cSVParser93);
        org.junit.Assert.assertNotNull(cSVRecordList94);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator95);
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertNull(str97);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset(0L);
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder5.setCharset(charset9);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setFile("hi!");
        byte[] byteArray24 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder25 = builder20.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder15.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder10.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharacterOffset(0L);
        java.nio.charset.Charset charset34 = builder33.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder28.setCharset(charset34);
        org.apache.commons.csv.CSVParser.Builder builder36 = builder27.setCharset(charset34);
        org.apache.commons.csv.CSVParser.Builder builder38 = builder36.setBufferSizeMax(0);
        org.apache.commons.csv.CSVParser cSVParser39 = builder36.getUnchecked();
        java.net.URI uRI40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder41 = builder36.setURI(uRI40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(cSVParser39);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("\r\n");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.??");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset(0L);
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder5.setCharset(charset9);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setFile("hi!");
        byte[] byteArray24 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder25 = builder20.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder15.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder10.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharacterOffset(0L);
        java.nio.charset.Charset charset34 = builder33.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder28.setCharset(charset34);
        org.apache.commons.csv.CSVParser.Builder builder36 = builder27.setCharset(charset34);
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray38 = cSVFormat37.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder39 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat37);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder39.setHeader(strArray41);
        org.apache.commons.csv.CSVFormat cSVFormat43 = builder39.get();
        org.apache.commons.csv.CSVParser.Builder builder44 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder46 = builder44.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setFile("hi!");
        java.nio.charset.Charset charset49 = null;
        org.apache.commons.csv.CSVParser.Builder builder50 = builder48.setCharset(charset49);
        java.io.Writer writer51 = builder48.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat53 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter54 = cSVFormat53.printer();
        org.apache.commons.csv.CSVParser.Builder builder55 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder57 = builder55.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder59 = builder57.setFile("hi!");
        java.nio.charset.Charset charset60 = null;
        org.apache.commons.csv.CSVParser.Builder builder61 = builder59.setCharset(charset60);
        org.apache.commons.csv.CSVParser.Builder builder63 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder65 = builder63.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder67 = builder65.setFile("hi!");
        java.nio.charset.Charset charset68 = null;
        org.apache.commons.csv.CSVParser.Builder builder69 = builder67.setCharset(charset68);
        org.apache.commons.csv.CSVFormat.Predefined predefined70 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray71 = new java.lang.Object[] { builder59, 1L, charset68, predefined70 };
        cSVPrinter54.printRecord(objArray71);
        cSVFormat43.printRecord((java.lang.Appendable) writer51, objArray71);
        boolean boolean74 = cSVFormat43.isCommentMarkerSet();
        org.apache.commons.csv.CSVParser.Builder builder75 = builder36.setFormat(cSVFormat43);
        org.apache.commons.csv.CSVParser.Builder builder77 = builder36.setCharacterOffset((long) 100);
        org.apache.commons.csv.CSVParser.Builder builder79 = builder36.setRecordNumber(33L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertArrayEquals(strArray41, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(writer51);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(cSVPrinter54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + predefined70 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined70.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset(0L);
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder5.setCharset(charset9);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setFile("hi!");
        byte[] byteArray24 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder25 = builder20.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder15.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder10.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharacterOffset(0L);
        java.nio.charset.Charset charset34 = builder33.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder28.setCharset(charset34);
        org.apache.commons.csv.CSVParser.Builder builder36 = builder27.setCharset(charset34);
        org.apache.commons.csv.CSVFormat.Predefined predefined37 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat38 = predefined37.getFormat();
        org.apache.commons.csv.CSVFormat cSVFormat39 = predefined37.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder40 = builder36.setFormat(cSVFormat39);
        org.apache.commons.csv.CSVParser.Builder builder42 = builder40.setCharacterOffset((long) '\\');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + predefined37 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined37.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        java.lang.String[] strArray3 = cSVFormat1.getHeaderComments();
        boolean boolean4 = cSVFormat1.getIgnoreSurroundingSpaces();
        java.lang.String str5 = cSVFormat1.getNullString();
        org.apache.commons.csv.QuoteMode quoteMode6 = cSVFormat1.getQuoteMode();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(quoteMode6);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        boolean boolean1 = cSVFormat0.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char4 = cSVFormat3.getEscapeCharacter();
        java.lang.String[] strArray5 = cSVFormat3.getHeaderComments();
        boolean boolean6 = cSVFormat3.isEscapeCharacterSet();
        java.lang.String[] strArray7 = cSVFormat3.getHeaderComments();
        boolean boolean8 = cSVFormat3.getLenientEof();
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat10.printer();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setFile("hi!");
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharset(charset17);
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setFile("hi!");
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharset(charset25);
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray28 = new java.lang.Object[] { builder16, 1L, charset25, predefined27 };
        cSVPrinter11.printRecord(objArray28);
        cSVPrinter11.flush();
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char34 = cSVFormat33.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse("", cSVFormat33);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList36 = cSVParser35.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream37 = cSVParser35.stream();
        cSVPrinter11.printRecords(cSVRecordStream37);
        java.lang.Appendable appendable39 = cSVPrinter11.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter40 = cSVFormat3.print(appendable39);
        org.apache.commons.csv.CSVPrinter cSVPrinter41 = cSVFormat0.print(appendable39);
        org.apache.commons.csv.CSVFormat cSVFormat43 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char44 = cSVFormat43.getEscapeCharacter();
        org.apache.commons.csv.CSVFormat cSVFormat45 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray46 = cSVFormat45.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder47 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat45);
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder47.setHeader(strArray49);
        org.apache.commons.csv.CSVFormat cSVFormat51 = builder47.get();
        boolean boolean52 = cSVFormat43.equals((java.lang.Object) builder47);
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder47.setDelimiter('a');
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder54.setTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder56.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat cSVFormat59 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray60 = cSVFormat59.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder61 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat59);
        java.sql.ResultSetMetaData resultSetMetaData62 = null;
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder61.setHeader(resultSetMetaData62);
        java.sql.ResultSet resultSet64 = null;
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder63.setHeader(resultSet64);
        java.sql.ResultSetMetaData resultSetMetaData66 = null;
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder65.setHeader(resultSetMetaData66);
        org.apache.commons.csv.CSVFormat cSVFormat68 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray69 = cSVFormat68.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder70 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat68);
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder73 = builder70.setHeader(strArray72);
        org.apache.commons.csv.CSVFormat.Builder builder74 = builder67.setHeaderComments(strArray72);
        org.apache.commons.csv.CSVFormat.Builder builder75 = builder58.setHeaderComments((java.lang.Object[]) strArray72);
        cSVPrinter41.printRecords((java.lang.Object[]) strArray72);
        java.lang.Object[] objArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter41.printRecord(objArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVPrinter11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(char34);
        org.junit.Assert.assertNotNull(cSVParser35);
        org.junit.Assert.assertNotNull(cSVRecordList36);
        org.junit.Assert.assertNotNull(cSVRecordStream37);
        org.junit.Assert.assertNotNull(appendable39);
        org.junit.Assert.assertNotNull(cSVPrinter40);
        org.junit.Assert.assertNotNull(cSVPrinter41);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNull(char44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNull(strArray46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertArrayEquals(strArray49, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertNull(strArray60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertNull(strArray69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertArrayEquals(strArray72, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setEscape((java.lang.Character) '\\');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharacterOffset((long) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray13 = builder12.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder5.setOpenOptions(openOptionArray13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder5.setCharacterOffset((long) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Writer writer17 = builder16.getWriter();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(openOptionArray13);
        org.junit.Assert.assertArrayEquals(openOptionArray13, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset(0L);
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder5.setCharset(charset9);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setFile("hi!");
        byte[] byteArray24 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder25 = builder20.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder15.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder10.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharacterOffset(0L);
        java.nio.charset.Charset charset34 = builder33.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder28.setCharset(charset34);
        org.apache.commons.csv.CSVParser.Builder builder36 = builder27.setCharset(charset34);
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder42 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder44 = builder42.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder46 = builder44.setFile("hi!");
        java.nio.charset.Charset charset47 = null;
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setCharset(charset47);
        java.io.Writer writer49 = builder46.getWriter();
        cSVFormat41.println((java.lang.Appendable) writer49);
        cSVFormat38.print((java.lang.Object) 10L, (java.lang.Appendable) writer49, true);
        org.apache.commons.csv.CSVParser.Builder builder53 = builder27.setFormat(cSVFormat38);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder55 = builder53.setCharset(",");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ,");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(writer49);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset(0L);
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder5.setCharset(charset9);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setFile("hi!");
        byte[] byteArray24 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder25 = builder20.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder15.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder10.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharacterOffset(0L);
        java.nio.charset.Charset charset34 = builder33.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder28.setCharset(charset34);
        org.apache.commons.csv.CSVParser.Builder builder36 = builder27.setCharset(charset34);
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray38 = cSVFormat37.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder39 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat37);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder39.setHeader(strArray41);
        org.apache.commons.csv.CSVFormat cSVFormat43 = builder39.get();
        org.apache.commons.csv.CSVParser.Builder builder44 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder46 = builder44.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setFile("hi!");
        java.nio.charset.Charset charset49 = null;
        org.apache.commons.csv.CSVParser.Builder builder50 = builder48.setCharset(charset49);
        java.io.Writer writer51 = builder48.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat53 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter54 = cSVFormat53.printer();
        org.apache.commons.csv.CSVParser.Builder builder55 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder57 = builder55.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder59 = builder57.setFile("hi!");
        java.nio.charset.Charset charset60 = null;
        org.apache.commons.csv.CSVParser.Builder builder61 = builder59.setCharset(charset60);
        org.apache.commons.csv.CSVParser.Builder builder63 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder65 = builder63.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder67 = builder65.setFile("hi!");
        java.nio.charset.Charset charset68 = null;
        org.apache.commons.csv.CSVParser.Builder builder69 = builder67.setCharset(charset68);
        org.apache.commons.csv.CSVFormat.Predefined predefined70 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray71 = new java.lang.Object[] { builder59, 1L, charset68, predefined70 };
        cSVPrinter54.printRecord(objArray71);
        cSVFormat43.printRecord((java.lang.Appendable) writer51, objArray71);
        boolean boolean74 = cSVFormat43.isCommentMarkerSet();
        org.apache.commons.csv.CSVParser.Builder builder75 = builder36.setFormat(cSVFormat43);
        org.apache.commons.csv.CSVParser.Builder builder76 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder78 = builder76.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder80 = builder78.setFile("hi!");
        java.nio.charset.Charset charset81 = null;
        org.apache.commons.csv.CSVParser.Builder builder82 = builder80.setCharset(charset81);
        java.io.Writer writer83 = builder80.getWriter();
        cSVFormat43.println((java.lang.Appendable) writer83);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertArrayEquals(strArray41, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(writer51);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(cSVPrinter54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + predefined70 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined70.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(writer83);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setBufferSize(0);
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream8 = builder7.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSet5);
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setHeader(resultSet7);
        org.apache.commons.csv.CSVFormat cSVFormat9 = builder8.get();
        boolean boolean10 = cSVFormat9.isQuoteCharacterSet();
        boolean boolean11 = cSVFormat9.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter14 = cSVFormat13.printer();
        org.apache.commons.csv.CSVParser.Builder builder15 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setFile("hi!");
        java.nio.charset.Charset charset20 = null;
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setCharset(charset20);
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setFile("hi!");
        java.nio.charset.Charset charset28 = null;
        org.apache.commons.csv.CSVParser.Builder builder29 = builder27.setCharset(charset28);
        org.apache.commons.csv.CSVFormat.Predefined predefined30 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray31 = new java.lang.Object[] { builder19, 1L, charset28, predefined30 };
        cSVPrinter14.printRecord(objArray31);
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char36 = cSVFormat35.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser37 = org.apache.commons.csv.CSVParser.parse("", cSVFormat35);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator38 = cSVParser37.spliterator();
        java.lang.String str39 = cSVParser37.getHeaderComment();
        java.lang.String str40 = cSVParser37.getFirstEndOfLine();
        cSVPrinter14.print((java.lang.Object) str40);
        java.lang.Appendable appendable42 = cSVPrinter14.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter43 = cSVFormat9.print(appendable42);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVPrinter14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + predefined30 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined30.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNull(char36);
        org.junit.Assert.assertNotNull(cSVParser37);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(appendable42);
        org.junit.Assert.assertNotNull(cSVPrinter43);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setQuote('#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setLenientEof(false);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setAutoFlush(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.hi!");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        cSVPrinter2.flush();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char25 = cSVFormat24.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("", cSVFormat24);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser26.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream28 = cSVParser26.stream();
        cSVPrinter2.printRecords(cSVRecordStream28);
        cSVPrinter2.close();
        cSVPrinter2.println();
        java.sql.ResultSet resultSet32 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter2.printRecords(resultSet32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNotNull(cSVParser26);
        org.junit.Assert.assertNotNull(cSVRecordList27);
        org.junit.Assert.assertNotNull(cSVRecordStream28);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVFormat.Builder builder1 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        boolean boolean2 = cSVFormat0.isCommentMarkerSet();
        boolean boolean3 = cSVFormat0.getTrim();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        java.io.File file0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray2 = cSVFormat1.getHeader();
        boolean boolean3 = cSVFormat1.getLenientEof();
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setFile("hi!");
        java.nio.charset.Charset charset9 = null;
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setCharset(charset9);
        int int11 = builder8.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder8.setRecordNumber((long) 10);
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharacterOffset(0L);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder13.setBufferSize((int) (byte) 10);
        java.io.File file18 = builder17.getFile();
        org.apache.commons.csv.CSVParser.Builder builder19 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder22 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setCharacterOffset(0L);
        java.nio.charset.Charset charset25 = builder24.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder26 = builder19.setCharset(charset25);
        org.apache.commons.csv.CSVPrinter cSVPrinter27 = cSVFormat1.print(file18, charset25);
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char31 = cSVFormat30.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse("", cSVFormat30);
        java.lang.String str33 = cSVFormat30.getRecordSeparator();
        org.apache.commons.csv.CSVParser.Builder builder34 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder36 = builder34.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder38 = builder36.setFile("hi!");
        java.nio.charset.Charset charset39 = null;
        org.apache.commons.csv.CSVParser.Builder builder40 = builder38.setCharset(charset39);
        java.io.Writer writer41 = builder38.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray43 = cSVFormat42.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder44 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat42);
        java.sql.ResultSetMetaData resultSetMetaData45 = null;
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder44.setHeader(resultSetMetaData45);
        java.sql.ResultSet resultSet47 = null;
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder46.setHeader(resultSet47);
        java.sql.ResultSetMetaData resultSetMetaData49 = null;
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder48.setHeader(resultSetMetaData49);
        org.apache.commons.csv.CSVFormat cSVFormat51 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray52 = cSVFormat51.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder53 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat51);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder53.setHeader(strArray55);
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder50.setHeaderComments(strArray55);
        cSVFormat30.printRecord((java.lang.Appendable) writer41, (java.lang.Object[]) strArray55);
        boolean boolean59 = cSVFormat30.getLenientEof();
        java.lang.String str60 = cSVFormat30.getDelimiterString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser61 = org.apache.commons.csv.CSVParser.parse(file0, charset25, cSVFormat30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8192 + "'", int11 == 8192);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertNull("file18.getParent() == null", file18.getParent());
        org.junit.Assert.assertEquals(file18.toString(), "hi!");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVPrinter27);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(char31);
        org.junit.Assert.assertNotNull(cSVParser32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(writer41);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNull(strArray43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertNull(strArray52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertArrayEquals(strArray55, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "4" + "'", str60, "4");
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        java.io.Writer writer7 = builder4.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder4.setCharSequence((java.lang.CharSequence) "");
        java.io.Reader reader10 = builder4.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char14 = cSVFormat13.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat13);
        java.lang.String str16 = cSVFormat13.getRecordSeparator();
        org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse(reader10, cSVFormat13);
        boolean boolean18 = cSVFormat13.getLenientEof();
        java.lang.String[] strArray19 = cSVFormat13.getHeader();
        boolean boolean20 = cSVFormat13.getAutoFlush();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(writer7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(reader10);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(cSVParser15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVParser17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined3 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat4 = predefined3.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setFile("hi!");
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharset(charset10);
        java.io.Writer writer12 = builder9.getWriter();
        cSVFormat4.println((java.lang.Appendable) writer12);
        cSVFormat1.print((java.lang.Object) 10L, (java.lang.Appendable) writer12, true);
        org.apache.commons.csv.CSVPrinter cSVPrinter16 = cSVFormat1.printer();
        org.apache.commons.csv.QuoteMode quoteMode17 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVPrinter cSVPrinter18 = cSVFormat1.printer();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + predefined3 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined3.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(writer12);
        org.junit.Assert.assertNotNull(cSVPrinter16);
        org.junit.Assert.assertNull(quoteMode17);
        org.junit.Assert.assertNotNull(cSVPrinter18);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSet5);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode9 = org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setDuplicateHeaderMode(duplicateHeaderMode9);
        org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat12.printer();
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setFile("hi!");
        java.nio.charset.Charset charset19 = null;
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharset(charset19);
        org.apache.commons.csv.CSVParser.Builder builder22 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setFile("hi!");
        java.nio.charset.Charset charset27 = null;
        org.apache.commons.csv.CSVParser.Builder builder28 = builder26.setCharset(charset27);
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray30 = new java.lang.Object[] { builder18, 1L, charset27, predefined29 };
        cSVPrinter13.printRecord(objArray30);
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char35 = cSVFormat34.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse("", cSVFormat34);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator37 = cSVParser36.spliterator();
        java.lang.String str38 = cSVParser36.getHeaderComment();
        java.lang.String str39 = cSVParser36.getFirstEndOfLine();
        cSVPrinter13.print((java.lang.Object) str39);
        org.apache.commons.csv.CSVParser.Builder builder41 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption42 = null;
        java.nio.file.OpenOption[] openOptionArray43 = new java.nio.file.OpenOption[] { openOption42 };
        org.apache.commons.csv.CSVParser.Builder builder44 = builder41.setOpenOptions(openOptionArray43);
        cSVPrinter13.printRecord((java.lang.Object[]) openOptionArray43);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder8.setHeaderComments((java.lang.Object[]) openOptionArray43);
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder8.setIgnoreHeaderCase(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode9 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY + "'", duplicateHeaderMode9.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVPrinter13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(char35);
        org.junit.Assert.assertNotNull(cSVParser36);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(openOptionArray43);
        org.junit.Assert.assertArrayEquals(openOptionArray43, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        java.lang.String[] strArray3 = cSVFormat1.getHeaderComments();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        java.lang.String[] strArray5 = cSVFormat1.getHeaderComments();
        java.lang.Character char6 = cSVFormat1.getQuoteCharacter();
        boolean boolean7 = cSVFormat1.getTrailingData();
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setFile("hi!");
        byte[] byteArray14 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder10.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setBufferSizeMax(1);
        java.io.Reader reader18 = builder17.getReader();
        org.apache.commons.csv.CSVParser cSVParser19 = cSVFormat1.parse(reader18);
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream20 = cSVParser19.stream();
        java.lang.String str21 = cSVParser19.getTrailerComment();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(reader18);
        org.junit.Assert.assertNotNull(cSVParser19);
        org.junit.Assert.assertNotNull(cSVRecordStream20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        java.lang.String[] strArray3 = cSVFormat1.getHeaderComments();
        boolean boolean4 = cSVFormat1.getIgnoreSurroundingSpaces();
        boolean boolean5 = cSVFormat1.getAllowMissingColumnNames();
        boolean boolean6 = cSVFormat1.getAutoFlush();
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path14 = builder13.getPath();
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.MONGODB_TSV;
        java.lang.String str16 = cSVFormat15.toString();
        org.apache.commons.csv.CSVParser.Builder builder17 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder25 = builder21.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder26 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder28 = builder26.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder32 = builder30.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path33 = builder32.getPath();
        org.apache.commons.csv.CSVParser.Builder builder34 = builder25.setPath(path33);
        org.apache.commons.csv.CSVParser.Builder builder35 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption36 = null;
        java.nio.file.OpenOption[] openOptionArray37 = new java.nio.file.OpenOption[] { openOption36 };
        org.apache.commons.csv.CSVParser.Builder builder38 = builder35.setOpenOptions(openOptionArray37);
        org.apache.commons.csv.CSVParser.Builder builder40 = builder35.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder41 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder41.setCharacterOffset(0L);
        java.nio.charset.Charset charset44 = builder43.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder45 = builder40.setCharset(charset44);
        org.apache.commons.csv.CSVParser.Builder builder46 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder50 = builder48.setFile("hi!");
        java.nio.charset.Charset charset51 = null;
        org.apache.commons.csv.CSVParser.Builder builder52 = builder50.setCharset(charset51);
        org.apache.commons.csv.CSVParser.Builder builder53 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder55 = builder53.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder57 = builder55.setFile("hi!");
        byte[] byteArray59 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder60 = builder55.setByteArray(byteArray59);
        org.apache.commons.csv.CSVParser.Builder builder61 = builder50.setByteArray(byteArray59);
        org.apache.commons.csv.CSVParser.Builder builder62 = builder45.setByteArray(byteArray59);
        org.apache.commons.csv.CSVParser.Builder builder63 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder65 = builder63.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder66 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder68 = builder66.setCharacterOffset(0L);
        java.nio.charset.Charset charset69 = builder68.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder70 = builder63.setCharset(charset69);
        org.apache.commons.csv.CSVParser.Builder builder71 = builder62.setCharset(charset69);
        org.apache.commons.csv.CSVPrinter cSVPrinter72 = cSVFormat15.print(path33, charset69);
        org.apache.commons.csv.CSVFormat cSVFormat74 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char75 = cSVFormat74.getEscapeCharacter();
        java.lang.String[] strArray76 = cSVFormat74.getHeaderComments();
        boolean boolean77 = cSVFormat74.getIgnoreSurroundingSpaces();
        java.lang.Character char78 = cSVFormat74.getCommentMarker();
        org.apache.commons.csv.CSVParser cSVParser79 = org.apache.commons.csv.CSVParser.parse(path14, charset69, cSVFormat74);
        org.apache.commons.csv.CSVParser.Builder builder80 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder82 = builder80.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder84 = builder82.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder86 = builder84.setCharacterOffset((long) (byte) 10);
        java.nio.charset.Charset charset87 = builder86.getCharset();
        org.apache.commons.csv.CSVPrinter cSVPrinter88 = cSVFormat1.print(path14, charset87);
        boolean boolean89 = cSVFormat1.getTrailingDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(path14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str16, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(path33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(openOptionArray37);
        org.junit.Assert.assertArrayEquals(openOptionArray37, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertArrayEquals(byteArray59, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(cSVPrinter72);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNull(char75);
        org.junit.Assert.assertNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(char78);
        org.junit.Assert.assertNotNull(cSVParser79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(charset87);
        org.junit.Assert.assertNotNull(cSVPrinter88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        boolean boolean1 = cSVFormat0.isCommentMarkerSet();
        boolean boolean2 = cSVFormat0.getAllowMissingColumnNames();
        boolean boolean3 = cSVFormat0.isCommentMarkerSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        boolean boolean2 = cSVFormat0.getLenientEof();
        boolean boolean3 = cSVFormat0.isCommentMarkerSet();
        java.lang.String str4 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setFile("hi!");
        java.nio.charset.Charset charset15 = null;
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharset(charset15);
        java.io.Writer writer17 = builder14.getWriter();
        cSVFormat9.println((java.lang.Appendable) writer17);
        cSVFormat6.print((java.lang.Object) 10L, (java.lang.Appendable) writer17, true);
        cSVFormat0.println((java.lang.Appendable) writer17);
        boolean boolean22 = cSVFormat0.getLenientEof();
        boolean boolean23 = cSVFormat0.getSkipHeaderRecord();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\r\n" + "'", str4, "\r\n");
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(writer17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat1);
        java.lang.String str3 = cSVFormat1.getRecordSeparator();
        java.lang.String str4 = cSVFormat1.getRecordSeparator();
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVParser2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\r\n" + "'", str3, "\r\n");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\r\n" + "'", str4, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        int int1 = builder0.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setFile("");
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setRecordNumber((long) '\\');
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier6 = builder5.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setFile("hi!");
        java.nio.charset.Charset charset12 = null;
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharset(charset12);
        java.io.OutputStream outputStream14 = builder13.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder5.setOutputStream(outputStream14);
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream16 = builder15.getInputStream();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OutputStreamOrigin#getPath() for  origin java.nio.channels.Channels$1@7c44bf1f");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVParserSupplier6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(outputStream14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path7 = builder6.getPath();
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setFile("hi!");
        byte[] byteArray14 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder10.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setBufferSizeMax(1);
        java.nio.charset.Charset charset18 = builder15.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char21 = cSVFormat20.getEscapeCharacter();
        java.lang.Character char22 = cSVFormat20.getCommentMarker();
        org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse(path7, charset18, cSVFormat20);
        java.lang.Class<?> wildcardClass24 = cSVFormat20.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(path7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNull(char21);
        org.junit.Assert.assertNull(char22);
        org.junit.Assert.assertNotNull(cSVParser23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder8 = builder4.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setPath("");
        java.nio.file.OpenOption[] openOptionArray11 = builder10.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder10.setBufferSize((java.lang.Integer) 8192);
        org.apache.commons.io.IORandomAccessFile iORandomAccessFile14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder15 = builder10.setRandomAccessFile(iORandomAccessFile14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(openOptionArray11);
        org.junit.Assert.assertArrayEquals(openOptionArray11, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder7 = builder2.setByteArray(byteArray6);
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setFile("hi!");
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setCharset(charset13);
        java.io.Writer writer15 = builder12.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder17 = builder12.setCharSequence((java.lang.CharSequence) "");
        java.io.Reader reader18 = builder12.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char22 = cSVFormat21.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse("", cSVFormat21);
        java.lang.String str24 = cSVFormat21.getRecordSeparator();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse(reader18, cSVFormat21);
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        boolean boolean27 = cSVFormat26.isCommentMarkerSet();
        boolean boolean28 = cSVFormat26.isCommentMarkerSet();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode29 = cSVFormat26.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVParser cSVParser30 = org.apache.commons.csv.CSVParser.parse(reader18, cSVFormat26);
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char33 = cSVFormat32.getEscapeCharacter();
        java.lang.String[] strArray34 = cSVFormat32.getHeaderComments();
        boolean boolean35 = cSVFormat32.isEscapeCharacterSet();
        java.lang.String[] strArray36 = cSVFormat32.getHeaderComments();
        java.lang.Character char37 = cSVFormat32.getQuoteCharacter();
        org.apache.commons.csv.CSVParser cSVParser40 = new org.apache.commons.csv.CSVParser(reader18, cSVFormat32, (long) (byte) 100, (long) 8192);
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.QuoteMode quoteMode42 = cSVFormat41.getQuoteMode();
        boolean boolean43 = cSVFormat41.isEscapeCharacterSet();
        boolean boolean44 = cSVFormat41.isCommentMarkerSet();
        java.lang.String str45 = cSVFormat41.toString();
        org.apache.commons.csv.CSVParser cSVParser48 = new org.apache.commons.csv.CSVParser(reader18, cSVFormat41, (long) (short) 100, (long) (byte) -1);
        org.apache.commons.csv.CSVParser.Builder builder49 = builder2.setReader(reader18);
        java.io.InputStream inputStream50 = builder49.getInputStream();
        java.nio.charset.Charset charset51 = null;
        org.apache.commons.csv.CSVFormat cSVFormat53 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char54 = cSVFormat53.getEscapeCharacter();
        java.lang.String[] strArray55 = cSVFormat53.getHeaderComments();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser56 = org.apache.commons.csv.CSVParser.parse(inputStream50, charset51, cSVFormat53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: charset");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(writer15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(reader18);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(char22);
        org.junit.Assert.assertNotNull(cSVParser23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode29 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode29.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVParser30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNull(char33);
        org.junit.Assert.assertNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(strArray36);
        org.junit.Assert.assertNull(char37);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNull(quoteMode42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false" + "'", str45, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(inputStream50);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNull(char54);
        org.junit.Assert.assertNull(strArray55);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset(0L);
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder5.setCharset(charset9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence11 = builder10.getCharSequence();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.QuoteMode quoteMode1 = cSVFormat0.getQuoteMode();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        boolean boolean3 = cSVFormat0.isCommentMarkerSet();
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path16 = builder15.getPath();
        org.apache.commons.csv.CSVFormat.Predefined predefined17 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat18 = predefined17.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder19 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setFile("hi!");
        java.nio.charset.Charset charset24 = null;
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setCharset(charset24);
        java.io.Writer writer26 = builder23.getWriter();
        cSVFormat18.println((java.lang.Appendable) writer26);
        org.apache.commons.csv.CSVParser.Builder builder28 = builder15.setWriter(writer26);
        org.apache.commons.csv.CSVParser.Builder builder29 = builder6.setWriter(writer26);
        cSVFormat0.println((java.lang.Appendable) writer26);
        boolean boolean31 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(quoteMode1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(path16);
        org.junit.Assert.assertTrue("'" + predefined17 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined17.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(writer26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setBufferSizeMax((int) (byte) 10);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char8 = cSVFormat7.getEscapeCharacter();
        java.lang.String[] strArray9 = cSVFormat7.getHeaderComments();
        boolean boolean10 = cSVFormat7.getIgnoreSurroundingSpaces();
        boolean boolean11 = cSVFormat7.getAllowMissingColumnNames();
        boolean boolean12 = cSVFormat7.getAutoFlush();
        org.apache.commons.csv.CSVParser.Builder builder13 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path20 = builder19.getPath();
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.MONGODB_TSV;
        java.lang.String str22 = cSVFormat21.toString();
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder29 = builder27.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder31 = builder27.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder32 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder34 = builder32.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder36 = builder34.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder38 = builder36.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path39 = builder38.getPath();
        org.apache.commons.csv.CSVParser.Builder builder40 = builder31.setPath(path39);
        org.apache.commons.csv.CSVParser.Builder builder41 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption42 = null;
        java.nio.file.OpenOption[] openOptionArray43 = new java.nio.file.OpenOption[] { openOption42 };
        org.apache.commons.csv.CSVParser.Builder builder44 = builder41.setOpenOptions(openOptionArray43);
        org.apache.commons.csv.CSVParser.Builder builder46 = builder41.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder47 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder49 = builder47.setCharacterOffset(0L);
        java.nio.charset.Charset charset50 = builder49.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder51 = builder46.setCharset(charset50);
        org.apache.commons.csv.CSVParser.Builder builder52 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder54 = builder52.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder56 = builder54.setFile("hi!");
        java.nio.charset.Charset charset57 = null;
        org.apache.commons.csv.CSVParser.Builder builder58 = builder56.setCharset(charset57);
        org.apache.commons.csv.CSVParser.Builder builder59 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder61 = builder59.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder63 = builder61.setFile("hi!");
        byte[] byteArray65 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder66 = builder61.setByteArray(byteArray65);
        org.apache.commons.csv.CSVParser.Builder builder67 = builder56.setByteArray(byteArray65);
        org.apache.commons.csv.CSVParser.Builder builder68 = builder51.setByteArray(byteArray65);
        org.apache.commons.csv.CSVParser.Builder builder69 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder71 = builder69.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder72 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder74 = builder72.setCharacterOffset(0L);
        java.nio.charset.Charset charset75 = builder74.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder76 = builder69.setCharset(charset75);
        org.apache.commons.csv.CSVParser.Builder builder77 = builder68.setCharset(charset75);
        org.apache.commons.csv.CSVPrinter cSVPrinter78 = cSVFormat21.print(path39, charset75);
        org.apache.commons.csv.CSVFormat cSVFormat80 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char81 = cSVFormat80.getEscapeCharacter();
        java.lang.String[] strArray82 = cSVFormat80.getHeaderComments();
        boolean boolean83 = cSVFormat80.getIgnoreSurroundingSpaces();
        java.lang.Character char84 = cSVFormat80.getCommentMarker();
        org.apache.commons.csv.CSVParser cSVParser85 = org.apache.commons.csv.CSVParser.parse(path20, charset75, cSVFormat80);
        org.apache.commons.csv.CSVParser.Builder builder86 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder88 = builder86.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder90 = builder88.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder92 = builder90.setCharacterOffset((long) (byte) 10);
        java.nio.charset.Charset charset93 = builder92.getCharset();
        org.apache.commons.csv.CSVPrinter cSVPrinter94 = cSVFormat7.print(path20, charset93);
        java.lang.String str95 = cSVFormat7.getRecordSeparator();
        org.apache.commons.csv.CSVParser.Builder builder96 = builder3.setFormat(cSVFormat7);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Writer writer97 = builder3.getWriter();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(char8);
        org.junit.Assert.assertNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(path20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str22, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(path39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(openOptionArray43);
        org.junit.Assert.assertArrayEquals(openOptionArray43, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertArrayEquals(byteArray65, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(charset75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(cSVPrinter78);
        org.junit.Assert.assertNotNull(cSVFormat80);
        org.junit.Assert.assertNull(char81);
        org.junit.Assert.assertNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(char84);
        org.junit.Assert.assertNotNull(cSVParser85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(charset93);
        org.junit.Assert.assertNotNull(cSVPrinter94);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSet5);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder6.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setRecordSeparator("4");
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setQuote('a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char24 = cSVFormat23.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("", cSVFormat23);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser25.spliterator();
        java.lang.String str27 = cSVParser25.getHeaderComment();
        java.lang.String str28 = cSVParser25.getFirstEndOfLine();
        cSVPrinter2.print((java.lang.Object) str28);
        java.lang.Appendable appendable30 = cSVPrinter2.getOut();
        long long31 = cSVPrinter2.getRecordCount();
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char35 = cSVFormat34.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse("", cSVFormat34);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator37 = cSVParser36.spliterator();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList38 = cSVParser36.getRecords();
        cSVPrinter2.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVRecordList38);
        java.sql.ResultSet resultSet40 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter2.printRecords(resultSet40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(appendable30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(char35);
        org.junit.Assert.assertNotNull(cSVParser36);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator37);
        org.junit.Assert.assertNotNull(cSVRecordList38);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder10.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray16 = cSVFormat15.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder17 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat15);
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder17.setHeader(strArray19);
        org.apache.commons.csv.CSVFormat cSVFormat21 = builder17.get();
        org.apache.commons.csv.CSVParser.Builder builder22 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setFile("hi!");
        java.nio.charset.Charset charset27 = null;
        org.apache.commons.csv.CSVParser.Builder builder28 = builder26.setCharset(charset27);
        java.io.Writer writer29 = builder26.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat31.printer();
        org.apache.commons.csv.CSVParser.Builder builder33 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder33.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setFile("hi!");
        java.nio.charset.Charset charset38 = null;
        org.apache.commons.csv.CSVParser.Builder builder39 = builder37.setCharset(charset38);
        org.apache.commons.csv.CSVParser.Builder builder41 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder41.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder45 = builder43.setFile("hi!");
        java.nio.charset.Charset charset46 = null;
        org.apache.commons.csv.CSVParser.Builder builder47 = builder45.setCharset(charset46);
        org.apache.commons.csv.CSVFormat.Predefined predefined48 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray49 = new java.lang.Object[] { builder37, 1L, charset46, predefined48 };
        cSVPrinter32.printRecord(objArray49);
        cSVFormat21.printRecord((java.lang.Appendable) writer29, objArray49);
        org.apache.commons.csv.CSVParser.Builder builder52 = builder10.setWriter(writer29);
        org.apache.commons.csv.CSVParser.Builder builder53 = builder0.setWriter(writer29);
        java.io.Writer writer54 = builder53.getWriter();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file55 = builder53.getFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: WriterOrigin#getFile() for BufferedWriter origin java.io.BufferedWriter@211d5493");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertArrayEquals(strArray19, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(writer29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVPrinter32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + predefined48 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined48.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(writer54);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=<#> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.Delimiter=<#> SkipHeaderRecord:false");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char3 = cSVFormat2.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser4.spliterator();
        java.lang.String str6 = cSVParser4.getHeaderComment();
        java.lang.String str7 = cSVParser4.getFirstEndOfLine();
        java.util.List<java.lang.String> strList8 = cSVParser4.getHeaderNames();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream9 = cSVParser4.stream();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(cSVRecordStream9);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MONGODB_TSV;
        boolean boolean2 = cSVFormat1.getTrailingData();
        boolean boolean3 = cSVFormat1.isEscapeCharacterSet();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("4", cSVFormat1);
        java.util.List<java.lang.String> strList5 = cSVParser4.getHeaderNames();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(strList5);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset(0L);
        java.nio.charset.Charset charset3 = builder2.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setFile("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        java.nio.file.OpenOption[] openOptionArray6 = builder2.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder2.setBufferSize((int) (short) 10);
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setFile("hi!");
        java.nio.charset.Charset charset14 = null;
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharset(charset14);
        int int16 = builder13.getBufferSizeDefault();
        java.io.OutputStream outputStream17 = builder13.getOutputStream();
        java.nio.charset.Charset charset18 = builder13.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder19 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setFile("hi!");
        java.nio.charset.Charset charset24 = builder23.getCharset();
        java.io.RandomAccessFile randomAccessFile25 = builder23.getRandomAccessFile();
        org.apache.commons.csv.CSVParser.Builder builder26 = builder13.setRandomAccessFile(randomAccessFile25);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder8.setRandomAccessFile(randomAccessFile25);
        int int28 = builder8.getBufferSize();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(openOptionArray6);
        org.junit.Assert.assertArrayEquals(openOptionArray6, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8192 + "'", int16 == 8192);
        org.junit.Assert.assertNotNull(outputStream17);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(randomAccessFile25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        int int1 = builder0.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setFile("");
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setRecordNumber((long) '\\');
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier6 = builder5.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setFile("hi!");
        java.nio.charset.Charset charset12 = null;
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharset(charset12);
        java.io.OutputStream outputStream14 = builder13.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder5.setOutputStream(outputStream14);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder17 = builder5.setPath("Delimiter=<4> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException; message: Illegal char <<> at index 10: Delimiter=<4> SkipHeaderRecord:false");
        } catch (java.nio.file.InvalidPathException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVParserSupplier6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(outputStream14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char24 = cSVFormat23.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("", cSVFormat23);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser25.spliterator();
        java.lang.String str27 = cSVParser25.getHeaderComment();
        java.lang.String str28 = cSVParser25.getFirstEndOfLine();
        cSVPrinter2.print((java.lang.Object) str28);
        cSVPrinter2.println();
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.DEFAULT;
        boolean boolean33 = cSVFormat32.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char36 = cSVFormat35.getEscapeCharacter();
        java.lang.String[] strArray37 = cSVFormat35.getHeaderComments();
        boolean boolean38 = cSVFormat35.isEscapeCharacterSet();
        java.lang.String[] strArray39 = cSVFormat35.getHeaderComments();
        boolean boolean40 = cSVFormat35.getLenientEof();
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter43 = cSVFormat42.printer();
        org.apache.commons.csv.CSVParser.Builder builder44 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder46 = builder44.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setFile("hi!");
        java.nio.charset.Charset charset49 = null;
        org.apache.commons.csv.CSVParser.Builder builder50 = builder48.setCharset(charset49);
        org.apache.commons.csv.CSVParser.Builder builder52 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder54 = builder52.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder56 = builder54.setFile("hi!");
        java.nio.charset.Charset charset57 = null;
        org.apache.commons.csv.CSVParser.Builder builder58 = builder56.setCharset(charset57);
        org.apache.commons.csv.CSVFormat.Predefined predefined59 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray60 = new java.lang.Object[] { builder48, 1L, charset57, predefined59 };
        cSVPrinter43.printRecord(objArray60);
        cSVPrinter43.flush();
        org.apache.commons.csv.CSVFormat cSVFormat65 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char66 = cSVFormat65.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser67 = org.apache.commons.csv.CSVParser.parse("", cSVFormat65);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList68 = cSVParser67.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream69 = cSVParser67.stream();
        cSVPrinter43.printRecords(cSVRecordStream69);
        java.lang.Appendable appendable71 = cSVPrinter43.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter72 = cSVFormat35.print(appendable71);
        org.apache.commons.csv.CSVPrinter cSVPrinter73 = cSVFormat32.print(appendable71);
        org.apache.commons.csv.CSVParser cSVParser74 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat32);
        cSVPrinter2.printRecords((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser74);
        cSVPrinter2.println();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNull(char36);
        org.junit.Assert.assertNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNotNull(cSVPrinter43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + predefined59 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined59.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertNull(char66);
        org.junit.Assert.assertNotNull(cSVParser67);
        org.junit.Assert.assertNotNull(cSVRecordList68);
        org.junit.Assert.assertNotNull(cSVRecordStream69);
        org.junit.Assert.assertNotNull(appendable71);
        org.junit.Assert.assertNotNull(cSVPrinter72);
        org.junit.Assert.assertNotNull(cSVPrinter73);
        org.junit.Assert.assertNotNull(cSVParser74);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder7 = builder2.setByteArray(byteArray6);
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setBufferSizeMax(1);
        java.io.Reader reader10 = builder9.getReader();
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        java.io.OutputStream outputStream18 = builder17.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder9.setOutputStream(outputStream18);
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setFile("hi!");
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharset(charset25);
        java.io.Writer writer27 = builder24.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder24.setCharSequence((java.lang.CharSequence) "");
        java.io.InputStream inputStream30 = builder29.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder31 = builder19.setInputStream(inputStream30);
        org.apache.commons.csv.CSVParser.Builder builder32 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder34 = builder32.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder36 = builder34.setFile("hi!");
        java.nio.charset.Charset charset37 = null;
        org.apache.commons.csv.CSVParser.Builder builder38 = builder36.setCharset(charset37);
        int int39 = builder36.getBufferSizeDefault();
        java.nio.file.Path path40 = builder36.getPath();
        org.apache.commons.csv.CSVParser.Builder builder41 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder41.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder45 = builder43.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder47 = builder45.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder49 = builder45.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder50 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder52 = builder50.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder54 = builder52.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder56 = builder54.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path57 = builder56.getPath();
        org.apache.commons.csv.CSVParser.Builder builder58 = builder49.setPath(path57);
        org.apache.commons.csv.CSVParser.Builder builder59 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder61 = builder59.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder63 = builder61.setFile("hi!");
        byte[] byteArray65 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder66 = builder61.setByteArray(byteArray65);
        org.apache.commons.csv.CSVParser.Builder builder67 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder69 = builder67.setCharacterOffset(0L);
        java.nio.charset.Charset charset70 = builder69.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder71 = builder66.setCharset(charset70);
        org.apache.commons.csv.CSVFormat.Predefined predefined72 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat73 = predefined72.getFormat();
        org.apache.commons.csv.CSVFormat cSVFormat74 = predefined72.getFormat();
        org.apache.commons.csv.CSVParser cSVParser75 = org.apache.commons.csv.CSVParser.parse(path57, charset70, cSVFormat74);
        org.apache.commons.csv.CSVFormat cSVFormat77 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char78 = cSVFormat77.getEscapeCharacter();
        java.lang.String[] strArray79 = cSVFormat77.getHeaderComments();
        boolean boolean80 = cSVFormat77.isEscapeCharacterSet();
        java.lang.Character char81 = cSVFormat77.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser82 = org.apache.commons.csv.CSVParser.parse(path40, charset70, cSVFormat77);
        org.apache.commons.csv.CSVFormat cSVFormat85 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char86 = cSVFormat85.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser87 = org.apache.commons.csv.CSVParser.parse("", cSVFormat85);
        org.apache.commons.csv.CSVParser cSVParser88 = org.apache.commons.csv.CSVParser.parse(inputStream30, charset70, cSVFormat85);
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream89 = cSVParser88.stream();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(reader10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(outputStream18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(writer27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(inputStream30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8192 + "'", int39 == 8192);
        org.junit.Assert.assertNotNull(path40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(path57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertArrayEquals(byteArray65, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(charset70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + predefined72 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined72.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat73);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertNotNull(cSVParser75);
        org.junit.Assert.assertNotNull(cSVFormat77);
        org.junit.Assert.assertNull(char78);
        org.junit.Assert.assertNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(char81);
        org.junit.Assert.assertNotNull(cSVParser82);
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertNull(char86);
        org.junit.Assert.assertNotNull(cSVParser87);
        org.junit.Assert.assertNotNull(cSVParser88);
        org.junit.Assert.assertNotNull(cSVRecordStream89);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder4.setTrailingData(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder4.setLenientEof(true);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setQuote('a');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder21 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setDelimiter('\"');
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.MONGODB_TSV;
        boolean boolean27 = cSVFormat26.getAllowMissingColumnNames();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode28 = cSVFormat26.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder23.setDuplicateHeaderMode(duplicateHeaderMode28);
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder20.setDuplicateHeaderMode(duplicateHeaderMode28);
        java.lang.Class<?> wildcardClass31 = duplicateHeaderMode28.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode28 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode28.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.INFORMIX_UNLOAD_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        cSVPrinter2.flush();
        java.lang.Class<?> wildcardClass4 = cSVPrinter2.getClass();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.INFORMIX_UNLOAD_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.INFORMIX_UNLOAD_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        cSVPrinter2.flush();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char25 = cSVFormat24.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("", cSVFormat24);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser26.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream28 = cSVParser26.stream();
        cSVPrinter2.printRecords(cSVRecordStream28);
        cSVPrinter2.close();
        cSVPrinter2.println();
        cSVPrinter2.printComment("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        cSVPrinter2.close(true);
        org.apache.commons.csv.CSVParser.Builder builder36 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder38 = builder36.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder40 = builder38.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder42 = builder40.setCharacterOffset((long) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray43 = builder42.getOpenOptions();
        cSVPrinter2.print((java.lang.Object) openOptionArray43);
        cSVPrinter2.printComment("\001");
        cSVPrinter2.close();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNotNull(cSVParser26);
        org.junit.Assert.assertNotNull(cSVRecordList27);
        org.junit.Assert.assertNotNull(cSVRecordStream28);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(openOptionArray43);
        org.junit.Assert.assertArrayEquals(openOptionArray43, new java.nio.file.OpenOption[] {});
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray7 = builder6.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setFile("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter15 = cSVFormat14.printer();
        org.apache.commons.csv.CSVParser.Builder builder16 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setFile("hi!");
        java.nio.charset.Charset charset21 = null;
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharset(charset21);
        org.apache.commons.csv.CSVParser.Builder builder24 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder28 = builder26.setFile("hi!");
        java.nio.charset.Charset charset29 = null;
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setCharset(charset29);
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray32 = new java.lang.Object[] { builder20, 1L, charset29, predefined31 };
        cSVPrinter15.printRecord(objArray32);
        org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char37 = cSVFormat36.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse("", cSVFormat36);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator39 = cSVParser38.spliterator();
        java.lang.String str40 = cSVParser38.getHeaderComment();
        java.lang.String str41 = cSVParser38.getFirstEndOfLine();
        cSVPrinter15.print((java.lang.Object) str41);
        cSVPrinter15.println();
        org.apache.commons.csv.CSVParser.Builder builder44 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder46 = builder44.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder50 = builder48.setCharacterOffset((long) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray51 = builder50.getOpenOptions();
        cSVPrinter15.printRecords((java.lang.Object[]) openOptionArray51);
        org.apache.commons.csv.CSVParser.Builder builder53 = builder12.setOpenOptions(openOptionArray51);
        org.apache.commons.csv.CSVParser.Builder builder54 = builder6.setOpenOptions(openOptionArray51);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder56 = builder54.setCharset(",");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ,");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(openOptionArray7);
        org.junit.Assert.assertArrayEquals(openOptionArray7, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVPrinter15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(char37);
        org.junit.Assert.assertNotNull(cSVParser38);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(openOptionArray51);
        org.junit.Assert.assertArrayEquals(openOptionArray51, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray7 = builder6.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setFile("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter15 = cSVFormat14.printer();
        org.apache.commons.csv.CSVParser.Builder builder16 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setFile("hi!");
        java.nio.charset.Charset charset21 = null;
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharset(charset21);
        org.apache.commons.csv.CSVParser.Builder builder24 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder28 = builder26.setFile("hi!");
        java.nio.charset.Charset charset29 = null;
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setCharset(charset29);
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray32 = new java.lang.Object[] { builder20, 1L, charset29, predefined31 };
        cSVPrinter15.printRecord(objArray32);
        org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char37 = cSVFormat36.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse("", cSVFormat36);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator39 = cSVParser38.spliterator();
        java.lang.String str40 = cSVParser38.getHeaderComment();
        java.lang.String str41 = cSVParser38.getFirstEndOfLine();
        cSVPrinter15.print((java.lang.Object) str41);
        cSVPrinter15.println();
        org.apache.commons.csv.CSVParser.Builder builder44 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder46 = builder44.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder50 = builder48.setCharacterOffset((long) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray51 = builder50.getOpenOptions();
        cSVPrinter15.printRecords((java.lang.Object[]) openOptionArray51);
        org.apache.commons.csv.CSVParser.Builder builder53 = builder12.setOpenOptions(openOptionArray51);
        org.apache.commons.csv.CSVParser.Builder builder54 = builder6.setOpenOptions(openOptionArray51);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder56 = builder54.setCharset("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: Delimiter=<,> QuoteChar=<\"> RecordSeparator=<??> SkipHeaderRecord:false");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(openOptionArray7);
        org.junit.Assert.assertArrayEquals(openOptionArray7, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVPrinter15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(char37);
        org.junit.Assert.assertNotNull(cSVParser38);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(openOptionArray51);
        org.junit.Assert.assertArrayEquals(openOptionArray51, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        int int7 = builder4.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder4.setRecordNumber((long) 10);
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharacterOffset(0L);
        org.apache.commons.csv.CSVParser.Builder builder13 = builder9.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setFile("hi!");
        java.nio.charset.Charset charset19 = null;
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharset(charset19);
        java.io.Writer writer21 = builder18.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder18.setCharSequence((java.lang.CharSequence) "");
        java.io.Reader reader24 = builder18.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV;
        org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse(reader24, cSVFormat25);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.MONGODB_TSV;
        java.lang.String str28 = cSVFormat27.toString();
        org.apache.commons.csv.CSVParser cSVParser31 = new org.apache.commons.csv.CSVParser(reader24, cSVFormat27, (long) 1, (long) 1);
        org.apache.commons.csv.CSVParser.Builder builder32 = builder9.setReader(reader24);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder9.setBufferSizeMax(100);
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream35 = builder9.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ReaderOrigin#getPath() for CharSequenceReader origin ");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8192 + "'", int7 == 8192);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(writer21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(reader24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(cSVParser26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str28, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        boolean boolean3 = cSVFormat1.getAllowMissingColumnNames();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder8 = builder4.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setFile("hi!");
        byte[] byteArray15 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder16 = builder11.setByteArray(byteArray15);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder4.setByteArray(byteArray15);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setBufferSize((int) (short) 100);
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path27 = builder26.getPath();
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder32 = builder30.setFile("hi!");
        byte[] byteArray34 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder35 = builder30.setByteArray(byteArray34);
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setBufferSizeMax(1);
        java.nio.charset.Charset charset38 = builder35.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char41 = cSVFormat40.getEscapeCharacter();
        java.lang.Character char42 = cSVFormat40.getCommentMarker();
        org.apache.commons.csv.CSVParser cSVParser43 = org.apache.commons.csv.CSVParser.parse(path27, charset38, cSVFormat40);
        org.apache.commons.csv.CSVParser.Builder builder44 = builder17.setCharset(charset38);
        java.lang.CharSequence charSequence45 = builder44.getCharSequence();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertArrayEquals(byteArray15, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(path27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertArrayEquals(byteArray34, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNull(char41);
        org.junit.Assert.assertNull(char42);
        org.junit.Assert.assertNotNull(cSVParser43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "\001" + "'", charSequence45, "\001");
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder2.setHeader(strArray4);
        org.apache.commons.csv.CSVFormat cSVFormat6 = builder2.get();
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setHeader(resultSet7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder2.setLenientEof(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setTrailingData(false);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setDelimiter('4');
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setQuote('\"');
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder14.setSkipHeaderRecord(false);
        java.sql.ResultSetMetaData resultSetMetaData19 = null;
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder14.setHeader(resultSetMetaData19);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setLenientEof(true);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setTrailingDelimiter(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertArrayEquals(strArray4, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray4 = cSVFormat3.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder5 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder5.setHeader(strArray7);
        org.apache.commons.csv.CSVFormat cSVFormat9 = builder5.get();
        boolean boolean10 = cSVFormat1.equals((java.lang.Object) builder5);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder5.setDelimiter('a');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setQuote((java.lang.Character) '4');
        java.lang.Class<?> wildcardClass17 = builder14.getClass();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertArrayEquals(strArray7, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder8 = builder4.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path16 = builder15.getPath();
        org.apache.commons.csv.CSVParser.Builder builder17 = builder8.setPath(path16);
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setFile("hi!");
        byte[] byteArray24 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder25 = builder20.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder26 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder28 = builder26.setCharacterOffset(0L);
        java.nio.charset.Charset charset29 = builder28.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder25.setCharset(charset29);
        org.apache.commons.csv.CSVFormat.Predefined predefined31 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat32 = predefined31.getFormat();
        org.apache.commons.csv.CSVFormat cSVFormat33 = predefined31.getFormat();
        org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse(path16, charset29, cSVFormat33);
        org.apache.commons.csv.CSVParser.Builder builder35 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder39 = builder37.setFile("hi!");
        byte[] byteArray41 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder42 = builder37.setByteArray(byteArray41);
        org.apache.commons.csv.CSVParser.Builder builder44 = builder42.setBufferSizeMax(1);
        java.nio.charset.Charset charset45 = builder42.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat47 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char48 = cSVFormat47.getEscapeCharacter();
        java.lang.String[] strArray49 = cSVFormat47.getHeaderComments();
        boolean boolean50 = cSVFormat47.isEscapeCharacterSet();
        java.lang.String[] strArray51 = cSVFormat47.getHeaderComments();
        boolean boolean52 = cSVFormat47.getLenientEof();
        org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter55 = cSVFormat54.printer();
        org.apache.commons.csv.CSVParser.Builder builder56 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder58 = builder56.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder60 = builder58.setFile("hi!");
        java.nio.charset.Charset charset61 = null;
        org.apache.commons.csv.CSVParser.Builder builder62 = builder60.setCharset(charset61);
        org.apache.commons.csv.CSVParser.Builder builder64 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder66 = builder64.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder68 = builder66.setFile("hi!");
        java.nio.charset.Charset charset69 = null;
        org.apache.commons.csv.CSVParser.Builder builder70 = builder68.setCharset(charset69);
        org.apache.commons.csv.CSVFormat.Predefined predefined71 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray72 = new java.lang.Object[] { builder60, 1L, charset69, predefined71 };
        cSVPrinter55.printRecord(objArray72);
        cSVPrinter55.flush();
        org.apache.commons.csv.CSVFormat cSVFormat77 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char78 = cSVFormat77.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser79 = org.apache.commons.csv.CSVParser.parse("", cSVFormat77);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList80 = cSVParser79.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream81 = cSVParser79.stream();
        cSVPrinter55.printRecords(cSVRecordStream81);
        java.lang.Appendable appendable83 = cSVPrinter55.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter84 = cSVFormat47.print(appendable83);
        org.apache.commons.csv.CSVParser cSVParser85 = org.apache.commons.csv.CSVParser.parse(path16, charset45, cSVFormat47);
        java.lang.Class<?> wildcardClass86 = cSVFormat47.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(path16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + predefined31 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined31.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(cSVParser34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertArrayEquals(byteArray41, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNull(char48);
        org.junit.Assert.assertNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(cSVPrinter55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertTrue("'" + predefined71 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined71.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertNotNull(cSVFormat77);
        org.junit.Assert.assertNull(char78);
        org.junit.Assert.assertNotNull(cSVParser79);
        org.junit.Assert.assertNotNull(cSVRecordList80);
        org.junit.Assert.assertNotNull(cSVRecordStream81);
        org.junit.Assert.assertNotNull(appendable83);
        org.junit.Assert.assertNotNull(cSVPrinter84);
        org.junit.Assert.assertNotNull(cSVParser85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setCharSequence((java.lang.CharSequence) "hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setBufferSizeMax((int) '\\');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharacterOffset((long) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray13 = builder12.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder5.setOpenOptions(openOptionArray13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder5.setCharacterOffset((long) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder18 = builder5.setCharset("\t");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(openOptionArray13);
        org.junit.Assert.assertArrayEquals(openOptionArray13, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray4 = cSVFormat3.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder5 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder5.setHeader(strArray7);
        org.apache.commons.csv.CSVFormat cSVFormat9 = builder5.get();
        boolean boolean10 = cSVFormat1.equals((java.lang.Object) builder5);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder5.setDelimiter('a');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray18 = cSVFormat17.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder19 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat17);
        java.sql.ResultSetMetaData resultSetMetaData20 = null;
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setHeader(resultSetMetaData20);
        java.sql.ResultSet resultSet22 = null;
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setHeader(resultSet22);
        java.sql.ResultSetMetaData resultSetMetaData24 = null;
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setHeader(resultSetMetaData24);
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray27 = cSVFormat26.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder28 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder28.setHeader(strArray30);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder25.setHeaderComments(strArray30);
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder16.setHeaderComments((java.lang.Object[]) strArray30);
        org.apache.commons.csv.CSVFormat cSVFormat34 = builder33.get();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertArrayEquals(strArray7, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNull(strArray27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertArrayEquals(strArray30, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(cSVFormat34);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter8 = cSVFormat7.printer();
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setFile("hi!");
        java.nio.charset.Charset charset14 = null;
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharset(charset14);
        org.apache.commons.csv.CSVParser.Builder builder17 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setFile("hi!");
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharset(charset22);
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray25 = new java.lang.Object[] { builder13, 1L, charset22, predefined24 };
        cSVPrinter8.printRecord(objArray25);
        cSVPrinter8.flush();
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char31 = cSVFormat30.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse("", cSVFormat30);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList33 = cSVParser32.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream34 = cSVParser32.stream();
        cSVPrinter8.printRecords(cSVRecordStream34);
        cSVPrinter8.close();
        cSVPrinter8.println();
        cSVPrinter8.printComment("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter42 = cSVFormat41.printer();
        org.apache.commons.csv.CSVParser.Builder builder43 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder45 = builder43.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder47 = builder45.setFile("hi!");
        java.nio.charset.Charset charset48 = null;
        org.apache.commons.csv.CSVParser.Builder builder49 = builder47.setCharset(charset48);
        org.apache.commons.csv.CSVParser.Builder builder51 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder53 = builder51.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder55 = builder53.setFile("hi!");
        java.nio.charset.Charset charset56 = null;
        org.apache.commons.csv.CSVParser.Builder builder57 = builder55.setCharset(charset56);
        org.apache.commons.csv.CSVFormat.Predefined predefined58 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray59 = new java.lang.Object[] { builder47, 1L, charset56, predefined58 };
        cSVPrinter42.printRecord(objArray59);
        org.apache.commons.csv.CSVFormat cSVFormat63 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char64 = cSVFormat63.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser65 = org.apache.commons.csv.CSVParser.parse("", cSVFormat63);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator66 = cSVParser65.spliterator();
        java.lang.String str67 = cSVParser65.getHeaderComment();
        java.lang.String str68 = cSVParser65.getFirstEndOfLine();
        cSVPrinter42.print((java.lang.Object) str68);
        cSVPrinter42.println();
        org.apache.commons.csv.CSVParser.Builder builder71 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder73 = builder71.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder75 = builder73.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder77 = builder75.setCharacterOffset((long) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray78 = builder77.getOpenOptions();
        cSVPrinter42.printRecords((java.lang.Object[]) openOptionArray78);
        cSVPrinter8.printRecords((java.lang.Object[]) openOptionArray78);
        org.apache.commons.csv.CSVParser.Builder builder81 = builder5.setOpenOptions(openOptionArray78);
        org.apache.commons.csv.CSVParser.Builder builder83 = builder81.setBufferSize((java.lang.Integer) 0);
        org.apache.commons.csv.CSVParser.Builder builder85 = builder81.setBufferSizeMax((int) '\\');
        org.apache.commons.csv.CSVParser.Builder builder87 = builder85.setCharSequence((java.lang.CharSequence) "\r\n");
        org.apache.commons.io.IORandomAccessFile iORandomAccessFile88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder89 = builder87.setRandomAccessFile(iORandomAccessFile88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVPrinter8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(char31);
        org.junit.Assert.assertNotNull(cSVParser32);
        org.junit.Assert.assertNotNull(cSVRecordList33);
        org.junit.Assert.assertNotNull(cSVRecordStream34);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(cSVPrinter42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + predefined58 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined58.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNull(char64);
        org.junit.Assert.assertNotNull(cSVParser65);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(openOptionArray78);
        org.junit.Assert.assertArrayEquals(openOptionArray78, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder7 = builder2.setByteArray(byteArray6);
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setBufferSizeMax(1);
        java.io.Reader reader10 = builder9.getReader();
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        java.io.OutputStream outputStream18 = builder17.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder9.setOutputStream(outputStream18);
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setFile("hi!");
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharset(charset25);
        java.io.Writer writer27 = builder24.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder24.setCharSequence((java.lang.CharSequence) "");
        java.io.InputStream inputStream30 = builder29.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder31 = builder19.setInputStream(inputStream30);
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        boolean boolean34 = cSVFormat33.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse("Delimiter=<#> SkipHeaderRecord:false", cSVFormat33);
        org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray37 = cSVFormat36.getHeader();
        boolean boolean38 = cSVFormat36.getLenientEof();
        boolean boolean39 = cSVFormat36.isCommentMarkerSet();
        java.lang.String str40 = cSVFormat36.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined44 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat45 = predefined44.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder46 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder50 = builder48.setFile("hi!");
        java.nio.charset.Charset charset51 = null;
        org.apache.commons.csv.CSVParser.Builder builder52 = builder50.setCharset(charset51);
        java.io.Writer writer53 = builder50.getWriter();
        cSVFormat45.println((java.lang.Appendable) writer53);
        cSVFormat42.print((java.lang.Object) 10L, (java.lang.Appendable) writer53, true);
        cSVFormat36.println((java.lang.Appendable) writer53);
        cSVFormat33.println((java.lang.Appendable) writer53);
        org.apache.commons.csv.CSVParser.Builder builder59 = builder31.setWriter(writer53);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder61 = builder59.setBufferSize((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Request 32 exceeds maximum 1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(reader10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(outputStream18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(writer27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(inputStream30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(cSVParser35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\r\n" + "'", str40, "\r\n");
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertTrue("'" + predefined44 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined44.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(writer53);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        int int7 = builder4.getBufferSizeDefault();
        java.io.OutputStream outputStream8 = builder4.getOutputStream();
        java.nio.charset.Charset charset9 = builder4.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setFile("hi!");
        java.nio.charset.Charset charset15 = builder14.getCharset();
        java.io.RandomAccessFile randomAccessFile16 = builder14.getRandomAccessFile();
        org.apache.commons.csv.CSVParser.Builder builder17 = builder4.setRandomAccessFile(randomAccessFile16);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setCharSequence((java.lang.CharSequence) "hi!");
        int int20 = builder17.getBufferSizeDefault();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8192 + "'", int7 == 8192);
        org.junit.Assert.assertNotNull(outputStream8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(randomAccessFile16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8192 + "'", int20 == 8192);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char3 = cSVFormat2.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList5 = cSVParser4.getRecords();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser4.spliterator();
        java.lang.String str7 = cSVParser4.getHeaderComment();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor8 = cSVParser4.iterator();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(cSVRecordList5);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(cSVRecordItor8);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder8 = builder4.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        java.io.Reader reader9 = builder8.getReader();
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setCharSequence((java.lang.CharSequence) "hi!");
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharSequence((java.lang.CharSequence) "hi!");
        java.io.Reader reader17 = builder14.getReader();
        org.apache.commons.csv.CSVFormat.Builder builder18 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char24 = cSVFormat23.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("", cSVFormat23);
        java.lang.String str26 = cSVFormat23.getRecordSeparator();
        org.apache.commons.csv.CSVParser.Builder builder27 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder27.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder31 = builder29.setFile("hi!");
        java.nio.charset.Charset charset32 = null;
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharset(charset32);
        java.io.Writer writer34 = builder31.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray36 = cSVFormat35.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder37 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat35);
        java.sql.ResultSetMetaData resultSetMetaData38 = null;
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder37.setHeader(resultSetMetaData38);
        java.sql.ResultSet resultSet40 = null;
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder39.setHeader(resultSet40);
        java.sql.ResultSetMetaData resultSetMetaData42 = null;
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder41.setHeader(resultSetMetaData42);
        org.apache.commons.csv.CSVFormat cSVFormat44 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray45 = cSVFormat44.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder46 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat44);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder46.setHeader(strArray48);
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder43.setHeaderComments(strArray48);
        cSVFormat23.printRecord((java.lang.Appendable) writer34, (java.lang.Object[]) strArray48);
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder20.setHeader(strArray48);
        org.apache.commons.csv.CSVFormat cSVFormat53 = builder52.get();
        org.apache.commons.csv.CSVParser cSVParser56 = new org.apache.commons.csv.CSVParser(reader17, cSVFormat53, (long) 1, 0L);
        org.apache.commons.csv.CSVParser cSVParser59 = new org.apache.commons.csv.CSVParser(reader9, cSVFormat53, (long) (byte) 1, (long) (byte) -1);
        java.lang.String str60 = cSVFormat53.getDelimiterString();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(reader9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(reader17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(writer34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNull(strArray36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(strArray45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertArrayEquals(strArray48, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "," + "'", str60, ",");
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        int int1 = builder0.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setFile("");
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setBufferSizeMax((int) (short) -1);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier6 = builder5.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder5.setBufferSizeMax((int) (byte) 0);
        java.util.function.IntUnaryOperator intUnaryOperator9 = null;
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setBufferSizeChecker(intUnaryOperator9);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser11 = builder10.getUnchecked();
            org.junit.Assert.fail("Expected exception of type java.io.UncheckedIOException; message: java.nio.file.AccessDeniedException: ");
        } catch (java.io.UncheckedIOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVParserSupplier6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        boolean boolean1 = cSVFormat0.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char4 = cSVFormat3.getEscapeCharacter();
        java.lang.String[] strArray5 = cSVFormat3.getHeaderComments();
        boolean boolean6 = cSVFormat3.isEscapeCharacterSet();
        java.lang.String[] strArray7 = cSVFormat3.getHeaderComments();
        boolean boolean8 = cSVFormat3.getLenientEof();
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat10.printer();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setFile("hi!");
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharset(charset17);
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setFile("hi!");
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharset(charset25);
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray28 = new java.lang.Object[] { builder16, 1L, charset25, predefined27 };
        cSVPrinter11.printRecord(objArray28);
        cSVPrinter11.flush();
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char34 = cSVFormat33.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse("", cSVFormat33);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList36 = cSVParser35.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream37 = cSVParser35.stream();
        cSVPrinter11.printRecords(cSVRecordStream37);
        java.lang.Appendable appendable39 = cSVPrinter11.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter40 = cSVFormat3.print(appendable39);
        org.apache.commons.csv.CSVPrinter cSVPrinter41 = cSVFormat0.print(appendable39);
        java.sql.ResultSet resultSet42 = null;
        cSVPrinter41.printHeaders(resultSet42);
        java.lang.Iterable<org.apache.commons.csv.CSVRecord> cSVRecordIterable44 = null;
        cSVPrinter41.printRecord(cSVRecordIterable44);
        org.apache.commons.csv.CSVParser.Builder builder46 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption47 = null;
        java.nio.file.OpenOption[] openOptionArray48 = new java.nio.file.OpenOption[] { openOption47 };
        org.apache.commons.csv.CSVParser.Builder builder49 = builder46.setOpenOptions(openOptionArray48);
        org.apache.commons.csv.CSVParser.Builder builder51 = builder49.setRecordNumber((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder52 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder54 = builder52.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder56 = builder54.setFile("hi!");
        java.nio.charset.Charset charset57 = null;
        org.apache.commons.csv.CSVParser.Builder builder58 = builder56.setCharset(charset57);
        org.apache.commons.csv.CSVParser.Builder builder59 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder61 = builder59.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder63 = builder61.setFile("hi!");
        byte[] byteArray65 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder66 = builder61.setByteArray(byteArray65);
        org.apache.commons.csv.CSVParser.Builder builder67 = builder56.setByteArray(byteArray65);
        org.apache.commons.csv.CSVParser.Builder builder68 = builder51.setByteArray(byteArray65);
        org.apache.commons.csv.CSVParser.Builder builder70 = builder51.setBufferSize((java.lang.Integer) (-1));
        java.nio.file.OpenOption[] openOptionArray71 = builder51.getOpenOptions();
        cSVPrinter41.printRecord((java.lang.Object[]) openOptionArray71);
        cSVPrinter41.flush();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVPrinter11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(char34);
        org.junit.Assert.assertNotNull(cSVParser35);
        org.junit.Assert.assertNotNull(cSVRecordList36);
        org.junit.Assert.assertNotNull(cSVRecordStream37);
        org.junit.Assert.assertNotNull(appendable39);
        org.junit.Assert.assertNotNull(cSVPrinter40);
        org.junit.Assert.assertNotNull(cSVPrinter41);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(openOptionArray48);
        org.junit.Assert.assertArrayEquals(openOptionArray48, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertArrayEquals(byteArray65, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(openOptionArray71);
        org.junit.Assert.assertArrayEquals(openOptionArray71, new java.nio.file.OpenOption[] { null });
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        java.io.Writer writer7 = builder4.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder4.setCharSequence((java.lang.CharSequence) "");
        java.io.Reader reader10 = builder4.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV;
        org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse(reader10, cSVFormat11);
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.MONGODB_TSV;
        java.lang.String str14 = cSVFormat13.toString();
        org.apache.commons.csv.CSVParser cSVParser17 = new org.apache.commons.csv.CSVParser(reader10, cSVFormat13, (long) 1, (long) 1);
        java.lang.Class<?> wildcardClass18 = reader10.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(writer7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(reader10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVParser12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str14, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder7 = builder2.setByteArray(byteArray6);
        java.nio.file.OpenOption[] openOptionArray8 = builder7.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setFile("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV;
        org.apache.commons.csv.CSVParser.Builder builder15 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setFile("hi!");
        java.io.File file20 = builder19.getFile();
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder24 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharacterOffset(0L);
        java.nio.charset.Charset charset27 = builder26.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder28 = builder21.setCharset(charset27);
        org.apache.commons.csv.CSVPrinter cSVPrinter29 = cSVFormat14.print(file20, charset27);
        org.apache.commons.csv.CSVParser.Builder builder30 = builder11.setFile(file20);
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder34 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder36 = builder34.setCharacterOffset(0L);
        java.nio.charset.Charset charset37 = builder36.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder38 = builder31.setCharset(charset37);
        org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVParser cSVParser41 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat40);
        org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse(file20, charset37, cSVFormat40);
        org.apache.commons.csv.CSVParser.Builder builder43 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder45 = builder43.setCharacterOffset(0L);
        java.nio.charset.Charset charset46 = builder45.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat48 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char49 = cSVFormat48.getEscapeCharacter();
        java.lang.String[] strArray50 = cSVFormat48.getHeaderComments();
        boolean boolean51 = cSVFormat48.isEscapeCharacterSet();
        java.lang.String[] strArray52 = cSVFormat48.getHeaderComments();
        org.apache.commons.csv.CSVParser cSVParser53 = org.apache.commons.csv.CSVParser.parse(file20, charset46, cSVFormat48);
        org.apache.commons.csv.CSVParser.Builder builder54 = builder7.setFile(file20);
        org.apache.commons.csv.CSVParser.Builder builder55 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder57 = builder55.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder59 = builder57.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder61 = builder59.setCharacterOffset((long) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray62 = builder59.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder63 = builder54.setOpenOptions(openOptionArray62);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder65 = builder54.setCharset("\t");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(openOptionArray8);
        org.junit.Assert.assertArrayEquals(openOptionArray8, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(file20);
        org.junit.Assert.assertNull("file20.getParent() == null", file20.getParent());
        org.junit.Assert.assertEquals(file20.toString(), "hi!");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(cSVPrinter29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVParser41);
        org.junit.Assert.assertNotNull(cSVParser42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(char49);
        org.junit.Assert.assertNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(strArray52);
        org.junit.Assert.assertNotNull(cSVParser53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(openOptionArray62);
        org.junit.Assert.assertArrayEquals(openOptionArray62, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        java.lang.String[] strArray3 = cSVFormat1.getHeaderComments();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        java.lang.String[] strArray5 = cSVFormat1.getHeaderComments();
        boolean boolean6 = cSVFormat1.getLenientEof();
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char10 = cSVFormat9.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse("", cSVFormat9);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator12 = cSVParser11.spliterator();
        java.lang.String str13 = cSVParser11.getHeaderComment();
        java.lang.String str14 = cSVParser11.getFirstEndOfLine();
        boolean boolean15 = cSVParser11.hasHeaderComment();
        boolean boolean16 = cSVFormat1.equals((java.lang.Object) cSVParser11);
        java.io.File file17 = null;
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setFile("hi!");
        byte[] byteArray24 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder25 = builder20.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder26 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder28 = builder26.setCharacterOffset(0L);
        java.nio.charset.Charset charset29 = builder28.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder25.setCharset(charset29);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter31 = cSVFormat1.print(file17, charset29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertNotNull(cSVParser11);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset(0L);
        java.nio.charset.Charset charset3 = builder2.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setFile("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        java.nio.file.OpenOption[] openOptionArray6 = builder2.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder2.setBufferSize((int) (short) 10);
        java.nio.file.OpenOption[] openOptionArray9 = builder2.getOpenOptions();
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier10 = builder2.asSupplier();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(openOptionArray6);
        org.junit.Assert.assertArrayEquals(openOptionArray6, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(openOptionArray9);
        org.junit.Assert.assertArrayEquals(openOptionArray9, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(cSVParserSupplier10);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        boolean boolean2 = cSVFormat0.getLenientEof();
        boolean boolean3 = cSVFormat0.isCommentMarkerSet();
        java.lang.String str4 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setFile("hi!");
        java.nio.charset.Charset charset15 = null;
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharset(charset15);
        java.io.Writer writer17 = builder14.getWriter();
        cSVFormat9.println((java.lang.Appendable) writer17);
        cSVFormat6.print((java.lang.Object) 10L, (java.lang.Appendable) writer17, true);
        cSVFormat0.println((java.lang.Appendable) writer17);
        boolean boolean22 = cSVFormat0.getLenientEof();
        java.lang.String str23 = cSVFormat0.getRecordSeparator();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\r\n" + "'", str4, "\r\n");
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(writer17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\r\n" + "'", str23, "\r\n");
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        java.lang.String[] strArray3 = cSVFormat1.getHeaderComments();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        java.lang.String[] strArray5 = cSVFormat1.getHeaderComments();
        java.lang.Character char6 = cSVFormat1.getQuoteCharacter();
        boolean boolean7 = cSVFormat1.getTrailingData();
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setFile("hi!");
        byte[] byteArray14 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder10.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setBufferSizeMax(1);
        java.io.Reader reader18 = builder17.getReader();
        org.apache.commons.csv.CSVParser cSVParser19 = cSVFormat1.parse(reader18);
        boolean boolean20 = cSVParser19.hasTrailerComment();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(reader18);
        org.junit.Assert.assertNotNull(cSVParser19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSet5);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode9 = org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setDuplicateHeaderMode(duplicateHeaderMode9);
        org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat12.printer();
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setFile("hi!");
        java.nio.charset.Charset charset19 = null;
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharset(charset19);
        org.apache.commons.csv.CSVParser.Builder builder22 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setFile("hi!");
        java.nio.charset.Charset charset27 = null;
        org.apache.commons.csv.CSVParser.Builder builder28 = builder26.setCharset(charset27);
        org.apache.commons.csv.CSVFormat.Predefined predefined29 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray30 = new java.lang.Object[] { builder18, 1L, charset27, predefined29 };
        cSVPrinter13.printRecord(objArray30);
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char35 = cSVFormat34.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse("", cSVFormat34);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator37 = cSVParser36.spliterator();
        java.lang.String str38 = cSVParser36.getHeaderComment();
        java.lang.String str39 = cSVParser36.getFirstEndOfLine();
        cSVPrinter13.print((java.lang.Object) str39);
        org.apache.commons.csv.CSVParser.Builder builder41 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption42 = null;
        java.nio.file.OpenOption[] openOptionArray43 = new java.nio.file.OpenOption[] { openOption42 };
        org.apache.commons.csv.CSVParser.Builder builder44 = builder41.setOpenOptions(openOptionArray43);
        cSVPrinter13.printRecord((java.lang.Object[]) openOptionArray43);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder8.setHeaderComments((java.lang.Object[]) openOptionArray43);
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder8.setCommentMarker((java.lang.Character) 'a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode9 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY + "'", duplicateHeaderMode9.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVPrinter13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + predefined29 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined29.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(char35);
        org.junit.Assert.assertNotNull(cSVParser36);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(openOptionArray43);
        org.junit.Assert.assertArrayEquals(openOptionArray43, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder8 = builder4.setFile("\\N");
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("4");
        java.net.URI uRI11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setURI(uRI11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        boolean boolean1 = cSVFormat0.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char4 = cSVFormat3.getEscapeCharacter();
        java.lang.String[] strArray5 = cSVFormat3.getHeaderComments();
        boolean boolean6 = cSVFormat3.isEscapeCharacterSet();
        java.lang.String[] strArray7 = cSVFormat3.getHeaderComments();
        boolean boolean8 = cSVFormat3.getLenientEof();
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat10.printer();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setFile("hi!");
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharset(charset17);
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setFile("hi!");
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharset(charset25);
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray28 = new java.lang.Object[] { builder16, 1L, charset25, predefined27 };
        cSVPrinter11.printRecord(objArray28);
        cSVPrinter11.flush();
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char34 = cSVFormat33.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse("", cSVFormat33);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList36 = cSVParser35.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream37 = cSVParser35.stream();
        cSVPrinter11.printRecords(cSVRecordStream37);
        java.lang.Appendable appendable39 = cSVPrinter11.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter40 = cSVFormat3.print(appendable39);
        org.apache.commons.csv.CSVPrinter cSVPrinter41 = cSVFormat0.print(appendable39);
        java.lang.Appendable appendable42 = cSVPrinter41.getOut();
        java.sql.ResultSet resultSet43 = null;
        cSVPrinter41.printHeaders(resultSet43);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVPrinter11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(char34);
        org.junit.Assert.assertNotNull(cSVParser35);
        org.junit.Assert.assertNotNull(cSVRecordList36);
        org.junit.Assert.assertNotNull(cSVRecordStream37);
        org.junit.Assert.assertNotNull(appendable39);
        org.junit.Assert.assertNotNull(cSVPrinter40);
        org.junit.Assert.assertNotNull(cSVPrinter41);
        org.junit.Assert.assertNotNull(appendable42);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char3 = cSVFormat2.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser4.spliterator();
        java.lang.String str6 = cSVParser4.getHeaderComment();
        java.lang.String str7 = cSVParser4.getFirstEndOfLine();
        java.util.List<java.lang.String> strList8 = cSVParser4.getHeaderNames();
        java.lang.String str9 = cSVParser4.getTrailerComment();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = cSVParser4.getHeaderMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = cSVParser4.getHeaderMap();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        boolean boolean2 = cSVFormat0.getLenientEof();
        boolean boolean3 = cSVFormat0.isCommentMarkerSet();
        java.lang.String str4 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder13 = builder9.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        java.io.Reader reader14 = builder13.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.QuoteMode quoteMode16 = cSVFormat15.getQuoteMode();
        boolean boolean17 = cSVFormat15.isEscapeCharacterSet();
        boolean boolean18 = cSVFormat15.isCommentMarkerSet();
        java.lang.String str19 = cSVFormat15.toString();
        org.apache.commons.csv.CSVParser cSVParser20 = org.apache.commons.csv.CSVParser.parse(reader14, cSVFormat15);
        org.apache.commons.csv.CSVParser cSVParser21 = cSVFormat0.parse(reader14);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator22 = cSVParser21.spliterator();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\r\n" + "'", str4, "\r\n");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(reader14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(quoteMode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false" + "'", str19, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVParser20);
        org.junit.Assert.assertNotNull(cSVParser21);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator22);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MONGODB_TSV;
        boolean boolean1 = cSVFormat0.getAllowMissingColumnNames();
        boolean boolean2 = cSVFormat0.getTrailingDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setNullString(",");
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setQuote((java.lang.Character) ' ');
        org.apache.commons.csv.QuoteMode quoteMode11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder8.setQuoteMode(quoteMode11);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setRecordSeparator("\n");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char3 = cSVFormat2.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        java.lang.String str5 = cSVParser4.getHeaderComment();
        java.lang.String str6 = cSVParser4.getHeaderComment();
        boolean boolean7 = cSVParser4.hasHeaderComment();
        boolean boolean8 = cSVParser4.isClosed();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVParser4.spliterator();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator9);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSet5);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode9 = org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setDuplicateHeaderMode(duplicateHeaderMode9);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder8.setRecordSeparator("Delimiter=<4> SkipHeaderRecord:false");
        java.sql.ResultSet resultSet13 = null;
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setHeader(resultSet13);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setDelimiter('4');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode17 = org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL;
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder14.setDuplicateHeaderMode(duplicateHeaderMode17);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setDelimiter('\"');
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setIgnoreEmptyLines(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode9 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY + "'", duplicateHeaderMode9.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode17 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode17.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray7 = builder6.getOpenOptions();
        java.net.URI uRI8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder9 = builder6.setURI(uRI8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(openOptionArray7);
        org.junit.Assert.assertArrayEquals(openOptionArray7, new java.nio.file.OpenOption[] {});
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset(0L);
        java.nio.charset.Charset charset3 = builder2.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setFile("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharset(charset11);
        java.io.OutputStream outputStream13 = builder12.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder2.setOutputStream(outputStream13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder2.setPath("hi!");
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharSequence((java.lang.CharSequence) "");
        org.apache.commons.csv.CSVParser.Builder builder19 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption20 = null;
        java.nio.file.OpenOption[] openOptionArray21 = new java.nio.file.OpenOption[] { openOption20 };
        org.apache.commons.csv.CSVParser.Builder builder22 = builder19.setOpenOptions(openOptionArray21);
        org.apache.commons.csv.CSVParser.Builder builder24 = builder19.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder25 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setCharacterOffset(0L);
        java.nio.charset.Charset charset28 = builder27.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder24.setCharset(charset28);
        org.apache.commons.csv.CSVParser.Builder builder30 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder30.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder34 = builder32.setFile("hi!");
        java.nio.charset.Charset charset35 = null;
        org.apache.commons.csv.CSVParser.Builder builder36 = builder34.setCharset(charset35);
        org.apache.commons.csv.CSVParser.Builder builder37 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder39 = builder37.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder41 = builder39.setFile("hi!");
        byte[] byteArray43 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder44 = builder39.setByteArray(byteArray43);
        org.apache.commons.csv.CSVParser.Builder builder45 = builder34.setByteArray(byteArray43);
        org.apache.commons.csv.CSVParser.Builder builder46 = builder29.setByteArray(byteArray43);
        org.apache.commons.csv.CSVParser.Builder builder47 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder49 = builder47.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder50 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder52 = builder50.setCharacterOffset(0L);
        java.nio.charset.Charset charset53 = builder52.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder54 = builder47.setCharset(charset53);
        org.apache.commons.csv.CSVParser.Builder builder55 = builder46.setCharset(charset53);
        org.apache.commons.csv.CSVFormat cSVFormat57 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined59 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat60 = predefined59.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder61 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder63 = builder61.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder65 = builder63.setFile("hi!");
        java.nio.charset.Charset charset66 = null;
        org.apache.commons.csv.CSVParser.Builder builder67 = builder65.setCharset(charset66);
        java.io.Writer writer68 = builder65.getWriter();
        cSVFormat60.println((java.lang.Appendable) writer68);
        cSVFormat57.print((java.lang.Object) 10L, (java.lang.Appendable) writer68, true);
        org.apache.commons.csv.CSVParser.Builder builder72 = builder46.setFormat(cSVFormat57);
        org.apache.commons.csv.CSVParser.Builder builder73 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder75 = builder73.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder77 = builder75.setCharSequence((java.lang.CharSequence) "hi!");
        org.apache.commons.csv.CSVParser.Builder builder78 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder80 = builder78.setCharacterOffset(0L);
        java.nio.charset.Charset charset81 = builder80.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder83 = builder80.setFile("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder84 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder86 = builder84.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder88 = builder86.setFile("hi!");
        java.nio.charset.Charset charset89 = null;
        org.apache.commons.csv.CSVParser.Builder builder90 = builder88.setCharset(charset89);
        java.io.OutputStream outputStream91 = builder90.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder92 = builder80.setOutputStream(outputStream91);
        org.apache.commons.csv.CSVParser.Builder builder94 = builder80.setPath("hi!");
        java.io.RandomAccessFile randomAccessFile95 = builder94.getRandomAccessFile();
        org.apache.commons.csv.CSVParser.Builder builder96 = builder75.setRandomAccessFile(randomAccessFile95);
        java.nio.charset.Charset charset97 = builder75.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder98 = builder72.setCharset(charset97);
        org.apache.commons.csv.CSVParser.Builder builder99 = builder18.setCharset(charset97);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(outputStream13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(openOptionArray21);
        org.junit.Assert.assertArrayEquals(openOptionArray21, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertArrayEquals(byteArray43, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertTrue("'" + predefined59 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined59.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(writer68);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(charset81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(outputStream91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(randomAccessFile95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(charset97);
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharacterOffset((long) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray13 = builder12.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder5.setOpenOptions(openOptionArray13);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser15 = builder14.get();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(openOptionArray13);
        org.junit.Assert.assertArrayEquals(openOptionArray13, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF;
        java.lang.String str1 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder2 = cSVFormat0.builder();
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char6 = cSVFormat5.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("", cSVFormat5);
        java.lang.String str8 = cSVFormat5.getRecordSeparator();
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setFile("hi!");
        java.nio.charset.Charset charset14 = null;
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharset(charset14);
        java.io.Writer writer16 = builder13.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray18 = cSVFormat17.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder19 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat17);
        java.sql.ResultSetMetaData resultSetMetaData20 = null;
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setHeader(resultSetMetaData20);
        java.sql.ResultSet resultSet22 = null;
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setHeader(resultSet22);
        java.sql.ResultSetMetaData resultSetMetaData24 = null;
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setHeader(resultSetMetaData24);
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray27 = cSVFormat26.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder28 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder28.setHeader(strArray30);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder25.setHeaderComments(strArray30);
        cSVFormat5.printRecord((java.lang.Appendable) writer16, (java.lang.Object[]) strArray30);
        org.apache.commons.csv.CSVPrinter cSVPrinter34 = cSVFormat0.print((java.lang.Appendable) writer16);
        org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char37 = cSVFormat36.getEscapeCharacter();
        java.lang.String[] strArray38 = cSVFormat36.getHeaderComments();
        boolean boolean39 = cSVFormat36.isEscapeCharacterSet();
        java.lang.Character char40 = cSVFormat36.getCommentMarker();
        boolean boolean41 = cSVFormat36.isNullStringSet();
        org.apache.commons.csv.CSVPrinter cSVPrinter42 = new org.apache.commons.csv.CSVPrinter((java.lang.Appendable) writer16, cSVFormat36);
        org.apache.commons.csv.CSVFormat cSVFormat43 = org.apache.commons.csv.CSVFormat.TDF;
        java.lang.String str44 = cSVFormat43.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder45 = cSVFormat43.builder();
        org.apache.commons.csv.CSVFormat cSVFormat48 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char49 = cSVFormat48.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser50 = org.apache.commons.csv.CSVParser.parse("", cSVFormat48);
        java.lang.String str51 = cSVFormat48.getRecordSeparator();
        org.apache.commons.csv.CSVParser.Builder builder52 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder54 = builder52.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder56 = builder54.setFile("hi!");
        java.nio.charset.Charset charset57 = null;
        org.apache.commons.csv.CSVParser.Builder builder58 = builder56.setCharset(charset57);
        java.io.Writer writer59 = builder56.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat60 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray61 = cSVFormat60.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder62 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat60);
        java.sql.ResultSetMetaData resultSetMetaData63 = null;
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder62.setHeader(resultSetMetaData63);
        java.sql.ResultSet resultSet65 = null;
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder64.setHeader(resultSet65);
        java.sql.ResultSetMetaData resultSetMetaData67 = null;
        org.apache.commons.csv.CSVFormat.Builder builder68 = builder66.setHeader(resultSetMetaData67);
        org.apache.commons.csv.CSVFormat cSVFormat69 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray70 = cSVFormat69.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder71 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat69);
        java.lang.String[] strArray73 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder74 = builder71.setHeader(strArray73);
        org.apache.commons.csv.CSVFormat.Builder builder75 = builder68.setHeaderComments(strArray73);
        cSVFormat48.printRecord((java.lang.Appendable) writer59, (java.lang.Object[]) strArray73);
        org.apache.commons.csv.CSVPrinter cSVPrinter77 = cSVFormat43.print((java.lang.Appendable) writer59);
        org.apache.commons.csv.CSVFormat cSVFormat79 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char80 = cSVFormat79.getEscapeCharacter();
        java.lang.String[] strArray81 = cSVFormat79.getHeaderComments();
        boolean boolean82 = cSVFormat79.isEscapeCharacterSet();
        java.lang.Character char83 = cSVFormat79.getCommentMarker();
        boolean boolean84 = cSVFormat79.isNullStringSet();
        org.apache.commons.csv.CSVPrinter cSVPrinter85 = new org.apache.commons.csv.CSVPrinter((java.lang.Appendable) writer59, cSVFormat79);
        java.lang.Appendable appendable86 = cSVPrinter85.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter87 = cSVFormat36.print(appendable86);
        boolean boolean88 = cSVFormat36.getTrailingData();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\r\n" + "'", str1, "\r\n");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(writer16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNull(strArray27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertArrayEquals(strArray30, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(cSVPrinter34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(char37);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(char40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\r\n" + "'", str44, "\r\n");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNull(char49);
        org.junit.Assert.assertNotNull(cSVParser50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(writer59);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNull(strArray61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNull(strArray70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertArrayEquals(strArray73, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(cSVPrinter77);
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertNull(char80);
        org.junit.Assert.assertNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(char83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(appendable86);
        org.junit.Assert.assertNotNull(cSVPrinter87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        java.lang.String[] strArray3 = cSVFormat1.getHeaderComments();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        java.lang.String[] strArray5 = cSVFormat1.getHeaderComments();
        java.io.Reader reader6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser7 = cSVFormat1.parse(reader6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strArray5);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSet5);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode9 = org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setDuplicateHeaderMode(duplicateHeaderMode9);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder8.setRecordSeparator("Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setIgnoreHeaderCase(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode9 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY + "'", duplicateHeaderMode9.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_EMPTY));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray4 = cSVFormat3.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder5 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder5.setHeader(strArray7);
        org.apache.commons.csv.CSVFormat cSVFormat9 = builder5.get();
        boolean boolean10 = cSVFormat1.equals((java.lang.Object) builder5);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder5.setDelimiter('a');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder5.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setEscape((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setQuote('#');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setSkipHeaderRecord(true);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertArrayEquals(strArray7, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char6 = cSVFormat5.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("", cSVFormat5);
        java.lang.String str8 = cSVFormat5.getRecordSeparator();
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setFile("hi!");
        java.nio.charset.Charset charset14 = null;
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharset(charset14);
        java.io.Writer writer16 = builder13.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray18 = cSVFormat17.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder19 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat17);
        java.sql.ResultSetMetaData resultSetMetaData20 = null;
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setHeader(resultSetMetaData20);
        java.sql.ResultSet resultSet22 = null;
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setHeader(resultSet22);
        java.sql.ResultSetMetaData resultSetMetaData24 = null;
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setHeader(resultSetMetaData24);
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray27 = cSVFormat26.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder28 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder28.setHeader(strArray30);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder25.setHeaderComments(strArray30);
        cSVFormat5.printRecord((java.lang.Appendable) writer16, (java.lang.Object[]) strArray30);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder2.setHeader(strArray30);
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        boolean boolean36 = cSVFormat35.isCommentMarkerSet();
        boolean boolean37 = cSVFormat35.isCommentMarkerSet();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode38 = cSVFormat35.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder34.setDuplicateHeaderMode(duplicateHeaderMode38);
        java.sql.ResultSet resultSet40 = null;
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder39.setHeader(resultSet40);
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder39.setTrim(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(writer16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNull(strArray18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNull(strArray27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertArrayEquals(strArray30, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode38 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode38.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MONGODB_TSV;
        org.apache.commons.csv.CSVFormat.Builder builder1 = cSVFormat0.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setFile("hi!");
        byte[] byteArray8 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder9 = builder4.setByteArray(byteArray8);
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray11 = cSVFormat10.getHeader();
        boolean boolean12 = cSVFormat10.getLenientEof();
        org.apache.commons.csv.CSVParser.Builder builder13 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setFile("hi!");
        java.nio.charset.Charset charset18 = null;
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setCharset(charset18);
        int int20 = builder17.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder17.setRecordNumber((long) 10);
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setCharacterOffset(0L);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder22.setBufferSize((int) (byte) 10);
        java.io.File file27 = builder26.getFile();
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharacterOffset(0L);
        java.nio.charset.Charset charset34 = builder33.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder28.setCharset(charset34);
        org.apache.commons.csv.CSVPrinter cSVPrinter36 = cSVFormat10.print(file27, charset34);
        org.apache.commons.csv.CSVParser.Builder builder37 = builder9.setFile(file27);
        org.apache.commons.csv.CSVParser.Builder builder38 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption39 = null;
        java.nio.file.OpenOption[] openOptionArray40 = new java.nio.file.OpenOption[] { openOption39 };
        org.apache.commons.csv.CSVParser.Builder builder41 = builder38.setOpenOptions(openOptionArray40);
        org.apache.commons.csv.CSVParser.Builder builder43 = builder38.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder44 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder46 = builder44.setCharacterOffset(0L);
        java.nio.charset.Charset charset47 = builder46.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder48 = builder43.setCharset(charset47);
        org.apache.commons.csv.CSVParser.Builder builder49 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder51 = builder49.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder53 = builder51.setFile("hi!");
        java.nio.charset.Charset charset54 = null;
        org.apache.commons.csv.CSVParser.Builder builder55 = builder53.setCharset(charset54);
        org.apache.commons.csv.CSVParser.Builder builder56 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder58 = builder56.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder60 = builder58.setFile("hi!");
        byte[] byteArray62 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder63 = builder58.setByteArray(byteArray62);
        org.apache.commons.csv.CSVParser.Builder builder64 = builder53.setByteArray(byteArray62);
        org.apache.commons.csv.CSVParser.Builder builder65 = builder48.setByteArray(byteArray62);
        org.apache.commons.csv.CSVParser.Builder builder66 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder68 = builder66.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder69 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder71 = builder69.setCharacterOffset(0L);
        java.nio.charset.Charset charset72 = builder71.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder73 = builder66.setCharset(charset72);
        org.apache.commons.csv.CSVParser.Builder builder74 = builder65.setCharset(charset72);
        org.apache.commons.csv.CSVPrinter cSVPrinter75 = cSVFormat0.print(file27, charset72);
        java.sql.ResultSet resultSet76 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter75.printRecords(resultSet76, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertArrayEquals(byteArray8, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8192 + "'", int20 == 8192);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertNull("file27.getParent() == null", file27.getParent());
        org.junit.Assert.assertEquals(file27.toString(), "hi!");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(cSVPrinter36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(openOptionArray40);
        org.junit.Assert.assertArrayEquals(openOptionArray40, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertArrayEquals(byteArray62, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(charset72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(cSVPrinter75);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        cSVPrinter2.flush();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char25 = cSVFormat24.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("", cSVFormat24);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser26.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream28 = cSVParser26.stream();
        cSVPrinter2.printRecords(cSVRecordStream28);
        cSVPrinter2.close();
        java.sql.ResultSet resultSet31 = null;
        cSVPrinter2.printHeaders(resultSet31);
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char35 = cSVFormat34.getEscapeCharacter();
        java.lang.String[] strArray36 = cSVFormat34.getHeaderComments();
        boolean boolean37 = cSVFormat34.isEscapeCharacterSet();
        java.lang.String[] strArray38 = cSVFormat34.getHeaderComments();
        boolean boolean39 = cSVFormat34.getLenientEof();
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char43 = cSVFormat42.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser44 = org.apache.commons.csv.CSVParser.parse("", cSVFormat42);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator45 = cSVParser44.spliterator();
        java.lang.String str46 = cSVParser44.getHeaderComment();
        java.lang.String str47 = cSVParser44.getFirstEndOfLine();
        boolean boolean48 = cSVParser44.hasHeaderComment();
        boolean boolean49 = cSVFormat34.equals((java.lang.Object) cSVParser44);
        cSVPrinter2.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVParser44);
        java.util.Map<java.lang.String, java.lang.Integer> strMap51 = cSVParser44.getHeaderMap();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNotNull(cSVParser26);
        org.junit.Assert.assertNotNull(cSVRecordList27);
        org.junit.Assert.assertNotNull(cSVRecordStream28);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(char35);
        org.junit.Assert.assertNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertNull(char43);
        org.junit.Assert.assertNotNull(cSVParser44);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strMap51);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter8 = cSVFormat7.printer();
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setFile("hi!");
        java.nio.charset.Charset charset14 = null;
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharset(charset14);
        org.apache.commons.csv.CSVParser.Builder builder17 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setFile("hi!");
        java.nio.charset.Charset charset22 = null;
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharset(charset22);
        org.apache.commons.csv.CSVFormat.Predefined predefined24 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray25 = new java.lang.Object[] { builder13, 1L, charset22, predefined24 };
        cSVPrinter8.printRecord(objArray25);
        cSVPrinter8.flush();
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char31 = cSVFormat30.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse("", cSVFormat30);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList33 = cSVParser32.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream34 = cSVParser32.stream();
        cSVPrinter8.printRecords(cSVRecordStream34);
        cSVPrinter8.close();
        cSVPrinter8.println();
        cSVPrinter8.printComment("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter42 = cSVFormat41.printer();
        org.apache.commons.csv.CSVParser.Builder builder43 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder45 = builder43.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder47 = builder45.setFile("hi!");
        java.nio.charset.Charset charset48 = null;
        org.apache.commons.csv.CSVParser.Builder builder49 = builder47.setCharset(charset48);
        org.apache.commons.csv.CSVParser.Builder builder51 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder53 = builder51.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder55 = builder53.setFile("hi!");
        java.nio.charset.Charset charset56 = null;
        org.apache.commons.csv.CSVParser.Builder builder57 = builder55.setCharset(charset56);
        org.apache.commons.csv.CSVFormat.Predefined predefined58 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray59 = new java.lang.Object[] { builder47, 1L, charset56, predefined58 };
        cSVPrinter42.printRecord(objArray59);
        org.apache.commons.csv.CSVFormat cSVFormat63 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char64 = cSVFormat63.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser65 = org.apache.commons.csv.CSVParser.parse("", cSVFormat63);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator66 = cSVParser65.spliterator();
        java.lang.String str67 = cSVParser65.getHeaderComment();
        java.lang.String str68 = cSVParser65.getFirstEndOfLine();
        cSVPrinter42.print((java.lang.Object) str68);
        cSVPrinter42.println();
        org.apache.commons.csv.CSVParser.Builder builder71 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder73 = builder71.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder75 = builder73.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder77 = builder75.setCharacterOffset((long) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray78 = builder77.getOpenOptions();
        cSVPrinter42.printRecords((java.lang.Object[]) openOptionArray78);
        cSVPrinter8.printRecords((java.lang.Object[]) openOptionArray78);
        org.apache.commons.csv.CSVParser.Builder builder81 = builder5.setOpenOptions(openOptionArray78);
        java.net.URI uRI82 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder83 = builder81.setURI(uRI82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVPrinter8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + predefined24 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined24.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNull(char31);
        org.junit.Assert.assertNotNull(cSVParser32);
        org.junit.Assert.assertNotNull(cSVRecordList33);
        org.junit.Assert.assertNotNull(cSVRecordStream34);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertNotNull(cSVPrinter42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + predefined58 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined58.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertNull(char64);
        org.junit.Assert.assertNotNull(cSVParser65);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(openOptionArray78);
        org.junit.Assert.assertArrayEquals(openOptionArray78, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray4 = cSVFormat3.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder5 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder5.setHeader(strArray7);
        org.apache.commons.csv.CSVFormat cSVFormat9 = builder5.get();
        boolean boolean10 = cSVFormat1.equals((java.lang.Object) builder5);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder5.setDelimiter('a');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder5.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setEscape((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setCommentMarker('#');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setTrailingData(true);
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray22 = cSVFormat21.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder23 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat21);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setTrailingData(false);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setQuote('#');
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Predefined predefined30 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_TSV;
        org.apache.commons.csv.CSVFormat cSVFormat31 = predefined30.getFormat();
        org.apache.commons.csv.QuoteMode quoteMode32 = cSVFormat31.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder27.setQuoteMode(quoteMode32);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder20.setQuoteMode(quoteMode32);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertArrayEquals(strArray7, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(strArray22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + predefined30 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_TSV + "'", predefined30.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_TSV));
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + quoteMode32 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode32.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset(0L);
        java.nio.charset.Charset charset3 = builder2.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setFile("hi!");
        byte[] byteArray10 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder11 = builder6.setByteArray(byteArray10);
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setBufferSizeMax(1);
        java.io.Reader reader14 = builder13.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.ORACLE;
        boolean boolean16 = cSVFormat15.isCommentMarkerSet();
        org.apache.commons.csv.CSVParser cSVParser19 = new org.apache.commons.csv.CSVParser(reader14, cSVFormat15, (long) (byte) 1, (long) '#');
        org.apache.commons.csv.CSVParser.Builder builder20 = builder2.setReader(reader14);
        int int21 = builder20.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder20.setRecordNumber((long) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file24 = builder23.getFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ReaderOrigin#getFile() for InputStreamReader origin java.io.InputStreamReader@7ba21364");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertArrayEquals(byteArray10, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(reader14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8192 + "'", int21 == 8192);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset(0L);
        java.nio.charset.Charset charset3 = builder2.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setFile("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharset(charset11);
        java.io.OutputStream outputStream13 = builder12.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder2.setOutputStream(outputStream13);
        int int15 = builder14.getBufferSizeDefault();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(outputStream13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8192 + "'", int15 == 8192);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        java.lang.Object[] objArray4 = new java.lang.Object[] { (short) 1 };
        cSVPrinter2.printRecords(objArray4);
        java.sql.ResultSet resultSet6 = null;
        cSVPrinter2.printHeaders(resultSet6);
        cSVPrinter2.println();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[1]");
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        boolean boolean1 = cSVFormat0.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char4 = cSVFormat3.getEscapeCharacter();
        java.lang.String[] strArray5 = cSVFormat3.getHeaderComments();
        boolean boolean6 = cSVFormat3.isEscapeCharacterSet();
        java.lang.String[] strArray7 = cSVFormat3.getHeaderComments();
        boolean boolean8 = cSVFormat3.getLenientEof();
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat10.printer();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setFile("hi!");
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharset(charset17);
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setFile("hi!");
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharset(charset25);
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray28 = new java.lang.Object[] { builder16, 1L, charset25, predefined27 };
        cSVPrinter11.printRecord(objArray28);
        cSVPrinter11.flush();
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char34 = cSVFormat33.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse("", cSVFormat33);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList36 = cSVParser35.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream37 = cSVParser35.stream();
        cSVPrinter11.printRecords(cSVRecordStream37);
        java.lang.Appendable appendable39 = cSVPrinter11.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter40 = cSVFormat3.print(appendable39);
        org.apache.commons.csv.CSVPrinter cSVPrinter41 = cSVFormat0.print(appendable39);
        boolean boolean42 = cSVFormat0.isCommentMarkerSet();
        java.lang.String str43 = cSVFormat0.getRecordSeparator();
        boolean boolean44 = cSVFormat0.getAllowMissingColumnNames();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVPrinter11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(char34);
        org.junit.Assert.assertNotNull(cSVParser35);
        org.junit.Assert.assertNotNull(cSVRecordList36);
        org.junit.Assert.assertNotNull(cSVRecordStream37);
        org.junit.Assert.assertNotNull(appendable39);
        org.junit.Assert.assertNotNull(cSVPrinter40);
        org.junit.Assert.assertNotNull(cSVPrinter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\r\n" + "'", str43, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV;
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        java.io.File file11 = builder10.getFile();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharacterOffset(0L);
        java.nio.charset.Charset charset18 = builder17.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder12.setCharset(charset18);
        org.apache.commons.csv.CSVPrinter cSVPrinter20 = cSVFormat5.print(file11, charset18);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder2.setFile(file11);
        org.apache.commons.csv.CSVParser.Builder builder22 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder25 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setCharacterOffset(0L);
        java.nio.charset.Charset charset28 = builder27.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder22.setCharset(charset28);
        org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVParser cSVParser32 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat31);
        org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse(file11, charset28, cSVFormat31);
        org.apache.commons.csv.CSVParser.Builder builder34 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder36 = builder34.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder38 = builder36.setCharSequence((java.lang.CharSequence) "hi!");
        org.apache.commons.csv.CSVParser.Builder builder39 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder41 = builder39.setCharacterOffset(0L);
        java.nio.charset.Charset charset42 = builder41.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder44 = builder41.setFile("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder45 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder47 = builder45.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder49 = builder47.setFile("hi!");
        java.nio.charset.Charset charset50 = null;
        org.apache.commons.csv.CSVParser.Builder builder51 = builder49.setCharset(charset50);
        java.io.OutputStream outputStream52 = builder51.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder53 = builder41.setOutputStream(outputStream52);
        org.apache.commons.csv.CSVParser.Builder builder55 = builder41.setPath("hi!");
        java.io.RandomAccessFile randomAccessFile56 = builder55.getRandomAccessFile();
        org.apache.commons.csv.CSVParser.Builder builder57 = builder36.setRandomAccessFile(randomAccessFile56);
        java.nio.charset.Charset charset58 = builder36.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat60 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter61 = cSVFormat60.printer();
        org.apache.commons.csv.CSVFormat.Builder builder62 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat60);
        org.apache.commons.csv.CSVParser cSVParser63 = org.apache.commons.csv.CSVParser.parse(file11, charset58, cSVFormat60);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator64 = cSVParser63.spliterator();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertNull("file11.getParent() == null", file11.getParent());
        org.junit.Assert.assertEquals(file11.toString(), "hi!");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(cSVPrinter20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertNotNull(cSVParser32);
        org.junit.Assert.assertNotNull(cSVParser33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(outputStream52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(randomAccessFile56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(cSVPrinter61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(cSVParser63);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator64);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setQuote('#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setCommentMarker(' ');
        java.sql.ResultSetMetaData resultSetMetaData11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder8.setHeader(resultSetMetaData11);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setQuote((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setQuote('\\');
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder12.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder12.setIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder20.setTrailingData(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset(0L);
        java.nio.charset.Charset charset3 = builder2.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setFile("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        java.nio.file.OpenOption[] openOptionArray6 = builder2.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder2.setCharacterOffset((-1L));
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setFile("hi!");
        byte[] byteArray15 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder16 = builder11.setByteArray(byteArray15);
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setBufferSizeMax(1);
        java.io.Reader reader19 = builder18.getReader();
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setFile("hi!");
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharset(charset25);
        java.io.OutputStream outputStream27 = builder26.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder28 = builder18.setOutputStream(outputStream27);
        java.nio.file.OpenOption[] openOptionArray29 = new java.nio.file.OpenOption[] {};
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setOpenOptions(openOptionArray29);
        org.apache.commons.csv.CSVParser.Builder builder31 = builder8.setOpenOptions(openOptionArray29);
        org.apache.commons.csv.CSVParser.Builder builder33 = builder8.setRecordNumber((long) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Writer writer34 = builder33.getWriter();
            org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException; message: Illegal char <<> at index 10: Delimiter=<?> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false");
        } catch (java.nio.file.InvalidPathException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(openOptionArray6);
        org.junit.Assert.assertArrayEquals(openOptionArray6, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertArrayEquals(byteArray15, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(reader19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(outputStream27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(openOptionArray29);
        org.junit.Assert.assertArrayEquals(openOptionArray29, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined3 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat4 = predefined3.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setFile("hi!");
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharset(charset10);
        java.io.Writer writer12 = builder9.getWriter();
        cSVFormat4.println((java.lang.Appendable) writer12);
        cSVFormat1.print((java.lang.Object) 10L, (java.lang.Appendable) writer12, true);
        org.apache.commons.csv.CSVPrinter cSVPrinter16 = cSVFormat1.printer();
        org.apache.commons.csv.QuoteMode quoteMode17 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.QuoteMode quoteMode19 = cSVFormat18.getQuoteMode();
        boolean boolean20 = cSVFormat18.isEscapeCharacterSet();
        boolean boolean21 = cSVFormat18.isCommentMarkerSet();
        org.apache.commons.csv.CSVParser.Builder builder22 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder27 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder27.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder31 = builder29.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path34 = builder33.getPath();
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder37 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder39 = builder37.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder41 = builder39.setFile("hi!");
        java.nio.charset.Charset charset42 = null;
        org.apache.commons.csv.CSVParser.Builder builder43 = builder41.setCharset(charset42);
        java.io.Writer writer44 = builder41.getWriter();
        cSVFormat36.println((java.lang.Appendable) writer44);
        org.apache.commons.csv.CSVParser.Builder builder46 = builder33.setWriter(writer44);
        org.apache.commons.csv.CSVParser.Builder builder47 = builder24.setWriter(writer44);
        cSVFormat18.println((java.lang.Appendable) writer44);
        org.apache.commons.csv.CSVFormat cSVFormat49 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray50 = cSVFormat49.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder51 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat49);
        java.sql.ResultSetMetaData resultSetMetaData52 = null;
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder51.setHeader(resultSetMetaData52);
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder53.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder53.setRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder53.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder53.setTrailingData(true);
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder53.setLenientEof(true);
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder53.setIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder65.setQuote('a');
        org.apache.commons.csv.CSVFormat.Builder builder69 = builder67.setCommentMarker('4');
        org.apache.commons.csv.CSVParser.Builder builder70 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder72 = builder70.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder74 = builder72.setFile("hi!");
        byte[] byteArray76 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder77 = builder72.setByteArray(byteArray76);
        org.apache.commons.csv.CSVParser.Builder builder79 = builder77.setBufferSizeMax(1);
        java.io.Reader reader80 = builder79.getReader();
        org.apache.commons.csv.CSVParser.Builder builder81 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder83 = builder81.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder85 = builder83.setFile("hi!");
        java.nio.charset.Charset charset86 = null;
        org.apache.commons.csv.CSVParser.Builder builder87 = builder85.setCharset(charset86);
        java.io.OutputStream outputStream88 = builder87.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder89 = builder79.setOutputStream(outputStream88);
        java.nio.file.OpenOption[] openOptionArray90 = new java.nio.file.OpenOption[] {};
        org.apache.commons.csv.CSVParser.Builder builder91 = builder89.setOpenOptions(openOptionArray90);
        org.apache.commons.csv.CSVFormat.Builder builder92 = builder67.setHeaderComments((java.lang.Object[]) openOptionArray90);
        cSVFormat1.printRecord((java.lang.Appendable) writer44, (java.lang.Object[]) openOptionArray90);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + predefined3 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined3.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(writer12);
        org.junit.Assert.assertNotNull(cSVPrinter16);
        org.junit.Assert.assertNull(quoteMode17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNull(quoteMode19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(path34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(writer44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNull(strArray50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertArrayEquals(byteArray76, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(reader80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(outputStream88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(openOptionArray90);
        org.junit.Assert.assertArrayEquals(openOptionArray90, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isEscapeCharacterSet();
        java.lang.String str2 = cSVFormat0.getDelimiterString();
        java.lang.String[] strArray3 = cSVFormat0.getHeaderComments();
        boolean boolean4 = cSVFormat0.getAllowMissingColumnNames();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "," + "'", str2, ",");
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder8 = builder4.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray10 = cSVFormat9.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat9);
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder11.setHeader(strArray13);
        org.apache.commons.csv.CSVFormat cSVFormat15 = builder11.get();
        org.apache.commons.csv.CSVParser.Builder builder16 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setFile("hi!");
        java.nio.charset.Charset charset21 = null;
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharset(charset21);
        java.io.Writer writer23 = builder20.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat25.printer();
        org.apache.commons.csv.CSVParser.Builder builder27 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder27.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder31 = builder29.setFile("hi!");
        java.nio.charset.Charset charset32 = null;
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharset(charset32);
        org.apache.commons.csv.CSVParser.Builder builder35 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder39 = builder37.setFile("hi!");
        java.nio.charset.Charset charset40 = null;
        org.apache.commons.csv.CSVParser.Builder builder41 = builder39.setCharset(charset40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray43 = new java.lang.Object[] { builder31, 1L, charset40, predefined42 };
        cSVPrinter26.printRecord(objArray43);
        cSVFormat15.printRecord((java.lang.Appendable) writer23, objArray43);
        org.apache.commons.csv.CSVParser.Builder builder46 = builder4.setWriter(writer23);
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setFile("Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Predefined predefined49 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat50 = predefined49.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder51 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder53 = builder51.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder55 = builder53.setFile("hi!");
        java.nio.charset.Charset charset56 = null;
        org.apache.commons.csv.CSVParser.Builder builder57 = builder55.setCharset(charset56);
        java.io.Writer writer58 = builder55.getWriter();
        cSVFormat50.println((java.lang.Appendable) writer58);
        org.apache.commons.csv.CSVParser.Builder builder60 = builder48.setWriter(writer58);
        org.apache.commons.csv.CSVParser.Builder builder62 = builder48.setCharacterOffset((long) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream63 = builder48.getInputStream();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: WriterOrigin#getPath() for BufferedWriter origin java.io.BufferedWriter@23fed1f5");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertArrayEquals(strArray13, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(writer23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNotNull(cSVPrinter26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + predefined49 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined49.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(writer58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset(0L);
        java.nio.charset.Charset charset3 = builder2.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setFile("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharset(charset11);
        java.io.OutputStream outputStream13 = builder12.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder2.setOutputStream(outputStream13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder2.setPath("hi!");
        org.apache.commons.csv.CSVParser cSVParser17 = builder16.get();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder16.setBufferSizeMax((int) (short) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(outputStream13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(cSVParser17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder2.setHeader(strArray4);
        org.apache.commons.csv.CSVFormat cSVFormat6 = builder2.get();
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setEscape('#');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder8.setEscape((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder8.setIgnoreHeaderCase(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertArrayEquals(strArray4, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.EXCEL;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVPrinter cSVPrinter3 = cSVFormat1.printer();
        java.lang.String str4 = cSVFormat1.getNullString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.EXCEL + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.EXCEL));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(cSVPrinter3);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setFile("hi!");
        java.nio.charset.Charset charset10 = null;
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharset(charset10);
        int int12 = builder9.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder9.setRecordNumber((long) 10);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharacterOffset(0L);
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setFile(",");
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 100, (byte) -1, (byte) -1 };
        org.apache.commons.csv.CSVParser.Builder builder26 = builder18.setByteArray(byteArray25);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder2.setByteArray(byteArray25);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder29 = builder2.setPath("\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException; message: Illegal char <?> at index 0: ??");
        } catch (java.nio.file.InvalidPathException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8192 + "'", int12 == 8192);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertArrayEquals(byteArray25, new byte[] { (byte) 1, (byte) 100, (byte) 100, (byte) 100, (byte) -1, (byte) -1 });
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        boolean boolean2 = cSVFormat0.getLenientEof();
        boolean boolean3 = cSVFormat0.isCommentMarkerSet();
        java.lang.String str4 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setFile("hi!");
        java.nio.charset.Charset charset15 = null;
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharset(charset15);
        java.io.Writer writer17 = builder14.getWriter();
        cSVFormat9.println((java.lang.Appendable) writer17);
        cSVFormat6.print((java.lang.Object) 10L, (java.lang.Appendable) writer17, true);
        cSVFormat0.println((java.lang.Appendable) writer17);
        org.apache.commons.csv.CSVParser.Builder builder22 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setFile("hi!");
        java.nio.charset.Charset charset27 = null;
        org.apache.commons.csv.CSVParser.Builder builder28 = builder26.setCharset(charset27);
        int int29 = builder26.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder31 = builder26.setRecordNumber((long) 10);
        java.io.Writer writer32 = builder26.getWriter();
        cSVFormat0.println((java.lang.Appendable) writer32);
        boolean boolean34 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\r\n" + "'", str4, "\r\n");
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(writer17);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8192 + "'", int29 == 8192);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(writer32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder4.setTrailingData(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_TSV;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        org.apache.commons.csv.QuoteMode quoteMode15 = cSVFormat14.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setQuoteMode(quoteMode15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder12.setDelimiter(' ');
        java.sql.ResultSet resultSet19 = null;
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder12.setHeader(resultSet19);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder12.setEscape((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder12.setTrim(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_TSV + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_TSV));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + quoteMode15 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode15.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        java.lang.String[] strArray3 = cSVFormat1.getHeaderComments();
        boolean boolean4 = cSVFormat1.isEscapeCharacterSet();
        boolean boolean5 = cSVFormat1.getLenientEof();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (short) 100);
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharset(charset11);
        java.io.OutputStream outputStream13 = builder12.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder5.setOutputStream(outputStream13);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser15 = builder14.getUnchecked();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OutputStreamOrigin#getPath() for  origin java.nio.channels.Channels$1@607c58ac");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(outputStream13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder7 = builder2.setByteArray(byteArray6);
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setBufferSizeMax(1);
        java.io.Reader reader10 = builder9.getReader();
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder15.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path27 = builder26.getPath();
        org.apache.commons.csv.CSVParser.Builder builder28 = builder19.setPath(path27);
        org.apache.commons.csv.CSVParser.Builder builder29 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder31 = builder29.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setFile("hi!");
        byte[] byteArray35 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder36 = builder31.setByteArray(byteArray35);
        org.apache.commons.csv.CSVParser.Builder builder37 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder39 = builder37.setCharacterOffset(0L);
        java.nio.charset.Charset charset40 = builder39.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder41 = builder36.setCharset(charset40);
        org.apache.commons.csv.CSVFormat.Predefined predefined42 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat43 = predefined42.getFormat();
        org.apache.commons.csv.CSVFormat cSVFormat44 = predefined42.getFormat();
        org.apache.commons.csv.CSVParser cSVParser45 = org.apache.commons.csv.CSVParser.parse(path27, charset40, cSVFormat44);
        org.apache.commons.csv.CSVParser cSVParser48 = new org.apache.commons.csv.CSVParser(reader10, cSVFormat44, (long) (byte) 10, (long) '\"');
        boolean boolean49 = cSVFormat44.getIgnoreHeaderCase();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(reader10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(path27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertArrayEquals(byteArray35, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + predefined42 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined42.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVParser45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        boolean boolean1 = cSVFormat0.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char4 = cSVFormat3.getEscapeCharacter();
        java.lang.String[] strArray5 = cSVFormat3.getHeaderComments();
        boolean boolean6 = cSVFormat3.isEscapeCharacterSet();
        java.lang.String[] strArray7 = cSVFormat3.getHeaderComments();
        boolean boolean8 = cSVFormat3.getLenientEof();
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat10.printer();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setFile("hi!");
        java.nio.charset.Charset charset17 = null;
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharset(charset17);
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setFile("hi!");
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharset(charset25);
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray28 = new java.lang.Object[] { builder16, 1L, charset25, predefined27 };
        cSVPrinter11.printRecord(objArray28);
        cSVPrinter11.flush();
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char34 = cSVFormat33.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse("", cSVFormat33);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList36 = cSVParser35.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream37 = cSVParser35.stream();
        cSVPrinter11.printRecords(cSVRecordStream37);
        java.lang.Appendable appendable39 = cSVPrinter11.getOut();
        org.apache.commons.csv.CSVPrinter cSVPrinter40 = cSVFormat3.print(appendable39);
        org.apache.commons.csv.CSVPrinter cSVPrinter41 = cSVFormat0.print(appendable39);
        boolean boolean42 = cSVFormat0.getTrim();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(char4);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertNotNull(cSVPrinter11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(char34);
        org.junit.Assert.assertNotNull(cSVParser35);
        org.junit.Assert.assertNotNull(cSVRecordList36);
        org.junit.Assert.assertNotNull(cSVRecordStream37);
        org.junit.Assert.assertNotNull(appendable39);
        org.junit.Assert.assertNotNull(cSVPrinter40);
        org.junit.Assert.assertNotNull(cSVPrinter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        cSVPrinter2.flush();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char25 = cSVFormat24.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse("", cSVFormat24);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList27 = cSVParser26.getRecords();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream28 = cSVParser26.stream();
        cSVPrinter2.printRecords(cSVRecordStream28);
        cSVPrinter2.close();
        cSVPrinter2.println();
        cSVPrinter2.printComment("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        java.sql.ResultSet resultSet34 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVPrinter2.printRecords(resultSet34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNotNull(cSVParser26);
        org.junit.Assert.assertNotNull(cSVRecordList27);
        org.junit.Assert.assertNotNull(cSVRecordStream28);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char24 = cSVFormat23.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("", cSVFormat23);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser25.spliterator();
        java.lang.String str27 = cSVParser25.getHeaderComment();
        java.lang.String str28 = cSVParser25.getFirstEndOfLine();
        cSVPrinter2.print((java.lang.Object) str28);
        java.lang.Appendable appendable30 = cSVPrinter2.getOut();
        long long31 = cSVPrinter2.getRecordCount();
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char35 = cSVFormat34.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse("", cSVFormat34);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator37 = cSVParser36.spliterator();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList38 = cSVParser36.getRecords();
        cSVPrinter2.printRecord((java.lang.Iterable<org.apache.commons.csv.CSVRecord>) cSVRecordList38);
        cSVPrinter2.printComment("\t");
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(appendable30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(char35);
        org.junit.Assert.assertNotNull(cSVParser36);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator37);
        org.junit.Assert.assertNotNull(cSVRecordList38);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        java.io.Writer writer7 = builder4.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder4.setCharSequence((java.lang.CharSequence) "");
        java.io.Reader reader10 = builder4.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char14 = cSVFormat13.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat13);
        java.lang.String str16 = cSVFormat13.getRecordSeparator();
        org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse(reader10, cSVFormat13);
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        boolean boolean19 = cSVFormat18.isCommentMarkerSet();
        boolean boolean20 = cSVFormat18.isCommentMarkerSet();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode21 = cSVFormat18.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse(reader10, cSVFormat18);
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char25 = cSVFormat24.getEscapeCharacter();
        java.lang.String[] strArray26 = cSVFormat24.getHeaderComments();
        boolean boolean27 = cSVFormat24.isEscapeCharacterSet();
        java.lang.String[] strArray28 = cSVFormat24.getHeaderComments();
        java.lang.Character char29 = cSVFormat24.getQuoteCharacter();
        org.apache.commons.csv.CSVParser cSVParser32 = new org.apache.commons.csv.CSVParser(reader10, cSVFormat24, (long) (byte) 100, (long) 8192);
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.QuoteMode quoteMode34 = cSVFormat33.getQuoteMode();
        boolean boolean35 = cSVFormat33.isEscapeCharacterSet();
        boolean boolean36 = cSVFormat33.isCommentMarkerSet();
        java.lang.String str37 = cSVFormat33.toString();
        org.apache.commons.csv.CSVParser cSVParser40 = new org.apache.commons.csv.CSVParser(reader10, cSVFormat33, (long) (short) 100, (long) (byte) -1);
        java.lang.Character char41 = cSVFormat33.getQuoteCharacter();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(writer7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(reader10);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(cSVParser15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVParser17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode21 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode21.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVParser22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNull(char25);
        org.junit.Assert.assertNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(strArray28);
        org.junit.Assert.assertNull(char29);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(quoteMode34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false" + "'", str37, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + char41 + "' != '" + '\"' + "'", char41 == '\"');
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray4 = cSVFormat3.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder5 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat3);
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder5.setHeader(strArray7);
        org.apache.commons.csv.CSVFormat cSVFormat9 = builder5.get();
        boolean boolean10 = cSVFormat1.equals((java.lang.Object) builder5);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder5.setDelimiter('a');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder5.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setEscape((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setCommentMarker('#');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setTrailingData(true);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setTrim(false);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertArrayEquals(strArray7, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MONGODB_TSV;
        java.lang.String str1 = cSVFormat0.toString();
        java.lang.Character char2 = cSVFormat0.getCommentMarker();
        boolean boolean3 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat.Builder builder4 = cSVFormat0.builder();
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote('\\');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setIgnoreHeaderCase(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str1, "Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder7 = builder2.setByteArray(byteArray6);
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setBufferSizeMax(1);
        java.io.Reader reader10 = builder9.getReader();
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        java.io.OutputStream outputStream18 = builder17.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder9.setOutputStream(outputStream18);
        // The following exception was thrown during execution in test generation
        try {
            java.io.RandomAccessFile randomAccessFile20 = builder9.getRandomAccessFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OutputStreamOrigin#getFile() for  origin java.nio.channels.Channels$1@1f706763");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(reader10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(outputStream18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char5 = cSVFormat4.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse("", cSVFormat4);
        java.lang.String str7 = cSVFormat4.getRecordSeparator();
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setFile("hi!");
        java.nio.charset.Charset charset13 = null;
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setCharset(charset13);
        java.io.Writer writer15 = builder12.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray17 = cSVFormat16.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder18 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat16);
        java.sql.ResultSetMetaData resultSetMetaData19 = null;
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setHeader(resultSetMetaData19);
        java.sql.ResultSet resultSet21 = null;
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setHeader(resultSet21);
        java.sql.ResultSetMetaData resultSetMetaData23 = null;
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setHeader(resultSetMetaData23);
        org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray26 = cSVFormat25.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder27 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat25);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder27.setHeader(strArray29);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder24.setHeaderComments(strArray29);
        cSVFormat4.printRecord((java.lang.Appendable) writer15, (java.lang.Object[]) strArray29);
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray34 = cSVFormat33.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder35 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat33);
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder35.setHeader(strArray37);
        org.apache.commons.csv.CSVFormat cSVFormat39 = builder35.get();
        org.apache.commons.csv.CSVParser.Builder builder40 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder42 = builder40.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder44 = builder42.setFile("hi!");
        java.nio.charset.Charset charset45 = null;
        org.apache.commons.csv.CSVParser.Builder builder46 = builder44.setCharset(charset45);
        java.io.Writer writer47 = builder44.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat49 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter50 = cSVFormat49.printer();
        org.apache.commons.csv.CSVParser.Builder builder51 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder53 = builder51.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder55 = builder53.setFile("hi!");
        java.nio.charset.Charset charset56 = null;
        org.apache.commons.csv.CSVParser.Builder builder57 = builder55.setCharset(charset56);
        org.apache.commons.csv.CSVParser.Builder builder59 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder61 = builder59.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder63 = builder61.setFile("hi!");
        java.nio.charset.Charset charset64 = null;
        org.apache.commons.csv.CSVParser.Builder builder65 = builder63.setCharset(charset64);
        org.apache.commons.csv.CSVFormat.Predefined predefined66 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray67 = new java.lang.Object[] { builder55, 1L, charset64, predefined66 };
        cSVPrinter50.printRecord(objArray67);
        cSVFormat39.printRecord((java.lang.Appendable) writer47, objArray67);
        cSVFormat1.printRecord((java.lang.Appendable) writer15, objArray67);
        java.lang.String str71 = cSVFormat1.getNullString();
        java.lang.String str72 = cSVFormat1.getNullString();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNull(char5);
        org.junit.Assert.assertNotNull(cSVParser6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(writer15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNull(strArray17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(strArray26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertArrayEquals(strArray29, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(strArray34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertArrayEquals(strArray37, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(writer47);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNotNull(cSVPrinter50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + predefined66 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined66.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertNull(str72);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char3 = cSVFormat2.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList5 = cSVParser4.getRecords();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator6 = cSVParser4.spliterator();
        java.lang.String str7 = cSVParser4.getFirstEndOfLine();
        java.lang.String str8 = cSVParser4.getTrailerComment();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVParser4.spliterator();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(cSVRecordList5);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator9);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder8 = builder4.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser cSVParser9 = builder4.getUnchecked();
        java.io.Reader reader10 = builder4.getReader();
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier11 = builder4.asSupplier();
        int int12 = builder4.getBufferSize();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVParser9);
        org.junit.Assert.assertNotNull(reader10);
        org.junit.Assert.assertNotNull(cSVParserSupplier11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8192 + "'", int12 == 8192);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setFile("hi!");
        java.nio.charset.Charset charset8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset(charset8);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray19 = new java.lang.Object[] { builder7, 1L, charset16, predefined18 };
        cSVPrinter2.printRecord(objArray19);
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char24 = cSVFormat23.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse("", cSVFormat23);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator26 = cSVParser25.spliterator();
        java.lang.String str27 = cSVParser25.getHeaderComment();
        java.lang.String str28 = cSVParser25.getFirstEndOfLine();
        cSVPrinter2.print((java.lang.Object) str28);
        java.lang.Appendable appendable30 = cSVPrinter2.getOut();
        long long31 = cSVPrinter2.getRecordCount();
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char35 = cSVFormat34.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse("", cSVFormat34);
        java.util.List<java.lang.String> strList37 = cSVParser36.getHeaderNames();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList38 = cSVParser36.getRecords();
        cSVPrinter2.print((java.lang.Object) cSVRecordList38);
        org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray41 = cSVFormat40.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder42 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat40);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder42.setHeader(strArray44);
        org.apache.commons.csv.CSVFormat cSVFormat46 = builder42.get();
        org.apache.commons.csv.CSVParser.Builder builder47 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder49 = builder47.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder51 = builder49.setFile("hi!");
        java.nio.charset.Charset charset52 = null;
        org.apache.commons.csv.CSVParser.Builder builder53 = builder51.setCharset(charset52);
        java.io.Writer writer54 = builder51.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat56 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVPrinter cSVPrinter57 = cSVFormat56.printer();
        org.apache.commons.csv.CSVParser.Builder builder58 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder60 = builder58.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder62 = builder60.setFile("hi!");
        java.nio.charset.Charset charset63 = null;
        org.apache.commons.csv.CSVParser.Builder builder64 = builder62.setCharset(charset63);
        org.apache.commons.csv.CSVParser.Builder builder66 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder68 = builder66.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder70 = builder68.setFile("hi!");
        java.nio.charset.Charset charset71 = null;
        org.apache.commons.csv.CSVParser.Builder builder72 = builder70.setCharset(charset71);
        org.apache.commons.csv.CSVFormat.Predefined predefined73 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        java.lang.Object[] objArray74 = new java.lang.Object[] { builder62, 1L, charset71, predefined73 };
        cSVPrinter57.printRecord(objArray74);
        cSVFormat46.printRecord((java.lang.Appendable) writer54, objArray74);
        cSVPrinter2.printRecords(objArray74);
        java.lang.Appendable appendable78 = cSVPrinter2.getOut();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertNull(char24);
        org.junit.Assert.assertNotNull(cSVParser25);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(appendable30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNull(char35);
        org.junit.Assert.assertNotNull(cSVParser36);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(cSVRecordList38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNull(strArray41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertArrayEquals(strArray44, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(writer54);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(cSVPrinter57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + predefined73 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined73.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(appendable78);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = cSVFormat0.builder();
        java.sql.ResultSet resultSet3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSet3);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSetMetaData3);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setAutoFlush(true);
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setHeader(resultSet7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setQuote((java.lang.Character) ' ');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setCommentMarker((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat cSVFormat13 = builder12.get();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray15 = cSVFormat14.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder16 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat14);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder16.setHeader(strArray18);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder12.setHeader(strArray18);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder12.setEscape((java.lang.Character) '\"');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNull(strArray15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertArrayEquals(strArray18, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder7 = builder2.setByteArray(byteArray6);
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setBufferSizeMax(1);
        java.io.Reader reader10 = builder9.getReader();
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setFile("hi!");
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharset(charset16);
        java.io.OutputStream outputStream18 = builder17.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder9.setOutputStream(outputStream18);
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setFile("hi!");
        java.nio.charset.Charset charset25 = null;
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharset(charset25);
        java.io.Writer writer27 = builder24.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder24.setCharSequence((java.lang.CharSequence) "");
        java.io.InputStream inputStream30 = builder29.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder31 = builder19.setInputStream(inputStream30);
        java.nio.file.OpenOption[] openOptionArray32 = builder31.getOpenOptions();
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        boolean boolean34 = cSVFormat33.isCommentMarkerSet();
        org.apache.commons.csv.CSVParser.Builder builder35 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder39 = builder37.setFile("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV;
        org.apache.commons.csv.CSVParser.Builder builder41 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder41.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder45 = builder43.setFile("hi!");
        java.io.File file46 = builder45.getFile();
        org.apache.commons.csv.CSVParser.Builder builder47 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder49 = builder47.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder50 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder52 = builder50.setCharacterOffset(0L);
        java.nio.charset.Charset charset53 = builder52.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder54 = builder47.setCharset(charset53);
        org.apache.commons.csv.CSVPrinter cSVPrinter55 = cSVFormat40.print(file46, charset53);
        org.apache.commons.csv.CSVParser.Builder builder56 = builder37.setFile(file46);
        org.apache.commons.csv.CSVParser.Builder builder57 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder59 = builder57.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder60 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder62 = builder60.setCharacterOffset(0L);
        java.nio.charset.Charset charset63 = builder62.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder64 = builder57.setCharset(charset63);
        org.apache.commons.csv.CSVFormat cSVFormat66 = org.apache.commons.csv.CSVFormat.DEFAULT;
        org.apache.commons.csv.CSVParser cSVParser67 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat66);
        org.apache.commons.csv.CSVParser cSVParser68 = org.apache.commons.csv.CSVParser.parse(file46, charset63, cSVFormat66);
        org.apache.commons.csv.CSVParser.Builder builder69 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder71 = builder69.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder73 = builder71.setCharSequence((java.lang.CharSequence) "hi!");
        org.apache.commons.csv.CSVParser.Builder builder74 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder76 = builder74.setCharacterOffset(0L);
        java.nio.charset.Charset charset77 = builder76.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder79 = builder76.setFile("Delimiter=<\t> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder80 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder82 = builder80.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder84 = builder82.setFile("hi!");
        java.nio.charset.Charset charset85 = null;
        org.apache.commons.csv.CSVParser.Builder builder86 = builder84.setCharset(charset85);
        java.io.OutputStream outputStream87 = builder86.getOutputStream();
        org.apache.commons.csv.CSVParser.Builder builder88 = builder76.setOutputStream(outputStream87);
        org.apache.commons.csv.CSVParser.Builder builder90 = builder76.setPath("hi!");
        java.io.RandomAccessFile randomAccessFile91 = builder90.getRandomAccessFile();
        org.apache.commons.csv.CSVParser.Builder builder92 = builder71.setRandomAccessFile(randomAccessFile91);
        java.nio.charset.Charset charset93 = builder71.getCharsetDefault();
        org.apache.commons.csv.CSVPrinter cSVPrinter94 = cSVFormat33.print(file46, charset93);
        org.apache.commons.csv.CSVParser.Builder builder95 = builder31.setFile(file46);
        java.util.function.IntUnaryOperator intUnaryOperator96 = null;
        org.apache.commons.csv.CSVParser.Builder builder97 = builder95.setBufferSizeChecker(intUnaryOperator96);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(reader10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(outputStream18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(writer27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(inputStream30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(openOptionArray32);
        org.junit.Assert.assertArrayEquals(openOptionArray32, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(file46);
        org.junit.Assert.assertNull("file46.getParent() == null", file46.getParent());
        org.junit.Assert.assertEquals(file46.toString(), "hi!");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(cSVPrinter55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(charset63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertNotNull(cSVParser67);
        org.junit.Assert.assertNotNull(cSVParser68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(charset77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(outputStream87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(randomAccessFile91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(charset93);
        org.junit.Assert.assertNotNull(cSVPrinter94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharacterOffset((long) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder8 = builder4.setCharSequence((java.lang.CharSequence) "Delimiter=<4> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setFile("hi!");
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharacterOffset((long) (byte) 10);
        java.nio.file.Path path16 = builder15.getPath();
        org.apache.commons.csv.CSVParser.Builder builder17 = builder8.setPath(path16);
        java.lang.CharSequence charSequence18 = builder8.getCharSequence();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(path16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "" + "'", charSequence18, "");
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setRecordNumber((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setFile("hi!");
        java.nio.charset.Charset charset11 = null;
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharset(charset11);
        org.apache.commons.csv.CSVParser.Builder builder13 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder13.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setFile("hi!");
        byte[] byteArray19 = new byte[] { (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder20 = builder15.setByteArray(byteArray19);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder10.setByteArray(byteArray19);
        org.apache.commons.csv.CSVParser.Builder builder22 = builder5.setByteArray(byteArray19);
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setFile("hi!");
        java.io.File file28 = builder27.getFile();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder22.setFile(file28);
        java.io.Reader reader30 = builder29.getReader();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder29.setCharSequence((java.lang.CharSequence) "\n");
        org.apache.commons.csv.CSVParser.Builder builder34 = builder32.setCharSequence((java.lang.CharSequence) "\\N");
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path35 = builder32.getPath();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CharSequenceOrigin#getPath() for String origin \\N");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertArrayEquals(byteArray19, new byte[] { (byte) 1 });
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(file28);
        org.junit.Assert.assertNull("file28.getParent() == null", file28.getParent());
        org.junit.Assert.assertEquals(file28.toString(), "hi!");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(reader30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV;
        java.lang.String str1 = cSVFormat0.toString();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setCharacterOffset(0L);
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder3.setCharset(charset9);
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setFile("hi!");
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char16 = cSVFormat15.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse("", cSVFormat15);
        java.lang.String str18 = cSVFormat15.getRecordSeparator();
        org.apache.commons.csv.CSVParser.Builder builder19 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setFile("hi!");
        java.nio.charset.Charset charset24 = null;
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setCharset(charset24);
        java.io.Writer writer26 = builder23.getWriter();
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray28 = cSVFormat27.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder29 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat27);
        java.sql.ResultSetMetaData resultSetMetaData30 = null;
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setHeader(resultSetMetaData30);
        java.sql.ResultSet resultSet32 = null;
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setHeader(resultSet32);
        java.sql.ResultSetMetaData resultSetMetaData34 = null;
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setHeader(resultSetMetaData34);
        org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray37 = cSVFormat36.getHeader();
        org.apache.commons.csv.CSVFormat.Builder builder38 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat36);
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!" };
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder38.setHeader(strArray40);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder35.setHeaderComments(strArray40);
        cSVFormat15.printRecord((java.lang.Appendable) writer26, (java.lang.Object[]) strArray40);
        org.apache.commons.csv.CSVParser.Builder builder44 = builder12.setWriter(writer26);
        org.apache.commons.csv.CSVPrinter cSVPrinter45 = cSVFormat0.print((java.lang.Appendable) writer26);
        boolean boolean46 = cSVFormat0.isNullStringSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str1, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNull(char16);
        org.junit.Assert.assertNotNull(cSVParser17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(writer26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertNull(strArray28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(strArray37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertArrayEquals(strArray40, new java.lang.String[] { "hi!" });
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(cSVPrinter45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setCharacterOffset((long) (-1));
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setFile("hi!");
        java.nio.charset.Charset charset5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setCharset(charset5);
        java.io.Writer writer7 = builder4.getWriter();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder4.setCharSequence((java.lang.CharSequence) "");
        java.io.Reader reader10 = builder4.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char14 = cSVFormat13.getEscapeCharacter();
        org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("", cSVFormat13);
        java.lang.String str16 = cSVFormat13.getRecordSeparator();
        org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse(reader10, cSVFormat13);
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        boolean boolean19 = cSVFormat18.isCommentMarkerSet();
        boolean boolean20 = cSVFormat18.isCommentMarkerSet();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode21 = cSVFormat18.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse(reader10, cSVFormat18);
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        boolean boolean25 = cSVFormat24.getLenientEof();
        org.apache.commons.csv.CSVParser cSVParser28 = new org.apache.commons.csv.CSVParser(reader10, cSVFormat24, (long) 'a', (long) (short) -1);
        boolean boolean29 = cSVFormat24.getAutoFlush();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(writer7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(reader10);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNull(char14);
        org.junit.Assert.assertNotNull(cSVParser15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVParser17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode21 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode21.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVParser22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.lang.Character char2 = cSVFormat1.getEscapeCharacter();
        java.lang.String[] strArray3 = cSVFormat1.getHeaderComments();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.file.OpenOption openOption1 = null;
        java.nio.file.OpenOption[] openOptionArray2 = new java.nio.file.OpenOption[] { openOption1 };
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setOpenOptions(openOptionArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setRecordNumber((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setCharacterOffset((long) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream8 = builder7.getInputStream();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(openOptionArray2);
        org.junit.Assert.assertArrayEquals(openOptionArray2, new java.nio.file.OpenOption[] { null });
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }
}

