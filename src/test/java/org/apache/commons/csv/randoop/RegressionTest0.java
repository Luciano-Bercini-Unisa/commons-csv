package org.apache.commons.csv.randoop;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    public void assertBooleanArrayEquals(boolean[] expectedArray, boolean[] actualArray) {
        if (expectedArray.length != actualArray.length) {
            throw new AssertionError("Array lengths differ: " + expectedArray.length + " != " + actualArray.length);
        }
        for (int i = 0; i < expectedArray.length; i++) {
            if (expectedArray[i] != actualArray[i]) {
                throw new AssertionError("Arrays differ at index " + i + ": " + expectedArray[i] + " != " + actualArray[i]);
            }
        }
    }

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0001");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MYSQL;
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MYSQL + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MYSQL));
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0002");
        org.apache.commons.csv.CSVFormat cSVFormat1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: format");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0003");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.hi!");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0004");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0005");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0006");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser4 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1, (long) (byte) -1, (long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0007");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.INFORMIX_UNLOAD;
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.INFORMIX_UNLOAD + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.INFORMIX_UNLOAD));
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0008");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0009");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.RFC4180;
        java.lang.Class<?> wildcardClass1 = predefined0.getClass();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.RFC4180 + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.RFC4180));
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0010");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.nio.file.Path path1 = null;
        java.nio.charset.Charset charset2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter3 = cSVFormat0.print(path1, charset2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0011");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser5 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat2, (long) (byte) 0, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0012");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        java.nio.file.Path path3 = null;
        java.nio.charset.Charset charset4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat1.print(path3, charset4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0013");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.TDF;
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.TDF + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.TDF));
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0014");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat3);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0015");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0016");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.nio.file.Path path1 = null;
        java.nio.charset.Charset charset2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter3 = cSVFormat0.print(path1, charset2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0017");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getIgnoreHeaderCase();
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str9 = cSVFormat2.format(objArray8);
        java.lang.String str10 = cSVFormat2.getRecordSeparator();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser13 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat2, (long) 1, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str9, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\r\n" + "'", str10, "\r\n");
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0018");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV;
        org.junit.Assert.assertNotNull(cSVFormat0);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0019");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean2 = cSVFormat1.getIgnoreHeaderCase();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser5 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1, 0L, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0020");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('a');
        boolean boolean4 = cSVFormat3.isQuoteCharacterSet();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset1, cSVFormat3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0021");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        java.nio.file.Path path4 = null;
        java.nio.charset.Charset charset5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat0.print(path4, charset5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0022");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.Character char3 = cSVFormat0.getCommentMarker();
        java.nio.file.Path path4 = null;
        java.nio.charset.Charset charset5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat0.print(path4, charset5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNull(char3);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0023");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean2 = cSVFormat1.getSkipHeaderRecord();
        java.lang.String str3 = cSVFormat1.getRecordSeparator();
        java.lang.Character char4 = cSVFormat1.getCommentMarker();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n");
        org.junit.Assert.assertNull(char4);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0024");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean3 = cSVFormat2.getSkipHeaderRecord();
        java.lang.String str4 = cSVFormat2.getRecordSeparator();
        java.lang.Character char5 = cSVFormat2.getCommentMarker();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\n" + "'", str4, "\n");
        org.junit.Assert.assertNull(char5);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0025");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.POSTGRESQL_TEXT;
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.POSTGRESQL_TEXT + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.POSTGRESQL_TEXT));
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0026");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.isCommentMarkerSet();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser6 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat2, 1L, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0027");
        java.io.File file0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.EXCEL;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse(file0, charset1, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0028");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        boolean boolean3 = cSVFormat1.isEscapeCharacterSet();
        boolean boolean4 = cSVFormat1.getIgnoreEmptyLines();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0029");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter3 = cSVFormat2.printer();
        boolean boolean4 = cSVFormat2.getLenientEof();
        java.lang.String str5 = cSVFormat2.getRecordSeparator();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVPrinter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\r\n" + "'", str5, "\r\n");
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0030");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        boolean boolean4 = cSVFormat3.getAutoFlush();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0031");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        org.apache.commons.csv.CSVFormat.Predefined predefined3 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat4 = predefined3.getFormat();
        boolean boolean5 = cSVFormat4.isCommentMarkerSet();
        java.lang.Appendable appendable6 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat1.print((java.lang.Object) boolean5, appendable6, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + predefined3 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined3.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0032");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.Appendable appendable1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        boolean boolean4 = cSVFormat3.getIgnoreHeaderCase();
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str10 = cSVFormat3.format(objArray9);
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat0.printRecord(appendable1, objArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str10, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0033");
        java.io.InputStream inputStream0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter3 = cSVFormat2.printer();
        boolean boolean4 = cSVFormat2.getLenientEof();
        java.lang.String str5 = cSVFormat2.getRecordSeparator();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset1, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVPrinter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\r\n" + "'", str5, "\r\n");
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0034");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.getLenientEof();
        java.lang.String[] strArray2 = cSVFormat0.getHeader();
        java.nio.file.Path path3 = null;
        java.nio.charset.Charset charset4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat0.print(path3, charset4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(strArray2);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0035");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("", cSVFormat3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(cSVParser4);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0036");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean2 = cSVFormat1.getSkipHeaderRecord();
        java.lang.String str3 = cSVFormat1.getRecordSeparator();
        java.lang.String[] strArray4 = cSVFormat1.getHeader();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser7 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1, (long) (short) -1, (long) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n");
        org.junit.Assert.assertNull(strArray4);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0037");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean5 = cSVFormat4.getSkipHeaderRecord();
        java.lang.String str6 = cSVFormat4.getRecordSeparator();
        boolean boolean7 = cSVFormat4.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder8 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat4);
        boolean boolean9 = cSVFormat0.equals((java.lang.Object) cSVFormat4);
        java.lang.Class<?> wildcardClass10 = cSVFormat0.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0038");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setDuplicateHeaderMode(duplicateHeaderMode7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: duplicateHeaderMode");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0039");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.isCommentMarkerSet();
        boolean boolean3 = cSVFormat1.isNullStringSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0040");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        java.lang.Class<?> wildcardClass17 = strArray15.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0041");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setDuplicateHeaderMode(duplicateHeaderMode7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: duplicateHeaderMode");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0042");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getIgnoreHeaderCase();
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str9 = cSVFormat2.format(objArray8);
        boolean boolean10 = cSVFormat2.getTrim();
        boolean boolean11 = cSVFormat2.getTrailingData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str9, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0043");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MYSQL;
        org.junit.Assert.assertNotNull(cSVFormat0);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0044");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote('a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0045");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        java.nio.file.Path path1 = null;
        java.nio.charset.Charset charset2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter3 = cSVFormat0.print(path1, charset2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0046");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MONGODB_TSV;
        java.io.File file1 = null;
        java.nio.charset.Charset charset2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter3 = cSVFormat0.print(file1, charset2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0047");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0048");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        java.lang.Class<?> wildcardClass19 = builder4.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0049");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setLenientEof(false);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setIgnoreHeaderCase(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0050");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean2 = cSVFormat1.getLenientEof();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser5 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1, (long) (short) 0, 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0051");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getIgnoreHeaderCase();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0052");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVPrinter cSVPrinter3 = cSVFormat2.printer();
        boolean boolean4 = cSVFormat2.getTrim();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVPrinter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0053");
        java.nio.file.Path path0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        boolean boolean4 = cSVFormat3.getIgnoreHeaderCase();
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str10 = cSVFormat3.format(objArray9);
        java.lang.String str11 = cSVFormat3.getRecordSeparator();
        boolean boolean12 = cSVFormat3.isQuoteCharacterSet();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse(path0, charset1, cSVFormat3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str10, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\r\n" + "'", str11, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0054");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setTrim(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0055");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.Appendable appendable2 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat0.println(appendable2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0056");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        boolean boolean3 = cSVFormat1.isEscapeCharacterSet();
        boolean boolean4 = cSVFormat1.isQuoteCharacterSet();
        boolean boolean5 = cSVFormat1.getTrailingDelimiter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0057");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.lang.Class<?> wildcardClass4 = builder3.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0058");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.lang.String str6 = cSVParser5.getHeaderComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream7 = cSVParser5.stream();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor8 = cSVParser5.iterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(cSVRecordStream7);
        org.junit.Assert.assertNotNull(cSVRecordItor8);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0059");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.QuoteMode quoteMode2 = cSVFormat1.getQuoteMode();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(quoteMode2);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0060");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder4.setRecordSeparator("hi!");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0061");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.Character char3 = cSVFormat0.getCommentMarker();
        org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean5 = cSVFormat4.getSkipHeaderRecord();
        java.lang.String str6 = cSVFormat4.getRecordSeparator();
        boolean boolean7 = cSVFormat4.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder8 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat4);
        org.apache.commons.csv.QuoteMode quoteMode9 = null;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setQuoteMode(quoteMode9);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder8.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder8.setRecordSeparator("Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        java.lang.Appendable appendable15 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat0.print((java.lang.Object) builder8, appendable15, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0062");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        boolean boolean4 = cSVFormat3.getIgnoreHeaderCase();
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str10 = cSVFormat3.format(objArray9);
        java.lang.String str11 = cSVFormat3.getRecordSeparator();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str10, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\r\n" + "'", str11, "\r\n");
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0063");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream3 = builder2.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0064");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        java.io.RandomAccessFile randomAccessFile3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setRandomAccessFile(randomAccessFile3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0065");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence3 = builder2.getCharSequence();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0066");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.io.IORandomAccessFile iORandomAccessFile3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setRandomAccessFile(iORandomAccessFile3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0067");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.io.OutputStream outputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setOutputStream(outputStream1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0068");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser3 = builder0.getUnchecked();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0069");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        java.io.Reader reader2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setReader(reader2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0070");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        java.lang.String str9 = cSVFormat7.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode10 = cSVFormat7.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder6.setDuplicateHeaderMode(duplicateHeaderMode10);
        java.lang.Class<?> wildcardClass12 = builder11.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode10 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode10.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0071");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.lang.String str6 = cSVParser5.getHeaderComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream7 = cSVParser5.stream();
        boolean boolean8 = cSVParser5.hasHeaderComment();
        java.lang.String str9 = cSVParser5.getTrailerComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream10 = cSVParser5.stream();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(cSVRecordStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(cSVRecordStream10);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0072");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser2 = builder0.get();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0073");
        java.nio.file.Path path0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset2 = builder1.getCharsetDefault();
        org.apache.commons.csv.CSVFormat.Predefined predefined3 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat4 = predefined3.getFormat();
        java.lang.String str5 = cSVFormat4.toString();
        boolean boolean6 = cSVFormat4.isEscapeCharacterSet();
        boolean boolean7 = cSVFormat4.isQuoteCharacterSet();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse(path0, charset2, cSVFormat4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + predefined3 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined3.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str5, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0074");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file1 = builder0.getFile();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0075");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path5 = builder4.getPath();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CharSequenceOrigin#getPath() for String origin \"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\"");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0076");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        java.io.RandomAccessFile randomAccessFile2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setRandomAccessFile(randomAccessFile2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0077");
        java.net.URL uRL0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset2 = builder1.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean4 = cSVFormat3.getLenientEof();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse(uRL0, charset2, cSVFormat3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0078");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('#');
        boolean boolean2 = cSVFormat1.isEscapeCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0079");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean3 = cSVFormat2.getSkipHeaderRecord();
        java.lang.String str4 = cSVFormat2.getRecordSeparator();
        boolean boolean5 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder6 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat2);
        org.apache.commons.csv.QuoteMode quoteMode7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setQuoteMode(quoteMode7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray17 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder6.setHeaderComments(strArray17);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder6.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setRecordSeparator("");
        java.lang.Appendable appendable23 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat0.print((java.lang.Object) "", appendable23, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\n" + "'", str4, "\n");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertArrayEquals(strArray17, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0080");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream1 = builder0.getInputStream();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0081");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setIgnoreEmptyLines(true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder20 = builder16.setDelimiter("\n");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be a line break");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0082");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        java.io.Writer writer6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setWriter(writer6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0083");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.isNullStringSet();
        java.io.Reader reader4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser5 = cSVFormat0.parse(reader4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0084");
        java.nio.file.Path path0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder1.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset5 = builder4.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder1.setCharset(charset5);
        java.nio.charset.Charset charset7 = builder1.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean9 = cSVFormat8.getSkipHeaderRecord();
        java.lang.String str10 = cSVFormat8.getRecordSeparator();
        boolean boolean11 = cSVFormat8.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder12 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat8);
        boolean boolean13 = cSVFormat8.isCommentMarkerSet();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse(path0, charset7, cSVFormat8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\n" + "'", str10, "\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0085");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.io.IORandomAccessFile iORandomAccessFile4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setRandomAccessFile(iORandomAccessFile4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0086");
        java.net.URL uRL0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder1.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset5 = builder4.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder1.setCharset(charset5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter8 = cSVFormat7.printer();
        boolean boolean9 = cSVFormat7.getLenientEof();
        java.lang.String str10 = cSVFormat7.getRecordSeparator();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(uRL0, charset5, cSVFormat7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVPrinter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\r\n" + "'", str10, "\r\n");
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0087");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharset("\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0088");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0089");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder4.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat21 = builder4.get();
        java.lang.Appendable appendable22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter23 = cSVFormat21.print(appendable22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(cSVFormat21);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0090");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setCharset("Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0091");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.nio.charset.Charset charset4 = builder0.getCharset();
        java.io.Writer writer5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setWriter(writer5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0092");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.io.InputStream inputStream4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder5 = builder3.setInputStream(inputStream4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0093");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        java.io.InputStream inputStream3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setInputStream(inputStream3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0094");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setCharset("Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<?> SkipHeaderRecord:false");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0095");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser4 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1, (long) (-1), (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0096");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        boolean boolean2 = cSVFormat0.getLenientEof();
        boolean boolean3 = cSVFormat0.isCommentMarkerSet();
        java.lang.Character char4 = cSVFormat0.getEscapeCharacter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(char4);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0097");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Reader reader2 = builder0.getReader();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0098");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        java.io.InputStream inputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setInputStream(inputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0099");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setOutputStream(outputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0100");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        java.nio.charset.Charset charset6 = builder0.getCharset();
        java.lang.Class<?> wildcardClass7 = builder0.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0101");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0102");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setLenientEof(true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder20 = builder16.setDelimiter("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0103");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        org.apache.commons.io.IORandomAccessFile iORandomAccessFile6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setRandomAccessFile(iORandomAccessFile6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0104");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        boolean boolean4 = cSVFormat0.isNullStringSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        boolean boolean8 = cSVFormat7.getAutoFlush();
        boolean boolean9 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat7);
        java.lang.String str11 = cSVParser10.getHeaderComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream12 = cSVParser10.stream();
        boolean boolean13 = cSVFormat0.equals((java.lang.Object) cSVParser10);
        java.lang.String str14 = cSVParser10.getFirstEndOfLine();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVRecordStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0105");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        java.lang.String str3 = cSVParser2.getFirstEndOfLine();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser2.spliterator();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor5 = cSVParser2.iterator();
        boolean boolean6 = cSVParser2.hasTrailerComment();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVParser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator4);
        org.junit.Assert.assertNotNull(cSVRecordItor5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0106");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        org.apache.commons.io.IORandomAccessFile iORandomAccessFile2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setRandomAccessFile(iORandomAccessFile2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0107");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser5.iterator();
        boolean boolean7 = cSVParser5.isClosed();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser5.getRecords();
        java.util.List<java.lang.String> strList9 = cSVParser5.getHeaderNames();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVRecordList8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(cSVRecordList10);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0108");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Character char2 = cSVFormat1.getQuoteCharacter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.POSTGRESQL_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.POSTGRESQL_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + char2 + "' != '" + '\"' + "'", char2 == '\"');
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0109");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean4 = cSVFormat0.equals((java.lang.Object) (-1L));
        java.lang.Appendable appendable5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat0.print(appendable5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0110");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Appendable appendable2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter3 = cSVFormat1.print(appendable2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0111");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser2 = builder0.getUnchecked();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0112");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder22.setCommentMarker('\"');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0113");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        java.io.Reader reader3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setReader(reader3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0114");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        java.io.OutputStream outputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setOutputStream(outputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0115");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset2 = builder1.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.ORACLE;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset2, cSVFormat3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(cSVFormat3);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0116");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        boolean boolean3 = cSVFormat1.getLenientEof();
        boolean boolean4 = cSVFormat1.isCommentMarkerSet();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0117");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.net.URI uRI4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setURI(uRI4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0118");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF;
        boolean boolean1 = cSVFormat0.getLenientEof();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0119");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.lang.String str6 = cSVParser5.getHeaderComment();
        java.lang.String str7 = cSVParser5.getTrailerComment();
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = cSVParser5.getHeaderMap();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser5.getRecords();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(cSVRecordList9);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0120");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser5.iterator();
        long long7 = cSVParser5.getRecordNumber();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser5.spliterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator8);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0121");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean5 = cSVFormat4.getSkipHeaderRecord();
        java.lang.String str6 = cSVFormat4.getRecordSeparator();
        boolean boolean7 = cSVFormat4.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder8 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat4);
        boolean boolean9 = cSVFormat0.equals((java.lang.Object) cSVFormat4);
        java.lang.Appendable appendable10 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat4.println(appendable10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0122");
        java.net.URL uRL0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset2 = builder1.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.MONGODB_CSV;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse(uRL0, charset2, cSVFormat3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(cSVFormat3);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0123");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean2 = cSVFormat1.isNullStringSet();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVParser3);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0124");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder0.getBufferSizeDefault();
        java.io.RandomAccessFile randomAccessFile4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setRandomAccessFile(randomAccessFile4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8192 + "'", int3 == 8192);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0125");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setBufferSize((java.lang.Integer) 100);
        java.io.Reader reader8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setReader(reader8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0126");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path6 = builder0.getPath();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getPath() for byte[] origin [B@3c48904d");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0127");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean3 = cSVFormat2.getSkipHeaderRecord();
        java.lang.String str4 = cSVFormat2.getRecordSeparator();
        boolean boolean5 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder6 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat2);
        org.apache.commons.csv.QuoteMode quoteMode7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setQuoteMode(quoteMode7);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean10 = cSVFormat9.getSkipHeaderRecord();
        java.lang.String str11 = cSVFormat9.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode12 = cSVFormat9.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder8.setDuplicateHeaderMode(duplicateHeaderMode12);
        boolean boolean14 = cSVFormat0.equals((java.lang.Object) builder8);
        boolean boolean15 = cSVFormat0.getSkipHeaderRecord();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\n" + "'", str4, "\n");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\n" + "'", str11, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode12 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode12.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0128");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder1.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset5 = builder4.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder1.setCharset(charset5);
        java.nio.charset.Charset charset7 = builder1.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset7, cSVFormat8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0129");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        // The following exception was thrown during execution in test generation
        try {
            java.io.Writer writer5 = builder0.getWriter();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CharSequenceOrigin#getPath() for String origin \"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\"");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0130");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.nio.charset.Charset charset4 = builder0.getCharset();
        java.io.InputStream inputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setInputStream(inputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0131");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setBufferSize((java.lang.Integer) 100);
        java.io.RandomAccessFile randomAccessFile8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder9 = builder0.setRandomAccessFile(randomAccessFile8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0132");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.String[] strArray3 = cSVFormat0.getHeaderComments();
        java.lang.Object obj4 = null;
        java.lang.Appendable appendable5 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat0.print(obj4, appendable5, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\r\n" + "'", str2, "\r\n");
        org.junit.Assert.assertNull(strArray3);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0133");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setTrailingDelimiter(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0134");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setBufferSize((int) 'a');
        java.io.File file8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setFile(file8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0135");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser5.iterator();
        java.lang.String str7 = cSVParser5.getFirstEndOfLine();
        java.lang.String str8 = cSVParser5.getFirstEndOfLine();
        long long9 = cSVParser5.getRecordNumber();
        java.util.List<java.lang.String> strList10 = cSVParser5.getHeaderNames();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0136");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        boolean boolean5 = cSVFormat0.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat.Builder builder6 = cSVFormat0.builder();
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        int int9 = builder7.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder7.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder7.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder19 = builder7.setBufferSize((int) (byte) 0);
        java.nio.file.Path path20 = builder7.getPath();
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset22 = builder21.getCharsetDefault();
        byte[] byteArray23 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder24 = builder21.setByteArray(byteArray23);
        java.nio.charset.Charset charset25 = builder21.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter26 = cSVFormat0.print(path20, charset25);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(path20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertArrayEquals(byteArray23, new byte[] {});
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(charset25);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0137");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.nio.charset.Charset charset4 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setCharacterOffset((long) (short) 1);
        java.io.InputStream inputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setInputStream(inputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0138");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser5.iterator();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser5.getHeaderMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = cSVParser5.getHeaderMap();
        boolean boolean9 = cSVParser5.hasTrailerComment();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator10 = cSVParser5.spliterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator10);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0139");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setNullString("");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0140");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getAutoFlush();
        boolean boolean3 = cSVFormat1.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter4 = cSVFormat1.printer();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        org.apache.commons.csv.CSVFormat.Predefined predefined7 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat8 = predefined7.getFormat();
        java.lang.String str9 = cSVFormat8.toString();
        boolean boolean10 = cSVFormat8.isEscapeCharacterSet();
        boolean boolean11 = cSVFormat6.equals((java.lang.Object) cSVFormat8);
        java.lang.Appendable appendable12 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat1.print((java.lang.Object) boolean11, appendable12, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(cSVPrinter4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + predefined7 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined7.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str9, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0141");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setBufferSize((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder9 = builder0.setCharset("");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0142");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        java.nio.charset.Charset charset6 = builder0.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream7 = builder0.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0143");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        java.io.Reader reader2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser3 = cSVFormat1.parse(reader2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0144");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getAutoFlush();
        org.apache.commons.csv.QuoteMode quoteMode3 = cSVFormat1.getQuoteMode();
        boolean boolean4 = cSVFormat1.getAutoFlush();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + quoteMode3 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode3.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0145");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Writer writer3 = builder0.getWriter();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0146");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setCharacterOffset((long) (byte) 1);
        java.net.URI uRI15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder16 = builder0.setURI(uRI15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0147");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        boolean boolean2 = cSVFormat0.isCommentMarkerSet();
        java.io.File file3 = null;
        java.nio.charset.Charset charset4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat0.print(file3, charset4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0148");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        boolean boolean4 = cSVFormat0.isNullStringSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        boolean boolean8 = cSVFormat7.getAutoFlush();
        boolean boolean9 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat7);
        java.lang.String str11 = cSVParser10.getHeaderComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream12 = cSVParser10.stream();
        boolean boolean13 = cSVFormat0.equals((java.lang.Object) cSVParser10);
        boolean boolean14 = cSVFormat0.getLenientEof();
        java.lang.Appendable appendable15 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat0.println(appendable15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVRecordStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0149");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        java.lang.String str3 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset5 = builder4.getCharsetDefault();
        int int6 = builder4.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder4.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray11 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder12 = builder4.setByteArray(byteArray11);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder4.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder16 = builder4.setBufferSize((int) (byte) 0);
        java.nio.file.Path path17 = builder4.getPath();
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset19 = builder18.getCharsetDefault();
        int int20 = builder18.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder18.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder26 = builder18.setByteArray(byteArray25);
        java.nio.charset.Charset charset27 = builder18.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter28 = cSVFormat1.print(path17, charset27);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVParser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8192 + "'", int6 == 8192);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertArrayEquals(byteArray11, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(path17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8192 + "'", int20 == 8192);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertArrayEquals(byteArray25, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(charset27);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0150");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.isNullStringSet();
        java.lang.String str4 = cSVFormat0.getNullString();
        java.io.File file5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter8 = cSVFormat0.print(file5, charset7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0151");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.lang.String str6 = cSVParser5.getHeaderComment();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor7 = cSVParser5.iterator();
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = cSVParser5.getHeaderMap();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(cSVRecordItor7);
        org.junit.Assert.assertNotNull(strMap8);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0152");
        java.io.File file0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder1.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset5 = builder4.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder1.setCharset(charset5);
        java.nio.charset.Charset charset7 = builder1.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean9 = cSVFormat8.getSkipHeaderRecord();
        java.lang.String str10 = cSVFormat8.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat8);
        org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean13 = cSVFormat12.getSkipHeaderRecord();
        java.lang.String str14 = cSVFormat12.getRecordSeparator();
        boolean boolean15 = cSVFormat12.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder16 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat12);
        boolean boolean17 = cSVFormat8.equals((java.lang.Object) cSVFormat12);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse(file0, charset7, cSVFormat8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\n" + "'", str10, "\n");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\n" + "'", str14, "\n");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0153");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        java.lang.String[] strArray11 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" };
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder4.setHeader(strArray11);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder4.setNullString("");
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean16 = cSVFormat15.getSkipHeaderRecord();
        java.lang.String str17 = cSVFormat15.getRecordSeparator();
        boolean boolean18 = cSVFormat15.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder19 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat15);
        org.apache.commons.csv.QuoteMode quoteMode20 = null;
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setQuoteMode(quoteMode20);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray30 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder19.setHeaderComments(strArray30);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder14.setHeader(strArray30);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder32.setEscape('a');
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setQuote('#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertArrayEquals(strArray11, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" });
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\n" + "'", str17, "\n");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertArrayEquals(strArray30, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0154");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getAutoFlush();
        java.io.File file3 = null;
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset5 = builder4.getCharsetDefault();
        byte[] byteArray6 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder7 = builder4.setByteArray(byteArray6);
        java.nio.charset.Charset charset8 = builder4.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter9 = cSVFormat1.print(file3, charset8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] {});
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0155");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setDelimiter('\"');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setDelimiter("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be empty");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0156");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVFormat2.getTrailingData();
        java.lang.String str7 = cSVFormat2.getRecordSeparator();
        java.nio.file.Path path8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset10 = builder9.getCharsetDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat2.print(path8, charset10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\r\n" + "'", str7, "\r\n");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0157");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setCharacterOffset((long) (byte) 100);
        java.io.File file15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder16 = builder0.setFile(file15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0158");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        java.io.RandomAccessFile randomAccessFile6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setRandomAccessFile(randomAccessFile6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0159");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat cSVFormat19 = builder16.get();
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder16.setQuote((java.lang.Character) 'a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0160");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean5 = cSVFormat4.getSkipHeaderRecord();
        java.lang.String str6 = cSVFormat4.getRecordSeparator();
        boolean boolean7 = cSVFormat4.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder8 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat4);
        boolean boolean9 = cSVFormat0.equals((java.lang.Object) cSVFormat4);
        org.apache.commons.csv.CSVFormat.Builder builder10 = cSVFormat4.builder();
        boolean boolean11 = cSVFormat4.getAllowMissingColumnNames();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0161");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setQuoteMode(quoteMode7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setRecordSeparator("\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0162");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
        boolean boolean2 = cSVFormat1.getTrim();
        boolean boolean3 = cSVFormat1.getIgnoreEmptyLines();
        java.io.Reader reader4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser5 = cSVFormat1.parse(reader4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0163");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        java.lang.String str3 = cSVParser2.getFirstEndOfLine();
        long long4 = cSVParser2.getCurrentLineNumber();
        long long5 = cSVParser2.getCurrentLineNumber();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVParser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0164");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        java.sql.ResultSet resultSet21 = null;
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setHeader(resultSet21);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder18.setTrailingData(false);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder18.setAutoFlush(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0165");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode3 = cSVFormat0.getDuplicateHeaderMode();
        java.lang.String str4 = cSVFormat0.getNullString();
        boolean boolean5 = cSVFormat0.getAllowMissingColumnNames();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode3 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode3.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0166");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean2 = cSVFormat1.isNullStringSet();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser5 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1, (long) 8192, (long) '\"');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0167");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        java.nio.file.Path path13 = builder0.getPath();
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset15 = builder14.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse(path13, charset15, cSVFormat16);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(cSVFormat16);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0168");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser5.iterator();
        boolean boolean7 = cSVParser5.isClosed();
        long long8 = cSVParser5.getCurrentLineNumber();
        long long9 = cSVParser5.getCurrentLineNumber();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0169");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setAutoFlush(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0170");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        int int8 = builder6.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder14 = builder6.setByteArray(byteArray13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder6.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder18 = builder6.setBufferSize((int) (byte) 0);
        java.nio.file.Path path19 = builder6.getPath();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder0.setPath(path19);
        java.io.OutputStream outputStream21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder22 = builder0.setOutputStream(outputStream21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertArrayEquals(byteArray13, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(path19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0171");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setBufferSize((java.lang.Integer) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser8 = builder7.get();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0172");
        java.io.File file0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder1.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset5 = builder4.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder1.setCharset(charset5);
        java.nio.charset.Charset charset7 = builder1.getCharset();
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        boolean boolean10 = cSVFormat9.isCommentMarkerSet();
        java.lang.String str11 = cSVFormat9.getNullString();
        boolean boolean12 = cSVFormat9.getTrailingData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse(file0, charset7, cSVFormat9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0173");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Reader reader3 = builder2.getReader();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0174");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.lang.String str6 = cSVParser5.getHeaderComment();
        long long7 = cSVParser5.getCurrentLineNumber();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0175");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier13 = builder0.asSupplier();
        java.io.Writer writer14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder15 = builder0.setWriter(writer14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVParserSupplier13);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0176");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean2 = cSVFormat1.getSkipHeaderRecord();
        java.lang.String str3 = cSVFormat1.getRecordSeparator();
        java.lang.String[] strArray4 = cSVFormat1.getHeader();
        java.lang.String str5 = cSVFormat1.getNullString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser8 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1, (long) 1, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n");
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0177");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream6 = builder0.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8192 + "'", int3 == 8192);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0178");
        java.io.File file0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder1.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset5 = builder4.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder1.setCharset(charset5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        java.lang.String str9 = cSVFormat7.getRecordSeparator();
        boolean boolean10 = cSVFormat7.getTrim();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(file0, charset5, cSVFormat7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0179");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setBufferSize((java.lang.Integer) 100);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier8 = builder7.asSupplier();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(cSVParserSupplier8);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0180");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isNullStringSet();
        boolean boolean2 = cSVFormat0.getAllowMissingColumnNames();
        java.lang.String str3 = cSVFormat0.getDelimiterString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "," + "'", str3, ",");
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0181");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVParser5.hasTrailerComment();
        cSVParser5.close();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser5.getRecords();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser5.getRecords();
        boolean boolean10 = cSVParser5.isClosed();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVRecordList8);
        org.junit.Assert.assertNotNull(cSVRecordList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0182");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser5 = builder0.getUnchecked();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setCharset("\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVParser5);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0183");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        boolean boolean3 = cSVFormat1.isEscapeCharacterSet();
        boolean boolean4 = cSVFormat1.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Builder builder5 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean7 = cSVFormat6.getSkipHeaderRecord();
        java.lang.String str8 = cSVFormat6.getRecordSeparator();
        boolean boolean9 = cSVFormat6.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter10 = cSVFormat6.printer();
        boolean boolean11 = cSVFormat1.equals((java.lang.Object) cSVPrinter10);
        java.lang.Appendable appendable12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat1.print(appendable12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\n" + "'", str8, "\n");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVPrinter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0184");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setTrailingData(true);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setCommentMarker('a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0185");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
        boolean boolean3 = cSVFormat2.getTrim();
        boolean boolean4 = cSVFormat2.getIgnoreEmptyLines();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse(",", cSVFormat2);
        long long6 = cSVParser5.getRecordNumber();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0186");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        java.nio.file.Path path13 = builder0.getPath();
        java.nio.charset.Charset charset14 = null;
        org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.newFormat(' ');
        boolean boolean17 = cSVFormat16.getTrim();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse(path13, charset14, cSVFormat16);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0187");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        java.lang.Character char3 = cSVFormat1.getCommentMarker();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNull(char3);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0188");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        org.apache.commons.csv.CSVFormat.Builder builder1 = cSVFormat0.builder();
        java.lang.Appendable appendable3 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat0.print((java.lang.Object) 0.0f, appendable3, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0189");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setIgnoreHeaderCase(true);
        java.sql.ResultSetMetaData resultSetMetaData6 = null;
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setHeader(resultSetMetaData6);
        java.sql.ResultSet resultSet8 = null;
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setHeader(resultSet8);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0190");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.String[] strArray3 = cSVFormat0.getHeader();
        java.lang.String str4 = cSVFormat0.getNullString();
        java.lang.Appendable appendable5 = null;
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean7 = cSVFormat6.getSkipHeaderRecord();
        java.lang.String str8 = cSVFormat6.getRecordSeparator();
        boolean boolean9 = cSVFormat6.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder10 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat6);
        org.apache.commons.csv.QuoteMode quoteMode11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setQuoteMode(quoteMode11);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean16 = cSVFormat15.getSkipHeaderRecord();
        java.lang.String str17 = cSVFormat15.getRecordSeparator();
        boolean boolean18 = cSVFormat15.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder19 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat15);
        org.apache.commons.csv.QuoteMode quoteMode20 = null;
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setQuoteMode(quoteMode20);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray30 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder19.setHeaderComments(strArray30);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder10.setHeaderComments(strArray30);
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat0.printRecord(appendable5, (java.lang.Object[]) strArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\n" + "'", str8, "\n");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\n" + "'", str17, "\n");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertArrayEquals(strArray30, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0191");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSizeMax(8192);
        java.io.OutputStream outputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setOutputStream(outputStream6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0192");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream1 = builder0.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0193");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setQuoteMode(quoteMode7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean12 = cSVFormat11.getSkipHeaderRecord();
        java.lang.String str13 = cSVFormat11.getRecordSeparator();
        boolean boolean14 = cSVFormat11.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat11);
        org.apache.commons.csv.QuoteMode quoteMode16 = null;
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setQuoteMode(quoteMode16);
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder15.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean21 = cSVFormat20.getSkipHeaderRecord();
        java.lang.String str22 = cSVFormat20.getRecordSeparator();
        boolean boolean23 = cSVFormat20.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder24 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat20);
        org.apache.commons.csv.QuoteMode quoteMode25 = null;
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setQuoteMode(quoteMode25);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder24.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray35 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder24.setHeaderComments(strArray35);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder15.setHeaderComments(strArray35);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder6.setHeaderComments((java.lang.Object[]) strArray35);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\n" + "'", str22, "\n");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertArrayEquals(strArray35, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0194");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a');
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        boolean boolean3 = cSVFormat1.getLenientEof();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0195");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setTrim(false);
        java.lang.Class<?> wildcardClass9 = builder4.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0196");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<?> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, ??, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\"]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0197");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser5.iterator();
        boolean boolean7 = cSVParser5.isClosed();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser5.getRecords();
        java.lang.String str9 = cSVParser5.getHeaderComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVRecordList8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0198");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        boolean boolean4 = cSVFormat3.getIgnoreHeaderCase();
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str10 = cSVFormat3.format(objArray9);
        java.lang.String str11 = cSVFormat0.format(objArray9);
        boolean boolean12 = cSVFormat0.isEscapeCharacterSet();
        java.lang.Appendable appendable13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter14 = cSVFormat0.print(appendable13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str10, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str11, "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0199");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser5.iterator();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser5.getHeaderMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = cSVParser5.getHeaderMap();
        java.lang.String str9 = cSVParser5.getTrailerComment();
        java.lang.String str10 = cSVParser5.getFirstEndOfLine();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0200");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode3 = cSVFormat0.getDuplicateHeaderMode();
        boolean boolean4 = cSVFormat0.isEscapeCharacterSet();
        boolean boolean5 = cSVFormat0.getAllowMissingColumnNames();
        java.io.Reader reader6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser7 = cSVFormat0.parse(reader6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode3 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode3.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0201");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setDelimiter('a');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setDelimiter(' ');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0202");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setCharacterOffset((long) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream15 = builder0.getInputStream();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0203");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVParser5.hasTrailerComment();
        java.lang.String str7 = cSVParser5.getHeaderComment();
        long long8 = cSVParser5.getCurrentLineNumber();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVParser5.spliterator();
        boolean boolean10 = cSVParser5.isClosed();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0204");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter4 = cSVFormat0.printer();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("", cSVFormat6);
        boolean boolean8 = cSVFormat0.equals((java.lang.Object) cSVFormat6);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode9 = cSVFormat0.getDuplicateHeaderMode();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(cSVPrinter4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode9 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode9.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0205");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.ORACLE;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset2 = builder1.getCharsetDefault();
        int int3 = builder1.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder1.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder9 = builder1.setByteArray(byteArray8);
        org.apache.commons.csv.CSVParser.Builder builder11 = builder1.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder13 = builder1.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder15 = builder1.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setCharacterOffset((long) '#');
        java.io.File file18 = builder17.getFile();
        org.apache.commons.csv.CSVParser.Builder builder19 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset20 = builder19.getCharsetDefault();
        int int21 = builder19.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder19.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder27 = builder19.setByteArray(byteArray26);
        org.apache.commons.csv.CSVParser.Builder builder29 = builder19.setPath("");
        java.nio.charset.Charset charset30 = builder19.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter31 = cSVFormat0.print(file18, charset30);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8192 + "'", int3 == 8192);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertArrayEquals(byteArray8, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertNull("file18.getParent() == null", file18.getParent());
        org.junit.Assert.assertEquals(file18.toString(), "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8192 + "'", int21 == 8192);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertArrayEquals(byteArray26, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(charset30);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0206");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        java.io.InputStream inputStream7 = builder6.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        byte[] byteArray10 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder11 = builder8.setByteArray(byteArray10);
        java.nio.charset.Charset charset12 = builder8.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat14.builder();
        java.lang.String str16 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse(inputStream7, charset12, cSVFormat14);
        java.lang.String str18 = cSVParser17.getFirstEndOfLine();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertArrayEquals(byteArray10, new byte[] {});
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVParser17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0207");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser5 = builder0.getUnchecked();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setPath(",");
        java.io.Reader reader8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setReader(reader8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0208");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setQuoteMode(quoteMode7);
        java.lang.String[] strArray12 = new java.lang.String[] { "\r\n", "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]", "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder8.setHeader(strArray12);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setDelimiter("Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be a line break");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertArrayEquals(strArray12, new java.lang.String[] { "\r\n", "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]", "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" });
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0209");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        boolean boolean12 = cSVFormat11.getAutoFlush();
        boolean boolean13 = cSVFormat11.getTrim();
        org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat11);
        boolean boolean15 = cSVFormat11.getSkipHeaderRecord();
        boolean boolean17 = cSVFormat11.equals((java.lang.Object) '4');
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        boolean boolean22 = cSVFormat21.getAutoFlush();
        boolean boolean23 = cSVFormat21.getTrim();
        org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat21);
        boolean boolean25 = cSVParser24.hasTrailerComment();
        boolean boolean26 = cSVParser24.isClosed();
        org.apache.commons.csv.CSVParser.Builder builder27 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder27.setBufferSize((java.lang.Integer) 100);
        java.lang.Object[] objArray31 = new java.lang.Object[] { boolean17, predefined18, cSVParser24, builder29, 100L };
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder8.setHeaderComments(objArray31);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder32.setIgnoreEmptyLines(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVParser14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(cSVParser24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0210");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        // The following exception was thrown during execution in test generation
        try {
            java.io.RandomAccessFile randomAccessFile3 = builder0.getRandomAccessFile();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0211");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser7 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat2, 0L, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0212");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file7 = builder0.getFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getFile() for byte[] origin [B@41db0069");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0213");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        java.io.Writer writer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setWriter(writer9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0214");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVParser5.hasTrailerComment();
        boolean boolean7 = cSVParser5.isClosed();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream8 = cSVParser5.stream();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVParser5.spliterator();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream8);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator9);
        org.junit.Assert.assertNotNull(cSVRecordList10);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0215");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.io.RandomAccessFile randomAccessFile9 = builder8.getRandomAccessFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getFile() for byte[] origin [B@7d1e4e09");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0216");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence2 = builder0.getCharSequence();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0217");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.lang.String str6 = cSVParser5.getHeaderComment();
        long long7 = cSVParser5.getRecordNumber();
        boolean boolean8 = cSVParser5.hasTrailerComment();
        boolean boolean9 = cSVParser5.hasHeaderComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0218");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        java.io.InputStream inputStream7 = builder6.getInputStream();
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream8 = builder6.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getPath() for byte[] origin [B@59907d7c");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(inputStream7);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0219");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean2 = cSVFormat1.isNullStringSet();
        boolean boolean3 = cSVFormat1.getAllowMissingColumnNames();
        boolean boolean4 = cSVFormat1.getTrim();
        boolean boolean5 = cSVFormat1.getLenientEof();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0220");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        boolean boolean3 = cSVFormat1.isEscapeCharacterSet();
        boolean boolean4 = cSVFormat1.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Builder builder5 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean7 = cSVFormat6.getSkipHeaderRecord();
        java.lang.String str8 = cSVFormat6.getRecordSeparator();
        boolean boolean9 = cSVFormat6.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter10 = cSVFormat6.printer();
        boolean boolean11 = cSVFormat1.equals((java.lang.Object) cSVPrinter10);
        java.lang.Appendable appendable13 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat1.print((java.lang.Object) (-1), appendable13, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\n" + "'", str8, "\n");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVPrinter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0221");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean2 = cSVFormat1.getSkipHeaderRecord();
        java.lang.String str3 = cSVFormat1.getRecordSeparator();
        boolean boolean4 = cSVFormat1.getTrim();
        boolean boolean5 = cSVFormat1.isNullStringSet();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0222");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser5.iterator();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser5.getHeaderMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = cSVParser5.getHeaderMap();
        java.lang.String str9 = cSVParser5.getTrailerComment();
        boolean boolean10 = cSVParser5.hasHeaderComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0223");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharacterOffset((long) '#');
        java.io.File file17 = builder16.getFile();
        // The following exception was thrown during execution in test generation
        try {
            java.io.RandomAccessFile randomAccessFile18 = builder16.getRandomAccessFile();
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "");
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0224");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Writer writer2 = builder0.getWriter();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0225");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("\r\n\"Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]\"Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.??\"Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<?> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, ??, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\"]\"Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<?> SkipHeaderRecord:false");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0226");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setBufferSize((java.lang.Integer) 100);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setOutputStream(outputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0227");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getAutoFlush();
        org.apache.commons.csv.QuoteMode quoteMode3 = cSVFormat1.getQuoteMode();
        boolean boolean4 = cSVFormat1.isQuoteCharacterSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + quoteMode3 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode3.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0228");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter4 = cSVFormat0.printer();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("", cSVFormat6);
        boolean boolean8 = cSVFormat0.equals((java.lang.Object) cSVFormat6);
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset10 = builder9.getCharsetDefault();
        int int11 = builder9.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder9.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder17 = builder9.setByteArray(byteArray16);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder9.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder21 = builder9.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder9.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setCharacterOffset((long) '#');
        java.io.File file26 = builder25.getFile();
        org.apache.commons.csv.CSVParser.Builder builder27 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset28 = builder27.getCharsetDefault();
        byte[] byteArray29 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder30 = builder27.setByteArray(byteArray29);
        java.nio.charset.Charset charset31 = builder27.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat6.print(file26, charset31);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(cSVPrinter4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8192 + "'", int11 == 8192);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertArrayEquals(byteArray16, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(file26);
        org.junit.Assert.assertNull("file26.getParent() == null", file26.getParent());
        org.junit.Assert.assertEquals(file26.toString(), "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertArrayEquals(byteArray29, new byte[] {});
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(charset31);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0229");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder2.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setBufferSizeMax(100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser6 = builder2.get();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8192 + "'", int3 == 8192);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0230");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setRecordNumber((long) (byte) -1);
        java.net.URI uRI15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder16 = builder12.setURI(uRI15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0231");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
        boolean boolean3 = cSVFormat2.getTrim();
        boolean boolean4 = cSVFormat2.getIgnoreEmptyLines();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse(",", cSVFormat2);
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset10 = builder9.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder6.setCharset(charset10);
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset13 = builder12.getCharsetDefault();
        int int14 = builder12.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder12.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder20 = builder12.setByteArray(byteArray19);
        org.apache.commons.csv.CSVParser.Builder builder22 = builder12.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder24 = builder12.setBufferSize((int) (byte) 0);
        java.nio.file.Path path25 = builder12.getPath();
        org.apache.commons.csv.CSVParser.Builder builder26 = builder6.setPath(path25);
        org.apache.commons.csv.CSVParser.Builder builder27 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset28 = builder27.getCharsetDefault();
        byte[] byteArray29 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder30 = builder27.setByteArray(byteArray29);
        java.nio.charset.Charset charset31 = builder27.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter32 = cSVFormat2.print(path25, charset31);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8192 + "'", int14 == 8192);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertArrayEquals(byteArray19, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(path25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertArrayEquals(byteArray29, new byte[] {});
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(charset31);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0232");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a');
        java.lang.Character char2 = cSVFormat1.getCommentMarker();
        java.lang.Appendable appendable3 = null;
        cSVFormat1.println(appendable3);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(char2);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0233");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getIgnoreHeaderCase();
        java.lang.String str4 = cSVFormat2.getDelimiterString();
        boolean boolean5 = cSVFormat2.isQuoteCharacterSet();
        org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse(",", cSVFormat2);
        java.lang.String str7 = cSVParser6.getTrailerComment();
        cSVParser6.close();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "," + "'", str4, ",");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVParser6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0234");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset15 = builder14.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder11.setCharset(charset15);
        java.nio.charset.Charset charset17 = builder11.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder0.setCharset(charset17);
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream19 = builder18.getInputStream();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0235");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a');
        boolean boolean2 = cSVFormat1.getTrailingDelimiter();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode3 = cSVFormat1.getDuplicateHeaderMode();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode3 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode3.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0236");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        java.lang.String str9 = cSVFormat7.getRecordSeparator();
        boolean boolean10 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat7);
        org.apache.commons.csv.QuoteMode quoteMode12 = null;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuoteMode(quoteMode12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray22 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder11.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder6.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean26 = cSVFormat25.getSkipHeaderRecord();
        java.lang.String str27 = cSVFormat25.getRecordSeparator();
        boolean boolean28 = cSVFormat25.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder29 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat25);
        org.apache.commons.csv.QuoteMode quoteMode30 = null;
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setQuoteMode(quoteMode30);
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean33 = cSVFormat32.getSkipHeaderRecord();
        java.lang.String str34 = cSVFormat32.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode35 = cSVFormat32.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder31.setDuplicateHeaderMode(duplicateHeaderMode35);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder24.setDuplicateHeaderMode(duplicateHeaderMode35);
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder37.setLenientEof(true);
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder39.setIgnoreHeaderCase(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertArrayEquals(strArray22, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\n" + "'", str27, "\n");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\n" + "'", str34, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode35 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode35.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0237");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharacterOffset((long) '#');
        java.io.File file17 = builder16.getFile();
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream18 = builder16.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "");
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0238");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setCharacterOffset((long) (byte) 1);
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 100, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder19 = builder14.setByteArray(byteArray18);
        org.apache.commons.csv.CSVParser cSVParser20 = builder19.get();
        java.io.Reader reader21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder22 = builder19.setReader(reader21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] { (byte) -1, (byte) 100, (byte) 1 });
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(cSVParser20);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0239");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        org.apache.commons.csv.CSVFormat.Predefined predefined4 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat5 = predefined4.getFormat();
        java.lang.String str6 = cSVFormat5.toString();
        boolean boolean7 = cSVFormat5.isEscapeCharacterSet();
        boolean boolean8 = cSVFormat3.equals((java.lang.Object) cSVFormat5);
        java.lang.String str9 = cSVFormat3.getDelimiterString();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("\r\n\"Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]\"Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser11 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + predefined4 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined4.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str6, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\"" + "'", str9, "\"");
        org.junit.Assert.assertNotNull(cSVParser10);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0240");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean10 = cSVFormat9.getSkipHeaderRecord();
        java.lang.String str11 = cSVFormat9.getRecordSeparator();
        boolean boolean12 = cSVFormat9.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder13 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat9);
        org.apache.commons.csv.QuoteMode quoteMode14 = null;
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setQuoteMode(quoteMode14);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray24 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder13.setHeaderComments(strArray24);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder4.setHeaderComments(strArray24);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setRecordSeparator('4');
        org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean30 = cSVFormat29.getSkipHeaderRecord();
        java.lang.String str31 = cSVFormat29.getRecordSeparator();
        boolean boolean32 = cSVFormat29.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder33 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat29);
        org.apache.commons.csv.QuoteMode quoteMode34 = null;
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setQuoteMode(quoteMode34);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder33.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray44 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder33.setHeaderComments(strArray44);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder33.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder47.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder47.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder47.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean55 = cSVFormat54.getSkipHeaderRecord();
        java.lang.String str56 = cSVFormat54.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode57 = cSVFormat54.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder47.setDuplicateHeaderMode(duplicateHeaderMode57);
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder26.setDuplicateHeaderMode(duplicateHeaderMode57);
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder59.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder61.setDelimiter('4');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\n" + "'", str11, "\n");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertArrayEquals(strArray24, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\n" + "'", str31, "\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertArrayEquals(strArray44, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\n" + "'", str56, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode57 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode57.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0241");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        java.net.URI uRI11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setURI(uRI11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0242");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean10 = cSVFormat9.getSkipHeaderRecord();
        java.lang.String str11 = cSVFormat9.getRecordSeparator();
        boolean boolean12 = cSVFormat9.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder13 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat9);
        org.apache.commons.csv.QuoteMode quoteMode14 = null;
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setQuoteMode(quoteMode14);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray24 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder13.setHeaderComments(strArray24);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder4.setHeaderComments(strArray24);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setRecordSeparator('4');
        org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean30 = cSVFormat29.getSkipHeaderRecord();
        java.lang.String str31 = cSVFormat29.getRecordSeparator();
        boolean boolean32 = cSVFormat29.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder33 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat29);
        org.apache.commons.csv.QuoteMode quoteMode34 = null;
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setQuoteMode(quoteMode34);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder33.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray44 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder33.setHeaderComments(strArray44);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder33.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder47.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder47.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder47.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean55 = cSVFormat54.getSkipHeaderRecord();
        java.lang.String str56 = cSVFormat54.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode57 = cSVFormat54.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder47.setDuplicateHeaderMode(duplicateHeaderMode57);
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder26.setDuplicateHeaderMode(duplicateHeaderMode57);
        org.apache.commons.csv.CSVFormat cSVFormat60 = builder59.get();
        boolean boolean61 = cSVFormat60.getTrailingData();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\n" + "'", str11, "\n");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertArrayEquals(strArray24, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\n" + "'", str31, "\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertArrayEquals(strArray44, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\n" + "'", str56, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode57 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode57.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0243");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        boolean boolean4 = cSVFormat0.isNullStringSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        boolean boolean8 = cSVFormat7.getAutoFlush();
        boolean boolean9 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat7);
        java.lang.String str11 = cSVParser10.getHeaderComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream12 = cSVParser10.stream();
        boolean boolean13 = cSVFormat0.equals((java.lang.Object) cSVParser10);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator14 = cSVParser10.spliterator();
        boolean boolean15 = cSVParser10.hasHeaderComment();
        java.lang.String str16 = cSVParser10.getHeaderComment();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVRecordStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0244");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setDelimiter('a');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder6.setCommentMarker('#');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder6.setRecordSeparator("Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0245");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path6 = builder5.getPath();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0246");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file7 = builder6.getFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getFile() for byte[] origin [B@62a9e990");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0247");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean2 = cSVFormat1.isNullStringSet();
        boolean boolean3 = cSVFormat1.getAllowMissingColumnNames();
        boolean boolean4 = cSVFormat1.getTrim();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser7 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat1, (long) (short) 0, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0248");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier4 = builder0.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset6 = builder5.getCharsetDefault();
        byte[] byteArray7 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder8 = builder5.setByteArray(byteArray7);
        java.lang.CharSequence charSequence9 = builder5.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder5.setBufferSize((int) ' ');
        java.io.InputStream inputStream12 = builder11.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder13 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset14 = builder13.getCharsetDefault();
        byte[] byteArray15 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder16 = builder13.setByteArray(byteArray15);
        java.nio.charset.Charset charset17 = builder13.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder20 = cSVFormat19.builder();
        java.lang.String str21 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse(inputStream12, charset17, cSVFormat19);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder0.setInputStream(inputStream12);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder25 = builder0.setPath("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException; message: Illegal char <<> at index 10: Delimiter=<,> QuoteChar=<\"> RecordSeparator=<??> SkipHeaderRecord:false");
        } catch (java.nio.file.InvalidPathException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVParserSupplier4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "" + "'", charSequence9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertArrayEquals(byteArray15, new byte[] {});
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(cSVParser22);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0249");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        boolean boolean5 = cSVFormat0.isCommentMarkerSet();
        boolean boolean6 = cSVFormat0.getAllowMissingColumnNames();
        java.lang.String[] strArray7 = cSVFormat0.getHeaderComments();
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        int int10 = builder8.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder8.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder16 = builder8.setByteArray(byteArray15);
        org.apache.commons.csv.CSVParser.Builder builder18 = builder8.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder20 = builder8.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder22 = builder8.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setCharacterOffset((long) '#');
        java.io.File file25 = builder24.getFile();
        org.apache.commons.csv.CSVParser.Builder builder26 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset27 = builder26.getCharsetDefault();
        byte[] byteArray28 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder29 = builder26.setByteArray(byteArray28);
        org.apache.commons.csv.CSVParser.Builder builder31 = builder26.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder33 = builder26.setBufferSize((int) 'a');
        java.nio.charset.Charset charset34 = builder33.getCharsetDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter35 = cSVFormat0.print(file25, charset34);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8192 + "'", int10 == 8192);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertArrayEquals(byteArray15, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertNull("file25.getParent() == null", file25.getParent());
        org.junit.Assert.assertEquals(file25.toString(), "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertArrayEquals(byteArray28, new byte[] {});
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(charset34);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0250");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        boolean boolean4 = cSVFormat3.getIgnoreHeaderCase();
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str10 = cSVFormat3.format(objArray9);
        java.lang.String str11 = cSVFormat0.format(objArray9);
        boolean boolean12 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode13 = cSVFormat0.getQuoteMode();
        java.lang.Appendable appendable14 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat0.println(appendable14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str10, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str11, "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + quoteMode13 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode13.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0251");
        java.net.URL uRL0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset2 = builder1.getCharsetDefault();
        int int3 = builder1.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder1.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder9 = builder1.setByteArray(byteArray8);
        java.nio.charset.Charset charset10 = builder1.getCharset();
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        boolean boolean13 = cSVFormat12.getIgnoreHeaderCase();
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str19 = cSVFormat12.format(objArray18);
        java.lang.String str20 = cSVFormat12.getRecordSeparator();
        boolean boolean21 = cSVFormat12.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode22 = cSVFormat12.getQuoteMode();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse(uRL0, charset10, cSVFormat12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8192 + "'", int3 == 8192);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertArrayEquals(byteArray8, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str19, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\r\n" + "'", str20, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + quoteMode22 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode22.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0252");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder2.getBufferSizeDefault();
        java.io.Reader reader4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setReader(reader4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8192 + "'", int3 == 8192);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0253");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.lang.String str6 = cSVParser5.getHeaderComment();
        java.util.List<java.lang.String> strList7 = cSVParser5.getHeaderNames();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser5.getRecords();
        boolean boolean9 = cSVParser5.isClosed();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(cSVRecordList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0254");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder15 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset16 = builder15.getCharsetDefault();
        int int17 = builder15.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder15.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder23 = builder15.setByteArray(byteArray22);
        org.apache.commons.csv.CSVParser.Builder builder24 = builder14.setByteArray(byteArray22);
        java.io.OutputStream outputStream25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder26 = builder14.setOutputStream(outputStream25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8192 + "'", int17 == 8192);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertArrayEquals(byteArray22, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0255");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.io.Reader reader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser2 = cSVFormat0.parse(reader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0256");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        java.io.InputStream inputStream7 = builder6.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        byte[] byteArray10 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder11 = builder8.setByteArray(byteArray10);
        java.nio.charset.Charset charset12 = builder8.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat14.builder();
        java.lang.String str16 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse(inputStream7, charset12, cSVFormat14);
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset19 = builder18.getCharsetDefault();
        byte[] byteArray20 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder21 = builder18.setByteArray(byteArray20);
        java.lang.CharSequence charSequence22 = builder18.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder18.setBufferSize((int) ' ');
        java.io.InputStream inputStream25 = builder24.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder26 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset27 = builder26.getCharsetDefault();
        byte[] byteArray28 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder29 = builder26.setByteArray(byteArray28);
        java.nio.charset.Charset charset30 = builder26.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder33 = cSVFormat32.builder();
        java.lang.String str34 = cSVFormat32.getNullString();
        org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse(inputStream25, charset30, cSVFormat32);
        org.apache.commons.csv.CSVParser.Builder builder36 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset37 = builder36.getCharsetDefault();
        byte[] byteArray38 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder39 = builder36.setByteArray(byteArray38);
        org.apache.commons.csv.CSVParser.Builder builder41 = builder36.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder43 = builder36.setBufferSize((int) 'a');
        java.nio.charset.Charset charset44 = builder43.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat46 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVParser cSVParser47 = org.apache.commons.csv.CSVParser.parse(inputStream25, charset44, cSVFormat46);
        org.apache.commons.csv.CSVFormat.Predefined predefined49 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat50 = predefined49.getFormat();
        boolean boolean51 = cSVFormat50.getIgnoreHeaderCase();
        java.lang.String str52 = cSVFormat50.getDelimiterString();
        boolean boolean53 = cSVFormat50.isQuoteCharacterSet();
        org.apache.commons.csv.CSVParser cSVParser54 = org.apache.commons.csv.CSVParser.parse(",", cSVFormat50);
        org.apache.commons.csv.CSVParser cSVParser55 = org.apache.commons.csv.CSVParser.parse(inputStream7, charset44, cSVFormat50);
        boolean boolean56 = cSVFormat50.getAllowMissingColumnNames();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertArrayEquals(byteArray10, new byte[] {});
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVParser17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertArrayEquals(byteArray20, new byte[] {});
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "" + "'", charSequence22, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertArrayEquals(byteArray28, new byte[] {});
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVParser35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertArrayEquals(byteArray38, new byte[] {});
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(cSVParser47);
        org.junit.Assert.assertTrue("'" + predefined49 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined49.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "," + "'", str52, ",");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(cSVParser54);
        org.junit.Assert.assertNotNull(cSVParser55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0257");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        boolean boolean2 = cSVFormat0.getLenientEof();
        java.lang.String str3 = cSVFormat0.getNullString();
        org.apache.commons.csv.QuoteMode quoteMode4 = cSVFormat0.getQuoteMode();
        java.lang.Appendable appendable5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat0.print(appendable5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(quoteMode4);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0258");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setSkipHeaderRecord(false);
        java.sql.ResultSet resultSet11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder6.setHeader(resultSet11);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0259");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        java.lang.String str9 = cSVFormat7.getRecordSeparator();
        boolean boolean10 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat7);
        org.apache.commons.csv.QuoteMode quoteMode12 = null;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuoteMode(quoteMode12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray22 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder11.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder6.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean26 = cSVFormat25.getSkipHeaderRecord();
        java.lang.String str27 = cSVFormat25.getRecordSeparator();
        boolean boolean28 = cSVFormat25.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder29 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat25);
        org.apache.commons.csv.QuoteMode quoteMode30 = null;
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setQuoteMode(quoteMode30);
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean33 = cSVFormat32.getSkipHeaderRecord();
        java.lang.String str34 = cSVFormat32.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode35 = cSVFormat32.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder31.setDuplicateHeaderMode(duplicateHeaderMode35);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder24.setDuplicateHeaderMode(duplicateHeaderMode35);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder39 = builder24.setDelimiter("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be a line break");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertArrayEquals(strArray22, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\n" + "'", str27, "\n");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\n" + "'", str34, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode35 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode35.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0260");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        // The following exception was thrown during execution in test generation
        try {
            java.io.Writer writer11 = builder10.getWriter();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0261");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        java.lang.CharSequence charSequence5 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setCharSequence((java.lang.CharSequence) "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        java.io.Writer writer8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder9 = builder0.setWriter(writer8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertEquals("'" + charSequence5 + "' != '" + "" + "'", charSequence5, "");
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0262");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder18.setLenientEof(false);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setAutoFlush(false);
        java.sql.ResultSetMetaData resultSetMetaData27 = null;
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setHeader(resultSetMetaData27);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0263");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setCommentMarker('#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0264");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        boolean boolean3 = cSVFormat1.isEscapeCharacterSet();
        boolean boolean4 = cSVFormat1.isQuoteCharacterSet();
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0265");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setRecordNumber(1L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder9 = builder0.setPath("Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]");
            org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException; message: Illegal char <<> at index 10: Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<?> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, ??, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\"]");
        } catch (java.nio.file.InvalidPathException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0266");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setRecordNumber(1L);
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream8 = builder7.getInputStream();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0267");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setCharacterOffset((long) (byte) 100);
        java.io.Writer writer15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setWriter(writer15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0268");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.String[] strArray3 = cSVFormat0.getHeader();
        java.lang.String str4 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder5 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        int int8 = builder6.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder14 = builder6.setByteArray(byteArray13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder6.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder18 = builder6.setBufferSize((int) (byte) 0);
        java.util.function.IntUnaryOperator intUnaryOperator19 = null;
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setBufferSizeChecker(intUnaryOperator19);
        java.nio.file.Path path21 = builder20.getPath();
        org.apache.commons.csv.CSVParser.Builder builder22 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setBufferSize((java.lang.Integer) 100);
        int int25 = builder24.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder26 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset27 = builder26.getCharsetDefault();
        byte[] byteArray28 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder29 = builder26.setByteArray(byteArray28);
        java.lang.CharSequence charSequence30 = builder26.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder26.setBufferSize((int) ' ');
        java.io.InputStream inputStream33 = builder32.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder34 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset35 = builder34.getCharsetDefault();
        byte[] byteArray36 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder37 = builder34.setByteArray(byteArray36);
        java.nio.charset.Charset charset38 = builder34.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder41 = cSVFormat40.builder();
        java.lang.String str42 = cSVFormat40.getNullString();
        org.apache.commons.csv.CSVParser cSVParser43 = org.apache.commons.csv.CSVParser.parse(inputStream33, charset38, cSVFormat40);
        org.apache.commons.csv.CSVParser.Builder builder44 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset45 = builder44.getCharsetDefault();
        byte[] byteArray46 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder47 = builder44.setByteArray(byteArray46);
        org.apache.commons.csv.CSVParser.Builder builder49 = builder44.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder51 = builder44.setBufferSize((int) 'a');
        java.nio.charset.Charset charset52 = builder51.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVParser cSVParser55 = org.apache.commons.csv.CSVParser.parse(inputStream33, charset52, cSVFormat54);
        org.apache.commons.csv.CSVParser.Builder builder56 = builder24.setCharset(charset52);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter57 = cSVFormat0.print(path21, charset52);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertArrayEquals(byteArray13, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(path21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertArrayEquals(byteArray28, new byte[] {});
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "" + "'", charSequence30, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertArrayEquals(byteArray36, new byte[] {});
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(cSVParser43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertArrayEquals(byteArray46, new byte[] {});
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertNotNull(cSVParser55);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0269");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        java.util.function.IntUnaryOperator intUnaryOperator13 = null;
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setBufferSizeChecker(intUnaryOperator13);
        java.nio.file.Path path15 = builder14.getPath();
        org.apache.commons.csv.CSVParser.Builder builder16 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset17 = builder16.getCharsetDefault();
        byte[] byteArray18 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder19 = builder16.setByteArray(byteArray18);
        java.lang.CharSequence charSequence20 = builder16.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder16.setBufferSize((int) ' ');
        java.io.InputStream inputStream23 = builder22.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder24 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset25 = builder24.getCharsetDefault();
        byte[] byteArray26 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder27 = builder24.setByteArray(byteArray26);
        java.nio.charset.Charset charset28 = builder24.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder31 = cSVFormat30.builder();
        java.lang.String str32 = cSVFormat30.getNullString();
        org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse(inputStream23, charset28, cSVFormat30);
        org.apache.commons.csv.CSVParser.Builder builder34 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset35 = builder34.getCharsetDefault();
        byte[] byteArray36 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder37 = builder34.setByteArray(byteArray36);
        org.apache.commons.csv.CSVParser.Builder builder39 = builder34.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder41 = builder34.setBufferSize((int) 'a');
        java.nio.charset.Charset charset42 = builder41.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat44 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVParser cSVParser45 = org.apache.commons.csv.CSVParser.parse(inputStream23, charset42, cSVFormat44);
        org.apache.commons.csv.CSVFormat cSVFormat46 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean47 = cSVFormat46.isNullStringSet();
        boolean boolean48 = cSVFormat46.getAllowMissingColumnNames();
        boolean boolean49 = cSVFormat46.getTrim();
        boolean boolean50 = cSVFormat46.getLenientEof();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser51 = org.apache.commons.csv.CSVParser.parse(path15, charset42, cSVFormat46);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(path15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] {});
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "" + "'", charSequence20, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertArrayEquals(byteArray26, new byte[] {});
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(cSVParser33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertArrayEquals(byteArray36, new byte[] {});
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNotNull(cSVParser45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0270");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode3 = cSVFormat0.getDuplicateHeaderMode();
        java.io.Reader reader4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser5 = cSVFormat0.parse(reader4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode3 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode3.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0271");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVParser.Builder builder2 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset3 = builder2.getCharsetDefault();
        int int4 = builder2.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder2.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray9 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder10 = builder2.setByteArray(byteArray9);
        org.apache.commons.csv.CSVParser.Builder builder12 = builder2.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder14 = builder2.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder2.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharacterOffset((long) '#');
        java.io.File file19 = builder18.getFile();
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset21 = builder20.getCharsetDefault();
        byte[] byteArray22 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder23 = builder20.setByteArray(byteArray22);
        java.lang.CharSequence charSequence24 = builder20.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder26 = builder20.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder27 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset28 = builder27.getCharsetDefault();
        int int29 = builder27.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder31 = builder27.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder35 = builder27.setByteArray(byteArray34);
        java.nio.charset.Charset charset36 = builder27.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder37 = builder26.setCharset(charset36);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter38 = cSVFormat0.print(file19, charset36);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8192 + "'", int4 == 8192);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertNull("file19.getParent() == null", file19.getParent());
        org.junit.Assert.assertEquals(file19.toString(), "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertArrayEquals(byteArray22, new byte[] {});
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "" + "'", charSequence24, "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8192 + "'", int29 == 8192);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertArrayEquals(byteArray34, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0272");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getIgnoreHeaderCase();
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str8 = cSVFormat1.format(objArray7);
        java.lang.String str9 = cSVFormat1.getRecordSeparator();
        java.lang.String[] strArray10 = cSVFormat1.getHeader();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str8, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\r\n" + "'", str9, "\r\n");
        org.junit.Assert.assertNull(strArray10);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0273");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        boolean boolean2 = cSVFormat0.getLenientEof();
        boolean boolean3 = cSVFormat0.getIgnoreSurroundingSpaces();
        boolean boolean4 = cSVFormat0.getIgnoreHeaderCase();
        java.io.Reader reader5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser6 = cSVFormat0.parse(reader5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0274");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setCharacterOffset((long) (byte) 1);
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 100, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder19 = builder14.setByteArray(byteArray18);
        java.io.InputStream inputStream20 = builder19.getInputStream();
        java.io.Writer writer21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder22 = builder19.setWriter(writer21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] { (byte) -1, (byte) 100, (byte) 1 });
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(inputStream20);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0275");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '4');
        java.lang.Class<?> wildcardClass9 = builder6.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0276");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setRecordNumber(1L);
        java.io.Writer writer8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder9 = builder0.setWriter(writer8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0277");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        boolean boolean5 = cSVFormat0.isCommentMarkerSet();
        java.lang.Appendable appendable6 = null;
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        java.lang.String str9 = cSVFormat7.getRecordSeparator();
        boolean boolean10 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat7);
        java.sql.ResultSetMetaData resultSetMetaData12 = null;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setHeader(resultSetMetaData12);
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean15 = cSVFormat14.getSkipHeaderRecord();
        java.lang.String str16 = cSVFormat14.getRecordSeparator();
        boolean boolean17 = cSVFormat14.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder18 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat14);
        org.apache.commons.csv.QuoteMode quoteMode19 = null;
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setQuoteMode(quoteMode19);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray29 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder18.setHeaderComments(strArray29);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder13.setHeaderComments(strArray29);
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat0.printRecord(appendable6, (java.lang.Object[]) strArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\n" + "'", str16, "\n");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertArrayEquals(strArray29, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0278");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        java.util.function.IntUnaryOperator intUnaryOperator13 = null;
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setBufferSizeChecker(intUnaryOperator13);
        java.nio.file.Path path15 = builder14.getPath();
        java.nio.charset.Charset charset16 = null;
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean18 = cSVFormat17.getSkipHeaderRecord();
        java.lang.String str19 = cSVFormat17.getRecordSeparator();
        java.lang.String[] strArray20 = cSVFormat17.getHeader();
        java.lang.String str21 = cSVFormat17.getNullString();
        boolean boolean22 = cSVFormat17.isNullStringSet();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser23 = org.apache.commons.csv.CSVParser.parse(path15, charset16, cSVFormat17);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(path15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\n" + "'", str19, "\n");
        org.junit.Assert.assertNull(strArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0279");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.nio.charset.Charset charset4 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        int int9 = builder7.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder7.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder7.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder19 = builder7.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder7.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) '#');
        java.io.File file24 = builder23.getFile();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder6.setFile(file24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder6.setCharacterOffset((long) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.io.RandomAccessFile randomAccessFile28 = builder6.getRandomAccessFile();
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0280");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.QuoteMode quoteMode3 = cSVFormat1.getQuoteMode();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.RFC4180 + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.RFC4180));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(quoteMode3);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0281");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"\t\thi!\t\"\r\n\"\t\t\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"", cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertNotNull(cSVParser3);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0282");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSizeMax(8192);
        org.apache.commons.csv.CSVParser cSVParser6 = builder0.getUnchecked();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVParser6);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0283");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setQuote('a');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setRecordSeparator('\"');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0284");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVParser5.hasHeaderComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0285");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        boolean boolean3 = cSVFormat1.isEscapeCharacterSet();
        boolean boolean4 = cSVFormat1.isQuoteCharacterSet();
        boolean boolean5 = cSVFormat1.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder6 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setQuote((java.lang.Character) '#');
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0286");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVFormat2.getTrailingData();
        java.lang.String str7 = cSVFormat2.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean9 = cSVFormat8.getSkipHeaderRecord();
        java.lang.String str10 = cSVFormat8.getRecordSeparator();
        boolean boolean11 = cSVFormat8.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder12 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat8);
        org.apache.commons.csv.QuoteMode quoteMode13 = null;
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setQuoteMode(quoteMode13);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray23 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder12.setHeaderComments(strArray23);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder12.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder26.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder26.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder26.setLenientEof(false);
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder26.setLenientEof(false);
        java.lang.Appendable appendable37 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat2.print((java.lang.Object) builder36, appendable37, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\r\n" + "'", str7, "\r\n");
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\n" + "'", str10, "\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertArrayEquals(strArray23, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0287");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a');
        boolean boolean2 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode3 = cSVFormat1.getDuplicateHeaderMode();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode3 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode3.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0288");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF;
        java.lang.String str1 = cSVFormat0.getRecordSeparator();
        java.lang.String str2 = cSVFormat0.getNullString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\r\n" + "'", str1, "\r\n");
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0289");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder0.getBufferSizeDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setPath("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException; message: Illegal char <<> at index 10: Delimiter=<,> QuoteChar=<\"> RecordSeparator=<?> EmptyLines:ignored SkipHeaderRecord:false");
        } catch (java.nio.file.InvalidPathException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8192 + "'", int3 == 8192);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0290");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean2 = cSVFormat1.getSkipHeaderRecord();
        java.lang.String str3 = cSVFormat1.getRecordSeparator();
        boolean boolean4 = cSVFormat1.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder5 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        java.sql.ResultSetMetaData resultSetMetaData6 = null;
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setHeader(resultSetMetaData6);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setTrailingData(true);
        org.apache.commons.csv.CSVFormat cSVFormat12 = builder9.get();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser15 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat12, (long) 'a', (long) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(cSVFormat12);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0291");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter4 = cSVFormat0.printer();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("", cSVFormat6);
        boolean boolean8 = cSVFormat0.equals((java.lang.Object) cSVFormat6);
        java.nio.file.Path path9 = null;
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset11 = builder10.getCharsetDefault();
        byte[] byteArray12 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder13 = builder10.setByteArray(byteArray12);
        org.apache.commons.csv.CSVParser.Builder builder15 = builder10.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder10.setBufferSize((int) 'a');
        java.nio.charset.Charset charset18 = builder17.getCharsetDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter19 = cSVFormat6.print(path9, charset18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(cSVPrinter4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertArrayEquals(byteArray12, new byte[] {});
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(charset18);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0292");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setEscape((java.lang.Character) 'a');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0293");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean2 = cSVFormat1.getSkipHeaderRecord();
        java.lang.String str3 = cSVFormat1.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean6 = cSVFormat5.getSkipHeaderRecord();
        java.lang.String str7 = cSVFormat5.getRecordSeparator();
        boolean boolean8 = cSVFormat5.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder9 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat5);
        boolean boolean10 = cSVFormat1.equals((java.lang.Object) cSVFormat5);
        java.lang.String str11 = cSVFormat5.toString();
        java.lang.String str12 = cSVFormat5.getNullString();
        boolean boolean13 = cSVFormat5.getTrim();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str11, "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0294");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setEscape('#');
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean24 = cSVFormat23.getSkipHeaderRecord();
        java.lang.String str25 = cSVFormat23.getRecordSeparator();
        boolean boolean26 = cSVFormat23.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder27 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat23);
        org.apache.commons.csv.QuoteMode quoteMode28 = null;
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setQuoteMode(quoteMode28);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder27.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray38 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder27.setHeaderComments(strArray38);
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder27.setCommentMarker('a');
        java.sql.ResultSetMetaData resultSetMetaData42 = null;
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder41.setHeader(resultSetMetaData42);
        org.apache.commons.csv.CSVFormat cSVFormat44 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean45 = cSVFormat44.getSkipHeaderRecord();
        java.lang.String str46 = cSVFormat44.getRecordSeparator();
        boolean boolean47 = cSVFormat44.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder48 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat44);
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder48.setCommentMarker('a');
        java.lang.String[] strArray55 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" };
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder48.setHeader(strArray55);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder48.setNullString("");
        org.apache.commons.csv.CSVFormat cSVFormat59 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean60 = cSVFormat59.getSkipHeaderRecord();
        java.lang.String str61 = cSVFormat59.getRecordSeparator();
        boolean boolean62 = cSVFormat59.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder63 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat59);
        org.apache.commons.csv.QuoteMode quoteMode64 = null;
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder63.setQuoteMode(quoteMode64);
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder63.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray74 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder75 = builder63.setHeaderComments(strArray74);
        org.apache.commons.csv.CSVFormat.Builder builder76 = builder58.setHeader(strArray74);
        org.apache.commons.csv.CSVFormat.Builder builder77 = builder41.setHeaderComments(strArray74);
        org.apache.commons.csv.CSVFormat.Builder builder78 = builder22.setHeaderComments(strArray74);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\n" + "'", str25, "\n");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertArrayEquals(strArray38, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\n" + "'", str46, "\n");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertArrayEquals(strArray55, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" });
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\n" + "'", str61, "\n");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertArrayEquals(strArray74, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0295");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat2.builder();
        java.lang.String str4 = cSVFormat2.getNullString();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        boolean boolean8 = cSVFormat7.getAutoFlush();
        boolean boolean9 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat7);
        boolean boolean11 = cSVParser10.hasTrailerComment();
        java.lang.String str12 = cSVParser10.getHeaderComment();
        long long13 = cSVParser10.getCurrentLineNumber();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator14 = cSVParser10.spliterator();
        boolean boolean15 = cSVFormat2.equals((java.lang.Object) cSVParser10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0296");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.nio.charset.Charset charset4 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        int int9 = builder7.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder7.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder7.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder19 = builder7.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder7.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) '#');
        java.io.File file24 = builder23.getFile();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder6.setFile(file24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder6.setCharacterOffset((long) 10);
        java.io.RandomAccessFile randomAccessFile28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder29 = builder27.setRandomAccessFile(randomAccessFile28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0297");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.getLenientEof();
        java.lang.String[] strArray2 = cSVFormat0.getHeader();
        java.lang.String str3 = cSVFormat0.getDelimiterString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "," + "'", str3, ",");
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0298");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier13 = builder0.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder17 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset18 = builder17.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder14.setCharset(charset18);
        java.nio.charset.Charset charset20 = builder14.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder0.setCharset(charset20);
        java.net.URI uRI22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setURI(uRI22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVParserSupplier13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0299");
        java.net.URL uRL0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset2 = builder1.getCharsetDefault();
        int int3 = builder1.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder1.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder9 = builder1.setByteArray(byteArray8);
        org.apache.commons.csv.CSVParser.Builder builder11 = builder1.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder13 = builder1.setBufferSize((int) (byte) 0);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier14 = builder1.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder15 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset19 = builder18.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder15.setCharset(charset19);
        java.nio.charset.Charset charset21 = builder15.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder1.setCharset(charset21);
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String str24 = cSVFormat23.getRecordSeparator();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser25 = org.apache.commons.csv.CSVParser.parse(uRL0, charset21, cSVFormat23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8192 + "'", int3 == 8192);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertArrayEquals(byteArray8, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(cSVParserSupplier14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\r\n" + "'", str24, "\r\n");
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0300");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        boolean boolean12 = cSVFormat11.getAutoFlush();
        boolean boolean13 = cSVFormat11.getTrim();
        org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat11);
        boolean boolean15 = cSVFormat11.getSkipHeaderRecord();
        boolean boolean17 = cSVFormat11.equals((java.lang.Object) '4');
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        boolean boolean22 = cSVFormat21.getAutoFlush();
        boolean boolean23 = cSVFormat21.getTrim();
        org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat21);
        boolean boolean25 = cSVParser24.hasTrailerComment();
        boolean boolean26 = cSVParser24.isClosed();
        org.apache.commons.csv.CSVParser.Builder builder27 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder27.setBufferSize((java.lang.Integer) 100);
        java.lang.Object[] objArray31 = new java.lang.Object[] { boolean17, predefined18, cSVParser24, builder29, 100L };
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder8.setHeaderComments(objArray31);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder8.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setDelimiter('\"');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVParser14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(cSVParser24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0301");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        java.lang.String str3 = cSVParser2.getFirstEndOfLine();
        long long4 = cSVParser2.getCurrentLineNumber();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor5 = cSVParser2.iterator();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser2.iterator();
        java.lang.String str7 = cSVParser2.getTrailerComment();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVParser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordItor5);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0302");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        boolean boolean2 = cSVFormat0.getTrim();
        boolean boolean3 = cSVFormat0.isNullStringSet();
        java.lang.String str4 = cSVFormat0.getDelimiterString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "," + "'", str4, ",");
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0303");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.getLenientEof();
        java.lang.String[] strArray2 = cSVFormat0.getHeader();
        boolean boolean3 = cSVFormat0.getIgnoreEmptyLines();
        boolean boolean4 = cSVFormat0.getIgnoreEmptyLines();
        boolean boolean5 = cSVFormat0.getTrailingData();
        java.lang.Class<?> wildcardClass6 = cSVFormat0.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0304");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        java.io.RandomAccessFile randomAccessFile5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setRandomAccessFile(randomAccessFile5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0305");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setCharacterOffset((long) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Writer writer15 = builder0.getWriter();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0306");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean4 = cSVFormat0.equals((java.lang.Object) (-1L));
        boolean boolean5 = cSVFormat0.getIgnoreEmptyLines();
        java.lang.Appendable appendable6 = null;
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter8 = cSVFormat7.printer();
        boolean boolean9 = cSVFormat7.getLenientEof();
        boolean boolean10 = cSVFormat7.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVPrinter cSVPrinter12 = cSVFormat11.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        boolean boolean15 = cSVFormat14.getIgnoreHeaderCase();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str21 = cSVFormat14.format(objArray20);
        java.lang.String str22 = cSVFormat11.format(objArray20);
        java.lang.String str23 = cSVFormat7.format(objArray20);
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat0.printRecord(appendable6, objArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVPrinter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVPrinter12);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str21, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str22, "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str23, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0307");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.toString();
        boolean boolean5 = cSVFormat3.isEscapeCharacterSet();
        boolean boolean6 = cSVFormat1.equals((java.lang.Object) cSVFormat3);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode7 = cSVFormat3.getDuplicateHeaderMode();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str4, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode7 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode7.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0308");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Reader reader3 = builder0.getReader();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0309");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharacterOffset((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder18 = builder14.setCharacterOffset((long) 'a');
        java.nio.charset.Charset charset19 = builder14.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream20 = builder14.getInputStream();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(charset19);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0310");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.String[] strArray3 = cSVFormat0.getHeader();
        java.lang.String str4 = cSVFormat0.getNullString();
        boolean boolean5 = cSVFormat0.isNullStringSet();
        boolean boolean6 = cSVFormat0.getSkipHeaderRecord();
        boolean boolean7 = cSVFormat0.getIgnoreHeaderCase();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0311");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVParser5.hasTrailerComment();
        boolean boolean7 = cSVParser5.isClosed();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream8 = cSVParser5.stream();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser5.getHeaderMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = cSVParser5.getHeaderMap();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser5.getRecords();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(cSVRecordList11);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0312");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVParser5.hasTrailerComment();
        java.lang.String str7 = cSVParser5.getHeaderComment();
        java.lang.String str8 = cSVParser5.getHeaderComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0313");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        java.io.InputStream inputStream7 = builder6.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        byte[] byteArray10 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder11 = builder8.setByteArray(byteArray10);
        java.nio.charset.Charset charset12 = builder8.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat14.builder();
        java.lang.String str16 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse(inputStream7, charset12, cSVFormat14);
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset19 = builder18.getCharsetDefault();
        byte[] byteArray20 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder21 = builder18.setByteArray(byteArray20);
        java.lang.CharSequence charSequence22 = builder18.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder18.setBufferSize((int) ' ');
        java.io.InputStream inputStream25 = builder24.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder26 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset27 = builder26.getCharsetDefault();
        byte[] byteArray28 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder29 = builder26.setByteArray(byteArray28);
        java.nio.charset.Charset charset30 = builder26.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder33 = cSVFormat32.builder();
        java.lang.String str34 = cSVFormat32.getNullString();
        org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse(inputStream25, charset30, cSVFormat32);
        org.apache.commons.csv.CSVParser.Builder builder36 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset37 = builder36.getCharsetDefault();
        byte[] byteArray38 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder39 = builder36.setByteArray(byteArray38);
        org.apache.commons.csv.CSVParser.Builder builder41 = builder36.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder43 = builder36.setBufferSize((int) 'a');
        java.nio.charset.Charset charset44 = builder43.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat46 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVParser cSVParser47 = org.apache.commons.csv.CSVParser.parse(inputStream25, charset44, cSVFormat46);
        org.apache.commons.csv.CSVFormat.Predefined predefined49 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat50 = predefined49.getFormat();
        boolean boolean51 = cSVFormat50.getIgnoreHeaderCase();
        java.lang.String str52 = cSVFormat50.getDelimiterString();
        boolean boolean53 = cSVFormat50.isQuoteCharacterSet();
        org.apache.commons.csv.CSVParser cSVParser54 = org.apache.commons.csv.CSVParser.parse(",", cSVFormat50);
        org.apache.commons.csv.CSVParser cSVParser55 = org.apache.commons.csv.CSVParser.parse(inputStream7, charset44, cSVFormat50);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor56 = cSVParser55.iterator();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertArrayEquals(byteArray10, new byte[] {});
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVParser17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertArrayEquals(byteArray20, new byte[] {});
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "" + "'", charSequence22, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertArrayEquals(byteArray28, new byte[] {});
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVParser35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertArrayEquals(byteArray38, new byte[] {});
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(cSVParser47);
        org.junit.Assert.assertTrue("'" + predefined49 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined49.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "," + "'", str52, ",");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(cSVParser54);
        org.junit.Assert.assertNotNull(cSVParser55);
        org.junit.Assert.assertNotNull(cSVRecordItor56);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0314");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.String[] strArray3 = cSVFormat0.getHeader();
        java.lang.String str4 = cSVFormat0.getNullString();
        boolean boolean5 = cSVFormat0.isNullStringSet();
        boolean boolean6 = cSVFormat0.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        java.lang.String str9 = cSVFormat7.getRecordSeparator();
        boolean boolean10 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat7);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean17 = cSVFormat16.getSkipHeaderRecord();
        java.lang.String str18 = cSVFormat16.getRecordSeparator();
        boolean boolean19 = cSVFormat16.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder20 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat16);
        org.apache.commons.csv.QuoteMode quoteMode21 = null;
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setQuoteMode(quoteMode21);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder20.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray31 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder20.setHeaderComments(strArray31);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder32.setLenientEof(true);
        org.apache.commons.csv.CSVFormat cSVFormat35 = builder32.get();
        org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean37 = cSVFormat36.getSkipHeaderRecord();
        java.lang.String str38 = cSVFormat36.getRecordSeparator();
        boolean boolean39 = cSVFormat36.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder40 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat36);
        java.sql.ResultSetMetaData resultSetMetaData41 = null;
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder40.setHeader(resultSetMetaData41);
        org.apache.commons.csv.CSVFormat cSVFormat43 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean44 = cSVFormat43.getSkipHeaderRecord();
        java.lang.String str45 = cSVFormat43.getRecordSeparator();
        boolean boolean46 = cSVFormat43.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder47 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat43);
        org.apache.commons.csv.QuoteMode quoteMode48 = null;
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder47.setQuoteMode(quoteMode48);
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder47.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray58 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder47.setHeaderComments(strArray58);
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder42.setHeaderComments(strArray58);
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder42.setQuote('#');
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder62.setEscape((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat cSVFormat65 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean66 = cSVFormat65.getSkipHeaderRecord();
        java.lang.String str67 = cSVFormat65.getRecordSeparator();
        java.lang.String[] strArray68 = cSVFormat65.getHeader();
        java.lang.String str69 = cSVFormat65.getDelimiterString();
        boolean boolean70 = cSVFormat65.getIgnoreEmptyLines();
        boolean boolean71 = cSVFormat65.getSkipHeaderRecord();
        java.lang.Object[] objArray72 = new java.lang.Object[] { builder13, builder32, '\"', cSVFormat65 };
        java.lang.String str73 = cSVFormat0.format(objArray72);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\n" + "'", str18, "\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertArrayEquals(strArray31, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\n" + "'", str38, "\n");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\n" + "'", str45, "\n");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertArrayEquals(strArray58, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\n" + "'", str67, "\n");
        org.junit.Assert.assertNull(strArray68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "," + "'", str69, ",");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray72);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0315");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 100);
        java.net.URI uRI9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setURI(uRI9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0316");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setIgnoreEmptyLines(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0317");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getIgnoreHeaderCase();
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str8 = cSVFormat1.format(objArray7);
        boolean boolean9 = cSVFormat1.getTrim();
        boolean boolean10 = cSVFormat1.getAllowMissingColumnNames();
        boolean boolean11 = cSVFormat1.getTrailingDelimiter();
        java.lang.Appendable appendable12 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined13 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined13.getFormat();
        boolean boolean15 = cSVFormat14.getIgnoreHeaderCase();
        java.lang.Object[] objArray20 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str21 = cSVFormat14.format(objArray20);
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat1.printRecord(appendable12, objArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str8, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + predefined13 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined13.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str21, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0318");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharacterOffset((long) '#');
        java.nio.charset.Charset charset17 = builder16.getCharset();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0319");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder16.setCommentMarker('\"');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0320");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setEscape('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        boolean boolean25 = cSVFormat24.getIgnoreHeaderCase();
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str31 = cSVFormat24.format(objArray30);
        java.lang.String str32 = cSVFormat24.getRecordSeparator();
        boolean boolean33 = cSVFormat24.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode34 = cSVFormat24.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder22.setQuoteMode(quoteMode34);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder22.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder22.setRecordSeparator('#');
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder39.setEscape((java.lang.Character) '\"');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str31, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\r\n" + "'", str32, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + quoteMode34 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode34.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0321");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setQuoteMode(quoteMode7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder6.setCommentMarker('#');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder6.setIgnoreSurroundingSpaces(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0322");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharacterOffset((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder17 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset18 = builder17.getCharsetDefault();
        byte[] byteArray19 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder20 = builder17.setByteArray(byteArray19);
        java.lang.CharSequence charSequence21 = builder17.getCharSequence();
        java.lang.CharSequence charSequence22 = builder17.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser23 = builder17.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray24 = builder17.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder16.setOpenOptions(openOptionArray24);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertArrayEquals(byteArray19, new byte[] {});
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "" + "'", charSequence21, "");
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "" + "'", charSequence22, "");
        org.junit.Assert.assertNotNull(cSVParser23);
        org.junit.Assert.assertNotNull(openOptionArray24);
        org.junit.Assert.assertArrayEquals(openOptionArray24, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0323");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path6 = builder5.getPath();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getPath() for byte[] origin [B@6dc9b1b1");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0324");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        boolean boolean3 = cSVFormat1.isEscapeCharacterSet();
        boolean boolean4 = cSVFormat1.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Builder builder5 = cSVFormat1.builder();
        java.lang.Appendable appendable6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter7 = cSVFormat1.print(appendable6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0325");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        java.lang.String str9 = cSVFormat7.getRecordSeparator();
        boolean boolean10 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat7);
        org.apache.commons.csv.QuoteMode quoteMode12 = null;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuoteMode(quoteMode12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray22 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder11.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder6.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder6.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder6.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder6.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder30.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder30.setDelimiter(' ');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertArrayEquals(strArray22, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0326");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getIgnoreHeaderCase();
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str8 = cSVFormat1.format(objArray7);
        boolean boolean9 = cSVFormat1.getTrailingDelimiter();
        boolean boolean10 = cSVFormat1.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        boolean boolean14 = cSVFormat13.getAutoFlush();
        boolean boolean15 = cSVFormat13.getTrim();
        org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat13);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor17 = cSVParser16.iterator();
        boolean boolean18 = cSVParser16.isClosed();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList19 = cSVParser16.getRecords();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator20 = cSVParser16.spliterator();
        java.lang.String str21 = cSVParser16.getFirstEndOfLine();
        boolean boolean22 = cSVFormat1.equals((java.lang.Object) str21);
        java.lang.String[] strArray23 = cSVFormat1.getHeader();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str8, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(cSVParser16);
        org.junit.Assert.assertNotNull(cSVRecordItor17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(cSVRecordList19);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(strArray23);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0327");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setCharacterOffset((long) (byte) 100);
        int int15 = builder0.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder16 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset17 = builder16.getCharsetDefault();
        byte[] byteArray18 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder19 = builder16.setByteArray(byteArray18);
        java.lang.CharSequence charSequence20 = builder16.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder16.setBufferSize((int) ' ');
        java.io.InputStream inputStream23 = builder22.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder0.setInputStream(inputStream23);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setPath("\r\n\"Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]\"Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException; message: Illegal char <?> at index 0: ??\"Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<?> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, ??, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\"]\"Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<?> SkipHeaderRecord:false");
        } catch (java.nio.file.InvalidPathException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8192 + "'", int15 == 8192);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] {});
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "" + "'", charSequence20, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0328");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setLenientEof(false);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setNullString("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setEscape((java.lang.Character) '4');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0329");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setIgnoreHeaderCase(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0330");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder18.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder18.setLenientEof(false);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean28 = cSVFormat27.getSkipHeaderRecord();
        java.lang.String str29 = cSVFormat27.getRecordSeparator();
        boolean boolean30 = cSVFormat27.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder31 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat27);
        org.apache.commons.csv.QuoteMode quoteMode32 = null;
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setQuoteMode(quoteMode32);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder31.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray42 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder31.setHeaderComments(strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder31.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder45.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder45.setEscape('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        boolean boolean52 = cSVFormat51.getIgnoreHeaderCase();
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str58 = cSVFormat51.format(objArray57);
        java.lang.String str59 = cSVFormat51.getRecordSeparator();
        boolean boolean60 = cSVFormat51.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode61 = cSVFormat51.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder49.setQuoteMode(quoteMode61);
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder18.setQuoteMode(quoteMode61);
        java.sql.ResultSetMetaData resultSetMetaData64 = null;
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder63.setHeader(resultSetMetaData64);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\n" + "'", str29, "\n");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertArrayEquals(strArray42, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str58, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\r\n" + "'", str59, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + quoteMode61 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode61.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0331");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVParser5.hasTrailerComment();
        java.lang.String str7 = cSVParser5.getHeaderComment();
        long long8 = cSVParser5.getCurrentLineNumber();
        java.lang.String str9 = cSVParser5.getHeaderComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream10 = cSVParser5.stream();
        boolean boolean11 = cSVParser5.isClosed();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor12 = cSVParser5.iterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(cSVRecordStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVRecordItor12);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0332");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getIgnoreHeaderCase();
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str8 = cSVFormat1.format(objArray7);
        org.apache.commons.csv.CSVFormat.Builder builder9 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str8, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0333");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setNullString("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder16.setCommentMarker((java.lang.Character) '4');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0334");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        boolean boolean5 = cSVFormat0.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat.Builder builder6 = cSVFormat0.builder();
        java.lang.Appendable appendable7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter8 = cSVFormat0.print(appendable7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0335");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder2 = cSVFormat1.builder();
        org.apache.commons.csv.QuoteMode quoteMode3 = cSVFormat1.getQuoteMode();
        java.lang.Character char4 = cSVFormat1.getQuoteCharacter();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(quoteMode3);
        org.junit.Assert.assertNull(char4);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0336");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser5.iterator();
        boolean boolean7 = cSVParser5.isClosed();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser5.getRecords();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVParser5.spliterator();
        boolean boolean10 = cSVParser5.isClosed();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVRecordList8);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0337");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder2.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset5 = builder4.getCharsetDefault();
        byte[] byteArray6 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder7 = builder4.setByteArray(byteArray6);
        java.lang.CharSequence charSequence8 = builder4.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder4.setBufferSize((int) ' ');
        java.io.InputStream inputStream11 = builder10.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset13 = builder12.getCharsetDefault();
        byte[] byteArray14 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder15 = builder12.setByteArray(byteArray14);
        java.nio.charset.Charset charset16 = builder12.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder19 = cSVFormat18.builder();
        java.lang.String str20 = cSVFormat18.getNullString();
        org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse(inputStream11, charset16, cSVFormat18);
        org.apache.commons.csv.CSVParser.Builder builder22 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset23 = builder22.getCharsetDefault();
        byte[] byteArray24 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder25 = builder22.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder22.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder29 = builder22.setBufferSize((int) 'a');
        java.nio.charset.Charset charset30 = builder29.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse(inputStream11, charset30, cSVFormat32);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder2.setCharset(charset30);
        java.nio.charset.Charset charset35 = builder34.getCharsetDefault();
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        java.lang.String str38 = cSVFormat37.toString();
        org.apache.commons.csv.QuoteMode quoteMode39 = cSVFormat37.getQuoteMode();
        org.apache.commons.csv.CSVParser.Builder builder40 = builder34.setFormat(cSVFormat37);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder42 = builder34.setPath("\r\n\"Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]\"Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException; message: Illegal char <?> at index 0: ??\"Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<?> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, ??, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\"]\"Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<?> SkipHeaderRecord:false");
        } catch (java.nio.file.InvalidPathException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] {});
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "" + "'", charSequence8, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] {});
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVParser21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] {});
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVParser33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str38, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + quoteMode39 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode39.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0338");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.EXCEL;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.EXCEL + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.EXCEL));
        org.junit.Assert.assertNotNull(cSVFormat1);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0339");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        java.util.function.IntUnaryOperator intUnaryOperator5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setBufferSizeChecker(intUnaryOperator5);
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file7 = builder4.getFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CharSequenceOrigin#getFile() for String origin \"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\"");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0340");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.lang.String str6 = cSVParser5.getHeaderComment();
        long long7 = cSVParser5.getRecordNumber();
        boolean boolean8 = cSVParser5.hasTrailerComment();
        long long9 = cSVParser5.getRecordNumber();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0341");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setCharacterOffset((long) (byte) 100);
        java.nio.file.OpenOption[] openOptionArray15 = builder0.getOpenOptions();
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream16 = builder0.getInputStream();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(openOptionArray15);
        org.junit.Assert.assertArrayEquals(openOptionArray15, new java.nio.file.OpenOption[] {});
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0342");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder2 = cSVFormat1.builder();
        org.apache.commons.csv.QuoteMode quoteMode3 = cSVFormat1.getQuoteMode();
        boolean boolean4 = cSVFormat1.getAutoFlush();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(quoteMode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0343");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        boolean boolean3 = cSVFormat1.getIgnoreEmptyLines();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0344");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeaderComments();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        java.lang.String str3 = cSVFormat0.getNullString();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode4 = cSVFormat0.getDuplicateHeaderMode();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode4 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode4.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0345");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setLenientEof(true);
        org.apache.commons.csv.CSVFormat cSVFormat19 = builder16.get();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset22 = builder21.getCharsetDefault();
        int int23 = builder21.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder21.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder29 = builder21.setByteArray(byteArray28);
        org.apache.commons.csv.CSVParser.Builder builder31 = builder21.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder33 = builder21.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder35 = builder21.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setCharacterOffset((long) '#');
        java.io.File file38 = builder37.getFile();
        org.apache.commons.csv.CSVParser.Builder builder39 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset40 = builder39.getCharsetDefault();
        int int41 = builder39.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder39.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder47 = builder39.setByteArray(byteArray46);
        org.apache.commons.csv.CSVParser.Builder builder49 = builder39.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder51 = builder39.setBufferSize((int) (byte) 0);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier52 = builder39.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder53 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder55 = builder53.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder56 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset57 = builder56.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder58 = builder53.setCharset(charset57);
        java.nio.charset.Charset charset59 = builder53.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder60 = builder39.setCharset(charset59);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter61 = cSVFormat19.print(file38, charset59);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8192 + "'", int23 == 8192);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertArrayEquals(byteArray28, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(file38);
        org.junit.Assert.assertNull("file38.getParent() == null", file38.getParent());
        org.junit.Assert.assertEquals(file38.toString(), "");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8192 + "'", int41 == 8192);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertArrayEquals(byteArray46, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(cSVParserSupplier52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(charset57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(charset59);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0346");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder2.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset5 = builder4.getCharsetDefault();
        byte[] byteArray6 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder7 = builder4.setByteArray(byteArray6);
        java.lang.CharSequence charSequence8 = builder4.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder4.setBufferSize((int) ' ');
        java.io.InputStream inputStream11 = builder10.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset13 = builder12.getCharsetDefault();
        byte[] byteArray14 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder15 = builder12.setByteArray(byteArray14);
        java.nio.charset.Charset charset16 = builder12.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder19 = cSVFormat18.builder();
        java.lang.String str20 = cSVFormat18.getNullString();
        org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse(inputStream11, charset16, cSVFormat18);
        org.apache.commons.csv.CSVParser.Builder builder22 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset23 = builder22.getCharsetDefault();
        byte[] byteArray24 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder25 = builder22.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder22.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder29 = builder22.setBufferSize((int) 'a');
        java.nio.charset.Charset charset30 = builder29.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse(inputStream11, charset30, cSVFormat32);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder2.setCharset(charset30);
        java.util.function.IntUnaryOperator intUnaryOperator35 = null;
        org.apache.commons.csv.CSVParser.Builder builder36 = builder2.setBufferSizeChecker(intUnaryOperator35);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser37 = builder36.getUnchecked();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] {});
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "" + "'", charSequence8, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] {});
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVParser21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] {});
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVParser33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0347");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file6 = builder0.getFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getFile() for byte[] origin [B@9a18b5b");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0348");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setIgnoreHeaderCase(true);
        java.sql.ResultSetMetaData resultSetMetaData6 = null;
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setHeader(resultSetMetaData6);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setEscape('4');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0349");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setLenientEof(true);
        org.apache.commons.csv.CSVFormat cSVFormat19 = builder16.get();
        java.lang.Character char20 = cSVFormat19.getCommentMarker();
        boolean boolean21 = cSVFormat19.getLenientEof();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNull(char20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0350");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        java.lang.String str3 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset5 = builder4.getCharsetDefault();
        int int6 = builder4.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder4.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser9 = builder4.getUnchecked();
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset11 = builder10.getCharsetDefault();
        int int12 = builder10.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder10.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder18 = builder10.setByteArray(byteArray17);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder10.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder22 = builder10.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder24 = builder10.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharacterOffset((long) '#');
        java.io.File file27 = builder26.getFile();
        org.apache.commons.csv.CSVParser.Builder builder28 = builder4.setFile(file27);
        org.apache.commons.csv.CSVParser.Builder builder29 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset30 = builder29.getCharsetDefault();
        int int31 = builder29.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder29.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder37 = builder29.setByteArray(byteArray36);
        org.apache.commons.csv.CSVParser.Builder builder39 = builder29.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder41 = builder29.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder43 = builder29.setCharacterOffset((long) (byte) 1);
        byte[] byteArray47 = new byte[] { (byte) -1, (byte) 100, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder48 = builder43.setByteArray(byteArray47);
        java.io.InputStream inputStream49 = builder48.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder50 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset51 = builder50.getCharsetDefault();
        int int52 = builder50.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder54 = builder50.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray57 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder58 = builder50.setByteArray(byteArray57);
        org.apache.commons.csv.CSVParser.Builder builder60 = builder50.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder62 = builder50.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder64 = builder50.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder66 = builder64.setCharacterOffset((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder68 = builder64.setCharacterOffset((long) 'a');
        java.nio.charset.Charset charset69 = builder64.getCharset();
        org.apache.commons.csv.CSVFormat.Predefined predefined70 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat71 = predefined70.getFormat();
        boolean boolean72 = cSVFormat71.getAutoFlush();
        org.apache.commons.csv.QuoteMode quoteMode73 = cSVFormat71.getQuoteMode();
        boolean boolean74 = cSVFormat71.getIgnoreEmptyLines();
        org.apache.commons.csv.CSVParser cSVParser75 = org.apache.commons.csv.CSVParser.parse(inputStream49, charset69, cSVFormat71);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter76 = cSVFormat1.print(file27, charset69);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVParser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8192 + "'", int6 == 8192);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVParser9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8192 + "'", int12 == 8192);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertNull("file27.getParent() == null", file27.getParent());
        org.junit.Assert.assertEquals(file27.toString(), "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8192 + "'", int31 == 8192);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertArrayEquals(byteArray36, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertArrayEquals(byteArray47, new byte[] { (byte) -1, (byte) 100, (byte) 1 });
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(inputStream49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 8192 + "'", int52 == 8192);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertArrayEquals(byteArray57, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertTrue("'" + predefined70 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined70.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + quoteMode73 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode73.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(cSVParser75);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0351");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        java.util.function.IntUnaryOperator intUnaryOperator13 = null;
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setBufferSizeChecker(intUnaryOperator13);
        int int15 = builder14.getBufferSize();
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream16 = builder14.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8192 + "'", int15 == 8192);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0352");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode3 = cSVFormat0.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVPrinter cSVPrinter4 = cSVFormat0.printer();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode3 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode3.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVPrinter4);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0353");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setDelimiter('a');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setQuote((java.lang.Character) '#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0354");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setLenientEof(true);
        java.lang.Class<?> wildcardClass19 = builder16.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0355");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.nio.charset.Charset charset4 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setCharacterOffset((long) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.io.RandomAccessFile randomAccessFile7 = builder6.getRandomAccessFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getFile() for byte[] origin [B@57f77cfa");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0356");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getIgnoreHeaderCase();
        java.lang.String str4 = cSVFormat2.getDelimiterString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "," + "'", str4, ",");
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0357");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setCharacterOffset((long) (byte) 1);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder0.setBufferSizeMax(1);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Writer writer17 = builder0.getWriter();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0358");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setRecordNumber((long) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser15 = builder12.get();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0359");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.nio.charset.Charset charset4 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        int int9 = builder7.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder7.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder7.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder19 = builder7.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder7.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) '#');
        java.io.File file24 = builder23.getFile();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder6.setFile(file24);
        java.util.function.IntUnaryOperator intUnaryOperator26 = null;
        org.apache.commons.csv.CSVParser.Builder builder27 = builder6.setBufferSizeChecker(intUnaryOperator26);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Reader reader28 = builder27.getReader();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0360");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MONGODB_CSV;
        boolean boolean1 = cSVFormat0.isNullStringSet();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode2 = cSVFormat0.getDuplicateHeaderMode();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode2 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode2.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0361");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVFormat2.getSkipHeaderRecord();
        boolean boolean7 = cSVFormat2.isEscapeCharacterSet();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0362");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode2 = cSVFormat1.getDuplicateHeaderMode();
        boolean boolean3 = cSVFormat1.getTrailingDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode2 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode2.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0363");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        java.io.RandomAccessFile randomAccessFile6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setRandomAccessFile(randomAccessFile6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0364");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isNullStringSet();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\r\n" + "'", str2, "\r\n");
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0365");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.String[] strArray3 = cSVFormat0.getHeader();
        java.lang.String str4 = cSVFormat0.getDelimiterString();
        boolean boolean5 = cSVFormat0.getIgnoreEmptyLines();
        boolean boolean6 = cSVFormat0.getSkipHeaderRecord();
        boolean boolean7 = cSVFormat0.getTrim();
        boolean boolean8 = cSVFormat0.getAutoFlush();
        org.apache.commons.csv.CSVFormat.Builder builder9 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.lang.String str10 = cSVFormat0.toString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "," + "'", str4, ",");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str10, "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0366");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        int int8 = builder6.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder14 = builder6.setByteArray(byteArray13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder6.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder18 = builder6.setBufferSize((int) (byte) 0);
        java.nio.file.Path path19 = builder6.getPath();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder0.setPath(path19);
        java.nio.file.OpenOption[] openOptionArray21 = builder0.getOpenOptions();
        java.net.URI uRI22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder23 = builder0.setURI(uRI22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertArrayEquals(byteArray13, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(path19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(openOptionArray21);
        org.junit.Assert.assertArrayEquals(openOptionArray21, new java.nio.file.OpenOption[] {});
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0367");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setTrailingData(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder8.get();
        boolean boolean12 = cSVFormat11.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Builder builder13 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat11);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setAutoFlush(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0368");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setBufferSize((int) 'a');
        org.apache.commons.csv.CSVParser cSVParser8 = builder0.get();
        java.io.Writer writer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setWriter(writer9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(cSVParser8);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0369");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.String[] strArray3 = cSVFormat0.getHeader();
        java.lang.String str4 = cSVFormat0.getDelimiterString();
        boolean boolean5 = cSVFormat0.getIgnoreEmptyLines();
        boolean boolean6 = cSVFormat0.getSkipHeaderRecord();
        boolean boolean7 = cSVFormat0.getTrim();
        boolean boolean8 = cSVFormat0.getAutoFlush();
        org.apache.commons.csv.CSVFormat.Builder builder9 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setRecordSeparator("Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "," + "'", str4, ",");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0370");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MONGODB_CSV;
        boolean boolean1 = cSVFormat0.isNullStringSet();
        org.apache.commons.csv.CSVFormat.Builder builder2 = cSVFormat0.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        byte[] byteArray5 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder6 = builder3.setByteArray(byteArray5);
        org.apache.commons.csv.CSVParser.Builder builder8 = builder3.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder3.setBufferSize((int) 'a');
        java.nio.charset.Charset charset11 = builder10.getCharsetDefault();
        org.apache.commons.csv.CSVParser cSVParser12 = builder10.get();
        boolean boolean13 = cSVFormat0.equals((java.lang.Object) cSVParser12);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor14 = cSVParser12.iterator();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream15 = cSVParser12.stream();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertArrayEquals(byteArray5, new byte[] {});
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(cSVParser12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVRecordItor14);
        org.junit.Assert.assertNotNull(cSVRecordStream15);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0371");
        java.net.URL uRL0 = null;
        java.nio.charset.Charset charset1 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean3 = cSVFormat2.getSkipHeaderRecord();
        java.lang.String str4 = cSVFormat2.getRecordSeparator();
        boolean boolean5 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder6 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat2);
        boolean boolean7 = cSVFormat2.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat2.builder();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse(uRL0, charset1, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\n" + "'", str4, "\n");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0372");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        org.apache.commons.csv.CSVFormat.Predefined predefined3 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat4 = predefined3.getFormat();
        java.lang.String str5 = cSVFormat4.toString();
        boolean boolean6 = cSVFormat4.isEscapeCharacterSet();
        boolean boolean7 = cSVFormat2.equals((java.lang.Object) cSVFormat4);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + predefined3 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined3.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str5, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0373");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        int int1 = builder0.getBufferSizeDefault();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8192 + "'", int1 == 8192);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0374");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.MONGODB_CSV;
        boolean boolean2 = cSVFormat1.isNullStringSet();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0375");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder18.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder18.setLenientEof(false);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean28 = cSVFormat27.getSkipHeaderRecord();
        java.lang.String str29 = cSVFormat27.getRecordSeparator();
        boolean boolean30 = cSVFormat27.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder31 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat27);
        org.apache.commons.csv.QuoteMode quoteMode32 = null;
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setQuoteMode(quoteMode32);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder31.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray42 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder31.setHeaderComments(strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder31.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder45.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder45.setEscape('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        boolean boolean52 = cSVFormat51.getIgnoreHeaderCase();
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str58 = cSVFormat51.format(objArray57);
        java.lang.String str59 = cSVFormat51.getRecordSeparator();
        boolean boolean60 = cSVFormat51.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode61 = cSVFormat51.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder49.setQuoteMode(quoteMode61);
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder18.setQuoteMode(quoteMode61);
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder63.setRecordSeparator("\n");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\n" + "'", str29, "\n");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertArrayEquals(strArray42, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str58, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\r\n" + "'", str59, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + quoteMode61 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode61.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0376");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.String[] strArray3 = cSVFormat0.getHeader();
        java.lang.Appendable appendable4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat0.print(appendable4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNull(strArray3);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0377");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getIgnoreHeaderCase();
        boolean boolean3 = cSVFormat1.getLenientEof();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0378");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter4 = cSVFormat0.printer();
        boolean boolean5 = cSVFormat0.getIgnoreHeaderCase();
        boolean boolean6 = cSVFormat0.getTrim();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(cSVPrinter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0379");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        java.lang.String str3 = cSVFormat1.getDelimiterString();
        java.lang.String[] strArray4 = cSVFormat1.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean6 = cSVFormat5.getSkipHeaderRecord();
        java.lang.String str7 = cSVFormat5.getRecordSeparator();
        boolean boolean8 = cSVFormat5.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder9 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat5);
        org.apache.commons.csv.QuoteMode quoteMode10 = null;
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setQuoteMode(quoteMode10);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder9.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean15 = cSVFormat14.getSkipHeaderRecord();
        java.lang.String str16 = cSVFormat14.getRecordSeparator();
        boolean boolean17 = cSVFormat14.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder18 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat14);
        org.apache.commons.csv.QuoteMode quoteMode19 = null;
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setQuoteMode(quoteMode19);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray29 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder18.setHeaderComments(strArray29);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder9.setHeaderComments(strArray29);
        java.lang.String str32 = cSVFormat1.format((java.lang.Object[]) strArray29);
        org.apache.commons.csv.QuoteMode quoteMode33 = cSVFormat1.getQuoteMode();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVParser2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\t" + "'", str3, "\t");
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\n" + "'", str16, "\n");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertArrayEquals(strArray29, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"\t\thi!\t\"\r\n\"\t\t\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"" + "'", str32, "\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"\t\thi!\t\"\r\n\"\t\t\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"");
        org.junit.Assert.assertNull(quoteMode33);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0380");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        boolean boolean3 = cSVFormat1.isEscapeCharacterSet();
        boolean boolean4 = cSVFormat1.isQuoteCharacterSet();
        boolean boolean5 = cSVFormat1.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder6 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setNullString("Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0381");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isNullStringSet();
        java.io.Reader reader2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser3 = cSVFormat0.parse(reader2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0382");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.MONGODB_TSV;
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode22 = cSVFormat21.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder18.setDuplicateHeaderMode(duplicateHeaderMode22);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode22 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode22.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0383");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getIgnoreHeaderCase();
        boolean boolean3 = cSVFormat1.getTrim();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0384");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setQuote((java.lang.Character) ' ');
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder0.setIgnoreHeaderCase(false);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0385");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setRecordNumber(1L);
        java.net.URI uRI8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder9 = builder0.setURI(uRI8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0386");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setQuote((java.lang.Character) '#');
        java.sql.ResultSet resultSet23 = null;
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setHeader(resultSet23);
        org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean26 = cSVFormat25.getSkipHeaderRecord();
        java.lang.String str27 = cSVFormat25.getRecordSeparator();
        boolean boolean28 = cSVFormat25.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder29 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat25);
        org.apache.commons.csv.QuoteMode quoteMode30 = null;
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setQuoteMode(quoteMode30);
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder29.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean35 = cSVFormat34.getSkipHeaderRecord();
        java.lang.String str36 = cSVFormat34.getRecordSeparator();
        boolean boolean37 = cSVFormat34.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder38 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat34);
        org.apache.commons.csv.QuoteMode quoteMode39 = null;
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setQuoteMode(quoteMode39);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder38.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray49 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder38.setHeaderComments(strArray49);
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder29.setHeaderComments(strArray49);
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder24.setHeader(strArray49);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\n" + "'", str27, "\n");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\n" + "'", str36, "\n");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertArrayEquals(strArray49, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0387");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset15 = builder14.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder11.setCharset(charset15);
        java.nio.charset.Charset charset17 = builder11.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder0.setCharset(charset17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser19 = builder18.getUnchecked();
            org.junit.Assert.fail("Expected exception of type java.io.UncheckedIOException; message: java.nio.file.AccessDeniedException: ");
        } catch (java.io.UncheckedIOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0388");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setBufferSize((int) 'a');
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        org.apache.commons.csv.CSVParser cSVParser9 = builder7.get();
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier10 = builder7.asSupplier();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(cSVParser9);
        org.junit.Assert.assertNotNull(cSVParserSupplier10);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0389");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        java.lang.CharSequence charSequence5 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        byte[] byteArray8 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder9 = builder6.setByteArray(byteArray8);
        java.lang.CharSequence charSequence10 = builder6.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder6.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder13 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset14 = builder13.getCharsetDefault();
        int int15 = builder13.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder17 = builder13.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder21 = builder13.setByteArray(byteArray20);
        java.nio.charset.Charset charset22 = builder13.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder12.setCharset(charset22);
        org.apache.commons.csv.CSVParser.Builder builder24 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset25 = builder24.getCharsetDefault();
        int int26 = builder24.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder28 = builder24.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray31 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder32 = builder24.setByteArray(byteArray31);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder24.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder36 = builder24.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder38 = builder24.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder39 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset40 = builder39.getCharsetDefault();
        int int41 = builder39.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder39.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder47 = builder39.setByteArray(byteArray46);
        org.apache.commons.csv.CSVParser.Builder builder48 = builder38.setByteArray(byteArray46);
        org.apache.commons.csv.CSVParser.Builder builder49 = builder23.setByteArray(byteArray46);
        org.apache.commons.csv.CSVParser.Builder builder50 = builder0.setByteArray(byteArray46);
        java.net.URI uRI51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder52 = builder0.setURI(uRI51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertEquals("'" + charSequence5 + "' != '" + "" + "'", charSequence5, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertArrayEquals(byteArray8, new byte[] {});
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "" + "'", charSequence10, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8192 + "'", int15 == 8192);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertArrayEquals(byteArray20, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8192 + "'", int26 == 8192);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertArrayEquals(byteArray31, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8192 + "'", int41 == 8192);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertArrayEquals(byteArray46, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0390");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getIgnoreHeaderCase();
        boolean boolean2 = cSVFormat0.getTrim();
        java.lang.Character char3 = cSVFormat0.getEscapeCharacter();
        java.lang.Appendable appendable4 = null;
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean6 = cSVFormat5.getSkipHeaderRecord();
        java.lang.String str7 = cSVFormat5.getRecordSeparator();
        boolean boolean8 = cSVFormat5.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder9 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat5);
        org.apache.commons.csv.QuoteMode quoteMode10 = null;
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setQuoteMode(quoteMode10);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder9.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray20 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder9.setHeaderComments(strArray20);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder9.setCommentMarker('a');
        java.sql.ResultSetMetaData resultSetMetaData24 = null;
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setHeader(resultSetMetaData24);
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean27 = cSVFormat26.getSkipHeaderRecord();
        java.lang.String str28 = cSVFormat26.getRecordSeparator();
        boolean boolean29 = cSVFormat26.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder30 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat26);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder30.setCommentMarker('a');
        java.lang.String[] strArray37 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" };
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder30.setHeader(strArray37);
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder30.setNullString("");
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean42 = cSVFormat41.getSkipHeaderRecord();
        java.lang.String str43 = cSVFormat41.getRecordSeparator();
        boolean boolean44 = cSVFormat41.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder45 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat41);
        org.apache.commons.csv.QuoteMode quoteMode46 = null;
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder45.setQuoteMode(quoteMode46);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder45.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray56 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder45.setHeaderComments(strArray56);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder40.setHeader(strArray56);
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder23.setHeaderComments(strArray56);
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat0.printRecord(appendable4, (java.lang.Object[]) strArray56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertArrayEquals(strArray20, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\n" + "'", str28, "\n");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertArrayEquals(strArray37, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" });
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\n" + "'", str43, "\n");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertArrayEquals(strArray56, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0391");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        java.lang.Appendable appendable1 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat0.println(appendable1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0392");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVParser5.hasTrailerComment();
        java.lang.String str7 = cSVParser5.getFirstEndOfLine();
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = cSVParser5.getHeaderMap();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strMap8);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0393");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVParser5.hasTrailerComment();
        java.lang.String str7 = cSVParser5.getHeaderComment();
        long long8 = cSVParser5.getCurrentLineNumber();
        java.util.List<java.lang.String> strList9 = cSVParser5.getHeaderNames();
        java.util.Spliterator<java.lang.String> strSpliterator10 = strList9.spliterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strSpliterator10);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0394");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean4 = cSVFormat0.equals((java.lang.Object) (-1L));
        boolean boolean5 = cSVFormat0.getIgnoreEmptyLines();
        boolean boolean6 = cSVFormat0.getTrailingDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0395");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setTrailingData(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder8.get();
        boolean boolean12 = cSVFormat11.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Builder builder13 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat11);
        java.lang.Appendable appendable14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter15 = cSVFormat11.print(appendable14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0396");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setQuoteMode(quoteMode7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean12 = cSVFormat11.getSkipHeaderRecord();
        java.lang.String str13 = cSVFormat11.getRecordSeparator();
        boolean boolean14 = cSVFormat11.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat11);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode21 = cSVFormat20.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder17.setDuplicateHeaderMode(duplicateHeaderMode21);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder10.setDuplicateHeaderMode(duplicateHeaderMode21);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setTrim(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode21 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode21.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0397");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        java.io.InputStream inputStream7 = builder6.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        byte[] byteArray10 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder11 = builder8.setByteArray(byteArray10);
        java.nio.charset.Charset charset12 = builder8.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat14.builder();
        java.lang.String str16 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse(inputStream7, charset12, cSVFormat14);
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset19 = builder18.getCharsetDefault();
        byte[] byteArray20 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder21 = builder18.setByteArray(byteArray20);
        java.lang.CharSequence charSequence22 = builder18.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder18.setBufferSize((int) ' ');
        java.io.InputStream inputStream25 = builder24.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder26 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset27 = builder26.getCharsetDefault();
        byte[] byteArray28 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder29 = builder26.setByteArray(byteArray28);
        java.nio.charset.Charset charset30 = builder26.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder33 = cSVFormat32.builder();
        java.lang.String str34 = cSVFormat32.getNullString();
        org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse(inputStream25, charset30, cSVFormat32);
        org.apache.commons.csv.CSVParser.Builder builder36 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset37 = builder36.getCharsetDefault();
        byte[] byteArray38 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder39 = builder36.setByteArray(byteArray38);
        org.apache.commons.csv.CSVParser.Builder builder41 = builder36.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder43 = builder36.setBufferSize((int) 'a');
        java.nio.charset.Charset charset44 = builder43.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat46 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVParser cSVParser47 = org.apache.commons.csv.CSVParser.parse(inputStream25, charset44, cSVFormat46);
        org.apache.commons.csv.CSVFormat.Predefined predefined49 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat50 = predefined49.getFormat();
        boolean boolean51 = cSVFormat50.getIgnoreHeaderCase();
        java.lang.String str52 = cSVFormat50.getDelimiterString();
        boolean boolean53 = cSVFormat50.isQuoteCharacterSet();
        org.apache.commons.csv.CSVParser cSVParser54 = org.apache.commons.csv.CSVParser.parse(",", cSVFormat50);
        org.apache.commons.csv.CSVParser cSVParser55 = org.apache.commons.csv.CSVParser.parse(inputStream7, charset44, cSVFormat50);
        java.lang.String str56 = cSVFormat50.getNullString();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertArrayEquals(byteArray10, new byte[] {});
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVParser17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertArrayEquals(byteArray20, new byte[] {});
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "" + "'", charSequence22, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertArrayEquals(byteArray28, new byte[] {});
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(cSVParser35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertArrayEquals(byteArray38, new byte[] {});
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(cSVParser47);
        org.junit.Assert.assertTrue("'" + predefined49 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined49.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "," + "'", str52, ",");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(cSVParser54);
        org.junit.Assert.assertNotNull(cSVParser55);
        org.junit.Assert.assertNull(str56);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0398");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat2.builder();
        org.apache.commons.csv.QuoteMode quoteMode4 = cSVFormat2.getQuoteMode();
        java.lang.String[] strArray5 = cSVFormat2.getHeader();
        org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        boolean boolean7 = cSVFormat2.getAllowMissingColumnNames();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(quoteMode4);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNotNull(cSVParser6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0399");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        java.io.InputStream inputStream7 = builder6.getInputStream();
        java.lang.Class<?> wildcardClass8 = builder6.getClass();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0400");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        boolean boolean4 = cSVFormat3.getAutoFlush();
        boolean boolean5 = cSVFormat3.getTrim();
        org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat3);
        boolean boolean7 = cSVFormat3.getTrailingData();
        java.lang.String str8 = cSVFormat3.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder9 = cSVFormat3.builder();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser12 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat3, 0L, (long) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(cSVParser6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\r\n" + "'", str8, "\r\n");
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0401");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder6.setIgnoreEmptyLines(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0402");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.getLenientEof();
        java.lang.String[] strArray2 = cSVFormat0.getHeader();
        boolean boolean3 = cSVFormat0.getIgnoreEmptyLines();
        boolean boolean4 = cSVFormat0.getIgnoreEmptyLines();
        boolean boolean5 = cSVFormat0.getTrailingData();
        java.lang.Appendable appendable6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter7 = cSVFormat0.print(appendable6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0403");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat2.builder();
        java.lang.String str4 = cSVFormat2.getNullString();
        boolean boolean5 = cSVFormat2.isQuoteCharacterSet();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser8 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat2, (long) 100, (long) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0404");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setIgnoreEmptyLines(false);
        java.sql.ResultSetMetaData resultSetMetaData11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setHeader(resultSetMetaData11);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setIgnoreEmptyLines(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0405");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.lang.String str6 = cSVParser5.getHeaderComment();
        long long7 = cSVParser5.getRecordNumber();
        boolean boolean8 = cSVParser5.isClosed();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVParser5.spliterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator9);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0406");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        boolean boolean3 = cSVFormat1.isEscapeCharacterSet();
        boolean boolean4 = cSVFormat1.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean6 = cSVFormat5.getSkipHeaderRecord();
        java.lang.String str7 = cSVFormat5.getRecordSeparator();
        boolean boolean8 = cSVFormat5.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder9 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat5);
        org.apache.commons.csv.QuoteMode quoteMode10 = null;
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setQuoteMode(quoteMode10);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder9.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray20 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder9.setHeaderComments(strArray20);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder9.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder23.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder23.setTrim(true);
        java.lang.Appendable appendable30 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat1.print((java.lang.Object) builder29, appendable30, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertArrayEquals(strArray20, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0407");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        java.lang.String str3 = cSVParser2.getFirstEndOfLine();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser2.spliterator();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream5 = cSVParser2.stream();
        java.util.List<java.lang.String> strList6 = cSVParser2.getHeaderNames();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVParser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator4);
        org.junit.Assert.assertNotNull(cSVRecordStream5);
        org.junit.Assert.assertNotNull(strList6);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0408");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setQuoteMode(quoteMode7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean12 = cSVFormat11.getSkipHeaderRecord();
        java.lang.String str13 = cSVFormat11.getRecordSeparator();
        boolean boolean14 = cSVFormat11.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat11);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode21 = cSVFormat20.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder17.setDuplicateHeaderMode(duplicateHeaderMode21);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder10.setDuplicateHeaderMode(duplicateHeaderMode21);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder10.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder10.setIgnoreHeaderCase(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode21 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode21.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0409");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        boolean boolean4 = cSVFormat3.getIgnoreHeaderCase();
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str10 = cSVFormat3.format(objArray9);
        java.lang.String str11 = cSVFormat0.format(objArray9);
        boolean boolean12 = cSVFormat0.isEscapeCharacterSet();
        java.lang.Character char13 = cSVFormat0.getQuoteCharacter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str10, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str11, "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + '\"' + "'", char13 == '\"');
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0410");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getIgnoreHeaderCase();
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str8 = cSVFormat1.format(objArray7);
        boolean boolean9 = cSVFormat1.getTrailingDelimiter();
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset11 = builder10.getCharsetDefault();
        int int12 = builder10.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder10.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder18 = builder10.setByteArray(byteArray17);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder10.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder22 = builder10.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder24 = builder10.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharacterOffset((long) '#');
        java.io.File file27 = builder26.getFile();
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset29 = builder28.getCharsetDefault();
        int int30 = builder28.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder28.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray35 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder36 = builder28.setByteArray(byteArray35);
        org.apache.commons.csv.CSVParser.Builder builder38 = builder28.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder39 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder41 = builder39.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder42 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset43 = builder42.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder44 = builder39.setCharset(charset43);
        java.nio.charset.Charset charset45 = builder39.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder46 = builder28.setCharset(charset45);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter47 = cSVFormat1.print(file27, charset45);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str8, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8192 + "'", int12 == 8192);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertNull("file27.getParent() == null", file27.getParent());
        org.junit.Assert.assertEquals(file27.toString(), "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8192 + "'", int30 == 8192);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertArrayEquals(byteArray35, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0411");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.lang.String str6 = cSVParser5.getHeaderComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream7 = cSVParser5.stream();
        boolean boolean8 = cSVParser5.hasHeaderComment();
        java.lang.String str9 = cSVParser5.getFirstEndOfLine();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(cSVRecordStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0412");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat9 = builder8.get();
        java.lang.String str10 = cSVFormat9.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean12 = cSVFormat11.getSkipHeaderRecord();
        java.lang.String str13 = cSVFormat11.getRecordSeparator();
        boolean boolean14 = cSVFormat11.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat11);
        org.apache.commons.csv.QuoteMode quoteMode16 = null;
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setQuoteMode(quoteMode16);
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder15.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray26 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder15.setHeaderComments(strArray26);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder15.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setRecordSeparator("");
        java.sql.ResultSet resultSet32 = null;
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder29.setHeader(resultSet32);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder29.setCommentMarker((java.lang.Character) 'a');
        java.lang.Appendable appendable36 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat9.print((java.lang.Object) 'a', appendable36, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertArrayEquals(strArray26, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0413");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        boolean boolean4 = cSVFormat0.isNullStringSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        boolean boolean8 = cSVFormat7.getAutoFlush();
        boolean boolean9 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat7);
        java.lang.String str11 = cSVParser10.getHeaderComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream12 = cSVParser10.stream();
        boolean boolean13 = cSVFormat0.equals((java.lang.Object) cSVParser10);
        boolean boolean14 = cSVParser10.isClosed();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream15 = cSVParser10.stream();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVRecordStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream15);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0414");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.String[] strArray3 = cSVFormat0.getHeader();
        java.lang.String str4 = cSVFormat0.getDelimiterString();
        boolean boolean5 = cSVFormat0.getIgnoreEmptyLines();
        boolean boolean6 = cSVFormat0.getSkipHeaderRecord();
        boolean boolean7 = cSVFormat0.getTrim();
        boolean boolean8 = cSVFormat0.getAutoFlush();
        org.apache.commons.csv.CSVFormat.Builder builder9 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        boolean boolean10 = cSVFormat0.isQuoteCharacterSet();
        boolean boolean11 = cSVFormat0.isQuoteCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "," + "'", str4, ",");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0415");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setBufferSize((int) 'a');
        java.nio.file.OpenOption[] openOptionArray8 = builder7.getOpenOptions();
        org.apache.commons.io.IORandomAccessFile iORandomAccessFile9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder10 = builder7.setRandomAccessFile(iORandomAccessFile9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(openOptionArray8);
        org.junit.Assert.assertArrayEquals(openOptionArray8, new java.nio.file.OpenOption[] {});
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0416");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) 1);
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        int int8 = builder6.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser11 = builder6.getUnchecked();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder6.setPath(",");
        java.nio.file.OpenOption[] openOptionArray14 = builder13.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder5.setOpenOptions(openOptionArray14);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Writer writer16 = builder15.getWriter();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8192 + "'", int3 == 8192);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVParser11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(openOptionArray14);
        org.junit.Assert.assertArrayEquals(openOptionArray14, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0417");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder15 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset16 = builder15.getCharsetDefault();
        int int17 = builder15.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder15.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder23 = builder15.setByteArray(byteArray22);
        org.apache.commons.csv.CSVParser.Builder builder24 = builder14.setByteArray(byteArray22);
        java.nio.charset.Charset charset25 = builder14.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder14.setBufferSize((java.lang.Integer) 8192);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder29 = builder14.setPath("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
            org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException; message: Illegal char <\"> at index 4: 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\"");
        } catch (java.nio.file.InvalidPathException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8192 + "'", int17 == 8192);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertArrayEquals(byteArray22, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0418");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setCommentMarker('#');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder4.setDelimiter('a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0419");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean10 = cSVFormat9.getSkipHeaderRecord();
        java.lang.String str11 = cSVFormat9.getRecordSeparator();
        boolean boolean12 = cSVFormat9.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder13 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat9);
        org.apache.commons.csv.QuoteMode quoteMode14 = null;
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setQuoteMode(quoteMode14);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray24 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder13.setHeaderComments(strArray24);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder4.setHeaderComments(strArray24);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder4.setRecordSeparator("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\n" + "'", str11, "\n");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertArrayEquals(strArray24, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0420");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.nio.charset.Charset charset4 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        int int9 = builder7.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder7.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder7.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder19 = builder7.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder7.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) '#');
        java.io.File file24 = builder23.getFile();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder6.setFile(file24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder6.setCharacterOffset((long) 10);
        int int28 = builder27.getBufferSizeDefault();
        java.io.RandomAccessFile randomAccessFile29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder30 = builder27.setRandomAccessFile(randomAccessFile29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8192 + "'", int28 == 8192);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0421");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setIgnoreEmptyLines(false);
        java.sql.ResultSetMetaData resultSetMetaData11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setHeader(resultSetMetaData11);
        java.sql.ResultSetMetaData resultSetMetaData13 = null;
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setHeader(resultSetMetaData13);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder10.setIgnoreSurroundingSpaces(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0422");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        boolean boolean2 = cSVFormat0.getTrim();
        boolean boolean3 = cSVFormat0.isNullStringSet();
        boolean boolean4 = cSVFormat0.isCommentMarkerSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0423");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.INFORMIX_UNLOAD_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.isNullStringSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.INFORMIX_UNLOAD_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.INFORMIX_UNLOAD_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0424");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setEscape('\"');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setTrailingData(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0425");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.nio.charset.Charset charset4 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        int int9 = builder7.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder7.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder7.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder19 = builder7.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder7.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) '#');
        java.io.File file24 = builder23.getFile();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder6.setFile(file24);
        java.util.function.IntUnaryOperator intUnaryOperator26 = null;
        org.apache.commons.csv.CSVParser.Builder builder27 = builder6.setBufferSizeChecker(intUnaryOperator26);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser28 = builder27.getUnchecked();
            org.junit.Assert.fail("Expected exception of type java.io.UncheckedIOException; message: java.nio.file.AccessDeniedException: ");
        } catch (java.io.UncheckedIOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0426");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.lang.String str6 = cSVParser5.getHeaderComment();
        java.lang.String str7 = cSVParser5.getTrailerComment();
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = cSVParser5.getHeaderMap();
        java.lang.String str9 = cSVParser5.getFirstEndOfLine();
        boolean boolean10 = cSVParser5.hasHeaderComment();
        long long11 = cSVParser5.getRecordNumber();
        boolean boolean12 = cSVParser5.hasTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0427");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        java.util.function.IntUnaryOperator intUnaryOperator13 = null;
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setBufferSizeChecker(intUnaryOperator13);
        java.nio.file.OpenOption[] openOptionArray15 = builder12.getOpenOptions();
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder17 = builder12.setOutputStream(outputStream16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(openOptionArray15);
        org.junit.Assert.assertArrayEquals(openOptionArray15, new java.nio.file.OpenOption[] {});
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0428");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setDelimiter('a');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setTrim(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode12 = cSVFormat11.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder10.setDuplicateHeaderMode(duplicateHeaderMode12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setIgnoreEmptyLines(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode12 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode12.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0429");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        boolean boolean2 = cSVFormat0.getLenientEof();
        boolean boolean3 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        boolean boolean8 = cSVFormat7.getIgnoreHeaderCase();
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str14 = cSVFormat7.format(objArray13);
        java.lang.String str15 = cSVFormat4.format(objArray13);
        java.lang.String str16 = cSVFormat0.format(objArray13);
        boolean boolean17 = cSVFormat0.getAllowMissingColumnNames();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str14, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str15, "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str16, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0430");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setLenientEof(true);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setAllowMissingColumnNames(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0431");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder4.setQuote('\"');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0432");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.String[] strArray3 = cSVFormat0.getHeader();
        java.lang.String str4 = cSVFormat0.getNullString();
        java.io.Reader reader5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser6 = cSVFormat0.parse(reader5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0433");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        org.apache.commons.csv.QuoteMode quoteMode3 = cSVFormat1.getQuoteMode();
        boolean boolean4 = cSVFormat1.isQuoteCharacterSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + quoteMode3 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode3.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0434");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setCharacterOffset((long) (byte) 1);
        int int15 = builder0.getBufferSize();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Reader reader16 = builder0.getReader();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8192 + "'", int15 == 8192);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0435");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        java.sql.ResultSet resultSet3 = null;
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setHeader(resultSet3);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.RFC4180 + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.RFC4180));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0436");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.INFORMIX_UNLOAD_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        boolean boolean3 = cSVFormat1.getIgnoreEmptyLines();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.INFORMIX_UNLOAD_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.INFORMIX_UNLOAD_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0437");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode3 = cSVFormat0.getDuplicateHeaderMode();
        java.lang.String str4 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat0.printer();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode3 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode3.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(cSVPrinter5);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0438");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset15 = builder14.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder11.setCharset(charset15);
        java.nio.charset.Charset charset17 = builder11.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder0.setCharset(charset17);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setFile("\t");
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
        org.apache.commons.csv.CSVParser.Builder builder23 = builder18.setFormat(cSVFormat22);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser24 = builder18.getUnchecked();
            org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException; message: Illegal char <?> at index 0: ?");
        } catch (java.nio.file.InvalidPathException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0439");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setBufferSize((java.lang.Integer) (-1));
        int int11 = builder10.getBufferSizeDefault();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8192 + "'", int11 == 8192);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0440");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder0.setEscape((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean6 = cSVFormat5.getSkipHeaderRecord();
        java.lang.String str7 = cSVFormat5.getRecordSeparator();
        boolean boolean8 = cSVFormat5.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder9 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat5);
        org.apache.commons.csv.QuoteMode quoteMode10 = null;
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setQuoteMode(quoteMode10);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder9.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray20 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder9.setHeaderComments(strArray20);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setLenientEof(true);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder21.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder21.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode30 = cSVFormat29.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder21.setDuplicateHeaderMode(duplicateHeaderMode30);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder0.setDuplicateHeaderMode(duplicateHeaderMode30);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertArrayEquals(strArray20, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode30 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode30.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0441");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean5 = cSVFormat4.getSkipHeaderRecord();
        java.lang.String str6 = cSVFormat4.getRecordSeparator();
        boolean boolean7 = cSVFormat4.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder8 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat4);
        boolean boolean9 = cSVFormat0.equals((java.lang.Object) cSVFormat4);
        java.lang.String str10 = cSVFormat4.toString();
        java.lang.String str11 = cSVFormat4.getNullString();
        java.lang.Appendable appendable12 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat4.println(appendable12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str10, "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0442");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        java.lang.String str3 = cSVParser2.getFirstEndOfLine();
        long long4 = cSVParser2.getCurrentLineNumber();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor5 = cSVParser2.iterator();
        long long6 = cSVParser2.getCurrentLineNumber();
        java.lang.String str7 = cSVParser2.getTrailerComment();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVParser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordItor5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0443");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        java.lang.String str3 = cSVParser2.getFirstEndOfLine();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser2.spliterator();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream5 = cSVParser2.stream();
        boolean boolean6 = cSVParser2.hasTrailerComment();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVParser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator4);
        org.junit.Assert.assertNotNull(cSVRecordStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0444");
        java.net.URL uRL0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = builder1.setBufferSize((java.lang.Integer) 100);
        int int4 = builder3.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset6 = builder5.getCharsetDefault();
        byte[] byteArray7 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder8 = builder5.setByteArray(byteArray7);
        java.lang.CharSequence charSequence9 = builder5.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder5.setBufferSize((int) ' ');
        java.io.InputStream inputStream12 = builder11.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder13 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset14 = builder13.getCharsetDefault();
        byte[] byteArray15 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder16 = builder13.setByteArray(byteArray15);
        java.nio.charset.Charset charset17 = builder13.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder20 = cSVFormat19.builder();
        java.lang.String str21 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse(inputStream12, charset17, cSVFormat19);
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset24 = builder23.getCharsetDefault();
        byte[] byteArray25 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder26 = builder23.setByteArray(byteArray25);
        org.apache.commons.csv.CSVParser.Builder builder28 = builder23.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder30 = builder23.setBufferSize((int) 'a');
        java.nio.charset.Charset charset31 = builder30.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVParser cSVParser34 = org.apache.commons.csv.CSVParser.parse(inputStream12, charset31, cSVFormat33);
        org.apache.commons.csv.CSVParser.Builder builder35 = builder3.setCharset(charset31);
        org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVPrinter cSVPrinter37 = cSVFormat36.printer();
        boolean boolean38 = cSVFormat36.getTrim();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser39 = org.apache.commons.csv.CSVParser.parse(uRL0, charset31, cSVFormat36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 100 + "'", int4 == 100);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "" + "'", charSequence9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertArrayEquals(byteArray15, new byte[] {});
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(cSVParser22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertArrayEquals(byteArray25, new byte[] {});
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(cSVParser34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNotNull(cSVPrinter37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0445");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode2 = cSVFormat1.getDuplicateHeaderMode();
        java.io.Reader reader3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser4 = cSVFormat1.parse(reader3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode2 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode2.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0446");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeaderComments();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        java.lang.String str3 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset5 = builder4.getCharsetDefault();
        byte[] byteArray6 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder7 = builder4.setByteArray(byteArray6);
        java.lang.CharSequence charSequence8 = builder4.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder4.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder12 = builder4.setRecordNumber((long) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder13 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset14 = builder13.getCharsetDefault();
        byte[] byteArray15 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder16 = builder13.setByteArray(byteArray15);
        org.apache.commons.csv.CSVParser.Builder builder18 = builder13.setBufferSize((int) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray19 = new java.nio.file.OpenOption[] {};
        org.apache.commons.csv.CSVParser.Builder builder20 = builder13.setOpenOptions(openOptionArray19);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder12.setOpenOptions(openOptionArray19);
        boolean boolean22 = cSVFormat0.equals((java.lang.Object) builder12);
        boolean boolean23 = cSVFormat0.getTrailingData();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] {});
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "" + "'", charSequence8, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertArrayEquals(byteArray15, new byte[] {});
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(openOptionArray19);
        org.junit.Assert.assertArrayEquals(openOptionArray19, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0447");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setBufferSize((int) 'a');
        org.apache.commons.csv.CSVParser.Builder builder9 = builder0.setCharacterOffset((long) 0);
        java.net.URI uRI10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder11 = builder0.setURI(uRI10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0448");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        boolean boolean2 = cSVFormat0.getLenientEof();
        boolean boolean3 = cSVFormat0.getIgnoreSurroundingSpaces();
        java.lang.String str4 = cSVFormat0.getRecordSeparator();
        java.lang.String str5 = cSVFormat0.toString();
        org.apache.commons.csv.QuoteMode quoteMode6 = cSVFormat0.getQuoteMode();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\r\n" + "'", str4, "\r\n");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false" + "'", str5, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNull(quoteMode6);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0449");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getIgnoreHeaderCase();
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str8 = cSVFormat1.format(objArray7);
        java.lang.String str9 = cSVFormat1.getRecordSeparator();
        java.lang.Appendable appendable10 = null;
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean12 = cSVFormat11.getSkipHeaderRecord();
        java.lang.String str13 = cSVFormat11.getRecordSeparator();
        boolean boolean14 = cSVFormat11.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat11);
        java.sql.ResultSetMetaData resultSetMetaData16 = null;
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setHeader(resultSetMetaData16);
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean19 = cSVFormat18.getSkipHeaderRecord();
        java.lang.String str20 = cSVFormat18.getRecordSeparator();
        boolean boolean21 = cSVFormat18.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder22 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat18);
        org.apache.commons.csv.QuoteMode quoteMode23 = null;
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setQuoteMode(quoteMode23);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder22.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray33 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder22.setHeaderComments(strArray33);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder17.setHeaderComments(strArray33);
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat1.printRecord(appendable10, (java.lang.Object[]) strArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str8, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\r\n" + "'", str9, "\r\n");
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\n" + "'", str20, "\n");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertArrayEquals(strArray33, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0450");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        int int9 = builder7.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder7.setByteArray(byteArray14);
        java.nio.charset.Charset charset16 = builder7.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder17 = builder6.setCharset(charset16);
        // The following exception was thrown during execution in test generation
        try {
            java.io.RandomAccessFile randomAccessFile18 = builder6.getRandomAccessFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getFile() for byte[] origin [B@6703213b");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0451");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 100);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setOutputStream(outputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0452");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MONGODB_CSV;
        boolean boolean1 = cSVFormat0.isNullStringSet();
        org.apache.commons.csv.CSVFormat.Builder builder2 = cSVFormat0.builder();
        boolean boolean3 = cSVFormat0.getIgnoreEmptyLines();
        java.lang.String[] strArray4 = cSVFormat0.getHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(strArray4);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0453");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        java.lang.String str3 = cSVParser2.getFirstEndOfLine();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser2.spliterator();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser2.spliterator();
        long long6 = cSVParser2.getCurrentLineNumber();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVParser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator4);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0454");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 100);
        java.net.URI uRI9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setURI(uRI9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0455");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setEscape('\"');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setDelimiter("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be a line break");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0456");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharacterOffset((long) '#');
        java.io.File file17 = builder16.getFile();
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset19 = builder18.getCharsetDefault();
        int int20 = builder18.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder18.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder26 = builder18.setByteArray(byteArray25);
        org.apache.commons.csv.CSVParser.Builder builder28 = builder18.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder30 = builder18.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder32 = builder18.setCharacterOffset((long) (byte) 1);
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 100, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder37 = builder32.setByteArray(byteArray36);
        org.apache.commons.csv.CSVParser.Builder builder38 = builder16.setByteArray(byteArray36);
        org.apache.commons.io.IORandomAccessFile iORandomAccessFile39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder40 = builder16.setRandomAccessFile(iORandomAccessFile39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8192 + "'", int20 == 8192);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertArrayEquals(byteArray25, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertArrayEquals(byteArray36, new byte[] { (byte) -1, (byte) 100, (byte) 1 });
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0457");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setBufferSize((int) 'a');
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        org.apache.commons.csv.CSVParser cSVParser9 = builder7.get();
        long long10 = cSVParser9.getRecordNumber();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(cSVParser9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0458");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset15 = builder14.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder11.setCharset(charset15);
        java.nio.charset.Charset charset17 = builder11.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder0.setCharset(charset17);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setFile("\t");
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
        org.apache.commons.csv.CSVParser.Builder builder23 = builder18.setFormat(cSVFormat22);
        boolean boolean24 = cSVFormat22.isQuoteCharacterSet();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0459");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setCharacterOffset((long) (byte) 100);
        java.nio.file.OpenOption[] openOptionArray15 = builder0.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder17 = builder0.setPath("a");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(openOptionArray15);
        org.junit.Assert.assertArrayEquals(openOptionArray15, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0460");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setDelimiter('\"');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setQuote((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setTrim(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0461");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        byte[] byteArray9 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder10 = builder7.setByteArray(byteArray9);
        java.lang.CharSequence charSequence11 = builder7.getCharSequence();
        java.lang.CharSequence charSequence12 = builder7.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser13 = builder7.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray14 = builder7.getOpenOptions();
        java.nio.charset.Charset charset15 = builder7.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder0.setCharset(charset15);
        java.io.InputStream inputStream17 = builder16.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset19 = builder18.getCharsetDefault();
        byte[] byteArray20 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder21 = builder18.setByteArray(byteArray20);
        java.lang.CharSequence charSequence22 = builder18.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder18.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder25 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset26 = builder25.getCharsetDefault();
        byte[] byteArray27 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder28 = builder25.setByteArray(byteArray27);
        java.lang.CharSequence charSequence29 = builder25.getCharSequence();
        java.lang.CharSequence charSequence30 = builder25.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser31 = builder25.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray32 = builder25.getOpenOptions();
        java.nio.charset.Charset charset33 = builder25.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder34 = builder18.setCharset(charset33);
        java.io.InputStream inputStream35 = builder34.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder36 = builder16.setInputStream(inputStream35);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "" + "'", charSequence11, "");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertNotNull(cSVParser13);
        org.junit.Assert.assertNotNull(openOptionArray14);
        org.junit.Assert.assertArrayEquals(openOptionArray14, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertArrayEquals(byteArray20, new byte[] {});
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "" + "'", charSequence22, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertArrayEquals(byteArray27, new byte[] {});
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "" + "'", charSequence29, "");
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "" + "'", charSequence30, "");
        org.junit.Assert.assertNotNull(cSVParser31);
        org.junit.Assert.assertNotNull(openOptionArray32);
        org.junit.Assert.assertArrayEquals(openOptionArray32, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(inputStream35);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0462");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setDelimiter('a');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setIgnoreHeaderCase(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0463");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset10 = builder9.getCharsetDefault();
        byte[] byteArray11 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder12 = builder9.setByteArray(byteArray11);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder9.setBufferSize((int) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray15 = new java.nio.file.OpenOption[] {};
        org.apache.commons.csv.CSVParser.Builder builder16 = builder9.setOpenOptions(openOptionArray15);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder8.setOpenOptions(openOptionArray15);
        java.nio.file.OpenOption[] openOptionArray18 = builder17.getOpenOptions();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertArrayEquals(byteArray11, new byte[] {});
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(openOptionArray15);
        org.junit.Assert.assertArrayEquals(openOptionArray15, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(openOptionArray18);
        org.junit.Assert.assertArrayEquals(openOptionArray18, new java.nio.file.OpenOption[] {});
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0464");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setTrim(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean10 = cSVFormat9.getSkipHeaderRecord();
        java.lang.String str11 = cSVFormat9.getRecordSeparator();
        boolean boolean12 = cSVFormat9.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder13 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat9);
        org.apache.commons.csv.QuoteMode quoteMode14 = null;
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setQuoteMode(quoteMode14);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray24 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder13.setHeaderComments(strArray24);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder13.setCommentMarker('a');
        java.sql.ResultSetMetaData resultSetMetaData28 = null;
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setHeader(resultSetMetaData28);
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean31 = cSVFormat30.getSkipHeaderRecord();
        java.lang.String str32 = cSVFormat30.getRecordSeparator();
        boolean boolean33 = cSVFormat30.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder34 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat30);
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setCommentMarker('a');
        java.lang.String[] strArray41 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" };
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder34.setHeader(strArray41);
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder34.setNullString("");
        org.apache.commons.csv.CSVFormat cSVFormat45 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean46 = cSVFormat45.getSkipHeaderRecord();
        java.lang.String str47 = cSVFormat45.getRecordSeparator();
        boolean boolean48 = cSVFormat45.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder49 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat45);
        org.apache.commons.csv.QuoteMode quoteMode50 = null;
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder49.setQuoteMode(quoteMode50);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder49.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray60 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder49.setHeaderComments(strArray60);
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder44.setHeader(strArray60);
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder27.setHeaderComments(strArray60);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder8.setHeaderComments((java.lang.Object[]) strArray60);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\n" + "'", str11, "\n");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertArrayEquals(strArray24, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\n" + "'", str32, "\n");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertArrayEquals(strArray41, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" });
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\n" + "'", str47, "\n");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertArrayEquals(strArray60, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0465");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        java.lang.CharSequence charSequence5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setCharSequence(charSequence5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0466");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.String[] strArray3 = cSVFormat0.getHeader();
        java.lang.String str4 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder5 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.lang.Appendable appendable6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter7 = cSVFormat0.print(appendable6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0467");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getAutoFlush();
        boolean boolean3 = cSVFormat1.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter4 = cSVFormat1.printer();
        java.io.Reader reader5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser6 = cSVFormat1.parse(reader5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(cSVPrinter4);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0468");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setLenientEof(true);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setIgnoreEmptyLines(true);
        java.lang.String[] strArray21 = null;
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setHeader(strArray21);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setDelimiter('a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0469");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setRecordNumber(1L);
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setBufferSize((java.lang.Integer) (-1));
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0470");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser5 = builder0.getUnchecked();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setPath(",");
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        boolean boolean10 = cSVFormat9.isCommentMarkerSet();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder0.setFormat(cSVFormat9);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setPath("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException; message: Illegal char <<> at index 10: Delimiter=<,> QuoteChar=<\"> RecordSeparator=<??> SkipHeaderRecord:false");
        } catch (java.nio.file.InvalidPathException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0471");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setLenientEof(true);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder16.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder16.setAutoFlush(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0472");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setEscape('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        boolean boolean25 = cSVFormat24.getIgnoreHeaderCase();
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str31 = cSVFormat24.format(objArray30);
        java.lang.String str32 = cSVFormat24.getRecordSeparator();
        boolean boolean33 = cSVFormat24.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode34 = cSVFormat24.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder22.setQuoteMode(quoteMode34);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setLenientEof(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str31, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\r\n" + "'", str32, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + quoteMode34 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode34.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0473");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getIgnoreHeaderCase();
        java.lang.String str4 = cSVFormat2.getDelimiterString();
        boolean boolean5 = cSVFormat2.isQuoteCharacterSet();
        org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse(",", cSVFormat2);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor7 = cSVParser6.iterator();
        java.lang.String str8 = cSVParser6.getTrailerComment();
        long long9 = cSVParser6.getCurrentLineNumber();
        boolean boolean10 = cSVParser6.hasTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "," + "'", str4, ",");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVParser6);
        org.junit.Assert.assertNotNull(cSVRecordItor7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0474");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser5 = builder0.getUnchecked();
        java.lang.CharSequence charSequence6 = builder0.getCharSequence();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file7 = builder0.getFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CharSequenceOrigin#getFile() for String origin \"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\"");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", charSequence6, "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0475");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setCharacterOffset((long) (byte) 1);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder0.setBufferSizeMax(1);
        // The following exception was thrown during execution in test generation
        try {
            java.io.RandomAccessFile randomAccessFile17 = builder16.getRandomAccessFile();
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0476");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean2 = cSVFormat1.getSkipHeaderRecord();
        java.lang.String str3 = cSVFormat1.getRecordSeparator();
        boolean boolean4 = cSVFormat1.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder5 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        boolean boolean6 = cSVFormat1.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat.Builder builder7 = cSVFormat1.builder();
        java.lang.Character char8 = cSVFormat1.getEscapeCharacter();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(char8);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0477");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        java.nio.file.Path path13 = builder0.getPath();
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset15 = builder14.getCharsetDefault();
        int int16 = builder14.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder14.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder22 = builder14.setByteArray(byteArray21);
        org.apache.commons.csv.CSVParser.Builder builder24 = builder14.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder26 = builder14.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder28 = builder14.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder29 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset30 = builder29.getCharsetDefault();
        int int31 = builder29.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder29.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder37 = builder29.setByteArray(byteArray36);
        org.apache.commons.csv.CSVParser.Builder builder38 = builder28.setByteArray(byteArray36);
        java.nio.charset.Charset charset39 = builder28.getCharsetDefault();
        org.apache.commons.csv.CSVFormat.Predefined predefined40 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_TSV;
        org.apache.commons.csv.CSVFormat cSVFormat41 = predefined40.getFormat();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse(path13, charset39, cSVFormat41);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8192 + "'", int16 == 8192);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertArrayEquals(byteArray21, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8192 + "'", int31 == 8192);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertArrayEquals(byteArray36, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertTrue("'" + predefined40 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_TSV + "'", predefined40.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_TSV));
        org.junit.Assert.assertNotNull(cSVFormat41);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0478");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder2.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setBufferSizeMax((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path6 = builder2.getPath();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0479");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 100);
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset10 = builder9.getCharsetDefault();
        int int11 = builder9.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder9.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder17 = builder9.setByteArray(byteArray16);
        java.nio.charset.Charset charset18 = builder9.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder8.setCharset(charset18);
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file20 = builder8.getFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getFile() for byte[] origin [B@7e5114d4");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8192 + "'", int11 == 8192);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertArrayEquals(byteArray16, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0480");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.isCommentMarkerSet();
        java.lang.String str3 = cSVFormat1.getNullString();
        boolean boolean4 = cSVFormat1.getTrailingData();
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        java.lang.String str6 = cSVFormat1.getNullString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0481");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getAutoFlush();
        boolean boolean3 = cSVFormat1.getTrim();
        java.lang.String str4 = cSVFormat1.getNullString();
        java.lang.String[] strArray5 = cSVFormat1.getHeader();
        java.lang.Object[] objArray6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = cSVFormat1.format(objArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(strArray5);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0482");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setLenientEof(true);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setDelimiter('#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0483");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getIgnoreHeaderCase();
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str8 = cSVFormat1.format(objArray7);
        boolean boolean9 = cSVFormat1.getTrim();
        java.lang.String str10 = cSVFormat1.getRecordSeparator();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str8, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\r\n" + "'", str10, "\r\n");
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0484");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        java.lang.CharSequence charSequence5 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser6 = builder0.getUnchecked();
        // The following exception was thrown during execution in test generation
        try {
            java.io.RandomAccessFile randomAccessFile7 = builder0.getRandomAccessFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getFile() for byte[] origin [B@34816968");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertEquals("'" + charSequence5 + "' != '" + "" + "'", charSequence5, "");
        org.junit.Assert.assertNotNull(cSVParser6);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0485");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getAutoFlush();
        org.apache.commons.csv.QuoteMode quoteMode3 = cSVFormat1.getQuoteMode();
        boolean boolean4 = cSVFormat1.getIgnoreEmptyLines();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat1.getDuplicateHeaderMode();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + quoteMode3 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode3.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0486");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        java.util.function.IntUnaryOperator intUnaryOperator13 = null;
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setBufferSizeChecker(intUnaryOperator13);
        java.nio.file.Path path15 = builder14.getPath();
        org.apache.commons.csv.CSVParser.Builder builder16 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset17 = builder16.getCharsetDefault();
        byte[] byteArray18 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder19 = builder16.setByteArray(byteArray18);
        java.lang.CharSequence charSequence20 = builder16.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder16.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder24 = builder16.setRecordNumber((long) (byte) 100);
        org.apache.commons.csv.CSVParser.Builder builder25 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset26 = builder25.getCharsetDefault();
        int int27 = builder25.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder25.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder33 = builder25.setByteArray(byteArray32);
        java.nio.charset.Charset charset34 = builder25.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder24.setCharset(charset34);
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        java.lang.String str38 = cSVFormat37.toString();
        boolean boolean39 = cSVFormat37.isEscapeCharacterSet();
        boolean boolean40 = cSVFormat37.isQuoteCharacterSet();
        java.lang.Character char41 = cSVFormat37.getCommentMarker();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser42 = org.apache.commons.csv.CSVParser.parse(path15, charset34, cSVFormat37);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(path15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] {});
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "" + "'", charSequence20, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8192 + "'", int27 == 8192);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertArrayEquals(byteArray32, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str38, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(char41);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0487");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setCharacterOffset((long) (byte) 100);
        int int15 = builder0.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder16 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset17 = builder16.getCharsetDefault();
        byte[] byteArray18 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder19 = builder16.setByteArray(byteArray18);
        java.lang.CharSequence charSequence20 = builder16.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder16.setBufferSize((int) ' ');
        java.io.InputStream inputStream23 = builder22.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder0.setInputStream(inputStream23);
        java.net.URI uRI25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setURI(uRI25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8192 + "'", int15 == 8192);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] {});
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "" + "'", charSequence20, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0488");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        org.apache.commons.csv.CSVFormat.Builder builder1 = cSVFormat0.builder();
        boolean boolean2 = cSVFormat0.getTrailingData();
        boolean boolean3 = cSVFormat0.getSkipHeaderRecord();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0489");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        boolean boolean3 = cSVFormat1.isEscapeCharacterSet();
        boolean boolean4 = cSVFormat1.isQuoteCharacterSet();
        java.lang.String[] strArray5 = cSVFormat1.getHeader();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(strArray5);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0490");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream9 = builder0.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getPath() for byte[] origin [B@5927243e");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0491");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) 1);
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        int int8 = builder6.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser11 = builder6.getUnchecked();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder6.setPath(",");
        java.nio.file.OpenOption[] openOptionArray14 = builder13.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder5.setOpenOptions(openOptionArray14);
        org.apache.commons.csv.CSVParser.Builder builder16 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset17 = builder16.getCharsetDefault();
        int int18 = builder16.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder16.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder24 = builder16.setByteArray(byteArray23);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder16.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder28 = builder16.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder30 = builder16.setCharacterOffset((long) (byte) 1);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 100, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder35 = builder30.setByteArray(byteArray34);
        java.io.InputStream inputStream36 = builder35.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder37 = builder5.setInputStream(inputStream36);
        org.apache.commons.csv.CSVParser.Builder builder38 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset39 = builder38.getCharsetDefault();
        int int40 = builder38.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder42 = builder38.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder46 = builder38.setByteArray(byteArray45);
        org.apache.commons.csv.CSVParser.Builder builder48 = builder38.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder50 = builder38.setBufferSize((int) (byte) 0);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier51 = builder38.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder52 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder54 = builder52.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder55 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset56 = builder55.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder57 = builder52.setCharset(charset56);
        java.nio.charset.Charset charset58 = builder52.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder59 = builder38.setCharset(charset58);
        org.apache.commons.csv.CSVParser.Builder builder60 = builder37.setCharset(charset58);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8192 + "'", int3 == 8192);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVParser11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(openOptionArray14);
        org.junit.Assert.assertArrayEquals(openOptionArray14, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8192 + "'", int18 == 8192);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertArrayEquals(byteArray23, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertArrayEquals(byteArray34, new byte[] { (byte) -1, (byte) 100, (byte) 1 });
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8192 + "'", int40 == 8192);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertArrayEquals(byteArray45, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(cSVParserSupplier51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0492");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.nio.charset.Charset charset4 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        int int9 = builder7.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder7.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder7.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder19 = builder7.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder7.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) '#');
        java.io.File file24 = builder23.getFile();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder6.setFile(file24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder6.setCharacterOffset((long) 10);
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset32 = builder31.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder28.setCharset(charset32);
        java.nio.charset.Charset charset34 = builder28.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder27.setCharset(charset34);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Reader reader36 = builder27.getReader();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0493");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        java.util.function.IntUnaryOperator intUnaryOperator13 = null;
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setBufferSizeChecker(intUnaryOperator13);
        int int15 = builder14.getBufferSize();
        java.nio.file.OpenOption[] openOptionArray16 = builder14.getOpenOptions();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8192 + "'", int15 == 8192);
        org.junit.Assert.assertNotNull(openOptionArray16);
        org.junit.Assert.assertArrayEquals(openOptionArray16, new java.nio.file.OpenOption[] {});
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0494");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setRecordNumber((long) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence3 = builder2.getCharSequence();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0495");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean10 = cSVFormat9.getSkipHeaderRecord();
        java.lang.String str11 = cSVFormat9.getRecordSeparator();
        boolean boolean12 = cSVFormat9.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder13 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat9);
        org.apache.commons.csv.QuoteMode quoteMode14 = null;
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setQuoteMode(quoteMode14);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray24 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder13.setHeaderComments(strArray24);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder4.setHeaderComments(strArray24);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setRecordSeparator('4');
        org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean30 = cSVFormat29.getSkipHeaderRecord();
        java.lang.String str31 = cSVFormat29.getRecordSeparator();
        boolean boolean32 = cSVFormat29.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder33 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat29);
        org.apache.commons.csv.QuoteMode quoteMode34 = null;
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setQuoteMode(quoteMode34);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder33.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray44 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder33.setHeaderComments(strArray44);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder33.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder47.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder47.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder47.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean55 = cSVFormat54.getSkipHeaderRecord();
        java.lang.String str56 = cSVFormat54.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode57 = cSVFormat54.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder47.setDuplicateHeaderMode(duplicateHeaderMode57);
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder26.setDuplicateHeaderMode(duplicateHeaderMode57);
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder59.setRecordSeparator('a');
        java.sql.ResultSet resultSet62 = null;
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder59.setHeader(resultSet62);
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder59.setCommentMarker((java.lang.Character) ' ');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\n" + "'", str11, "\n");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertArrayEquals(strArray24, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\n" + "'", str31, "\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertArrayEquals(strArray44, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\n" + "'", str56, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode57 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode57.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0496");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        java.util.function.IntUnaryOperator intUnaryOperator13 = null;
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setBufferSizeChecker(intUnaryOperator13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder12.setCharacterOffset((long) (byte) 10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0497");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        boolean boolean1 = cSVFormat0.getAllowMissingColumnNames();
        boolean boolean2 = cSVFormat0.isQuoteCharacterSet();
        org.apache.commons.csv.CSVPrinter cSVPrinter3 = cSVFormat0.printer();
        java.io.Reader reader4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser5 = cSVFormat0.parse(reader4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(cSVPrinter3);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0498");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharacterOffset((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder18 = builder14.setCharacterOffset((long) 'a');
        java.nio.charset.Charset charset19 = builder14.getCharset();
        int int20 = builder14.getBufferSizeDefault();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8192 + "'", int20 == 8192);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0499");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        boolean boolean13 = cSVFormat12.getIgnoreHeaderCase();
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str19 = cSVFormat12.format(objArray18);
        java.lang.String str20 = cSVFormat12.getRecordSeparator();
        boolean boolean21 = cSVFormat12.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode22 = cSVFormat12.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder4.setQuoteMode(quoteMode22);
        org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        org.apache.commons.csv.QuoteMode quoteMode26 = cSVFormat25.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean28 = cSVFormat27.getSkipHeaderRecord();
        java.lang.String str29 = cSVFormat27.getRecordSeparator();
        boolean boolean30 = cSVFormat27.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder31 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat27);
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode34 = null;
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setQuoteMode(quoteMode34);
        java.lang.String[] strArray39 = new java.lang.String[] { "\r\n", "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]", "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder35.setHeader(strArray39);
        java.lang.String str41 = cSVFormat25.format((java.lang.Object[]) strArray39);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder4.setHeader(strArray39);
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder4.setIgnoreSurroundingSpaces(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str19, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\r\n" + "'", str20, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + quoteMode22 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode22.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(quoteMode26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\n" + "'", str29, "\n");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertArrayEquals(strArray39, new java.lang.String[] { "\r\n", "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]", "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" });
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\r\n\"Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]\"Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str41, "\r\n\"Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]\"Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest0.test0500");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        boolean boolean3 = cSVFormat1.isEscapeCharacterSet();
        boolean boolean4 = cSVFormat1.getTrailingDelimiter();
        java.lang.String str5 = cSVFormat1.toString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str5, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
    }
}

