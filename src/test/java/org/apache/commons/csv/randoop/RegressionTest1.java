package org.apache.commons.csv.randoop;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    public void assertBooleanArrayEquals(boolean[] expectedArray, boolean[] actualArray) {
        if (expectedArray.length != actualArray.length) {
            throw new AssertionError("Array lengths differ: " + expectedArray.length + " != " + actualArray.length);
        }
        for (int i = 0; i < expectedArray.length; i++) {
            if (expectedArray[i] != actualArray[i]) {
                throw new AssertionError("Arrays differ at index " + i + ": " + expectedArray[i] + " != " + actualArray[i]);
            }
        }
    }

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0501");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
        boolean boolean2 = cSVFormat1.getTrim();
        java.lang.String str3 = cSVFormat1.getRecordSeparator();
        boolean boolean4 = cSVFormat1.getAutoFlush();
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat1.printer();
        org.apache.commons.csv.QuoteMode quoteMode6 = cSVFormat1.getQuoteMode();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertNull(quoteMode6);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0502");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        java.lang.String str9 = cSVFormat7.getRecordSeparator();
        boolean boolean10 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat7);
        org.apache.commons.csv.QuoteMode quoteMode12 = null;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuoteMode(quoteMode12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray22 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder11.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder6.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder6.setQuote('#');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setEscape((java.lang.Character) '\"');
        java.sql.ResultSet resultSet29 = null;
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setHeader(resultSet29);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertArrayEquals(strArray22, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0503");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        java.nio.charset.Charset charset2 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setBufferSize((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser5 = builder0.get();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0504");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setCommentMarker('a');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder20 = builder16.setDelimiter("\r\n");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be a line break");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0505");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        java.lang.String str3 = cSVParser2.getFirstEndOfLine();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator4 = cSVParser2.spliterator();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream5 = cSVParser2.stream();
        boolean boolean6 = cSVParser2.isClosed();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVParser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator4);
        org.junit.Assert.assertNotNull(cSVRecordStream5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0506");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        java.lang.String str9 = cSVFormat7.getRecordSeparator();
        boolean boolean10 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat7);
        org.apache.commons.csv.QuoteMode quoteMode12 = null;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuoteMode(quoteMode12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray22 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder11.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder6.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder6.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder6.setRecordSeparator("\r\n#Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]#Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setDelimiter('4');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertArrayEquals(strArray22, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0507");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setEscape('a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setAutoFlush(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0508");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setDelimiter('#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0509");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        java.lang.CharSequence charSequence5 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        byte[] byteArray8 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder9 = builder6.setByteArray(byteArray8);
        java.lang.CharSequence charSequence10 = builder6.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder6.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder13 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset14 = builder13.getCharsetDefault();
        int int15 = builder13.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder17 = builder13.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder21 = builder13.setByteArray(byteArray20);
        java.nio.charset.Charset charset22 = builder13.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder12.setCharset(charset22);
        org.apache.commons.csv.CSVParser.Builder builder24 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset25 = builder24.getCharsetDefault();
        int int26 = builder24.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder28 = builder24.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray31 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder32 = builder24.setByteArray(byteArray31);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder24.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder36 = builder24.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder38 = builder24.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder39 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset40 = builder39.getCharsetDefault();
        int int41 = builder39.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder39.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder47 = builder39.setByteArray(byteArray46);
        org.apache.commons.csv.CSVParser.Builder builder48 = builder38.setByteArray(byteArray46);
        org.apache.commons.csv.CSVParser.Builder builder49 = builder23.setByteArray(byteArray46);
        org.apache.commons.csv.CSVParser.Builder builder50 = builder0.setByteArray(byteArray46);
        int int51 = builder50.getBufferSizeDefault();
        java.io.RandomAccessFile randomAccessFile52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder53 = builder50.setRandomAccessFile(randomAccessFile52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertEquals("'" + charSequence5 + "' != '" + "" + "'", charSequence5, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertArrayEquals(byteArray8, new byte[] {});
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "" + "'", charSequence10, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8192 + "'", int15 == 8192);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertArrayEquals(byteArray20, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8192 + "'", int26 == 8192);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertArrayEquals(byteArray31, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8192 + "'", int41 == 8192);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertArrayEquals(byteArray46, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 8192 + "'", int51 == 8192);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0510");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        boolean boolean3 = cSVFormat1.isEscapeCharacterSet();
        java.lang.String str4 = cSVFormat1.getRecordSeparator();
        java.lang.Appendable appendable5 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat1.println(appendable5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\r\n" + "'", str4, "\r\n");
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0511");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setEscape('\"');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setTrim(true);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setIgnoreHeaderCase(false);
        java.sql.ResultSetMetaData resultSetMetaData17 = null;
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setHeader(resultSetMetaData17);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setTrailingDelimiter(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0512");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharacterOffset((long) '#');
        java.io.File file17 = builder16.getFile();
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset19 = builder18.getCharsetDefault();
        int int20 = builder18.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder18.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder26 = builder18.setByteArray(byteArray25);
        org.apache.commons.csv.CSVParser.Builder builder28 = builder18.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder30 = builder18.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder32 = builder18.setCharacterOffset((long) (byte) 1);
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 100, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder37 = builder32.setByteArray(byteArray36);
        org.apache.commons.csv.CSVParser.Builder builder38 = builder16.setByteArray(byteArray36);
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream39 = builder38.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getPath() for byte[] origin [B@3c4208a9");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8192 + "'", int20 == 8192);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertArrayEquals(byteArray25, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertArrayEquals(byteArray36, new byte[] { (byte) -1, (byte) 100, (byte) 1 });
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0513");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVParser5.hasTrailerComment();
        java.lang.String str7 = cSVParser5.getHeaderComment();
        long long8 = cSVParser5.getCurrentLineNumber();
        java.lang.String str9 = cSVParser5.getHeaderComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream10 = cSVParser5.stream();
        boolean boolean11 = cSVParser5.hasHeaderComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(cSVRecordStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0514");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setRecordNumber((long) 1);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        int int5 = builder3.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder3.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder11 = builder3.setByteArray(byteArray10);
        org.apache.commons.csv.CSVParser.Builder builder13 = builder3.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder15 = builder3.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder3.setCharacterOffset((long) (byte) 1);
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 100, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder22 = builder17.setByteArray(byteArray21);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder2.setByteArray(byteArray21);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path24 = builder23.getPath();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getPath() for byte[] origin [B@14197aeb");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8192 + "'", int5 == 8192);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertArrayEquals(byteArray10, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertArrayEquals(byteArray21, new byte[] { (byte) -1, (byte) 100, (byte) 1 });
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0515");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean2 = cSVFormat1.getSkipHeaderRecord();
        java.lang.String str3 = cSVFormat1.getRecordSeparator();
        java.lang.String[] strArray4 = cSVFormat1.getHeader();
        java.lang.String str5 = cSVFormat1.getDelimiterString();
        boolean boolean6 = cSVFormat1.getIgnoreEmptyLines();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n");
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "," + "'", str5, ",");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0516");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        java.lang.String str3 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVParser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0517");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setLenientEof(true);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder16.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder16.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode25 = cSVFormat24.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder16.setDuplicateHeaderMode(duplicateHeaderMode25);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder16.setQuote((java.lang.Character) ' ');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode25 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode25.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0518");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        int int8 = builder6.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder14 = builder6.setByteArray(byteArray13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder6.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder18 = builder6.setBufferSize((int) (byte) 0);
        java.nio.file.Path path19 = builder6.getPath();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder0.setPath(path19);
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset22 = builder21.getCharsetDefault();
        byte[] byteArray23 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder24 = builder21.setByteArray(byteArray23);
        java.lang.CharSequence charSequence25 = builder21.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder21.setBufferSize((int) ' ');
        java.io.InputStream inputStream28 = builder27.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder29 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset30 = builder29.getCharsetDefault();
        byte[] byteArray31 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder32 = builder29.setByteArray(byteArray31);
        java.nio.charset.Charset charset33 = builder29.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder36 = cSVFormat35.builder();
        java.lang.String str37 = cSVFormat35.getNullString();
        org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse(inputStream28, charset33, cSVFormat35);
        org.apache.commons.csv.CSVFormat cSVFormat39 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean40 = cSVFormat39.getSkipHeaderRecord();
        java.lang.String str41 = cSVFormat39.getRecordSeparator();
        boolean boolean42 = cSVFormat39.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter43 = cSVFormat39.printer();
        boolean boolean44 = cSVFormat39.getIgnoreHeaderCase();
        org.apache.commons.csv.QuoteMode quoteMode45 = cSVFormat39.getQuoteMode();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser46 = org.apache.commons.csv.CSVParser.parse(path19, charset33, cSVFormat39);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertArrayEquals(byteArray13, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(path19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertArrayEquals(byteArray23, new byte[] {});
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + charSequence25 + "' != '" + "" + "'", charSequence25, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertArrayEquals(byteArray31, new byte[] {});
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(cSVParser38);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\n" + "'", str41, "\n");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(cSVPrinter43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + quoteMode45 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode45.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0519");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        int int9 = builder7.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder7.setByteArray(byteArray14);
        java.nio.charset.Charset charset16 = builder7.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder17 = builder6.setCharset(charset16);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setFile("");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0520");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        java.util.function.IntUnaryOperator intUnaryOperator13 = null;
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setBufferSizeChecker(intUnaryOperator13);
        java.nio.file.Path path15 = builder14.getPath();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence16 = builder14.getCharSequence();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(path15);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0521");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getIgnoreHeaderCase();
        java.lang.String str4 = cSVFormat2.getDelimiterString();
        boolean boolean5 = cSVFormat2.isQuoteCharacterSet();
        org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse(",", cSVFormat2);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor7 = cSVParser6.iterator();
        java.lang.String str8 = cSVParser6.getTrailerComment();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser6.iterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "," + "'", str4, ",");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVParser6);
        org.junit.Assert.assertNotNull(cSVRecordItor7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVRecordItor9);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0522");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        boolean boolean2 = cSVFormat0.getLenientEof();
        java.lang.Appendable appendable3 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat0.println(appendable3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0523");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder18.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder18.setLenientEof(false);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean28 = cSVFormat27.getSkipHeaderRecord();
        java.lang.String str29 = cSVFormat27.getRecordSeparator();
        boolean boolean30 = cSVFormat27.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder31 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat27);
        org.apache.commons.csv.QuoteMode quoteMode32 = null;
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setQuoteMode(quoteMode32);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder31.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray42 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder31.setHeaderComments(strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder31.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder45.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder45.setEscape('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        boolean boolean52 = cSVFormat51.getIgnoreHeaderCase();
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str58 = cSVFormat51.format(objArray57);
        java.lang.String str59 = cSVFormat51.getRecordSeparator();
        boolean boolean60 = cSVFormat51.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode61 = cSVFormat51.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder49.setQuoteMode(quoteMode61);
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder18.setQuoteMode(quoteMode61);
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder18.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder65.setRecordSeparator(",");
        org.apache.commons.csv.CSVFormat.Builder builder69 = builder65.setDelimiter('4');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\n" + "'", str29, "\n");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertArrayEquals(strArray42, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str58, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\r\n" + "'", str59, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + quoteMode61 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode61.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0524");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder2.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setBufferSizeMax(100);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier6 = builder2.asSupplier();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8192 + "'", int3 == 8192);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVParserSupplier6);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0525");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.String[] strArray3 = cSVFormat0.getHeader();
        java.lang.String str4 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder5 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.lang.Character char6 = cSVFormat0.getCommentMarker();
        org.apache.commons.csv.CSVPrinter cSVPrinter7 = cSVFormat0.printer();
        java.lang.Class<?> wildcardClass8 = cSVPrinter7.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNotNull(cSVPrinter7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0526");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder6.setLenientEof(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0527");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        boolean boolean3 = cSVFormat0.getIgnoreHeaderCase();
        java.lang.String[] strArray4 = cSVFormat0.getHeaderComments();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strArray4);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0528");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('#');
        boolean boolean2 = cSVFormat1.getIgnoreEmptyLines();
        java.io.Reader reader3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser4 = cSVFormat1.parse(reader3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0529");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharacterOffset((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder18 = builder14.setCharacterOffset((long) 'a');
        org.apache.commons.csv.CSVParser.Builder builder20 = builder14.setBufferSize(8192);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Writer writer21 = builder14.getWriter();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0530");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.nio.charset.Charset charset4 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        int int9 = builder7.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder7.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder7.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder19 = builder7.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder7.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) '#');
        java.io.File file24 = builder23.getFile();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder6.setFile(file24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder6.setCharacterOffset((long) 10);
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset32 = builder31.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder28.setCharset(charset32);
        java.nio.charset.Charset charset34 = builder28.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder27.setCharset(charset34);
        org.apache.commons.io.IORandomAccessFile iORandomAccessFile36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setRandomAccessFile(iORandomAccessFile36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0531");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getIgnoreHeaderCase();
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str8 = cSVFormat1.format(objArray7);
        boolean boolean9 = cSVFormat1.getTrim();
        boolean boolean10 = cSVFormat1.getAllowMissingColumnNames();
        boolean boolean11 = cSVFormat1.isQuoteCharacterSet();
        boolean boolean12 = cSVFormat1.getSkipHeaderRecord();
        boolean boolean13 = cSVFormat1.isNullStringSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str8, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0532");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder2 = cSVFormat1.builder();
        org.apache.commons.csv.CSVPrinter cSVPrinter3 = cSVFormat1.printer();
        boolean boolean4 = cSVFormat1.getTrailingData();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(cSVPrinter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0533");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getIgnoreHeaderCase();
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str8 = cSVFormat1.format(objArray7);
        boolean boolean9 = cSVFormat1.getTrim();
        boolean boolean10 = cSVFormat1.getIgnoreEmptyLines();
        java.lang.String str11 = cSVFormat1.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean13 = cSVFormat12.getSkipHeaderRecord();
        java.lang.String str14 = cSVFormat12.getRecordSeparator();
        boolean boolean15 = cSVFormat12.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder16 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat12);
        org.apache.commons.csv.QuoteMode quoteMode17 = null;
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setQuoteMode(quoteMode17);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder16.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray27 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder16.setHeaderComments(strArray27);
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder16.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder30.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder30.setQuote((java.lang.Character) '#');
        boolean boolean35 = cSVFormat1.equals((java.lang.Object) builder30);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder30.setAutoFlush(false);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str8, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "," + "'", str11, ",");
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\n" + "'", str14, "\n");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertArrayEquals(strArray27, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0534");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MONGODB_CSV;
        boolean boolean1 = cSVFormat0.isNullStringSet();
        org.apache.commons.csv.CSVFormat.Builder builder2 = cSVFormat0.builder();
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setNullString("\r\n");
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setDelimiter('4');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0535");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVParser5.hasTrailerComment();
        boolean boolean7 = cSVParser5.isClosed();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream8 = cSVParser5.stream();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser5.getHeaderMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = cSVParser5.getHeaderMap();
        java.util.List<java.lang.String> strList11 = cSVParser5.getHeaderNames();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0536");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset15 = builder14.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder11.setCharset(charset15);
        java.nio.charset.Charset charset17 = builder11.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder0.setCharset(charset17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder20 = builder0.setPath("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
            org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException; message: Illegal char <\"> at index 4: 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\"");
        } catch (java.nio.file.InvalidPathException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0537");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setRecordNumber((long) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Reader reader15 = builder12.getReader();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0538");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVParser5.hasTrailerComment();
        cSVParser5.close();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser5.getRecords();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser5.getRecords();
        cSVParser5.close();
        java.util.List<java.lang.String> strList11 = cSVParser5.getHeaderNames();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVRecordList8);
        org.junit.Assert.assertNotNull(cSVRecordList9);
        org.junit.Assert.assertNotNull(strList11);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0539");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) 1);
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        int int8 = builder6.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser11 = builder6.getUnchecked();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder6.setPath(",");
        java.nio.file.OpenOption[] openOptionArray14 = builder13.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder5.setOpenOptions(openOptionArray14);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setPath("\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\",\"\",\"hi!\",\"\r\n\",\"\",\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"");
            org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException; message: Illegal char <\"> at index 0: \"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\"\"\",\"\",\"hi!\",\"??\",\"\",\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\"\"\"");
        } catch (java.nio.file.InvalidPathException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8192 + "'", int3 == 8192);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVParser11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(openOptionArray14);
        org.junit.Assert.assertArrayEquals(openOptionArray14, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0540");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder0.setEscape((java.lang.Character) 'a');
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder0.setHeader(resultSet5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = builder6.get();
        boolean boolean8 = cSVFormat7.getIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0541");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder2 = cSVFormat1.builder();
        java.lang.String str3 = cSVFormat1.getDelimiterString();
        boolean boolean4 = cSVFormat1.getAllowMissingColumnNames();
        boolean boolean5 = cSVFormat1.isEscapeCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "a" + "'", str3, "a");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0542");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setTrailingData(false);
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean22 = cSVFormat21.getSkipHeaderRecord();
        java.lang.String str23 = cSVFormat21.getRecordSeparator();
        boolean boolean24 = cSVFormat21.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder25 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat21);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode28 = null;
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setQuoteMode(quoteMode28);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder27.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder27.setCommentMarker('#');
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean35 = cSVFormat34.getSkipHeaderRecord();
        java.lang.String str36 = cSVFormat34.getRecordSeparator();
        boolean boolean37 = cSVFormat34.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder38 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat34);
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode41 = null;
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder40.setQuoteMode(quoteMode41);
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder40.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat45 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean46 = cSVFormat45.getSkipHeaderRecord();
        java.lang.String str47 = cSVFormat45.getRecordSeparator();
        boolean boolean48 = cSVFormat45.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder49 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat45);
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder49.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder51.setQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode55 = cSVFormat54.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder51.setDuplicateHeaderMode(duplicateHeaderMode55);
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder44.setDuplicateHeaderMode(duplicateHeaderMode55);
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder33.setDuplicateHeaderMode(duplicateHeaderMode55);
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder18.setDuplicateHeaderMode(duplicateHeaderMode55);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\n" + "'", str23, "\n");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\n" + "'", str36, "\n");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\n" + "'", str47, "\n");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode55 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode55.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0543");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.nio.charset.Charset charset4 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        int int9 = builder7.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder7.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder7.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder19 = builder7.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder7.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) '#');
        java.io.File file24 = builder23.getFile();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder6.setFile(file24);
        java.util.function.IntUnaryOperator intUnaryOperator26 = null;
        org.apache.commons.csv.CSVParser.Builder builder27 = builder6.setBufferSizeChecker(intUnaryOperator26);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder29 = builder6.setPath("\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
            org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException; message: Illegal char <\"> at index 0: \"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\"");
        } catch (java.nio.file.InvalidPathException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0544");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser5.iterator();
        boolean boolean7 = cSVParser5.isClosed();
        long long8 = cSVParser5.getCurrentLineNumber();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser5.getHeaderMap();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator10 = cSVParser5.spliterator();
        cSVParser5.close();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator10);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0545");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder2.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset5 = builder4.getCharsetDefault();
        byte[] byteArray6 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder7 = builder4.setByteArray(byteArray6);
        java.lang.CharSequence charSequence8 = builder4.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder4.setBufferSize((int) ' ');
        java.io.InputStream inputStream11 = builder10.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset13 = builder12.getCharsetDefault();
        byte[] byteArray14 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder15 = builder12.setByteArray(byteArray14);
        java.nio.charset.Charset charset16 = builder12.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder19 = cSVFormat18.builder();
        java.lang.String str20 = cSVFormat18.getNullString();
        org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse(inputStream11, charset16, cSVFormat18);
        org.apache.commons.csv.CSVParser.Builder builder22 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset23 = builder22.getCharsetDefault();
        byte[] byteArray24 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder25 = builder22.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder22.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder29 = builder22.setBufferSize((int) 'a');
        java.nio.charset.Charset charset30 = builder29.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse(inputStream11, charset30, cSVFormat32);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder2.setCharset(charset30);
        java.util.function.IntUnaryOperator intUnaryOperator35 = null;
        org.apache.commons.csv.CSVParser.Builder builder36 = builder2.setBufferSizeChecker(intUnaryOperator35);
        java.io.Reader reader37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder38 = builder2.setReader(reader37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] {});
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "" + "'", charSequence8, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] {});
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVParser21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] {});
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVParser33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0546");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        boolean boolean4 = cSVFormat0.isNullStringSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        boolean boolean8 = cSVFormat7.getAutoFlush();
        boolean boolean9 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat7);
        java.lang.String str11 = cSVParser10.getHeaderComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream12 = cSVParser10.stream();
        boolean boolean13 = cSVFormat0.equals((java.lang.Object) cSVParser10);
        boolean boolean14 = cSVFormat0.isNullStringSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVRecordStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0547");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getAutoFlush();
        java.lang.Character char3 = cSVFormat1.getEscapeCharacter();
        boolean boolean4 = cSVFormat1.getTrailingDelimiter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + '\"' + "'", char3 == '\"');
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0548");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean2 = cSVFormat1.getSkipHeaderRecord();
        java.lang.String str3 = cSVFormat1.getRecordSeparator();
        java.lang.String[] strArray4 = cSVFormat1.getHeader();
        java.lang.String str5 = cSVFormat1.getNullString();
        boolean boolean6 = cSVFormat1.isNullStringSet();
        boolean boolean7 = cSVFormat1.getSkipHeaderRecord();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse(reader0, cSVFormat1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n");
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0549");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.String[] strArray3 = cSVFormat0.getHeader();
        java.lang.String str4 = cSVFormat0.getDelimiterString();
        boolean boolean5 = cSVFormat0.getIgnoreEmptyLines();
        java.lang.String str6 = cSVFormat0.getRecordSeparator();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "," + "'", str4, ",");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n");
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0550");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        java.lang.String[] strArray11 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" };
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder4.setHeader(strArray11);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder4.setNullString("");
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setQuote((java.lang.Character) '#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertArrayEquals(strArray11, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" });
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0551");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setCommentMarker('a');
        java.sql.ResultSetMetaData resultSetMetaData19 = null;
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setHeader(resultSetMetaData19);
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean22 = cSVFormat21.getSkipHeaderRecord();
        java.lang.String str23 = cSVFormat21.getRecordSeparator();
        boolean boolean24 = cSVFormat21.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder25 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat21);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setCommentMarker('a');
        java.lang.String[] strArray32 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" };
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder25.setHeader(strArray32);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder25.setNullString("");
        org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean37 = cSVFormat36.getSkipHeaderRecord();
        java.lang.String str38 = cSVFormat36.getRecordSeparator();
        boolean boolean39 = cSVFormat36.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder40 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat36);
        org.apache.commons.csv.QuoteMode quoteMode41 = null;
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder40.setQuoteMode(quoteMode41);
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder40.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray51 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder40.setHeaderComments(strArray51);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder35.setHeader(strArray51);
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder18.setHeaderComments(strArray51);
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder18.setCommentMarker('4');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\n" + "'", str23, "\n");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertArrayEquals(strArray32, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" });
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\n" + "'", str38, "\n");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertArrayEquals(strArray51, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0552");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        org.apache.commons.csv.CSVFormat.Builder builder1 = cSVFormat0.builder();
        java.lang.Appendable appendable2 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat0.println(appendable2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0553");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser5.iterator();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser5.getHeaderMap();
        java.lang.Class<?> wildcardClass8 = strMap7.getClass();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0554");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setCharacterOffset((long) (byte) 1);
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 100, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder19 = builder14.setByteArray(byteArray18);
        java.io.InputStream inputStream20 = builder19.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset22 = builder21.getCharsetDefault();
        byte[] byteArray23 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder24 = builder21.setByteArray(byteArray23);
        java.lang.CharSequence charSequence25 = builder21.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder21.setBufferSize((int) ' ');
        java.io.InputStream inputStream28 = builder27.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder29 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset30 = builder29.getCharsetDefault();
        byte[] byteArray31 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder32 = builder29.setByteArray(byteArray31);
        java.nio.charset.Charset charset33 = builder29.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder36 = cSVFormat35.builder();
        java.lang.String str37 = cSVFormat35.getNullString();
        org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse(inputStream28, charset33, cSVFormat35);
        org.apache.commons.csv.CSVParser.Builder builder39 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset40 = builder39.getCharsetDefault();
        byte[] byteArray41 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder42 = builder39.setByteArray(byteArray41);
        org.apache.commons.csv.CSVParser.Builder builder44 = builder39.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder46 = builder39.setBufferSize((int) 'a');
        java.nio.charset.Charset charset47 = builder46.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat49 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVParser cSVParser50 = org.apache.commons.csv.CSVParser.parse(inputStream28, charset47, cSVFormat49);
        org.apache.commons.csv.CSVFormat.Predefined predefined51 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat52 = predefined51.getFormat();
        boolean boolean53 = cSVFormat52.getIgnoreHeaderCase();
        java.lang.Object[] objArray58 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str59 = cSVFormat52.format(objArray58);
        boolean boolean60 = cSVFormat52.getTrailingDelimiter();
        boolean boolean61 = cSVFormat52.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined63 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat64 = predefined63.getFormat();
        boolean boolean65 = cSVFormat64.getAutoFlush();
        boolean boolean66 = cSVFormat64.getTrim();
        org.apache.commons.csv.CSVParser cSVParser67 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat64);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor68 = cSVParser67.iterator();
        boolean boolean69 = cSVParser67.isClosed();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList70 = cSVParser67.getRecords();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator71 = cSVParser67.spliterator();
        java.lang.String str72 = cSVParser67.getFirstEndOfLine();
        boolean boolean73 = cSVFormat52.equals((java.lang.Object) str72);
        org.apache.commons.csv.CSVParser cSVParser74 = org.apache.commons.csv.CSVParser.parse(inputStream20, charset47, cSVFormat52);
        org.apache.commons.csv.CSVParser.Builder builder75 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder77 = builder75.setBufferSize((java.lang.Integer) 100);
        int int78 = builder77.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder80 = builder77.setBufferSizeMax(100);
        java.lang.Appendable appendable81 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat52.print((java.lang.Object) 100, appendable81, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] { (byte) -1, (byte) 100, (byte) 1 });
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertArrayEquals(byteArray23, new byte[] {});
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + charSequence25 + "' != '" + "" + "'", charSequence25, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertArrayEquals(byteArray31, new byte[] {});
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(cSVParser38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertArrayEquals(byteArray41, new byte[] {});
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertNotNull(cSVParser50);
        org.junit.Assert.assertTrue("'" + predefined51 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined51.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str59, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + predefined63 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined63.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(cSVParser67);
        org.junit.Assert.assertNotNull(cSVRecordItor68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(cSVRecordList70);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(cSVParser74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 8192 + "'", int78 == 8192);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0555");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setCommentMarker('a');
        java.sql.ResultSetMetaData resultSetMetaData19 = null;
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setHeader(resultSetMetaData19);
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean22 = cSVFormat21.getSkipHeaderRecord();
        java.lang.String str23 = cSVFormat21.getRecordSeparator();
        boolean boolean24 = cSVFormat21.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder25 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat21);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setCommentMarker('a');
        java.lang.String[] strArray32 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" };
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder25.setHeader(strArray32);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder25.setNullString("");
        org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean37 = cSVFormat36.getSkipHeaderRecord();
        java.lang.String str38 = cSVFormat36.getRecordSeparator();
        boolean boolean39 = cSVFormat36.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder40 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat36);
        org.apache.commons.csv.QuoteMode quoteMode41 = null;
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder40.setQuoteMode(quoteMode41);
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder40.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray51 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder40.setHeaderComments(strArray51);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder35.setHeader(strArray51);
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder18.setHeaderComments(strArray51);
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder54.setAutoFlush(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\n" + "'", str23, "\n");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertArrayEquals(strArray32, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" });
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\n" + "'", str38, "\n");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertArrayEquals(strArray51, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0556");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder0.setEscape((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setIgnoreSurroundingSpaces(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0557");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVParser5.isClosed();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser5.getHeaderMap();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0558");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset15 = builder14.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder11.setCharset(charset15);
        java.nio.charset.Charset charset17 = builder11.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder0.setCharset(charset17);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setFile("\t");
        java.util.function.IntUnaryOperator intUnaryOperator21 = null;
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setBufferSizeChecker(intUnaryOperator21);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0559");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        boolean boolean13 = cSVFormat12.getIgnoreHeaderCase();
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str19 = cSVFormat12.format(objArray18);
        java.lang.String str20 = cSVFormat12.getRecordSeparator();
        boolean boolean21 = cSVFormat12.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode22 = cSVFormat12.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder4.setQuoteMode(quoteMode22);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setQuote('\"');
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setIgnoreSurroundingSpaces(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str19, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\r\n" + "'", str20, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + quoteMode22 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode22.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0560");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder18.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setTrailingData(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0561");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setTrailingData(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder8.get();
        boolean boolean12 = cSVFormat11.getTrailingDelimiter();
        boolean boolean13 = cSVFormat11.isEscapeCharacterSet();
        boolean boolean14 = cSVFormat11.isQuoteCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0562");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        boolean boolean2 = cSVFormat0.getTrim();
        java.lang.String[] strArray3 = cSVFormat0.getHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(strArray3);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0563");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setDelimiter('a');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setTrim(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode12 = cSVFormat11.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder10.setDuplicateHeaderMode(duplicateHeaderMode12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean17 = cSVFormat16.getSkipHeaderRecord();
        java.lang.String str18 = cSVFormat16.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode19 = cSVFormat16.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder13.setDuplicateHeaderMode(duplicateHeaderMode19);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean24 = cSVFormat23.getSkipHeaderRecord();
        java.lang.String str25 = cSVFormat23.getRecordSeparator();
        boolean boolean26 = cSVFormat23.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder27 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat23);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode30 = null;
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setQuoteMode(quoteMode30);
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder29.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean35 = cSVFormat34.getSkipHeaderRecord();
        java.lang.String str36 = cSVFormat34.getRecordSeparator();
        boolean boolean37 = cSVFormat34.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder38 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat34);
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder40.setQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat43 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode44 = cSVFormat43.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder40.setDuplicateHeaderMode(duplicateHeaderMode44);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder33.setDuplicateHeaderMode(duplicateHeaderMode44);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder22.setDuplicateHeaderMode(duplicateHeaderMode44);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode12 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode12.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\n" + "'", str18, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode19 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode19.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\n" + "'", str25, "\n");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\n" + "'", str36, "\n");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode44 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode44.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0564");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder2.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setBufferSizeMax(100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser6 = builder5.get();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8192 + "'", int3 == 8192);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0565");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        boolean boolean2 = cSVFormat0.getLenientEof();
        boolean boolean3 = cSVFormat0.getTrim();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0566");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat9 = builder8.get();
        java.lang.Character char10 = cSVFormat9.getQuoteCharacter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + char10 + "' != '" + '\"' + "'", char10 == '\"');
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0567");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        byte[] byteArray9 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder10 = builder7.setByteArray(byteArray9);
        java.lang.CharSequence charSequence11 = builder7.getCharSequence();
        java.lang.CharSequence charSequence12 = builder7.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser13 = builder7.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray14 = builder7.getOpenOptions();
        java.nio.charset.Charset charset15 = builder7.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder0.setCharset(charset15);
        java.io.InputStream inputStream17 = builder16.getInputStream();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file18 = builder16.getFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getFile() for byte[] origin [B@712c1fd");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "" + "'", charSequence11, "");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertNotNull(cSVParser13);
        org.junit.Assert.assertNotNull(openOptionArray14);
        org.junit.Assert.assertArrayEquals(openOptionArray14, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(inputStream17);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0568");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getIgnoreHeaderCase();
        java.lang.Object[] objArray8 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str9 = cSVFormat2.format(objArray8);
        boolean boolean10 = cSVFormat2.getTrim();
        boolean boolean11 = cSVFormat2.getTrailingData();
        org.apache.commons.csv.CSVParser cSVParser12 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str9, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(cSVParser12);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0569");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter4 = cSVFormat0.printer();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("", cSVFormat6);
        boolean boolean8 = cSVFormat0.equals((java.lang.Object) cSVFormat6);
        boolean boolean9 = cSVFormat6.isNullStringSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(cSVPrinter4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0570");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        boolean boolean3 = cSVFormat1.getIgnoreHeaderCase();
        boolean boolean4 = cSVFormat1.isQuoteCharacterSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0571");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder2 = cSVFormat1.builder();
        java.lang.String str3 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        boolean boolean7 = cSVFormat6.getAutoFlush();
        boolean boolean8 = cSVFormat6.getTrim();
        org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat6);
        boolean boolean10 = cSVParser9.hasTrailerComment();
        java.lang.String str11 = cSVParser9.getHeaderComment();
        long long12 = cSVParser9.getCurrentLineNumber();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator13 = cSVParser9.spliterator();
        boolean boolean14 = cSVFormat1.equals((java.lang.Object) cSVParser9);
        boolean boolean15 = cSVParser9.hasTrailerComment();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVParser9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0572");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.toString();
        boolean boolean5 = cSVFormat3.isEscapeCharacterSet();
        boolean boolean6 = cSVFormat1.equals((java.lang.Object) cSVFormat3);
        org.apache.commons.csv.CSVPrinter cSVPrinter7 = cSVFormat1.printer();
        java.lang.String str8 = cSVFormat1.getDelimiterString();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str4, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVPrinter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\"" + "'", str8, "\"");
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0573");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter4 = cSVFormat0.printer();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("", cSVFormat6);
        boolean boolean8 = cSVFormat0.equals((java.lang.Object) cSVFormat6);
        boolean boolean9 = cSVFormat6.getIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(cSVPrinter4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0574");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        java.util.function.IntUnaryOperator intUnaryOperator13 = null;
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setBufferSizeChecker(intUnaryOperator13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setBufferSize(100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setCharset("");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0575");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVParser5.hasTrailerComment();
        boolean boolean7 = cSVParser5.isClosed();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream8 = cSVParser5.stream();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVParser5.spliterator();
        java.lang.String str10 = cSVParser5.getTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream8);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0576");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        byte[] byteArray8 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder9 = builder6.setByteArray(byteArray8);
        java.lang.CharSequence charSequence10 = builder6.getCharSequence();
        java.lang.CharSequence charSequence11 = builder6.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset13 = builder12.getCharsetDefault();
        byte[] byteArray14 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder15 = builder12.setByteArray(byteArray14);
        java.lang.CharSequence charSequence16 = builder12.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder12.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder19 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset20 = builder19.getCharsetDefault();
        int int21 = builder19.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder19.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder27 = builder19.setByteArray(byteArray26);
        java.nio.charset.Charset charset28 = builder19.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder18.setCharset(charset28);
        org.apache.commons.csv.CSVParser.Builder builder30 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset31 = builder30.getCharsetDefault();
        int int32 = builder30.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder34 = builder30.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray37 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder38 = builder30.setByteArray(byteArray37);
        org.apache.commons.csv.CSVParser.Builder builder40 = builder30.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder42 = builder30.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder44 = builder30.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder45 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset46 = builder45.getCharsetDefault();
        int int47 = builder45.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder49 = builder45.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray52 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder53 = builder45.setByteArray(byteArray52);
        org.apache.commons.csv.CSVParser.Builder builder54 = builder44.setByteArray(byteArray52);
        org.apache.commons.csv.CSVParser.Builder builder55 = builder29.setByteArray(byteArray52);
        org.apache.commons.csv.CSVParser.Builder builder56 = builder6.setByteArray(byteArray52);
        org.apache.commons.csv.CSVParser.Builder builder57 = builder0.setByteArray(byteArray52);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertArrayEquals(byteArray8, new byte[] {});
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "" + "'", charSequence10, "");
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "" + "'", charSequence11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] {});
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "" + "'", charSequence16, "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8192 + "'", int21 == 8192);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertArrayEquals(byteArray26, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8192 + "'", int32 == 8192);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertArrayEquals(byteArray37, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8192 + "'", int47 == 8192);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertArrayEquals(byteArray52, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0577");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        java.lang.String str9 = cSVFormat7.getRecordSeparator();
        boolean boolean10 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat7);
        org.apache.commons.csv.QuoteMode quoteMode12 = null;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuoteMode(quoteMode12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray22 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder11.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder6.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder6.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder6.setAllowMissingColumnNames(false);
        java.lang.Class<?> wildcardClass29 = builder28.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertArrayEquals(strArray22, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0578");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 100);
        java.util.function.IntUnaryOperator intUnaryOperator9 = null;
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setBufferSizeChecker(intUnaryOperator9);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset12 = builder11.getCharsetDefault();
        int int13 = builder11.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder11.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder19 = builder11.setByteArray(byteArray18);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder10.setByteArray(byteArray18);
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset22 = builder21.getCharsetDefault();
        byte[] byteArray23 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder24 = builder21.setByteArray(byteArray23);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier25 = builder21.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder26 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset27 = builder26.getCharsetDefault();
        byte[] byteArray28 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder29 = builder26.setByteArray(byteArray28);
        java.lang.CharSequence charSequence30 = builder26.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder26.setBufferSize((int) ' ');
        java.io.InputStream inputStream33 = builder32.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder34 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset35 = builder34.getCharsetDefault();
        byte[] byteArray36 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder37 = builder34.setByteArray(byteArray36);
        java.nio.charset.Charset charset38 = builder34.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder41 = cSVFormat40.builder();
        java.lang.String str42 = cSVFormat40.getNullString();
        org.apache.commons.csv.CSVParser cSVParser43 = org.apache.commons.csv.CSVParser.parse(inputStream33, charset38, cSVFormat40);
        org.apache.commons.csv.CSVParser.Builder builder44 = builder21.setInputStream(inputStream33);
        org.apache.commons.csv.CSVParser.Builder builder45 = builder10.setInputStream(inputStream33);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Writer writer46 = builder10.getWriter();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: InputStreamOrigin#getPath() for ByteArrayInputStream origin java.io.ByteArrayInputStream@5099f63c");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8192 + "'", int13 == 8192);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertArrayEquals(byteArray23, new byte[] {});
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(cSVParserSupplier25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertArrayEquals(byteArray28, new byte[] {});
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "" + "'", charSequence30, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertArrayEquals(byteArray36, new byte[] {});
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(cSVParser43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0579");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        byte[] byteArray9 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder10 = builder7.setByteArray(byteArray9);
        java.lang.CharSequence charSequence11 = builder7.getCharSequence();
        java.lang.CharSequence charSequence12 = builder7.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser13 = builder7.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray14 = builder7.getOpenOptions();
        java.nio.charset.Charset charset15 = builder7.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder0.setCharset(charset15);
        org.apache.commons.csv.CSVParser cSVParser17 = builder16.getUnchecked();
        cSVParser17.close();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "" + "'", charSequence11, "");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertNotNull(cSVParser13);
        org.junit.Assert.assertNotNull(openOptionArray14);
        org.junit.Assert.assertArrayEquals(openOptionArray14, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(cSVParser17);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0580");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
        boolean boolean2 = cSVFormat1.getTrim();
        boolean boolean3 = cSVFormat1.getIgnoreEmptyLines();
        boolean boolean4 = cSVFormat1.getTrim();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0581");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getIgnoreHeaderCase();
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str8 = cSVFormat1.format(objArray7);
        boolean boolean9 = cSVFormat1.getTrim();
        boolean boolean10 = cSVFormat1.getIgnoreEmptyLines();
        boolean boolean11 = cSVFormat1.getTrailingDelimiter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str8, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0582");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        org.apache.commons.csv.QuoteMode quoteMode2 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean4 = cSVFormat3.getSkipHeaderRecord();
        java.lang.String str5 = cSVFormat3.getRecordSeparator();
        boolean boolean6 = cSVFormat3.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder7 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat3);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode10 = null;
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setQuoteMode(quoteMode10);
        java.lang.String[] strArray15 = new java.lang.String[] { "\r\n", "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]", "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder11.setHeader(strArray15);
        java.lang.String str17 = cSVFormat1.format((java.lang.Object[]) strArray15);
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset19 = builder18.getCharsetDefault();
        byte[] byteArray20 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder21 = builder18.setByteArray(byteArray20);
        java.lang.CharSequence charSequence22 = builder18.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder18.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder25 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset26 = builder25.getCharsetDefault();
        byte[] byteArray27 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder28 = builder25.setByteArray(byteArray27);
        java.lang.CharSequence charSequence29 = builder25.getCharSequence();
        java.lang.CharSequence charSequence30 = builder25.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser31 = builder25.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray32 = builder25.getOpenOptions();
        java.nio.charset.Charset charset33 = builder25.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder34 = builder18.setCharset(charset33);
        org.apache.commons.csv.CSVParser.Builder builder35 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset36 = builder35.getCharsetDefault();
        byte[] byteArray37 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder38 = builder35.setByteArray(byteArray37);
        java.lang.CharSequence charSequence39 = builder35.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder41 = builder35.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder43 = builder35.setRecordNumber((long) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder44 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset45 = builder44.getCharsetDefault();
        int int46 = builder44.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder48 = builder44.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray51 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder52 = builder44.setByteArray(byteArray51);
        org.apache.commons.csv.CSVParser.Builder builder54 = builder44.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder56 = builder44.setBufferSize((int) (byte) 0);
        java.nio.file.Path path57 = builder44.getPath();
        org.apache.commons.csv.CSVParser.Builder builder58 = builder35.setPath(path57);
        org.apache.commons.csv.CSVParser.Builder builder59 = builder18.setPath(path57);
        org.apache.commons.csv.CSVParser.Builder builder60 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset61 = builder60.getCharsetDefault();
        int int62 = builder60.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder64 = builder60.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray67 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder68 = builder60.setByteArray(byteArray67);
        org.apache.commons.csv.CSVParser.Builder builder70 = builder60.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder72 = builder60.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder74 = builder60.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder76 = builder74.setCharacterOffset((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder78 = builder74.setCharacterOffset((long) 'a');
        java.nio.charset.Charset charset79 = builder74.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter80 = cSVFormat1.print(path57, charset79);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(quoteMode2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\n" + "'", str5, "\n");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "\r\n", "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]", "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\r\n\"Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]\"Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str17, "\r\n\"Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]\"Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertArrayEquals(byteArray20, new byte[] {});
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "" + "'", charSequence22, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertArrayEquals(byteArray27, new byte[] {});
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "" + "'", charSequence29, "");
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "" + "'", charSequence30, "");
        org.junit.Assert.assertNotNull(cSVParser31);
        org.junit.Assert.assertNotNull(openOptionArray32);
        org.junit.Assert.assertArrayEquals(openOptionArray32, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertArrayEquals(byteArray37, new byte[] {});
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + charSequence39 + "' != '" + "" + "'", charSequence39, "");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8192 + "'", int46 == 8192);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertArrayEquals(byteArray51, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(path57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(charset61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 8192 + "'", int62 == 8192);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertArrayEquals(byteArray67, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(charset79);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0583");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVParser5.hasTrailerComment();
        java.lang.String str7 = cSVParser5.getHeaderComment();
        long long8 = cSVParser5.getCurrentLineNumber();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVParser5.spliterator();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream10 = cSVParser5.stream();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator9);
        org.junit.Assert.assertNotNull(cSVRecordStream10);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0584");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setIgnoreHeaderCase(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0585");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean5 = cSVFormat4.getSkipHeaderRecord();
        java.lang.String str6 = cSVFormat4.getRecordSeparator();
        boolean boolean7 = cSVFormat4.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder8 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat4);
        boolean boolean9 = cSVFormat0.equals((java.lang.Object) cSVFormat4);
        java.lang.String str10 = cSVFormat4.toString();
        java.lang.Appendable appendable11 = null;
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset13 = builder12.getCharsetDefault();
        byte[] byteArray14 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder15 = builder12.setByteArray(byteArray14);
        java.lang.CharSequence charSequence16 = builder12.getCharSequence();
        java.lang.CharSequence charSequence17 = builder12.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser18 = builder12.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray19 = builder12.getOpenOptions();
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat4.printRecord(appendable11, (java.lang.Object[]) openOptionArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str10, "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] {});
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "" + "'", charSequence16, "");
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "" + "'", charSequence17, "");
        org.junit.Assert.assertNotNull(cSVParser18);
        org.junit.Assert.assertNotNull(openOptionArray19);
        org.junit.Assert.assertArrayEquals(openOptionArray19, new java.nio.file.OpenOption[] {});
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0586");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getIgnoreHeaderCase();
        boolean boolean2 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        byte[] byteArray5 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder6 = builder3.setByteArray(byteArray5);
        boolean boolean7 = cSVFormat0.equals((java.lang.Object) builder3);
        java.lang.CharSequence charSequence8 = builder3.getCharSequence();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertArrayEquals(byteArray5, new byte[] {});
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "" + "'", charSequence8, "");
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0587");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setTrailingData(true);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder22.setAllowMissingColumnNames(true);
        java.sql.ResultSetMetaData resultSetMetaData27 = null;
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder22.setHeader(resultSetMetaData27);
        java.sql.ResultSet resultSet29 = null;
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder22.setHeader(resultSet29);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0588");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setTrim(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0589");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setDelimiter('a');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder6.setCommentMarker('a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0590");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        java.nio.charset.Charset charset6 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset10 = builder9.getCharsetDefault();
        int int11 = builder9.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder9.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder17 = builder9.setByteArray(byteArray16);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder9.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder21 = builder9.setBufferSize((int) (byte) 0);
        java.nio.file.Path path22 = builder9.getPath();
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset24 = builder23.getCharsetDefault();
        int int25 = builder23.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder23.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder31 = builder23.setByteArray(byteArray30);
        org.apache.commons.csv.CSVParser.Builder builder33 = builder23.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder35 = builder23.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder37 = builder23.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder39 = builder37.setCharacterOffset((long) '#');
        java.io.File file40 = builder39.getFile();
        org.apache.commons.csv.CSVParser.Builder builder41 = builder9.setFile(file40);
        org.apache.commons.csv.CSVParser.Builder builder42 = builder8.setFile(file40);
        org.apache.commons.csv.CSVParser.Builder builder43 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset44 = builder43.getCharsetDefault();
        int int45 = builder43.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder47 = builder43.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray50 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder51 = builder43.setByteArray(byteArray50);
        org.apache.commons.csv.CSVParser.Builder builder53 = builder43.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder55 = builder43.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder57 = builder43.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder58 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset59 = builder58.getCharsetDefault();
        int int60 = builder58.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder62 = builder58.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray65 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder66 = builder58.setByteArray(byteArray65);
        org.apache.commons.csv.CSVParser.Builder builder67 = builder57.setByteArray(byteArray65);
        java.nio.charset.Charset charset68 = builder57.getCharsetDefault();
        org.apache.commons.csv.CSVFormat.Predefined predefined69 = org.apache.commons.csv.CSVFormat.Predefined.INFORMIX_UNLOAD_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat70 = predefined69.getFormat();
        org.apache.commons.csv.CSVFormat.Builder builder71 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat70);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser72 = org.apache.commons.csv.CSVParser.parse(file40, charset68, cSVFormat70);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8192 + "'", int11 == 8192);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertArrayEquals(byteArray16, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(path22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8192 + "'", int25 == 8192);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertArrayEquals(byteArray30, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(file40);
        org.junit.Assert.assertNull("file40.getParent() == null", file40.getParent());
        org.junit.Assert.assertEquals(file40.toString(), "");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8192 + "'", int45 == 8192);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertArrayEquals(byteArray50, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(charset59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8192 + "'", int60 == 8192);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertArrayEquals(byteArray65, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(charset68);
        org.junit.Assert.assertTrue("'" + predefined69 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.INFORMIX_UNLOAD_CSV + "'", predefined69.equals(org.apache.commons.csv.CSVFormat.Predefined.INFORMIX_UNLOAD_CSV));
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0591");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setRecordNumber(1L);
        java.io.OutputStream outputStream8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setOutputStream(outputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0592");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0593");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        java.nio.charset.Charset charset11 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset13 = builder12.getCharsetDefault();
        int int14 = builder12.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder12.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser17 = builder12.getUnchecked();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder12.setPath(",");
        java.nio.file.OpenOption[] openOptionArray20 = builder19.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder0.setOpenOptions(openOptionArray20);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder0.setCharSequence((java.lang.CharSequence) ",");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8192 + "'", int14 == 8192);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(cSVParser17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(openOptionArray20);
        org.junit.Assert.assertArrayEquals(openOptionArray20, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0594");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        java.nio.charset.Charset charset6 = builder0.getCharsetDefault();
        int int7 = builder0.getBufferSize();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0595");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder2 = cSVFormat1.builder();
        java.lang.String str3 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        boolean boolean7 = cSVFormat6.getAutoFlush();
        boolean boolean8 = cSVFormat6.getTrim();
        org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat6);
        boolean boolean10 = cSVParser9.hasTrailerComment();
        java.lang.String str11 = cSVParser9.getHeaderComment();
        long long12 = cSVParser9.getCurrentLineNumber();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator13 = cSVParser9.spliterator();
        boolean boolean14 = cSVFormat1.equals((java.lang.Object) cSVParser9);
        boolean boolean15 = cSVFormat1.getIgnoreEmptyLines();
        java.lang.String[] strArray16 = cSVFormat1.getHeader();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVParser9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strArray16);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0596");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        boolean boolean4 = cSVFormat0.isNullStringSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        boolean boolean8 = cSVFormat7.getAutoFlush();
        boolean boolean9 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat7);
        java.lang.String str11 = cSVParser10.getHeaderComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream12 = cSVParser10.stream();
        boolean boolean13 = cSVFormat0.equals((java.lang.Object) cSVParser10);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator14 = cSVParser10.spliterator();
        boolean boolean15 = cSVParser10.hasTrailerComment();
        long long16 = cSVParser10.getRecordNumber();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVRecordStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0597");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter4 = cSVFormat0.printer();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("", cSVFormat6);
        boolean boolean8 = cSVFormat0.equals((java.lang.Object) cSVFormat6);
        java.lang.String[] strArray9 = cSVFormat6.getHeaderComments();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(cSVPrinter4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strArray9);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0598");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        java.nio.charset.Charset charset6 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset10 = builder9.getCharsetDefault();
        int int11 = builder9.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder9.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder17 = builder9.setByteArray(byteArray16);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder9.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder21 = builder9.setBufferSize((int) (byte) 0);
        java.nio.file.Path path22 = builder9.getPath();
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset24 = builder23.getCharsetDefault();
        int int25 = builder23.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder23.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder31 = builder23.setByteArray(byteArray30);
        org.apache.commons.csv.CSVParser.Builder builder33 = builder23.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder35 = builder23.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder37 = builder23.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder39 = builder37.setCharacterOffset((long) '#');
        java.io.File file40 = builder39.getFile();
        org.apache.commons.csv.CSVParser.Builder builder41 = builder9.setFile(file40);
        org.apache.commons.csv.CSVParser.Builder builder42 = builder8.setFile(file40);
        org.apache.commons.csv.CSVParser.Builder builder43 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset44 = builder43.getCharsetDefault();
        java.nio.charset.Charset charset45 = builder43.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat46 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean47 = cSVFormat46.getSkipHeaderRecord();
        java.lang.String str48 = cSVFormat46.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode49 = cSVFormat46.getDuplicateHeaderMode();
        boolean boolean50 = cSVFormat46.isEscapeCharacterSet();
        boolean boolean51 = cSVFormat46.getTrailingData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser52 = org.apache.commons.csv.CSVParser.parse(file40, charset45, cSVFormat46);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8192 + "'", int11 == 8192);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertArrayEquals(byteArray16, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(path22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8192 + "'", int25 == 8192);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertArrayEquals(byteArray30, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(file40);
        org.junit.Assert.assertNull("file40.getParent() == null", file40.getParent());
        org.junit.Assert.assertEquals(file40.toString(), "");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\n" + "'", str48, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode49 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode49.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0599");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder15 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset16 = builder15.getCharsetDefault();
        int int17 = builder15.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder15.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder23 = builder15.setByteArray(byteArray22);
        org.apache.commons.csv.CSVParser.Builder builder24 = builder14.setByteArray(byteArray22);
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file25 = builder14.getFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getFile() for byte[] origin [B@6e0aeb69");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8192 + "'", int17 == 8192);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertArrayEquals(byteArray22, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0600");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharacterOffset((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder18 = builder14.setCharacterOffset((long) 'a');
        java.io.File file19 = builder18.getFile();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder21 = builder18.setCharset("\r\n#Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]#Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??#Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<?> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, ??, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\"]#Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<?> SkipHeaderRecord:false");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertNull("file19.getParent() == null", file19.getParent());
        org.junit.Assert.assertEquals(file19.toString(), "");
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0601");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder6.setCommentMarker('#');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder6.setIgnoreSurroundingSpaces(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0602");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getAutoFlush();
        boolean boolean3 = cSVFormat1.getTrim();
        java.lang.Appendable appendable4 = null;
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset6 = builder5.getCharsetDefault();
        int int7 = builder5.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder5.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder13 = builder5.setByteArray(byteArray12);
        org.apache.commons.csv.CSVParser.Builder builder15 = builder5.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder17 = builder5.setBufferSize((int) (byte) 0);
        java.util.function.IntUnaryOperator intUnaryOperator18 = null;
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setBufferSizeChecker(intUnaryOperator18);
        java.nio.file.OpenOption[] openOptionArray20 = builder17.getOpenOptions();
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat1.printRecord(appendable4, (java.lang.Object[]) openOptionArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8192 + "'", int7 == 8192);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertArrayEquals(byteArray12, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(openOptionArray20);
        org.junit.Assert.assertArrayEquals(openOptionArray20, new java.nio.file.OpenOption[] {});
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0603");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder2.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setBufferSizeMax((int) (byte) -1);
        java.nio.charset.Charset charset6 = builder5.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder5.setBufferSizeMax(0);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path9 = builder8.getPath();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0604");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        java.lang.String str9 = cSVFormat7.getRecordSeparator();
        boolean boolean10 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat7);
        org.apache.commons.csv.QuoteMode quoteMode12 = null;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuoteMode(quoteMode12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray22 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder11.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder6.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder6.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder6.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder6.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder30.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder30.setTrailingDelimiter(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertArrayEquals(strArray22, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0605");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getIgnoreHeaderCase();
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str8 = cSVFormat1.format(objArray7);
        boolean boolean9 = cSVFormat1.getTrim();
        boolean boolean10 = cSVFormat1.getIgnoreEmptyLines();
        java.lang.Appendable appendable11 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat1.println(appendable11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str8, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0606");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setEscape('\"');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setTrim(true);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder12.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat19 = builder12.get();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(cSVFormat19);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0607");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setTrailingData(true);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder22.setAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder22.setRecordSeparator("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean30 = cSVFormat29.getSkipHeaderRecord();
        java.lang.String str31 = cSVFormat29.getRecordSeparator();
        boolean boolean32 = cSVFormat29.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder33 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat29);
        org.apache.commons.csv.QuoteMode quoteMode34 = null;
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setQuoteMode(quoteMode34);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder33.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray44 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder33.setHeaderComments(strArray44);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder33.setCommentMarker('a');
        java.sql.ResultSetMetaData resultSetMetaData48 = null;
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder47.setHeader(resultSetMetaData48);
        org.apache.commons.csv.CSVFormat cSVFormat50 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean51 = cSVFormat50.getSkipHeaderRecord();
        java.lang.String str52 = cSVFormat50.getRecordSeparator();
        boolean boolean53 = cSVFormat50.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder54 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat50);
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder54.setCommentMarker('a');
        java.lang.String[] strArray61 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" };
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder54.setHeader(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder54.setNullString("");
        org.apache.commons.csv.CSVFormat cSVFormat65 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean66 = cSVFormat65.getSkipHeaderRecord();
        java.lang.String str67 = cSVFormat65.getRecordSeparator();
        boolean boolean68 = cSVFormat65.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder69 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat65);
        org.apache.commons.csv.QuoteMode quoteMode70 = null;
        org.apache.commons.csv.CSVFormat.Builder builder71 = builder69.setQuoteMode(quoteMode70);
        org.apache.commons.csv.CSVFormat.Builder builder73 = builder69.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray80 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder81 = builder69.setHeaderComments(strArray80);
        org.apache.commons.csv.CSVFormat.Builder builder82 = builder64.setHeader(strArray80);
        org.apache.commons.csv.CSVFormat.Builder builder83 = builder47.setHeaderComments(strArray80);
        org.apache.commons.csv.CSVFormat.Builder builder84 = builder22.setHeaderComments(strArray80);
        org.apache.commons.csv.CSVFormat.Builder builder86 = builder84.setDelimiter("a");
        org.apache.commons.csv.CSVFormat.Builder builder88 = builder84.setNullString("\t");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\n" + "'", str31, "\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertArrayEquals(strArray44, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\n" + "'", str52, "\n");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertArrayEquals(strArray61, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" });
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\n" + "'", str67, "\n");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertArrayEquals(strArray80, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0608");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setQuote((java.lang.Character) '#');
        java.sql.ResultSet resultSet23 = null;
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setHeader(resultSet23);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setTrailingData(true);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean28 = cSVFormat27.getSkipHeaderRecord();
        java.lang.String str29 = cSVFormat27.getRecordSeparator();
        boolean boolean30 = cSVFormat27.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder31 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat27);
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setDelimiter('a');
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setTrim(true);
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder37.setNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean41 = cSVFormat40.getSkipHeaderRecord();
        java.lang.String str42 = cSVFormat40.getRecordSeparator();
        boolean boolean43 = cSVFormat40.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter44 = cSVFormat40.printer();
        boolean boolean45 = cSVFormat40.getIgnoreHeaderCase();
        org.apache.commons.csv.QuoteMode quoteMode46 = cSVFormat40.getQuoteMode();
        org.apache.commons.csv.QuoteMode quoteMode47 = cSVFormat40.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder39.setQuoteMode(quoteMode47);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder26.setQuoteMode(quoteMode47);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\n" + "'", str29, "\n");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\n" + "'", str42, "\n");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(cSVPrinter44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + quoteMode46 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode46.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertTrue("'" + quoteMode47 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode47.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0609");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setTrailingData(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder8.get();
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder8.setLenientEof(true);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder8.setAutoFlush(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0610");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isNullStringSet();
        java.lang.String[] strArray2 = cSVFormat0.getHeaderComments();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        byte[] byteArray5 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder6 = builder3.setByteArray(byteArray5);
        java.nio.charset.Charset charset7 = builder3.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder3.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset11 = builder10.getCharsetDefault();
        int int12 = builder10.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder10.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder18 = builder10.setByteArray(byteArray17);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder10.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder22 = builder10.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder24 = builder10.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharacterOffset((long) '#');
        java.io.File file27 = builder26.getFile();
        org.apache.commons.csv.CSVParser.Builder builder28 = builder9.setFile(file27);
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setFile(",");
        java.io.Reader reader31 = null; // flaky "1) test0610(org.apache.commons.csv.randoop.RegressionTest1)": builder28.getReader();
        org.apache.commons.csv.CSVParser cSVParser32 = null; // flaky "1) test0610(org.apache.commons.csv.randoop.RegressionTest1)": cSVFormat0.parse(reader31);
        java.util.Map<java.lang.String, java.lang.Integer> strMap33 = null; // flaky "1) test0610(org.apache.commons.csv.randoop.RegressionTest1)": cSVParser32.getHeaderMap();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertArrayEquals(byteArray5, new byte[] {});
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8192 + "'", int12 == 8192);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertNull("file27.getParent() == null", file27.getParent());
        org.junit.Assert.assertEquals(file27.toString(), "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
// flaky "1) test0610(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(reader31);
// flaky "1) test0610(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser32);
// flaky "1) test0610(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(strMap33);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0611");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.nio.charset.Charset charset4 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        int int9 = builder7.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder7.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder7.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder19 = builder7.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder7.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) '#');
        java.io.File file24 = builder23.getFile();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder6.setFile(file24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setFile(",");
        java.io.Reader reader28 = null; // flaky "2) test0611(org.apache.commons.csv.randoop.RegressionTest1)": builder25.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean30 = cSVFormat29.getSkipHeaderRecord();
        java.lang.String str31 = cSVFormat29.getRecordSeparator();
        boolean boolean32 = cSVFormat29.isNullStringSet();
        boolean boolean33 = cSVFormat29.isCommentMarkerSet();
        org.apache.commons.csv.CSVParser cSVParser34 = null; // flaky "2) test0611(org.apache.commons.csv.randoop.RegressionTest1)": org.apache.commons.csv.CSVParser.parse(reader28, cSVFormat29);
        long long35 = 0L; // flaky "2) test0611(org.apache.commons.csv.randoop.RegressionTest1)": cSVParser34.getRecordNumber();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
// flaky "2) test0611(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(reader28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\n" + "'", str31, "\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky "2) test0611(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0612");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharacterOffset((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder18 = builder14.setCharacterOffset((long) 'a');
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setBufferSize((int) (short) 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0613");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean4 = cSVFormat3.getSkipHeaderRecord();
        java.lang.String str5 = cSVFormat3.getRecordSeparator();
        boolean boolean6 = cSVFormat3.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder7 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat3);
        org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean9 = cSVFormat8.getSkipHeaderRecord();
        java.lang.String str10 = cSVFormat8.getRecordSeparator();
        boolean boolean11 = cSVFormat8.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder12 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat8);
        org.apache.commons.csv.QuoteMode quoteMode13 = null;
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setQuoteMode(quoteMode13);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray23 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder12.setHeaderComments(strArray23);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder7.setHeaderComments((java.lang.Object[]) strArray23);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder2.setHeaderComments((java.lang.Object[]) strArray23);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\n" + "'", str5, "\n");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\n" + "'", str10, "\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertArrayEquals(strArray23, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0614");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.INFORMIX_UNLOAD_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        boolean boolean3 = cSVFormat1.isQuoteCharacterSet();
        java.lang.String str4 = cSVFormat1.getRecordSeparator();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.INFORMIX_UNLOAD_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.INFORMIX_UNLOAD_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\n" + "'", str4, "\n");
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0615");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setRecordNumber((long) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream7 = builder0.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getPath() for byte[] origin [B@74f0cce2");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0616");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        java.lang.CharSequence charSequence5 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        byte[] byteArray8 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder9 = builder6.setByteArray(byteArray8);
        java.lang.CharSequence charSequence10 = builder6.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder6.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder13 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset14 = builder13.getCharsetDefault();
        int int15 = builder13.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder17 = builder13.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder21 = builder13.setByteArray(byteArray20);
        java.nio.charset.Charset charset22 = builder13.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder12.setCharset(charset22);
        org.apache.commons.csv.CSVParser.Builder builder24 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset25 = builder24.getCharsetDefault();
        int int26 = builder24.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder28 = builder24.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray31 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder32 = builder24.setByteArray(byteArray31);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder24.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder36 = builder24.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder38 = builder24.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder39 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset40 = builder39.getCharsetDefault();
        int int41 = builder39.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder39.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder47 = builder39.setByteArray(byteArray46);
        org.apache.commons.csv.CSVParser.Builder builder48 = builder38.setByteArray(byteArray46);
        org.apache.commons.csv.CSVParser.Builder builder49 = builder23.setByteArray(byteArray46);
        org.apache.commons.csv.CSVParser.Builder builder50 = builder0.setByteArray(byteArray46);
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream51 = builder0.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getPath() for byte[] origin [B@3751de9b");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertEquals("'" + charSequence5 + "' != '" + "" + "'", charSequence5, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertArrayEquals(byteArray8, new byte[] {});
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "" + "'", charSequence10, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8192 + "'", int15 == 8192);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertArrayEquals(byteArray20, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8192 + "'", int26 == 8192);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertArrayEquals(byteArray31, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8192 + "'", int41 == 8192);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertArrayEquals(byteArray46, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0617");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        byte[] byteArray9 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder10 = builder7.setByteArray(byteArray9);
        java.lang.CharSequence charSequence11 = builder7.getCharSequence();
        java.lang.CharSequence charSequence12 = builder7.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser13 = builder7.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray14 = builder7.getOpenOptions();
        java.nio.charset.Charset charset15 = builder7.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder0.setCharset(charset15);
        byte[] byteArray17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder18 = builder0.setByteArray(byteArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "" + "'", charSequence11, "");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertNotNull(cSVParser13);
        org.junit.Assert.assertNotNull(openOptionArray14);
        org.junit.Assert.assertArrayEquals(openOptionArray14, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0618");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.isNullStringSet();
        java.lang.String str4 = cSVFormat0.getDelimiterString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "," + "'", str4, ",");
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0619");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset10 = builder9.getCharsetDefault();
        byte[] byteArray11 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder12 = builder9.setByteArray(byteArray11);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder9.setBufferSize((int) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray15 = new java.nio.file.OpenOption[] {};
        org.apache.commons.csv.CSVParser.Builder builder16 = builder9.setOpenOptions(openOptionArray15);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder8.setOpenOptions(openOptionArray15);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setFile("\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertArrayEquals(byteArray11, new byte[] {});
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(openOptionArray15);
        org.junit.Assert.assertArrayEquals(openOptionArray15, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0620");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getIgnoreHeaderCase();
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str8 = cSVFormat1.format(objArray7);
        java.lang.String str9 = cSVFormat1.getRecordSeparator();
        boolean boolean10 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode11 = cSVFormat1.getQuoteMode();
        java.lang.Character char12 = cSVFormat1.getEscapeCharacter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str8, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\r\n" + "'", str9, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + quoteMode11 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode11.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + '\"' + "'", char12 == '\"');
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0621");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        boolean boolean4 = cSVFormat0.getAutoFlush();
        java.lang.String[] strArray5 = cSVFormat0.getHeaderComments();
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        byte[] byteArray8 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder9 = builder6.setByteArray(byteArray8);
        org.apache.commons.csv.CSVParser.Builder builder11 = builder6.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder13 = builder6.setBufferSize((int) 'a');
        java.nio.file.OpenOption[] openOptionArray14 = builder13.getOpenOptions();
        java.lang.String str15 = cSVFormat0.format((java.lang.Object[]) openOptionArray14);
        java.lang.Appendable appendable16 = null;
        java.lang.Object[] objArray17 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat0.printRecord(appendable16, objArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertArrayEquals(byteArray8, new byte[] {});
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(openOptionArray14);
        org.junit.Assert.assertArrayEquals(openOptionArray14, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0622");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        byte[] byteArray9 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder10 = builder7.setByteArray(byteArray9);
        java.lang.CharSequence charSequence11 = builder7.getCharSequence();
        java.lang.CharSequence charSequence12 = builder7.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser13 = builder7.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray14 = builder7.getOpenOptions();
        java.nio.charset.Charset charset15 = builder7.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder0.setCharset(charset15);
        org.apache.commons.csv.CSVParser.Builder builder17 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset18 = builder17.getCharsetDefault();
        byte[] byteArray19 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder20 = builder17.setByteArray(byteArray19);
        java.lang.CharSequence charSequence21 = builder17.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder17.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder25 = builder17.setRecordNumber((long) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder26 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset27 = builder26.getCharsetDefault();
        int int28 = builder26.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder26.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder34 = builder26.setByteArray(byteArray33);
        org.apache.commons.csv.CSVParser.Builder builder36 = builder26.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder38 = builder26.setBufferSize((int) (byte) 0);
        java.nio.file.Path path39 = builder26.getPath();
        org.apache.commons.csv.CSVParser.Builder builder40 = builder17.setPath(path39);
        org.apache.commons.csv.CSVParser.Builder builder41 = builder0.setPath(path39);
        int int42 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder44 = builder0.setRecordNumber((long) (short) 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "" + "'", charSequence11, "");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertNotNull(cSVParser13);
        org.junit.Assert.assertNotNull(openOptionArray14);
        org.junit.Assert.assertArrayEquals(openOptionArray14, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertArrayEquals(byteArray19, new byte[] {});
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "" + "'", charSequence21, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8192 + "'", int28 == 8192);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertArrayEquals(byteArray33, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(path39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8192 + "'", int42 == 8192);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0623");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setLenientEof(true);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder20.setEscape((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder20.setCommentMarker((java.lang.Character) '#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0624");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean10 = cSVFormat9.getSkipHeaderRecord();
        java.lang.String str11 = cSVFormat9.getRecordSeparator();
        boolean boolean12 = cSVFormat9.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder13 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat9);
        org.apache.commons.csv.QuoteMode quoteMode14 = null;
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setQuoteMode(quoteMode14);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray24 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder13.setHeaderComments(strArray24);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder4.setHeaderComments(strArray24);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setRecordSeparator('4');
        org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean30 = cSVFormat29.getSkipHeaderRecord();
        java.lang.String str31 = cSVFormat29.getRecordSeparator();
        boolean boolean32 = cSVFormat29.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder33 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat29);
        org.apache.commons.csv.QuoteMode quoteMode34 = null;
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setQuoteMode(quoteMode34);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder33.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray44 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder33.setHeaderComments(strArray44);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder33.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder47.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder47.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder47.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean55 = cSVFormat54.getSkipHeaderRecord();
        java.lang.String str56 = cSVFormat54.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode57 = cSVFormat54.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder47.setDuplicateHeaderMode(duplicateHeaderMode57);
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder26.setDuplicateHeaderMode(duplicateHeaderMode57);
        org.apache.commons.csv.CSVFormat cSVFormat60 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean61 = cSVFormat60.getSkipHeaderRecord();
        java.lang.String str62 = cSVFormat60.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode63 = cSVFormat60.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder59.setDuplicateHeaderMode(duplicateHeaderMode63);
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder64.setAutoFlush(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\n" + "'", str11, "\n");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertArrayEquals(strArray24, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\n" + "'", str31, "\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertArrayEquals(strArray44, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\n" + "'", str56, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode57 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode57.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\n" + "'", str62, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode63 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode63.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0625");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.isCommentMarkerSet();
        java.lang.String str3 = cSVFormat1.getNullString();
        boolean boolean4 = cSVFormat1.getTrailingData();
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        java.lang.String str6 = cSVFormat1.toString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str6, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0626");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setCharacterOffset((long) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Writer writer15 = builder0.getWriter();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0627");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder18.setLenientEof(false);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder18.setDelimiter('4');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder18.setAllowMissingColumnNames(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0628");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        java.util.function.IntUnaryOperator intUnaryOperator13 = null;
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setBufferSizeChecker(intUnaryOperator13);
        java.nio.file.Path path15 = builder14.getPath();
        org.apache.commons.csv.CSVParser.Builder builder16 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset17 = builder16.getCharsetDefault();
        int int18 = builder16.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder16.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder24 = builder16.setByteArray(byteArray23);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder16.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder27 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder27.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder30 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset31 = builder30.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder27.setCharset(charset31);
        java.nio.charset.Charset charset33 = builder27.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder34 = builder16.setCharset(charset33);
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVPrinter cSVPrinter36 = cSVFormat35.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined37 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat38 = predefined37.getFormat();
        boolean boolean39 = cSVFormat38.getIgnoreHeaderCase();
        java.lang.Object[] objArray44 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str45 = cSVFormat38.format(objArray44);
        java.lang.String str46 = cSVFormat35.format(objArray44);
        boolean boolean47 = cSVFormat35.isEscapeCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode48 = cSVFormat35.getQuoteMode();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode49 = cSVFormat35.getDuplicateHeaderMode();
        boolean boolean50 = cSVFormat35.isCommentMarkerSet();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser51 = org.apache.commons.csv.CSVParser.parse(path15, charset33, cSVFormat35);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(path15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8192 + "'", int18 == 8192);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertArrayEquals(byteArray23, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(cSVPrinter36);
        org.junit.Assert.assertTrue("'" + predefined37 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined37.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str45, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str46, "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + quoteMode48 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode48.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode49 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode49.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0629");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.lang.String str6 = cSVParser5.getHeaderComment();
        java.lang.String str7 = cSVParser5.getTrailerComment();
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = cSVParser5.getHeaderMap();
        boolean boolean9 = cSVParser5.hasTrailerComment();
        java.util.List<java.lang.String> strList10 = cSVParser5.getHeaderNames();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0630");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharacterOffset((long) '#');
        java.io.File file17 = builder16.getFile();
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset19 = builder18.getCharsetDefault();
        int int20 = builder18.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder18.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder26 = builder18.setByteArray(byteArray25);
        org.apache.commons.csv.CSVParser.Builder builder28 = builder18.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder30 = builder18.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder32 = builder18.setCharacterOffset((long) (byte) 1);
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 100, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder37 = builder32.setByteArray(byteArray36);
        org.apache.commons.csv.CSVParser.Builder builder38 = builder16.setByteArray(byteArray36);
        // The following exception was thrown during execution in test generation
        try {
            java.io.RandomAccessFile randomAccessFile39 = builder16.getRandomAccessFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getFile() for byte[] origin [B@1c81b0d4");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8192 + "'", int20 == 8192);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertArrayEquals(byteArray25, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertArrayEquals(byteArray36, new byte[] { (byte) -1, (byte) 100, (byte) 1 });
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0631");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setEscape('\"');
        java.sql.ResultSet resultSet9 = null;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setHeader(resultSet9);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setNullString("\r\n#Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]#Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0632");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVFormat2.getSkipHeaderRecord();
        boolean boolean8 = cSVFormat2.equals((java.lang.Object) '4');
        boolean boolean9 = cSVFormat2.getTrailingData();
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset11 = builder10.getCharsetDefault();
        byte[] byteArray12 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder13 = builder10.setByteArray(byteArray12);
        java.lang.CharSequence charSequence14 = builder10.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder10.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder17 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset18 = builder17.getCharsetDefault();
        byte[] byteArray19 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder20 = builder17.setByteArray(byteArray19);
        java.lang.CharSequence charSequence21 = builder17.getCharSequence();
        java.lang.CharSequence charSequence22 = builder17.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser23 = builder17.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray24 = builder17.getOpenOptions();
        java.nio.charset.Charset charset25 = builder17.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder26 = builder10.setCharset(charset25);
        org.apache.commons.csv.CSVParser cSVParser27 = builder26.getUnchecked();
        java.lang.Appendable appendable28 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat2.print((java.lang.Object) cSVParser27, appendable28, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertArrayEquals(byteArray12, new byte[] {});
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertArrayEquals(byteArray19, new byte[] {});
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "" + "'", charSequence21, "");
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "" + "'", charSequence22, "");
        org.junit.Assert.assertNotNull(cSVParser23);
        org.junit.Assert.assertNotNull(openOptionArray24);
        org.junit.Assert.assertArrayEquals(openOptionArray24, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVParser27);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0633");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        boolean boolean4 = cSVFormat0.getAutoFlush();
        java.lang.String[] strArray5 = cSVFormat0.getHeaderComments();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = strArray5.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strArray5);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0634");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset15 = builder14.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder11.setCharset(charset15);
        java.nio.charset.Charset charset17 = builder11.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder0.setCharset(charset17);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setFile("\t");
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
        org.apache.commons.csv.CSVParser.Builder builder23 = builder18.setFormat(cSVFormat22);
        int int24 = builder23.getBufferSizeDefault();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8192 + "'", int24 == 8192);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0635");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setBufferSize((int) 'a');
        java.nio.file.OpenOption[] openOptionArray8 = builder7.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder7.setBufferSizeMax((int) (short) 10);
        java.io.Writer writer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder12 = builder7.setWriter(writer11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(openOptionArray8);
        org.junit.Assert.assertArrayEquals(openOptionArray8, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0636");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 100);
        java.util.function.IntUnaryOperator intUnaryOperator9 = null;
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setBufferSizeChecker(intUnaryOperator9);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset12 = builder11.getCharsetDefault();
        int int13 = builder11.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder11.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder19 = builder11.setByteArray(byteArray18);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder10.setByteArray(byteArray18);
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset22 = builder21.getCharsetDefault();
        byte[] byteArray23 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder24 = builder21.setByteArray(byteArray23);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier25 = builder21.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder26 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset27 = builder26.getCharsetDefault();
        byte[] byteArray28 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder29 = builder26.setByteArray(byteArray28);
        java.lang.CharSequence charSequence30 = builder26.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder26.setBufferSize((int) ' ');
        java.io.InputStream inputStream33 = builder32.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder34 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset35 = builder34.getCharsetDefault();
        byte[] byteArray36 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder37 = builder34.setByteArray(byteArray36);
        java.nio.charset.Charset charset38 = builder34.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder41 = cSVFormat40.builder();
        java.lang.String str42 = cSVFormat40.getNullString();
        org.apache.commons.csv.CSVParser cSVParser43 = org.apache.commons.csv.CSVParser.parse(inputStream33, charset38, cSVFormat40);
        org.apache.commons.csv.CSVParser.Builder builder44 = builder21.setInputStream(inputStream33);
        org.apache.commons.csv.CSVParser.Builder builder45 = builder10.setInputStream(inputStream33);
        java.io.RandomAccessFile randomAccessFile46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder47 = builder10.setRandomAccessFile(randomAccessFile46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8192 + "'", int13 == 8192);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertArrayEquals(byteArray23, new byte[] {});
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(cSVParserSupplier25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertArrayEquals(byteArray28, new byte[] {});
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "" + "'", charSequence30, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertArrayEquals(byteArray36, new byte[] {});
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(cSVParser43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0637");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        boolean boolean2 = cSVFormat0.getLenientEof();
        java.lang.String str3 = cSVFormat0.getNullString();
        org.apache.commons.csv.QuoteMode quoteMode4 = cSVFormat0.getQuoteMode();
        java.lang.String str5 = cSVFormat0.getNullString();
        java.lang.Appendable appendable6 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat0.println(appendable6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(quoteMode4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0638");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setTrailingData(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder8.get();
        java.lang.Character char12 = cSVFormat11.getEscapeCharacter();
        java.lang.Character char13 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder14 = cSVFormat11.builder();
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setCommentMarker((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder14.setQuote((java.lang.Character) '#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + '#' + "'", char12 == '#');
        org.junit.Assert.assertNull(char13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0639");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean10 = cSVFormat9.getSkipHeaderRecord();
        java.lang.String str11 = cSVFormat9.getRecordSeparator();
        boolean boolean12 = cSVFormat9.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder13 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat9);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setTrim(false);
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean19 = cSVFormat18.getSkipHeaderRecord();
        java.lang.String str20 = cSVFormat18.getRecordSeparator();
        boolean boolean21 = cSVFormat18.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder22 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat18);
        org.apache.commons.csv.QuoteMode quoteMode23 = null;
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setQuoteMode(quoteMode23);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder22.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean28 = cSVFormat27.getSkipHeaderRecord();
        java.lang.String str29 = cSVFormat27.getRecordSeparator();
        boolean boolean30 = cSVFormat27.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder31 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat27);
        org.apache.commons.csv.QuoteMode quoteMode32 = null;
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setQuoteMode(quoteMode32);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder31.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray42 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder31.setHeaderComments(strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder22.setHeaderComments(strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder17.setHeaderComments((java.lang.Object[]) strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder8.setHeader(strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder46.setRecordSeparator("");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\n" + "'", str11, "\n");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\n" + "'", str20, "\n");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\n" + "'", str29, "\n");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertArrayEquals(strArray42, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0640");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeaderComments();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        java.lang.String str3 = cSVFormat0.getNullString();
        java.lang.String str4 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder7 = cSVFormat6.builder();
        java.lang.Appendable appendable8 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat0.print((java.lang.Object) cSVFormat6, appendable8, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0641");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        java.lang.String str3 = cSVParser2.getFirstEndOfLine();
        java.util.List<java.lang.String> strList4 = cSVParser2.getHeaderNames();
        java.util.Spliterator<java.lang.String> strSpliterator5 = strList4.spliterator();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVParser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strSpliterator5);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0642");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getAutoFlush();
        java.lang.Character char3 = cSVFormat1.getEscapeCharacter();
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder4.setBufferSize((java.lang.Integer) 100);
        int int7 = builder4.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder4.setCharacterOffset((long) 1);
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset11 = builder10.getCharsetDefault();
        int int12 = builder10.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder10.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser15 = builder10.getUnchecked();
        org.apache.commons.csv.CSVParser.Builder builder17 = builder10.setPath(",");
        java.nio.file.OpenOption[] openOptionArray18 = builder17.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder9.setOpenOptions(openOptionArray18);
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset21 = builder20.getCharsetDefault();
        int int22 = builder20.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder20.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray27 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder28 = builder20.setByteArray(byteArray27);
        org.apache.commons.csv.CSVParser.Builder builder30 = builder20.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder32 = builder20.setBufferSize((int) (byte) 0);
        java.nio.file.Path path33 = builder20.getPath();
        org.apache.commons.csv.CSVParser.Builder builder34 = builder19.setPath(path33);
        org.apache.commons.csv.CSVParser.Builder builder35 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset36 = builder35.getCharsetDefault();
        byte[] byteArray37 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder38 = builder35.setByteArray(byteArray37);
        java.nio.charset.Charset charset39 = builder35.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder41 = builder35.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder42 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset43 = builder42.getCharsetDefault();
        int int44 = builder42.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder46 = builder42.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder50 = builder42.setByteArray(byteArray49);
        org.apache.commons.csv.CSVParser.Builder builder52 = builder42.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder54 = builder42.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder56 = builder42.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder58 = builder56.setCharacterOffset((long) '#');
        java.io.File file59 = builder58.getFile();
        org.apache.commons.csv.CSVParser.Builder builder60 = builder41.setFile(file59);
        org.apache.commons.csv.CSVParser.Builder builder62 = builder41.setCharacterOffset((long) 10);
        org.apache.commons.csv.CSVParser.Builder builder63 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder65 = builder63.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder66 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset67 = builder66.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder68 = builder63.setCharset(charset67);
        java.nio.charset.Charset charset69 = builder63.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder70 = builder62.setCharset(charset69);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter71 = cSVFormat1.print(path33, charset69);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + '\"' + "'", char3 == '\"');
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8192 + "'", int7 == 8192);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8192 + "'", int12 == 8192);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVParser15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(openOptionArray18);
        org.junit.Assert.assertArrayEquals(openOptionArray18, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8192 + "'", int22 == 8192);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertArrayEquals(byteArray27, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(path33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertArrayEquals(byteArray37, new byte[] {});
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8192 + "'", int44 == 8192);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertArrayEquals(byteArray49, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(file59);
        org.junit.Assert.assertNull("file59.getParent() == null", file59.getParent());
        org.junit.Assert.assertEquals(file59.toString(), "");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(charset67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0643");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        java.io.InputStream inputStream7 = builder6.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        byte[] byteArray10 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder11 = builder8.setByteArray(byteArray10);
        java.nio.charset.Charset charset12 = builder8.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat14.builder();
        java.lang.String str16 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse(inputStream7, charset12, cSVFormat14);
        boolean boolean18 = cSVFormat14.getIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertArrayEquals(byteArray10, new byte[] {});
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVParser17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0644");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setNullString("Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0645");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getIgnoreHeaderCase();
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str8 = cSVFormat1.format(objArray7);
        java.lang.String str9 = cSVFormat1.getRecordSeparator();
        boolean boolean10 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode11 = cSVFormat1.getQuoteMode();
        java.lang.Character char12 = cSVFormat1.getCommentMarker();
        java.lang.Character char13 = cSVFormat1.getEscapeCharacter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str8, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\r\n" + "'", str9, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + quoteMode11 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode11.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertTrue("'" + char13 + "' != '" + '\"' + "'", char13 == '\"');
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0646");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        java.net.URI uRI6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setURI(uRI6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0647");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("\"");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0648");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean2 = cSVFormat1.getSkipHeaderRecord();
        java.lang.String str3 = cSVFormat1.getRecordSeparator();
        java.lang.String[] strArray4 = cSVFormat1.getHeader();
        java.lang.String str5 = cSVFormat1.getDelimiterString();
        boolean boolean6 = cSVFormat1.getIgnoreEmptyLines();
        boolean boolean7 = cSVFormat1.getSkipHeaderRecord();
        boolean boolean8 = cSVFormat1.getTrim();
        org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n");
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "," + "'", str5, ",");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVParser9);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0649");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder2.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset5 = builder4.getCharsetDefault();
        byte[] byteArray6 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder7 = builder4.setByteArray(byteArray6);
        java.lang.CharSequence charSequence8 = builder4.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder4.setBufferSize((int) ' ');
        java.io.InputStream inputStream11 = builder10.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset13 = builder12.getCharsetDefault();
        byte[] byteArray14 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder15 = builder12.setByteArray(byteArray14);
        java.nio.charset.Charset charset16 = builder12.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder19 = cSVFormat18.builder();
        java.lang.String str20 = cSVFormat18.getNullString();
        org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse(inputStream11, charset16, cSVFormat18);
        org.apache.commons.csv.CSVParser.Builder builder22 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset23 = builder22.getCharsetDefault();
        byte[] byteArray24 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder25 = builder22.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder22.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder29 = builder22.setBufferSize((int) 'a');
        java.nio.charset.Charset charset30 = builder29.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse(inputStream11, charset30, cSVFormat32);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder2.setCharset(charset30);
        org.apache.commons.csv.CSVParser.Builder builder36 = builder2.setRecordNumber((long) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.io.RandomAccessFile randomAccessFile37 = builder2.getRandomAccessFile();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] {});
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "" + "'", charSequence8, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] {});
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVParser21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] {});
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVParser33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0650");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setLenientEof(true);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setDelimiter('#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0651");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setBufferSize((java.lang.Integer) (-1));
        org.apache.commons.io.IORandomAccessFile iORandomAccessFile11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setRandomAccessFile(iORandomAccessFile11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0652");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode3 = cSVFormat0.getDuplicateHeaderMode();
        boolean boolean4 = cSVFormat0.isEscapeCharacterSet();
        boolean boolean5 = cSVFormat0.getIgnoreSurroundingSpaces();
        boolean boolean6 = cSVFormat0.getTrailingDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode3 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode3.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0653");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 100);
        java.io.Writer writer9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setWriter(writer9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0654");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        java.util.function.IntUnaryOperator intUnaryOperator13 = null;
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setBufferSizeChecker(intUnaryOperator13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setBufferSize(100);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Reader reader17 = builder14.getReader();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0655");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        int int8 = builder6.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder14 = builder6.setByteArray(byteArray13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder6.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder18 = builder6.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder6.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset22 = builder21.getCharsetDefault();
        int int23 = builder21.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder21.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder29 = builder21.setByteArray(byteArray28);
        org.apache.commons.csv.CSVParser.Builder builder30 = builder20.setByteArray(byteArray28);
        java.nio.charset.Charset charset31 = builder20.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder0.setCharset(charset31);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder32.setBufferSize((java.lang.Integer) 0);
        java.nio.charset.Charset charset35 = builder34.getCharsetDefault();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertArrayEquals(byteArray13, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8192 + "'", int23 == 8192);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertArrayEquals(byteArray28, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(charset35);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0656");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder2.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setBufferSize((java.lang.Integer) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0657");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode3 = cSVFormat0.getDuplicateHeaderMode();
        boolean boolean4 = cSVFormat0.isEscapeCharacterSet();
        boolean boolean5 = cSVFormat0.getTrailingData();
        java.lang.Character char6 = cSVFormat0.getEscapeCharacter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode3 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode3.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(char6);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0658");
        java.io.Reader reader0 = null;
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.toString();
        boolean boolean4 = cSVFormat2.isEscapeCharacterSet();
        boolean boolean5 = cSVFormat2.isQuoteCharacterSet();
        boolean boolean6 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder7 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat2);
        boolean boolean8 = cSVFormat2.getAllowMissingColumnNames();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser11 = new org.apache.commons.csv.CSVParser(reader0, cSVFormat2, (long) (byte) -1, (long) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reader");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str3, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0659");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setQuote('a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0660");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setCommentMarker('#');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setEscape((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder12.setNullString("Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0661");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeaderComments();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        java.lang.String str3 = cSVFormat0.getNullString();
        java.lang.String str4 = cSVFormat0.getNullString();
        java.lang.String str5 = cSVFormat0.getNullString();
        java.lang.String str6 = cSVFormat0.toString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false" + "'", str6, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0662");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.String[] strArray3 = cSVFormat0.getHeader();
        java.lang.String str4 = cSVFormat0.getDelimiterString();
        boolean boolean5 = cSVFormat0.getIgnoreEmptyLines();
        boolean boolean6 = cSVFormat0.getSkipHeaderRecord();
        boolean boolean7 = cSVFormat0.getTrim();
        boolean boolean8 = cSVFormat0.getAutoFlush();
        org.apache.commons.csv.CSVFormat.Builder builder9 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder10 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "," + "'", str4, ",");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0663");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        java.lang.String str3 = cSVParser2.getFirstEndOfLine();
        long long4 = cSVParser2.getCurrentLineNumber();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor5 = cSVParser2.iterator();
        boolean boolean6 = cSVParser2.hasHeaderComment();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVParser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordItor5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0664");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) 1);
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        int int8 = builder6.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser11 = builder6.getUnchecked();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder6.setPath(",");
        java.nio.file.OpenOption[] openOptionArray14 = builder13.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder5.setOpenOptions(openOptionArray14);
        org.apache.commons.csv.CSVParser.Builder builder16 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset17 = builder16.getCharsetDefault();
        int int18 = builder16.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder16.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder24 = builder16.setByteArray(byteArray23);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder16.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder28 = builder16.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder30 = builder16.setCharacterOffset((long) (byte) 1);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 100, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder35 = builder30.setByteArray(byteArray34);
        java.io.InputStream inputStream36 = builder35.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder37 = builder5.setInputStream(inputStream36);
        java.io.Writer writer38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder39 = builder5.setWriter(writer38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8192 + "'", int3 == 8192);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVParser11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(openOptionArray14);
        org.junit.Assert.assertArrayEquals(openOptionArray14, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8192 + "'", int18 == 8192);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertArrayEquals(byteArray23, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertArrayEquals(byteArray34, new byte[] { (byte) -1, (byte) 100, (byte) 1 });
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(inputStream36);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0665");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharacterOffset((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder18 = builder14.setCharacterOffset((long) 'a');
        org.apache.commons.csv.CSVParser.Builder builder20 = builder14.setBufferSize(8192);
        java.util.function.IntUnaryOperator intUnaryOperator21 = null;
        org.apache.commons.csv.CSVParser.Builder builder22 = builder14.setBufferSizeChecker(intUnaryOperator21);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0666");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.QuoteMode quoteMode3 = cSVFormat0.getQuoteMode();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + quoteMode3 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode3.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0667");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getTrailingData();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setRecordSeparator("Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0668");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.String[] strArray3 = cSVFormat0.getHeader();
        java.lang.String str4 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder5 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setRecordSeparator('4');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0669");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        java.nio.charset.Charset charset9 = builder0.getCharset();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1, (byte) 0, (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder17 = builder0.setByteArray(byteArray16);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setBufferSize((java.lang.Integer) 8192);
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset21 = builder20.getCharsetDefault();
        byte[] byteArray22 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder23 = builder20.setByteArray(byteArray22);
        org.apache.commons.csv.CSVParser.Builder builder25 = builder20.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder20.setBufferSize((int) 'a');
        java.nio.file.OpenOption[] openOptionArray28 = builder27.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder19.setOpenOptions(openOptionArray28);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertArrayEquals(byteArray16, new byte[] { (byte) 1, (byte) 10, (byte) 1, (byte) 0, (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertArrayEquals(byteArray22, new byte[] {});
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(openOptionArray28);
        org.junit.Assert.assertArrayEquals(openOptionArray28, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0670");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getIgnoreHeaderCase();
        boolean boolean2 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        byte[] byteArray5 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder6 = builder3.setByteArray(byteArray5);
        boolean boolean7 = cSVFormat0.equals((java.lang.Object) builder3);
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        byte[] byteArray10 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder11 = builder8.setByteArray(byteArray10);
        java.lang.CharSequence charSequence12 = builder8.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder8.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder16 = builder8.setRecordNumber((long) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder17 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset18 = builder17.getCharsetDefault();
        int int19 = builder17.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder17.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder25 = builder17.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder17.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder29 = builder17.setBufferSize((int) (byte) 0);
        java.nio.file.Path path30 = builder17.getPath();
        org.apache.commons.csv.CSVParser.Builder builder31 = builder8.setPath(path30);
        org.apache.commons.csv.CSVParser.Builder builder32 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder34 = builder32.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder35 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset36 = builder35.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder37 = builder32.setCharset(charset36);
        java.nio.charset.Charset charset38 = builder32.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter39 = cSVFormat0.print(path30, charset38);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertArrayEquals(byteArray5, new byte[] {});
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertArrayEquals(byteArray10, new byte[] {});
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8192 + "'", int19 == 8192);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(path30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(charset38);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0671");
        java.io.File file0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset2 = builder1.getCharsetDefault();
        byte[] byteArray3 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder4 = builder1.setByteArray(byteArray3);
        java.lang.CharSequence charSequence5 = builder1.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder1.setBufferSize((int) ' ');
        java.io.InputStream inputStream8 = builder7.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset10 = builder9.getCharsetDefault();
        byte[] byteArray11 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder12 = builder9.setByteArray(byteArray11);
        java.nio.charset.Charset charset13 = builder9.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder16 = cSVFormat15.builder();
        java.lang.String str17 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse(inputStream8, charset13, cSVFormat15);
        org.apache.commons.csv.CSVParser.Builder builder19 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset20 = builder19.getCharsetDefault();
        byte[] byteArray21 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder22 = builder19.setByteArray(byteArray21);
        java.lang.CharSequence charSequence23 = builder19.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder19.setBufferSize((int) ' ');
        java.io.InputStream inputStream26 = builder25.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder27 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset28 = builder27.getCharsetDefault();
        byte[] byteArray29 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder30 = builder27.setByteArray(byteArray29);
        java.nio.charset.Charset charset31 = builder27.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder34 = cSVFormat33.builder();
        java.lang.String str35 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse(inputStream26, charset31, cSVFormat33);
        org.apache.commons.csv.CSVParser.Builder builder37 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset38 = builder37.getCharsetDefault();
        byte[] byteArray39 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder40 = builder37.setByteArray(byteArray39);
        org.apache.commons.csv.CSVParser.Builder builder42 = builder37.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder44 = builder37.setBufferSize((int) 'a');
        java.nio.charset.Charset charset45 = builder44.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat47 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVParser cSVParser48 = org.apache.commons.csv.CSVParser.parse(inputStream26, charset45, cSVFormat47);
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        boolean boolean52 = cSVFormat51.getIgnoreHeaderCase();
        java.lang.String str53 = cSVFormat51.getDelimiterString();
        boolean boolean54 = cSVFormat51.isQuoteCharacterSet();
        org.apache.commons.csv.CSVParser cSVParser55 = org.apache.commons.csv.CSVParser.parse(",", cSVFormat51);
        org.apache.commons.csv.CSVParser cSVParser56 = org.apache.commons.csv.CSVParser.parse(inputStream8, charset45, cSVFormat51);
        org.apache.commons.csv.CSVFormat cSVFormat57 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean58 = cSVFormat57.getSkipHeaderRecord();
        java.lang.String str59 = cSVFormat57.getRecordSeparator();
        java.lang.String[] strArray60 = cSVFormat57.getHeader();
        java.lang.String str61 = cSVFormat57.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder62 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat57);
        java.lang.Character char63 = cSVFormat57.getCommentMarker();
        org.apache.commons.csv.CSVPrinter cSVPrinter64 = cSVFormat57.printer();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser65 = org.apache.commons.csv.CSVParser.parse(file0, charset45, cSVFormat57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: file");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertArrayEquals(byteArray3, new byte[] {});
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + charSequence5 + "' != '" + "" + "'", charSequence5, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertArrayEquals(byteArray11, new byte[] {});
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(cSVParser18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertArrayEquals(byteArray21, new byte[] {});
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + charSequence23 + "' != '" + "" + "'", charSequence23, "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertArrayEquals(byteArray29, new byte[] {});
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(cSVParser36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertArrayEquals(byteArray39, new byte[] {});
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVParser48);
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "," + "'", str53, ",");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(cSVParser55);
        org.junit.Assert.assertNotNull(cSVParser56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\n" + "'", str59, "\n");
        org.junit.Assert.assertNull(strArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNull(char63);
        org.junit.Assert.assertNotNull(cSVPrinter64);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0672");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVFormat2.getSkipHeaderRecord();
        org.apache.commons.csv.CSVPrinter cSVPrinter7 = cSVFormat2.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined9 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat10 = predefined9.getFormat();
        boolean boolean11 = cSVFormat10.getAutoFlush();
        boolean boolean12 = cSVFormat10.getTrim();
        org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat10);
        java.lang.String str14 = cSVParser13.getHeaderComment();
        cSVParser13.close();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream16 = cSVParser13.stream();
        boolean boolean17 = cSVFormat2.equals((java.lang.Object) cSVParser13);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVPrinter7);
        org.junit.Assert.assertTrue("'" + predefined9 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined9.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVParser13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(cSVRecordStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0673");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder6.setQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder6.setEscape('a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0674");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset2 = builder1.getCharsetDefault();
        byte[] byteArray3 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder4 = builder1.setByteArray(byteArray3);
        java.nio.charset.Charset charset5 = builder1.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray7 = cSVFormat6.getHeaderComments();
        boolean boolean8 = cSVFormat6.isEscapeCharacterSet();
        java.lang.String str9 = cSVFormat6.getNullString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse(inputStream0, charset5, cSVFormat6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: inputStream");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertArrayEquals(byteArray3, new byte[] {});
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0675");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset10 = builder9.getCharsetDefault();
        int int11 = builder9.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder9.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder17 = builder9.setByteArray(byteArray16);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder9.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder21 = builder9.setBufferSize((int) (byte) 0);
        java.nio.file.Path path22 = builder9.getPath();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder0.setPath(path22);
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder27 = builder23.setBufferSize((java.lang.Integer) 1);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier28 = builder23.asSupplier();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8192 + "'", int11 == 8192);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertArrayEquals(byteArray16, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(path22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(cSVParserSupplier28);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0676");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray6 = new java.nio.file.OpenOption[] {};
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setOpenOptions(openOptionArray6);
        int int8 = builder0.getBufferSize();
        // The following exception was thrown during execution in test generation
        try {
            java.io.RandomAccessFile randomAccessFile9 = builder0.getRandomAccessFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getFile() for byte[] origin [B@19760d83");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(openOptionArray6);
        org.junit.Assert.assertArrayEquals(openOptionArray6, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0677");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setEscape('\"');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setTrim(true);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setIgnoreEmptyLines(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0678");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 0);
        int int9 = builder0.getBufferSizeDefault();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0679");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setQuoteMode(quoteMode7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder6.setCommentMarker('#');
        java.sql.ResultSet resultSet13 = null;
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setHeader(resultSet13);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0680");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharacterOffset((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder18 = builder14.setCharacterOffset((long) 'a');
        java.io.File file19 = builder18.getFile();
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset21 = builder20.getCharsetDefault();
        int int22 = builder20.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder20.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray27 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder28 = builder20.setByteArray(byteArray27);
        org.apache.commons.csv.CSVParser.Builder builder30 = builder20.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder32 = builder20.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder20.setCharacterOffset((long) (byte) 1);
        byte[] byteArray38 = new byte[] { (byte) -1, (byte) 100, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder39 = builder34.setByteArray(byteArray38);
        java.io.InputStream inputStream40 = builder39.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder41 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset42 = builder41.getCharsetDefault();
        int int43 = builder41.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder45 = builder41.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray48 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder49 = builder41.setByteArray(byteArray48);
        org.apache.commons.csv.CSVParser.Builder builder51 = builder41.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder53 = builder41.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder55 = builder41.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder57 = builder55.setCharacterOffset((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder59 = builder55.setCharacterOffset((long) 'a');
        java.nio.charset.Charset charset60 = builder55.getCharset();
        org.apache.commons.csv.CSVFormat.Predefined predefined61 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat62 = predefined61.getFormat();
        boolean boolean63 = cSVFormat62.getAutoFlush();
        org.apache.commons.csv.QuoteMode quoteMode64 = cSVFormat62.getQuoteMode();
        boolean boolean65 = cSVFormat62.getIgnoreEmptyLines();
        org.apache.commons.csv.CSVParser cSVParser66 = org.apache.commons.csv.CSVParser.parse(inputStream40, charset60, cSVFormat62);
        org.apache.commons.csv.CSVFormat.Predefined predefined67 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat68 = predefined67.getFormat();
        boolean boolean69 = cSVFormat68.getIgnoreHeaderCase();
        java.lang.Object[] objArray74 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str75 = cSVFormat68.format(objArray74);
        boolean boolean76 = cSVFormat68.getTrailingDelimiter();
        boolean boolean77 = cSVFormat68.isEscapeCharacterSet();
        boolean boolean78 = cSVFormat68.isNullStringSet();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser79 = org.apache.commons.csv.CSVParser.parse(file19, charset60, cSVFormat68);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertNull("file19.getParent() == null", file19.getParent());
        org.junit.Assert.assertEquals(file19.toString(), "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8192 + "'", int22 == 8192);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertArrayEquals(byteArray27, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertArrayEquals(byteArray38, new byte[] { (byte) -1, (byte) 100, (byte) 1 });
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(inputStream40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8192 + "'", int43 == 8192);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertArrayEquals(byteArray48, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(charset60);
        org.junit.Assert.assertTrue("'" + predefined61 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined61.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + quoteMode64 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode64.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(cSVParser66);
        org.junit.Assert.assertTrue("'" + predefined67 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined67.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str75, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0681");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVParser5.hasTrailerComment();
        cSVParser5.close();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser5.getRecords();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser5.getRecords();
        java.util.List<java.lang.String> strList10 = cSVParser5.getHeaderNames();
        long long11 = cSVParser5.getCurrentLineNumber();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVRecordList8);
        org.junit.Assert.assertNotNull(cSVRecordList9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0682");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setLenientEof(false);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setLenientEof(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean12 = cSVFormat11.getSkipHeaderRecord();
        java.lang.String str13 = cSVFormat11.getRecordSeparator();
        boolean boolean14 = cSVFormat11.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat11);
        org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean17 = cSVFormat16.getSkipHeaderRecord();
        java.lang.String str18 = cSVFormat16.getRecordSeparator();
        boolean boolean19 = cSVFormat16.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder20 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat16);
        org.apache.commons.csv.QuoteMode quoteMode21 = null;
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setQuoteMode(quoteMode21);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder20.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray31 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder20.setHeaderComments(strArray31);
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder15.setHeaderComments((java.lang.Object[]) strArray31);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder10.setHeader(strArray31);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\n" + "'", str18, "\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertArrayEquals(strArray31, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0683");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.nio.charset.Charset charset4 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        int int9 = builder7.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder7.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder7.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder19 = builder7.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder7.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) '#');
        java.io.File file24 = builder23.getFile();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder6.setFile(file24);
        java.util.function.IntUnaryOperator intUnaryOperator26 = null;
        org.apache.commons.csv.CSVParser.Builder builder27 = builder6.setBufferSizeChecker(intUnaryOperator26);
        org.apache.commons.csv.CSVParser.Builder builder29 = builder6.setBufferSizeMax((int) '4');
        java.net.URI uRI30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder31 = builder6.setURI(uRI30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0684");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        boolean boolean3 = cSVFormat1.getTrailingData();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVParser2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0685");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
        java.lang.Appendable appendable2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter3 = cSVFormat1.print(appendable2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0686");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setIgnoreEmptyLines(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setRecordSeparator("");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0687");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.String[] strArray3 = cSVFormat0.getHeader();
        java.lang.String str4 = cSVFormat0.getDelimiterString();
        boolean boolean5 = cSVFormat0.getIgnoreEmptyLines();
        java.lang.String str6 = cSVFormat0.getDelimiterString();
        boolean boolean7 = cSVFormat0.getSkipHeaderRecord();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "," + "'", str4, ",");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "," + "'", str6, ",");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0688");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setRecordNumber((long) (short) 10);
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        byte[] byteArray10 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder11 = builder8.setByteArray(byteArray10);
        java.lang.CharSequence charSequence12 = builder8.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder8.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder16 = builder8.setRecordNumber((long) (byte) 100);
        java.util.function.IntUnaryOperator intUnaryOperator17 = null;
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setBufferSizeChecker(intUnaryOperator17);
        org.apache.commons.csv.CSVParser.Builder builder19 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset20 = builder19.getCharsetDefault();
        int int21 = builder19.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder19.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder27 = builder19.setByteArray(byteArray26);
        org.apache.commons.csv.CSVParser.Builder builder28 = builder18.setByteArray(byteArray26);
        org.apache.commons.csv.CSVParser.Builder builder29 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset30 = builder29.getCharsetDefault();
        byte[] byteArray31 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder32 = builder29.setByteArray(byteArray31);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier33 = builder29.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder34 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset35 = builder34.getCharsetDefault();
        byte[] byteArray36 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder37 = builder34.setByteArray(byteArray36);
        java.lang.CharSequence charSequence38 = builder34.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder40 = builder34.setBufferSize((int) ' ');
        java.io.InputStream inputStream41 = builder40.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder42 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset43 = builder42.getCharsetDefault();
        byte[] byteArray44 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder45 = builder42.setByteArray(byteArray44);
        java.nio.charset.Charset charset46 = builder42.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat48 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder49 = cSVFormat48.builder();
        java.lang.String str50 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVParser cSVParser51 = org.apache.commons.csv.CSVParser.parse(inputStream41, charset46, cSVFormat48);
        org.apache.commons.csv.CSVParser.Builder builder52 = builder29.setInputStream(inputStream41);
        org.apache.commons.csv.CSVParser.Builder builder53 = builder18.setInputStream(inputStream41);
        org.apache.commons.csv.CSVParser.Builder builder54 = builder5.setInputStream(inputStream41);
        java.nio.file.OpenOption[] openOptionArray55 = builder54.getOpenOptions();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertArrayEquals(byteArray10, new byte[] {});
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8192 + "'", int21 == 8192);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertArrayEquals(byteArray26, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertArrayEquals(byteArray31, new byte[] {});
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(cSVParserSupplier33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertArrayEquals(byteArray36, new byte[] {});
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "" + "'", charSequence38, "");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(inputStream41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertArrayEquals(byteArray44, new byte[] {});
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(cSVParser51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(openOptionArray55);
        org.junit.Assert.assertArrayEquals(openOptionArray55, new java.nio.file.OpenOption[] {});
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0689");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getIgnoreHeaderCase();
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str8 = cSVFormat1.format(objArray7);
        java.lang.String str9 = cSVFormat1.getRecordSeparator();
        boolean boolean10 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode11 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        boolean boolean14 = cSVFormat13.getIgnoreHeaderCase();
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str20 = cSVFormat13.format(objArray19);
        java.lang.String str21 = cSVFormat1.format(objArray19);
        java.lang.Character char22 = cSVFormat1.getCommentMarker();
        boolean boolean23 = cSVFormat1.isNullStringSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str8, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\r\n" + "'", str9, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + quoteMode11 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode11.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str20, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str21, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertNull(char22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0690");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        java.lang.String str3 = cSVFormat2.toString();
        boolean boolean4 = cSVFormat2.isEscapeCharacterSet();
        boolean boolean5 = cSVFormat2.isQuoteCharacterSet();
        boolean boolean6 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder7 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat2);
        boolean boolean8 = cSVFormat2.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("\"", cSVFormat2);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str3, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVParser9);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0691");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        boolean boolean4 = cSVFormat0.isNullStringSet();
        org.apache.commons.csv.CSVFormat.Builder builder5 = cSVFormat0.builder();
        java.lang.String[] strArray6 = cSVFormat0.getHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(strArray6);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0692");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.lang.String str6 = cSVParser5.getHeaderComment();
        long long7 = cSVParser5.getRecordNumber();
        boolean boolean8 = cSVParser5.isClosed();
        java.lang.String str9 = cSVParser5.getTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0693");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setNullString("");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0694");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setBufferSize((int) 'a');
        org.apache.commons.csv.CSVParser.Builder builder9 = builder0.setCharacterOffset((long) 0);
        java.io.Writer writer10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder11 = builder0.setWriter(writer10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0695");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MONGODB_CSV;
        boolean boolean1 = cSVFormat0.isNullStringSet();
        org.apache.commons.csv.CSVFormat.Builder builder2 = cSVFormat0.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        byte[] byteArray5 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder6 = builder3.setByteArray(byteArray5);
        org.apache.commons.csv.CSVParser.Builder builder8 = builder3.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder3.setBufferSize((int) 'a');
        java.nio.charset.Charset charset11 = builder10.getCharsetDefault();
        org.apache.commons.csv.CSVParser cSVParser12 = builder10.get();
        boolean boolean13 = cSVFormat0.equals((java.lang.Object) cSVParser12);
        cSVParser12.close();
        java.util.Map<java.lang.String, java.lang.Integer> strMap15 = cSVParser12.getHeaderMap();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertArrayEquals(byteArray5, new byte[] {});
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(cSVParser12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0696");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        boolean boolean5 = cSVFormat0.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat.Builder builder6 = cSVFormat0.builder();
        java.lang.String str7 = cSVFormat0.toString();
        java.lang.Appendable appendable8 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat0.println(appendable8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str7, "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0697");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        boolean boolean2 = cSVFormat1.isQuoteCharacterSet();
        java.lang.Appendable appendable3 = null;
        cSVFormat1.println(appendable3);
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean7 = cSVFormat6.getSkipHeaderRecord();
        java.lang.String str8 = cSVFormat6.getRecordSeparator();
        boolean boolean9 = cSVFormat6.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder10 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat6);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setTrim(false);
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean16 = cSVFormat15.getSkipHeaderRecord();
        java.lang.String str17 = cSVFormat15.getRecordSeparator();
        boolean boolean18 = cSVFormat15.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder19 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat15);
        org.apache.commons.csv.QuoteMode quoteMode20 = null;
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setQuoteMode(quoteMode20);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean25 = cSVFormat24.getSkipHeaderRecord();
        java.lang.String str26 = cSVFormat24.getRecordSeparator();
        boolean boolean27 = cSVFormat24.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder28 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat24);
        org.apache.commons.csv.QuoteMode quoteMode29 = null;
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setQuoteMode(quoteMode29);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder28.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray39 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder28.setHeaderComments(strArray39);
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder19.setHeaderComments(strArray39);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder14.setHeaderComments((java.lang.Object[]) strArray39);
        org.apache.commons.csv.CSVParser.Builder builder43 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset44 = builder43.getCharsetDefault();
        byte[] byteArray45 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder46 = builder43.setByteArray(byteArray45);
        java.lang.CharSequence charSequence47 = builder43.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder49 = builder43.setBufferSize((int) ' ');
        java.io.InputStream inputStream50 = builder49.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder51 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset52 = builder51.getCharsetDefault();
        byte[] byteArray53 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder54 = builder51.setByteArray(byteArray53);
        java.nio.charset.Charset charset55 = builder51.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat57 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder58 = cSVFormat57.builder();
        java.lang.String str59 = cSVFormat57.getNullString();
        org.apache.commons.csv.CSVParser cSVParser60 = org.apache.commons.csv.CSVParser.parse(inputStream50, charset55, cSVFormat57);
        long long61 = cSVParser60.getRecordNumber();
        java.lang.Object[] objArray62 = new java.lang.Object[] { "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", builder42, long61 };
        java.lang.String str63 = cSVFormat1.format(objArray62);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\n" + "'", str8, "\n");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\n" + "'", str17, "\n");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\n" + "'", str26, "\n");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertArrayEquals(strArray39, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertArrayEquals(byteArray45, new byte[] {});
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "" + "'", charSequence47, "");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(inputStream50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertArrayEquals(byteArray53, new byte[] {});
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(cSVParser60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(objArray62);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0698");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setLenientEof(true);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder16.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder16.setRecordSeparator("\"");
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setAllowMissingColumnNames(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0699");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder2.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setBufferSizeMax(100);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setRecordNumber(0L);
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setBufferSize((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharset("\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"\t\thi!\t\"\r\n\"\t\t\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: \"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\"\"\"??hi!?\"??\"??\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\"\"\"");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8192 + "'", int3 == 8192);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0700");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        java.lang.String str9 = cSVFormat7.getRecordSeparator();
        boolean boolean10 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat7.printer();
        boolean boolean12 = cSVFormat7.getIgnoreHeaderCase();
        org.apache.commons.csv.QuoteMode quoteMode13 = cSVFormat7.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder6.setQuoteMode(quoteMode13);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setQuote((java.lang.Character) ' ');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(cSVPrinter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + quoteMode13 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode13.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0701");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser5.iterator();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser5.getHeaderMap();
        boolean boolean8 = cSVParser5.isClosed();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0702");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 100);
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset10 = builder9.getCharsetDefault();
        int int11 = builder9.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder9.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder17 = builder9.setByteArray(byteArray16);
        java.nio.charset.Charset charset18 = builder9.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder8.setCharset(charset18);
        java.io.Writer writer20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setWriter(writer20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8192 + "'", int11 == 8192);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertArrayEquals(byteArray16, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0703");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        java.lang.String str9 = cSVFormat7.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode10 = cSVFormat7.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder6.setDuplicateHeaderMode(duplicateHeaderMode10);
        org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean13 = cSVFormat12.getSkipHeaderRecord();
        java.lang.String str14 = cSVFormat12.getRecordSeparator();
        boolean boolean15 = cSVFormat12.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder16 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat12);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder16.setTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder16.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        boolean boolean25 = cSVFormat24.getIgnoreHeaderCase();
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str31 = cSVFormat24.format(objArray30);
        java.lang.String str32 = cSVFormat24.getRecordSeparator();
        boolean boolean33 = cSVFormat24.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode34 = cSVFormat24.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder16.setQuoteMode(quoteMode34);
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder11.setQuoteMode(quoteMode34);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setIgnoreHeaderCase(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode10 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode10.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\n" + "'", str14, "\n");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str31, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\r\n" + "'", str32, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + quoteMode34 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode34.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0704");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode3 = cSVFormat0.getDuplicateHeaderMode();
        java.lang.String str4 = cSVFormat0.getNullString();
        java.lang.Character char5 = cSVFormat0.getEscapeCharacter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode3 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode3.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(char5);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0705");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder2.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setBufferSizeMax((int) (byte) -1);
        java.nio.charset.Charset charset6 = builder5.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder5.setBufferSizeMax(0);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVPrinter cSVPrinter10 = cSVFormat9.printer();
        boolean boolean11 = cSVFormat9.getTrim();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder5.setFormat(cSVFormat9);
        int int13 = builder12.getBufferSize();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVPrinter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0706");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.lang.String str6 = cSVParser5.getHeaderComment();
        java.util.List<java.lang.String> strList7 = cSVParser5.getHeaderNames();
        java.util.Spliterator<java.lang.String> strSpliterator8 = strList7.spliterator();
        java.lang.Class<?> wildcardClass9 = strSpliterator8.getClass();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strSpliterator8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0707");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        java.lang.CharSequence charSequence5 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser6 = builder0.getUnchecked();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser6.getHeaderMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertEquals("'" + charSequence5 + "' != '" + "" + "'", charSequence5, "");
        org.junit.Assert.assertNotNull(cSVParser6);
        org.junit.Assert.assertNotNull(strMap7);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0708");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        java.lang.String str9 = cSVFormat7.getRecordSeparator();
        boolean boolean10 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat7);
        org.apache.commons.csv.QuoteMode quoteMode12 = null;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuoteMode(quoteMode12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray22 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder11.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder6.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder6.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder6.setRecordSeparator("\r\n#Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]#Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder6.setRecordSeparator('\"');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertArrayEquals(strArray22, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0709");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        java.io.InputStream inputStream7 = builder6.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        byte[] byteArray10 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder11 = builder8.setByteArray(byteArray10);
        java.nio.charset.Charset charset12 = builder8.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat14.builder();
        java.lang.String str16 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse(inputStream7, charset12, cSVFormat14);
        long long18 = cSVParser17.getRecordNumber();
        boolean boolean19 = cSVParser17.hasHeaderComment();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertArrayEquals(byteArray10, new byte[] {});
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVParser17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0710");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        boolean boolean4 = cSVFormat0.isNullStringSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        boolean boolean8 = cSVFormat7.getAutoFlush();
        boolean boolean9 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat7);
        java.lang.String str11 = cSVParser10.getHeaderComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream12 = cSVParser10.stream();
        boolean boolean13 = cSVFormat0.equals((java.lang.Object) cSVParser10);
        boolean boolean14 = cSVFormat0.getAllowMissingColumnNames();
        java.lang.String str15 = cSVFormat0.getDelimiterString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVRecordStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "," + "'", str15, ",");
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0711");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        org.apache.commons.csv.CSVFormat.Builder builder6 = cSVFormat2.builder();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0712");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        boolean boolean4 = cSVFormat0.isNullStringSet();
        org.apache.commons.csv.CSVFormat.Builder builder5 = cSVFormat0.builder();
        java.lang.Appendable appendable6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter7 = cSVFormat0.print(appendable6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0713");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.nio.charset.Charset charset4 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        int int9 = builder7.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder7.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder7.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder19 = builder7.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder7.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) '#');
        java.io.File file24 = builder23.getFile();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder6.setFile(file24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser26 = builder6.get();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "");
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0714");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        java.io.InputStream inputStream7 = builder6.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        byte[] byteArray10 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder11 = builder8.setByteArray(byteArray10);
        java.nio.charset.Charset charset12 = builder8.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat14.builder();
        java.lang.String str16 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse(inputStream7, charset12, cSVFormat14);
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset19 = builder18.getCharsetDefault();
        int int20 = builder18.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder18.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder26 = builder18.setByteArray(byteArray25);
        org.apache.commons.csv.CSVParser.Builder builder28 = builder18.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder29 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder31 = builder29.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder32 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset33 = builder32.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder34 = builder29.setCharset(charset33);
        java.nio.charset.Charset charset35 = builder29.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder36 = builder18.setCharset(charset35);
        org.apache.commons.csv.CSVParser.Builder builder37 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset38 = builder37.getCharsetDefault();
        byte[] byteArray39 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder40 = builder37.setByteArray(byteArray39);
        java.lang.CharSequence charSequence41 = builder37.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder37.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder44 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset45 = builder44.getCharsetDefault();
        byte[] byteArray46 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder47 = builder44.setByteArray(byteArray46);
        java.lang.CharSequence charSequence48 = builder44.getCharSequence();
        java.lang.CharSequence charSequence49 = builder44.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser50 = builder44.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray51 = builder44.getOpenOptions();
        java.nio.charset.Charset charset52 = builder44.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder53 = builder37.setCharset(charset52);
        java.io.InputStream inputStream54 = builder53.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder55 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset56 = builder55.getCharsetDefault();
        java.nio.charset.Charset charset57 = builder55.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat58 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean59 = cSVFormat58.getSkipHeaderRecord();
        java.lang.String str60 = cSVFormat58.getRecordSeparator();
        boolean boolean61 = cSVFormat58.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder62 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat58);
        org.apache.commons.csv.CSVParser cSVParser63 = org.apache.commons.csv.CSVParser.parse(inputStream54, charset57, cSVFormat58);
        org.apache.commons.csv.CSVParser cSVParser64 = org.apache.commons.csv.CSVParser.parse(inputStream7, charset35, cSVFormat58);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertArrayEquals(byteArray10, new byte[] {});
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVParser17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8192 + "'", int20 == 8192);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertArrayEquals(byteArray25, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertArrayEquals(byteArray39, new byte[] {});
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "" + "'", charSequence41, "");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertArrayEquals(byteArray46, new byte[] {});
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "" + "'", charSequence48, "");
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "" + "'", charSequence49, "");
        org.junit.Assert.assertNotNull(cSVParser50);
        org.junit.Assert.assertNotNull(openOptionArray51);
        org.junit.Assert.assertArrayEquals(openOptionArray51, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(inputStream54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertNotNull(charset57);
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\n" + "'", str60, "\n");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(cSVParser63);
        org.junit.Assert.assertNotNull(cSVParser64);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0715");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        java.lang.String[] strArray2 = cSVFormat0.getHeader();
        java.lang.Appendable appendable3 = null;
        org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean5 = cSVFormat4.getSkipHeaderRecord();
        java.lang.String str6 = cSVFormat4.getRecordSeparator();
        boolean boolean7 = cSVFormat4.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder8 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat4);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder8.setTrim(false);
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean14 = cSVFormat13.getSkipHeaderRecord();
        java.lang.String str15 = cSVFormat13.getRecordSeparator();
        boolean boolean16 = cSVFormat13.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder17 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat13);
        org.apache.commons.csv.QuoteMode quoteMode18 = null;
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setQuoteMode(quoteMode18);
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder17.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean23 = cSVFormat22.getSkipHeaderRecord();
        java.lang.String str24 = cSVFormat22.getRecordSeparator();
        boolean boolean25 = cSVFormat22.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder26 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat22);
        org.apache.commons.csv.QuoteMode quoteMode27 = null;
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setQuoteMode(quoteMode27);
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder26.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray37 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder26.setHeaderComments(strArray37);
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder17.setHeaderComments(strArray37);
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder12.setHeaderComments((java.lang.Object[]) strArray37);
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat0.printRecord(appendable3, (java.lang.Object[]) strArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\n" + "'", str15, "\n");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\n" + "'", str24, "\n");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertArrayEquals(strArray37, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0716");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        byte[] byteArray9 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder10 = builder7.setByteArray(byteArray9);
        java.lang.CharSequence charSequence11 = builder7.getCharSequence();
        java.lang.CharSequence charSequence12 = builder7.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser13 = builder7.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray14 = builder7.getOpenOptions();
        java.nio.charset.Charset charset15 = builder7.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder0.setCharset(charset15);
        org.apache.commons.csv.CSVParser.Builder builder17 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset18 = builder17.getCharsetDefault();
        byte[] byteArray19 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder20 = builder17.setByteArray(byteArray19);
        java.lang.CharSequence charSequence21 = builder17.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder17.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder25 = builder17.setRecordNumber((long) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder26 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset27 = builder26.getCharsetDefault();
        int int28 = builder26.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder26.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder34 = builder26.setByteArray(byteArray33);
        org.apache.commons.csv.CSVParser.Builder builder36 = builder26.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder38 = builder26.setBufferSize((int) (byte) 0);
        java.nio.file.Path path39 = builder26.getPath();
        org.apache.commons.csv.CSVParser.Builder builder40 = builder17.setPath(path39);
        org.apache.commons.csv.CSVParser.Builder builder41 = builder0.setPath(path39);
        org.apache.commons.csv.CSVParser.Builder builder42 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset43 = builder42.getCharsetDefault();
        int int44 = builder42.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder46 = builder42.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder50 = builder42.setByteArray(byteArray49);
        org.apache.commons.csv.CSVParser.Builder builder52 = builder42.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder54 = builder42.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder56 = builder42.setCharacterOffset((long) (byte) 1);
        byte[] byteArray60 = new byte[] { (byte) -1, (byte) 100, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder61 = builder56.setByteArray(byteArray60);
        org.apache.commons.csv.CSVParser.Builder builder62 = builder41.setByteArray(byteArray60);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "" + "'", charSequence11, "");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertNotNull(cSVParser13);
        org.junit.Assert.assertNotNull(openOptionArray14);
        org.junit.Assert.assertArrayEquals(openOptionArray14, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertArrayEquals(byteArray19, new byte[] {});
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "" + "'", charSequence21, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8192 + "'", int28 == 8192);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertArrayEquals(byteArray33, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(path39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8192 + "'", int44 == 8192);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertArrayEquals(byteArray49, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertArrayEquals(byteArray60, new byte[] { (byte) -1, (byte) 100, (byte) 1 });
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0717");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        java.nio.file.Path path13 = builder0.getPath();
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset15 = builder14.getCharsetDefault();
        int int16 = builder14.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder14.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser19 = builder14.getUnchecked();
        java.lang.CharSequence charSequence20 = builder14.getCharSequence();
        java.nio.file.OpenOption[] openOptionArray21 = builder14.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder0.setOpenOptions(openOptionArray21);
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset24 = builder23.getCharsetDefault();
        int int25 = builder23.getBufferSizeDefault();
        java.nio.file.OpenOption[] openOptionArray26 = builder23.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder0.setOpenOptions(openOptionArray26);
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset29 = builder28.getCharsetDefault();
        byte[] byteArray30 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder31 = builder28.setByteArray(byteArray30);
        org.apache.commons.csv.CSVParser.Builder builder33 = builder28.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder35 = builder28.setBufferSize((int) 'a');
        org.apache.commons.csv.CSVParser.Builder builder37 = builder28.setCharacterOffset((long) 0);
        org.apache.commons.csv.CSVParser.Builder builder38 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset39 = builder38.getCharsetDefault();
        byte[] byteArray40 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder41 = builder38.setByteArray(byteArray40);
        java.lang.CharSequence charSequence42 = builder38.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder44 = builder38.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder45 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset46 = builder45.getCharsetDefault();
        byte[] byteArray47 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder48 = builder45.setByteArray(byteArray47);
        java.lang.CharSequence charSequence49 = builder45.getCharSequence();
        java.lang.CharSequence charSequence50 = builder45.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser51 = builder45.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray52 = builder45.getOpenOptions();
        java.nio.charset.Charset charset53 = builder45.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder54 = builder38.setCharset(charset53);
        org.apache.commons.csv.CSVParser.Builder builder55 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset56 = builder55.getCharsetDefault();
        byte[] byteArray57 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder58 = builder55.setByteArray(byteArray57);
        java.lang.CharSequence charSequence59 = builder55.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder61 = builder55.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder63 = builder55.setRecordNumber((long) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder64 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset65 = builder64.getCharsetDefault();
        int int66 = builder64.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder68 = builder64.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray71 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder72 = builder64.setByteArray(byteArray71);
        org.apache.commons.csv.CSVParser.Builder builder74 = builder64.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder76 = builder64.setBufferSize((int) (byte) 0);
        java.nio.file.Path path77 = builder64.getPath();
        org.apache.commons.csv.CSVParser.Builder builder78 = builder55.setPath(path77);
        org.apache.commons.csv.CSVParser.Builder builder79 = builder38.setPath(path77);
        org.apache.commons.csv.CSVParser.Builder builder80 = builder37.setPath(path77);
        org.apache.commons.csv.CSVParser.Builder builder81 = builder27.setPath(path77);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8192 + "'", int16 == 8192);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(cSVParser19);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", charSequence20, "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertNotNull(openOptionArray21);
        org.junit.Assert.assertArrayEquals(openOptionArray21, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8192 + "'", int25 == 8192);
        org.junit.Assert.assertNotNull(openOptionArray26);
        org.junit.Assert.assertArrayEquals(openOptionArray26, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertArrayEquals(byteArray30, new byte[] {});
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertArrayEquals(byteArray40, new byte[] {});
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "" + "'", charSequence42, "");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertArrayEquals(byteArray47, new byte[] {});
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "" + "'", charSequence49, "");
        org.junit.Assert.assertEquals("'" + charSequence50 + "' != '" + "" + "'", charSequence50, "");
        org.junit.Assert.assertNotNull(cSVParser51);
        org.junit.Assert.assertNotNull(openOptionArray52);
        org.junit.Assert.assertArrayEquals(openOptionArray52, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertArrayEquals(byteArray57, new byte[] {});
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "" + "'", charSequence59, "");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(charset65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 8192 + "'", int66 == 8192);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertArrayEquals(byteArray71, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(path77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0718");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        java.lang.String str3 = cSVParser2.getFirstEndOfLine();
        java.util.List<java.lang.String> strList4 = cSVParser2.getHeaderNames();
        cSVParser2.close();
        boolean boolean6 = cSVParser2.hasTrailerComment();
        boolean boolean7 = cSVParser2.isClosed();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVParser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0719");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setNullString("a");
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder16.setTrailingData(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0720");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.nio.charset.Charset charset4 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        int int9 = builder7.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder7.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder7.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder19 = builder7.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder7.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) '#');
        java.io.File file24 = builder23.getFile();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder6.setFile(file24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder6.setCharacterOffset((long) 10);
        int int28 = builder27.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder29 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset30 = builder29.getCharsetDefault();
        byte[] byteArray31 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder32 = builder29.setByteArray(byteArray31);
        java.lang.CharSequence charSequence33 = builder29.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder29.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder36 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset37 = builder36.getCharsetDefault();
        int int38 = builder36.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder40 = builder36.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder44 = builder36.setByteArray(byteArray43);
        java.nio.charset.Charset charset45 = builder36.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder46 = builder35.setCharset(charset45);
        org.apache.commons.csv.CSVParser.Builder builder47 = builder27.setCharset(charset45);
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream48 = builder47.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8192 + "'", int28 == 8192);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertArrayEquals(byteArray31, new byte[] {});
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "" + "'", charSequence33, "");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8192 + "'", int38 == 8192);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertArrayEquals(byteArray43, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0721");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.isCommentMarkerSet();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        int int5 = builder3.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder3.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder11 = builder3.setByteArray(byteArray10);
        org.apache.commons.csv.CSVParser.Builder builder13 = builder3.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder15 = builder3.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder3.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setCharacterOffset((long) '#');
        java.io.File file20 = builder19.getFile();
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset22 = builder21.getCharsetDefault();
        byte[] byteArray23 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder24 = builder21.setByteArray(byteArray23);
        java.lang.CharSequence charSequence25 = builder21.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder21.setBufferSize((int) ' ');
        java.io.InputStream inputStream28 = builder27.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder29 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset30 = builder29.getCharsetDefault();
        byte[] byteArray31 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder32 = builder29.setByteArray(byteArray31);
        java.nio.charset.Charset charset33 = builder29.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder36 = cSVFormat35.builder();
        java.lang.String str37 = cSVFormat35.getNullString();
        org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse(inputStream28, charset33, cSVFormat35);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter39 = cSVFormat1.print(file20, charset33);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8192 + "'", int5 == 8192);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertArrayEquals(byteArray10, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(file20);
        org.junit.Assert.assertNull("file20.getParent() == null", file20.getParent());
        org.junit.Assert.assertEquals(file20.toString(), "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertArrayEquals(byteArray23, new byte[] {});
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + charSequence25 + "' != '" + "" + "'", charSequence25, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(inputStream28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertArrayEquals(byteArray31, new byte[] {});
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(cSVParser38);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0722");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getIgnoreHeaderCase();
        java.lang.String str4 = cSVFormat2.getDelimiterString();
        boolean boolean5 = cSVFormat2.isQuoteCharacterSet();
        org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse(",", cSVFormat2);
        java.lang.String str7 = cSVParser6.getTrailerComment();
        java.lang.String str8 = cSVParser6.getFirstEndOfLine();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "," + "'", str4, ",");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVParser6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0723");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setEscape('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        boolean boolean25 = cSVFormat24.getIgnoreHeaderCase();
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str31 = cSVFormat24.format(objArray30);
        java.lang.String str32 = cSVFormat24.getRecordSeparator();
        boolean boolean33 = cSVFormat24.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode34 = cSVFormat24.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder22.setQuoteMode(quoteMode34);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder22.setRecordSeparator('\"');
        java.sql.ResultSet resultSet38 = null;
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder22.setHeader(resultSet38);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str31, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\r\n" + "'", str32, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + quoteMode34 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode34.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0724");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        java.nio.charset.Charset charset6 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setBufferSize((int) (byte) 10);
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setOutputStream(outputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0725");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setFile("Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        int int9 = builder6.getBufferSizeDefault();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0726");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        boolean boolean13 = cSVFormat12.getIgnoreHeaderCase();
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str19 = cSVFormat12.format(objArray18);
        java.lang.String str20 = cSVFormat12.getRecordSeparator();
        boolean boolean21 = cSVFormat12.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode22 = cSVFormat12.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder4.setQuoteMode(quoteMode22);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder4.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat cSVFormat26 = builder25.get();
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean28 = cSVFormat27.isNullStringSet();
        java.lang.String[] strArray29 = cSVFormat27.getHeaderComments();
        org.apache.commons.csv.CSVParser.Builder builder30 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset31 = builder30.getCharsetDefault();
        byte[] byteArray32 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder33 = builder30.setByteArray(byteArray32);
        java.nio.charset.Charset charset34 = builder30.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder36 = builder30.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder37 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset38 = builder37.getCharsetDefault();
        int int39 = builder37.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder41 = builder37.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder45 = builder37.setByteArray(byteArray44);
        org.apache.commons.csv.CSVParser.Builder builder47 = builder37.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder49 = builder37.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder51 = builder37.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder53 = builder51.setCharacterOffset((long) '#');
        java.io.File file54 = builder53.getFile();
        org.apache.commons.csv.CSVParser.Builder builder55 = builder36.setFile(file54);
        org.apache.commons.csv.CSVParser.Builder builder57 = builder55.setFile(",");
        java.io.Reader reader58 = null; // flaky "3) test0726(org.apache.commons.csv.randoop.RegressionTest1)": builder55.getReader();
        org.apache.commons.csv.CSVParser cSVParser59 = null; // flaky "3) test0726(org.apache.commons.csv.randoop.RegressionTest1)": cSVFormat27.parse(reader58);
        org.apache.commons.csv.CSVFormat cSVFormat61 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser62 = org.apache.commons.csv.CSVParser.parse("", cSVFormat61);
        java.lang.String str63 = cSVFormat61.getDelimiterString();
        java.lang.String[] strArray64 = cSVFormat61.getHeader();
        org.apache.commons.csv.CSVParser cSVParser65 = null; // flaky "3) test0726(org.apache.commons.csv.randoop.RegressionTest1)": org.apache.commons.csv.CSVParser.parse(reader58, cSVFormat61);
        org.apache.commons.csv.CSVParser cSVParser66 = null; // flaky "3) test0726(org.apache.commons.csv.randoop.RegressionTest1)": cSVFormat26.parse(reader58);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str19, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\r\n" + "'", str20, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + quoteMode22 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode22.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(strArray29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertArrayEquals(byteArray32, new byte[] {});
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8192 + "'", int39 == 8192);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertArrayEquals(byteArray44, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(file54);
        org.junit.Assert.assertNull("file54.getParent() == null", file54.getParent());
        org.junit.Assert.assertEquals(file54.toString(), "");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
// flaky "3) test0726(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(reader58);
// flaky "2) test0726(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser59);
        org.junit.Assert.assertNotNull(cSVFormat61);
        org.junit.Assert.assertNotNull(cSVParser62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\t" + "'", str63, "\t");
        org.junit.Assert.assertNull(strArray64);
// flaky "1) test0726(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser65);
// flaky "1) test0726(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser66);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0727");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setEscape('\"');
        java.sql.ResultSet resultSet9 = null;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setHeader(resultSet9);
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        boolean boolean13 = cSVFormat12.getIgnoreHeaderCase();
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str19 = cSVFormat12.format(objArray18);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder4.setHeaderComments(objArray18);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str19, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0728");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isNullStringSet();
        boolean boolean2 = cSVFormat0.getAllowMissingColumnNames();
        boolean boolean3 = cSVFormat0.getTrim();
        java.lang.String[] strArray4 = cSVFormat0.getHeaderComments();
        boolean boolean5 = cSVFormat0.isQuoteCharacterSet();
        boolean boolean6 = cSVFormat0.getLenientEof();
        java.lang.String str7 = cSVFormat0.getRecordSeparator();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\r\n" + "'", str7, "\r\n");
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0729");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setEscape('#');
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setIgnoreSurroundingSpaces(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0730");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVParser5.hasTrailerComment();
        cSVParser5.close();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser5.getRecords();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser5.getRecords();
        java.util.List<java.lang.String> strList10 = cSVParser5.getHeaderNames();
        java.util.Spliterator<java.lang.String> strSpliterator11 = strList10.spliterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVRecordList8);
        org.junit.Assert.assertNotNull(cSVRecordList9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(strSpliterator11);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0731");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setEscape('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        boolean boolean25 = cSVFormat24.getIgnoreHeaderCase();
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str31 = cSVFormat24.format(objArray30);
        java.lang.String str32 = cSVFormat24.getRecordSeparator();
        boolean boolean33 = cSVFormat24.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode34 = cSVFormat24.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder22.setQuoteMode(quoteMode34);
        org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean37 = cSVFormat36.getSkipHeaderRecord();
        java.lang.String str38 = cSVFormat36.getRecordSeparator();
        boolean boolean39 = cSVFormat36.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder40 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat36);
        org.apache.commons.csv.QuoteMode quoteMode41 = null;
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder40.setQuoteMode(quoteMode41);
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder40.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray51 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder40.setHeaderComments(strArray51);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder22.setHeaderComments(strArray51);
        org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean55 = cSVFormat54.getSkipHeaderRecord();
        java.lang.String str56 = cSVFormat54.getRecordSeparator();
        boolean boolean57 = cSVFormat54.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter58 = cSVFormat54.printer();
        boolean boolean59 = cSVFormat54.getIgnoreHeaderCase();
        org.apache.commons.csv.QuoteMode quoteMode60 = cSVFormat54.getQuoteMode();
        org.apache.commons.csv.QuoteMode quoteMode61 = cSVFormat54.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder22.setQuoteMode(quoteMode61);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str31, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\r\n" + "'", str32, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + quoteMode34 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode34.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\n" + "'", str38, "\n");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertArrayEquals(strArray51, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\n" + "'", str56, "\n");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(cSVPrinter58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + quoteMode60 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode60.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertTrue("'" + quoteMode61 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode61.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0732");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder15 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset16 = builder15.getCharsetDefault();
        int int17 = builder15.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder15.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder23 = builder15.setByteArray(byteArray22);
        org.apache.commons.csv.CSVParser.Builder builder24 = builder14.setByteArray(byteArray22);
        java.util.function.IntUnaryOperator intUnaryOperator25 = null;
        org.apache.commons.csv.CSVParser.Builder builder26 = builder14.setBufferSizeChecker(intUnaryOperator25);
        org.apache.commons.csv.CSVParser.Builder builder28 = builder14.setBufferSize((java.lang.Integer) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.io.RandomAccessFile randomAccessFile29 = builder14.getRandomAccessFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getFile() for byte[] origin [B@53701ebb");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8192 + "'", int17 == 8192);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertArrayEquals(byteArray22, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0733");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isNullStringSet();
        java.lang.String[] strArray2 = cSVFormat0.getHeaderComments();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        byte[] byteArray5 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder6 = builder3.setByteArray(byteArray5);
        java.nio.charset.Charset charset7 = builder3.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder3.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset11 = builder10.getCharsetDefault();
        int int12 = builder10.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder10.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder18 = builder10.setByteArray(byteArray17);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder10.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder22 = builder10.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder24 = builder10.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setCharacterOffset((long) '#');
        java.io.File file27 = builder26.getFile();
        org.apache.commons.csv.CSVParser.Builder builder28 = builder9.setFile(file27);
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setFile(",");
        java.io.Reader reader31 = null; // flaky "4) test0733(org.apache.commons.csv.randoop.RegressionTest1)": builder28.getReader();
        org.apache.commons.csv.CSVParser cSVParser32 = null; // flaky "4) test0733(org.apache.commons.csv.randoop.RegressionTest1)": cSVFormat0.parse(reader31);
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse("", cSVFormat34);
        java.lang.String str36 = cSVFormat34.getDelimiterString();
        java.lang.String[] strArray37 = cSVFormat34.getHeader();
        org.apache.commons.csv.CSVParser cSVParser38 = null; // flaky "4) test0733(org.apache.commons.csv.randoop.RegressionTest1)": org.apache.commons.csv.CSVParser.parse(reader31, cSVFormat34);
        boolean boolean39 = cSVFormat34.getSkipHeaderRecord();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertArrayEquals(byteArray5, new byte[] {});
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8192 + "'", int12 == 8192);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(file27);
        org.junit.Assert.assertNull("file27.getParent() == null", file27.getParent());
        org.junit.Assert.assertEquals(file27.toString(), "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
// flaky "4) test0733(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(reader31);
// flaky "4) test0733(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser32);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(cSVParser35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\t" + "'", str36, "\t");
        org.junit.Assert.assertNull(strArray37);
// flaky "3) test0733(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0734");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        java.lang.CharSequence charSequence5 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setCharSequence((java.lang.CharSequence) "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setRecordNumber((long) 1);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset12 = builder11.getCharsetDefault();
        int int13 = builder11.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder11.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder19 = builder11.setByteArray(byteArray18);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder11.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder23 = builder11.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder25 = builder11.setCharacterOffset((long) (byte) 1);
        byte[] byteArray29 = new byte[] { (byte) -1, (byte) 100, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder30 = builder25.setByteArray(byteArray29);
        org.apache.commons.csv.CSVParser.Builder builder31 = builder10.setByteArray(byteArray29);
        org.apache.commons.csv.CSVParser.Builder builder32 = builder7.setByteArray(byteArray29);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertEquals("'" + charSequence5 + "' != '" + "" + "'", charSequence5, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8192 + "'", int13 == 8192);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertArrayEquals(byteArray29, new byte[] { (byte) -1, (byte) 100, (byte) 1 });
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0735");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
        boolean boolean2 = cSVFormat1.getTrim();
        boolean boolean3 = cSVFormat1.getAllowMissingColumnNames();
        java.lang.String str4 = cSVFormat1.getNullString();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0736");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean5 = cSVFormat4.getSkipHeaderRecord();
        java.lang.String str6 = cSVFormat4.getRecordSeparator();
        boolean boolean7 = cSVFormat4.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder8 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat4);
        boolean boolean9 = cSVFormat0.equals((java.lang.Object) cSVFormat4);
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean11 = cSVFormat10.getSkipHeaderRecord();
        java.lang.String str12 = cSVFormat10.getRecordSeparator();
        boolean boolean13 = cSVFormat10.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder14 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat10);
        org.apache.commons.csv.QuoteMode quoteMode15 = null;
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setQuoteMode(quoteMode15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder14.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray25 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder14.setHeaderComments(strArray25);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder14.setCommentMarker('a');
        java.sql.ResultSetMetaData resultSetMetaData29 = null;
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setHeader(resultSetMetaData29);
        org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean32 = cSVFormat31.getSkipHeaderRecord();
        java.lang.String str33 = cSVFormat31.getRecordSeparator();
        boolean boolean34 = cSVFormat31.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder35 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat31);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setCommentMarker('a');
        java.lang.String[] strArray42 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" };
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder35.setHeader(strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder35.setNullString("");
        org.apache.commons.csv.CSVFormat cSVFormat46 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean47 = cSVFormat46.getSkipHeaderRecord();
        java.lang.String str48 = cSVFormat46.getRecordSeparator();
        boolean boolean49 = cSVFormat46.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder50 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat46);
        org.apache.commons.csv.QuoteMode quoteMode51 = null;
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder50.setQuoteMode(quoteMode51);
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder50.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray61 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder50.setHeaderComments(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder45.setHeader(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder28.setHeaderComments(strArray61);
        java.lang.String str65 = cSVFormat4.format((java.lang.Object[]) strArray61);
        java.lang.String[] strArray66 = cSVFormat4.getHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertArrayEquals(strArray25, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\n" + "'", str33, "\n");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertArrayEquals(strArray42, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" });
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\n" + "'", str48, "\n");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertArrayEquals(strArray61, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\",\"\",\"hi!\",\"\r\n\",\"\",\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"" + "'", str65, "\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\",\"\",\"hi!\",\"\r\n\",\"\",\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"");
        org.junit.Assert.assertNull(strArray66);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0737");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        java.io.InputStream inputStream7 = builder6.getInputStream();
        java.io.Writer writer8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder9 = builder6.setWriter(writer8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(inputStream7);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0738");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder2 = cSVFormat1.builder();
        org.apache.commons.csv.QuoteMode quoteMode3 = cSVFormat1.getQuoteMode();
        boolean boolean4 = cSVFormat1.getTrim();
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder5.setCharset(charset9);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset12 = builder11.getCharsetDefault();
        int int13 = builder11.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder11.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder19 = builder11.setByteArray(byteArray18);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder11.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder23 = builder11.setBufferSize((int) (byte) 0);
        java.nio.file.Path path24 = builder11.getPath();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder5.setPath(path24);
        org.apache.commons.csv.CSVParser.Builder builder26 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset27 = builder26.getCharsetDefault();
        int int28 = builder26.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder26.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder34 = builder26.setByteArray(byteArray33);
        org.apache.commons.csv.CSVParser.Builder builder36 = builder26.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder38 = builder26.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder40 = builder26.setCharacterOffset((long) (byte) 1);
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) 100, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder45 = builder40.setByteArray(byteArray44);
        java.io.InputStream inputStream46 = builder45.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder47 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset48 = builder47.getCharsetDefault();
        int int49 = builder47.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder51 = builder47.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray54 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder55 = builder47.setByteArray(byteArray54);
        org.apache.commons.csv.CSVParser.Builder builder57 = builder47.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder59 = builder47.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder61 = builder47.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder63 = builder61.setCharacterOffset((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder65 = builder61.setCharacterOffset((long) 'a');
        java.nio.charset.Charset charset66 = builder61.getCharset();
        org.apache.commons.csv.CSVFormat.Predefined predefined67 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat68 = predefined67.getFormat();
        boolean boolean69 = cSVFormat68.getAutoFlush();
        org.apache.commons.csv.QuoteMode quoteMode70 = cSVFormat68.getQuoteMode();
        boolean boolean71 = cSVFormat68.getIgnoreEmptyLines();
        org.apache.commons.csv.CSVParser cSVParser72 = org.apache.commons.csv.CSVParser.parse(inputStream46, charset66, cSVFormat68);
        org.apache.commons.csv.CSVParser.Builder builder73 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset74 = builder73.getCharsetDefault();
        byte[] byteArray75 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder76 = builder73.setByteArray(byteArray75);
        java.lang.CharSequence charSequence77 = builder73.getCharSequence();
        java.lang.CharSequence charSequence78 = builder73.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser79 = builder73.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray80 = builder73.getOpenOptions();
        java.nio.charset.Charset charset81 = builder73.getCharset();
        org.apache.commons.csv.CSVFormat.Predefined predefined82 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat83 = predefined82.getFormat();
        java.lang.String str84 = cSVFormat83.toString();
        boolean boolean85 = cSVFormat83.isEscapeCharacterSet();
        boolean boolean86 = cSVFormat83.getIgnoreHeaderCase();
        org.apache.commons.csv.CSVParser cSVParser87 = org.apache.commons.csv.CSVParser.parse(inputStream46, charset81, cSVFormat83);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter88 = cSVFormat1.print(path24, charset81);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(quoteMode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8192 + "'", int13 == 8192);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(path24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8192 + "'", int28 == 8192);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertArrayEquals(byteArray33, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertArrayEquals(byteArray44, new byte[] { (byte) -1, (byte) 100, (byte) 1 });
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(inputStream46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8192 + "'", int49 == 8192);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertArrayEquals(byteArray54, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(charset66);
        org.junit.Assert.assertTrue("'" + predefined67 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined67.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + quoteMode70 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode70.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(cSVParser72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(charset74);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertArrayEquals(byteArray75, new byte[] {});
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "" + "'", charSequence77, "");
        org.junit.Assert.assertEquals("'" + charSequence78 + "' != '" + "" + "'", charSequence78, "");
        org.junit.Assert.assertNotNull(cSVParser79);
        org.junit.Assert.assertNotNull(openOptionArray80);
        org.junit.Assert.assertArrayEquals(openOptionArray80, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset81);
        org.junit.Assert.assertTrue("'" + predefined82 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined82.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str84, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(cSVParser87);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0739");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setDelimiter('a');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setTrim(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode12 = cSVFormat11.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder10.setDuplicateHeaderMode(duplicateHeaderMode12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean17 = cSVFormat16.getSkipHeaderRecord();
        java.lang.String str18 = cSVFormat16.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode19 = cSVFormat16.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder13.setDuplicateHeaderMode(duplicateHeaderMode19);
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean22 = cSVFormat21.getSkipHeaderRecord();
        java.lang.String str23 = cSVFormat21.getRecordSeparator();
        boolean boolean24 = cSVFormat21.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter25 = cSVFormat21.printer();
        boolean boolean26 = cSVFormat21.getIgnoreHeaderCase();
        org.apache.commons.csv.QuoteMode quoteMode27 = cSVFormat21.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder20.setQuoteMode(quoteMode27);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode12 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode12.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\n" + "'", str18, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode19 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode19.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\n" + "'", str23, "\n");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVPrinter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + quoteMode27 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode27.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0740");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVParser5.isClosed();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream7 = cSVParser5.stream();
        java.lang.String str8 = cSVParser5.getTrailerComment();
        boolean boolean9 = cSVParser5.hasTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0741");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder15 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset16 = builder15.getCharsetDefault();
        int int17 = builder15.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder15.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder23 = builder15.setByteArray(byteArray22);
        org.apache.commons.csv.CSVParser.Builder builder24 = builder14.setByteArray(byteArray22);
        java.nio.charset.Charset charset25 = builder14.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder14.setBufferSize((java.lang.Integer) 8192);
        java.io.OutputStream outputStream28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder29 = builder14.setOutputStream(outputStream28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8192 + "'", int17 == 8192);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertArrayEquals(byteArray22, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0742");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        java.lang.String str3 = cSVFormat1.getDelimiterString();
        java.lang.String str4 = cSVFormat1.toString();
        java.nio.file.Path path5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        byte[] byteArray8 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder9 = builder6.setByteArray(byteArray8);
        java.nio.charset.Charset charset10 = builder6.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter11 = cSVFormat1.print(path5, charset10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVParser2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\t" + "'", str3, "\t");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false" + "'", str4, "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertArrayEquals(byteArray8, new byte[] {});
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0743");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        boolean boolean3 = cSVFormat1.isEscapeCharacterSet();
        boolean boolean4 = cSVFormat1.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Builder builder5 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean7 = cSVFormat6.getSkipHeaderRecord();
        java.lang.String str8 = cSVFormat6.getRecordSeparator();
        boolean boolean9 = cSVFormat6.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter10 = cSVFormat6.printer();
        boolean boolean11 = cSVFormat1.equals((java.lang.Object) cSVPrinter10);
        boolean boolean12 = cSVFormat1.isQuoteCharacterSet();
        boolean boolean13 = cSVFormat1.isEscapeCharacterSet();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\n" + "'", str8, "\n");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVPrinter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0744");
        java.nio.file.Path path0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset2 = builder1.getCharsetDefault();
        byte[] byteArray3 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder4 = builder1.setByteArray(byteArray3);
        java.lang.CharSequence charSequence5 = builder1.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder1.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        int int10 = builder8.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder8.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder16 = builder8.setByteArray(byteArray15);
        java.nio.charset.Charset charset17 = builder8.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder7.setCharset(charset17);
        org.apache.commons.csv.CSVFormat.Predefined predefined19 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat20 = predefined19.getFormat();
        boolean boolean21 = cSVFormat20.isCommentMarkerSet();
        java.lang.String str22 = cSVFormat20.getNullString();
        boolean boolean23 = cSVFormat20.getTrailingData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse(path0, charset17, cSVFormat20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: path");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertArrayEquals(byteArray3, new byte[] {});
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + charSequence5 + "' != '" + "" + "'", charSequence5, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8192 + "'", int10 == 8192);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertArrayEquals(byteArray15, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + predefined19 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined19.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0745");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser5.iterator();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor7 = cSVParser5.iterator();
        java.lang.String str8 = cSVParser5.getTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertNotNull(cSVRecordItor7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0746");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser5.iterator();
        long long7 = cSVParser5.getRecordNumber();
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = cSVParser5.getHeaderMap();
        java.lang.String str9 = cSVParser5.getTrailerComment();
        boolean boolean10 = cSVParser5.hasTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0747");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        java.lang.String str3 = cSVParser2.getFirstEndOfLine();
        java.util.List<java.lang.String> strList4 = cSVParser2.getHeaderNames();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator5 = cSVParser2.spliterator();
        boolean boolean6 = cSVParser2.hasTrailerComment();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVParser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0748");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset10 = builder9.getCharsetDefault();
        int int11 = builder9.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder9.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder17 = builder9.setByteArray(byteArray16);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder9.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder21 = builder9.setBufferSize((int) (byte) 0);
        java.nio.file.Path path22 = builder9.getPath();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder0.setPath(path22);
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setFile("\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\",\"\",\"hi!\",\"\r\n\",\"\",\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setCharset(",");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ,");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8192 + "'", int11 == 8192);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertArrayEquals(byteArray16, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(path22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0749");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder15 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset16 = builder15.getCharsetDefault();
        int int17 = builder15.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder15.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder23 = builder15.setByteArray(byteArray22);
        org.apache.commons.csv.CSVParser.Builder builder24 = builder14.setByteArray(byteArray22);
        java.util.function.IntUnaryOperator intUnaryOperator25 = null;
        org.apache.commons.csv.CSVParser.Builder builder26 = builder14.setBufferSizeChecker(intUnaryOperator25);
        org.apache.commons.csv.CSVParser.Builder builder28 = builder14.setBufferSize((java.lang.Integer) 0);
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setBufferSizeMax((int) (short) 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8192 + "'", int17 == 8192);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertArrayEquals(byteArray22, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0750");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder2.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset5 = builder4.getCharsetDefault();
        byte[] byteArray6 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder7 = builder4.setByteArray(byteArray6);
        java.lang.CharSequence charSequence8 = builder4.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder4.setBufferSize((int) ' ');
        java.io.InputStream inputStream11 = builder10.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset13 = builder12.getCharsetDefault();
        byte[] byteArray14 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder15 = builder12.setByteArray(byteArray14);
        java.nio.charset.Charset charset16 = builder12.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder19 = cSVFormat18.builder();
        java.lang.String str20 = cSVFormat18.getNullString();
        org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse(inputStream11, charset16, cSVFormat18);
        org.apache.commons.csv.CSVParser.Builder builder22 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset23 = builder22.getCharsetDefault();
        byte[] byteArray24 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder25 = builder22.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder22.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder29 = builder22.setBufferSize((int) 'a');
        java.nio.charset.Charset charset30 = builder29.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse(inputStream11, charset30, cSVFormat32);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder2.setCharset(charset30);
        java.nio.charset.Charset charset35 = builder34.getCharsetDefault();
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        java.lang.String str38 = cSVFormat37.toString();
        org.apache.commons.csv.QuoteMode quoteMode39 = cSVFormat37.getQuoteMode();
        org.apache.commons.csv.CSVParser.Builder builder40 = builder34.setFormat(cSVFormat37);
        org.apache.commons.csv.CSVParser.Builder builder41 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset42 = builder41.getCharsetDefault();
        int int43 = builder41.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder45 = builder41.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray48 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder49 = builder41.setByteArray(byteArray48);
        org.apache.commons.csv.CSVParser.Builder builder51 = builder41.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder53 = builder41.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder55 = builder41.setCharacterOffset((long) (byte) 1);
        byte[] byteArray59 = new byte[] { (byte) -1, (byte) 100, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder60 = builder55.setByteArray(byteArray59);
        org.apache.commons.csv.CSVParser.Builder builder61 = builder40.setByteArray(byteArray59);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] {});
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "" + "'", charSequence8, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] {});
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVParser21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] {});
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVParser33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str38, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + quoteMode39 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode39.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8192 + "'", int43 == 8192);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertArrayEquals(byteArray48, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertArrayEquals(byteArray59, new byte[] { (byte) -1, (byte) 100, (byte) 1 });
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0751");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder15 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset16 = builder15.getCharsetDefault();
        int int17 = builder15.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder15.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder23 = builder15.setByteArray(byteArray22);
        org.apache.commons.csv.CSVParser.Builder builder24 = builder14.setByteArray(byteArray22);
        java.nio.charset.Charset charset25 = builder14.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder14.setBufferSize((java.lang.Integer) 8192);
        java.nio.file.OpenOption[] openOptionArray28 = builder27.getOpenOptions();
        int int29 = builder27.getBufferSizeDefault();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8192 + "'", int17 == 8192);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertArrayEquals(byteArray22, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(openOptionArray28);
        org.junit.Assert.assertArrayEquals(openOptionArray28, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8192 + "'", int29 == 8192);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0752");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getIgnoreHeaderCase();
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str8 = cSVFormat1.format(objArray7);
        java.lang.String str9 = cSVFormat1.getRecordSeparator();
        boolean boolean10 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode11 = cSVFormat1.getQuoteMode();
        java.lang.Character char12 = cSVFormat1.getCommentMarker();
        java.lang.Character char13 = cSVFormat1.getCommentMarker();
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset15 = builder14.getCharsetDefault();
        byte[] byteArray16 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder17 = builder14.setByteArray(byteArray16);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder14.setBufferSize((int) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray20 = new java.nio.file.OpenOption[] {};
        org.apache.commons.csv.CSVParser.Builder builder21 = builder14.setOpenOptions(openOptionArray20);
        java.lang.String str22 = cSVFormat1.format((java.lang.Object[]) openOptionArray20);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str8, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\r\n" + "'", str9, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + quoteMode11 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode11.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNull(char12);
        org.junit.Assert.assertNull(char13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertArrayEquals(byteArray16, new byte[] {});
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(openOptionArray20);
        org.junit.Assert.assertArrayEquals(openOptionArray20, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0753");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        boolean boolean1 = cSVFormat0.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        boolean boolean3 = cSVFormat0.getTrim();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0754");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean2 = cSVFormat1.getSkipHeaderRecord();
        java.lang.String str3 = cSVFormat1.getRecordSeparator();
        boolean boolean4 = cSVFormat1.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder5 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        java.sql.ResultSetMetaData resultSetMetaData6 = null;
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setHeader(resultSetMetaData6);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setTrailingData(true);
        org.apache.commons.csv.CSVFormat cSVFormat12 = builder9.get();
        org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVParser13);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0755");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getIgnoreHeaderCase();
        boolean boolean2 = cSVFormat0.getTrim();
        java.lang.Character char3 = cSVFormat0.getEscapeCharacter();
        boolean boolean4 = cSVFormat0.getTrailingData();
        java.lang.String str5 = cSVFormat0.toString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str5, "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0756");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.isCommentMarkerSet();
        org.apache.commons.csv.CSVPrinter cSVPrinter3 = cSVFormat1.printer();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVPrinter3);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0757");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
        boolean boolean2 = cSVFormat1.getTrim();
        java.lang.String str3 = cSVFormat1.getRecordSeparator();
        boolean boolean4 = cSVFormat1.getAutoFlush();
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat1.printer();
        boolean boolean6 = cSVFormat1.getIgnoreHeaderCase();
        boolean boolean7 = cSVFormat1.getAutoFlush();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0758");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        int int8 = builder6.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder14 = builder6.setByteArray(byteArray13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder6.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder18 = builder6.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder6.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset22 = builder21.getCharsetDefault();
        int int23 = builder21.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder21.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder29 = builder21.setByteArray(byteArray28);
        org.apache.commons.csv.CSVParser.Builder builder30 = builder20.setByteArray(byteArray28);
        java.nio.charset.Charset charset31 = builder20.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder0.setCharset(charset31);
        java.util.function.IntUnaryOperator intUnaryOperator33 = null;
        org.apache.commons.csv.CSVParser.Builder builder34 = builder0.setBufferSizeChecker(intUnaryOperator33);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertArrayEquals(byteArray13, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8192 + "'", int23 == 8192);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertArrayEquals(byteArray28, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0759");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        boolean boolean3 = cSVFormat1.isEscapeCharacterSet();
        boolean boolean4 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset6 = builder5.getCharsetDefault();
        byte[] byteArray7 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder8 = builder5.setByteArray(byteArray7);
        java.nio.charset.Charset charset9 = builder5.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder5.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset13 = builder12.getCharsetDefault();
        int int14 = builder12.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder12.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder20 = builder12.setByteArray(byteArray19);
        org.apache.commons.csv.CSVParser.Builder builder22 = builder12.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder24 = builder12.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder12.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder28 = builder26.setCharacterOffset((long) '#');
        java.io.File file29 = builder28.getFile();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder11.setFile(file29);
        org.apache.commons.csv.CSVParser.Builder builder32 = builder30.setFile(",");
        java.io.Reader reader33 = null; // flaky "5) test0759(org.apache.commons.csv.randoop.RegressionTest1)": builder30.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean35 = cSVFormat34.getSkipHeaderRecord();
        java.lang.String str36 = cSVFormat34.getRecordSeparator();
        boolean boolean37 = cSVFormat34.isNullStringSet();
        boolean boolean38 = cSVFormat34.isCommentMarkerSet();
        org.apache.commons.csv.CSVParser cSVParser39 = null; // flaky "5) test0759(org.apache.commons.csv.randoop.RegressionTest1)": org.apache.commons.csv.CSVParser.parse(reader33, cSVFormat34);
        org.apache.commons.csv.CSVParser cSVParser40 = null; // flaky "5) test0759(org.apache.commons.csv.randoop.RegressionTest1)": cSVFormat1.parse(reader33);
        java.lang.String str41 = null; // flaky "5) test0759(org.apache.commons.csv.randoop.RegressionTest1)": cSVParser40.getHeaderComment();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8192 + "'", int14 == 8192);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertArrayEquals(byteArray19, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertNull("file29.getParent() == null", file29.getParent());
        org.junit.Assert.assertEquals(file29.toString(), "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
// flaky "5) test0759(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(reader33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\n" + "'", str36, "\n");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky "4) test0759(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser39);
// flaky "2) test0759(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser40);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0760");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getAutoFlush();
        org.apache.commons.csv.CSVFormat.Predefined predefined4 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat5 = predefined4.getFormat();
        boolean boolean6 = cSVFormat5.getAutoFlush();
        boolean boolean7 = cSVFormat5.getTrim();
        org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat5);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser8.iterator();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = cSVParser8.getHeaderMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = cSVParser8.getHeaderMap();
        boolean boolean12 = cSVParser8.hasTrailerComment();
        long long13 = cSVParser8.getRecordNumber();
        cSVParser8.close();
        boolean boolean15 = cSVFormat1.equals((java.lang.Object) cSVParser8);
        java.lang.String str16 = cSVFormat1.getRecordSeparator();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + predefined4 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined4.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVParser8);
        org.junit.Assert.assertNotNull(cSVRecordItor9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\r\n" + "'", str16, "\r\n");
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0761");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 0);
        java.util.function.IntUnaryOperator intUnaryOperator9 = null;
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setBufferSizeChecker(intUnaryOperator9);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0762");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        java.io.Writer writer3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setWriter(writer3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0763");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        java.lang.String str9 = cSVFormat7.getRecordSeparator();
        boolean boolean10 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat7);
        org.apache.commons.csv.QuoteMode quoteMode12 = null;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuoteMode(quoteMode12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray22 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder11.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder6.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder6.setQuote('#');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setEscape((java.lang.Character) '\"');
        java.sql.ResultSetMetaData resultSetMetaData29 = null;
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder26.setHeader(resultSetMetaData29);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder30.setEscape((java.lang.Character) '#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertArrayEquals(strArray22, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0764");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setBufferSize((int) 'a');
        org.apache.commons.csv.CSVParser cSVParser8 = builder0.get();
        java.io.InputStream inputStream9 = builder0.getInputStream();
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder11 = builder0.setOutputStream(outputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(cSVParser8);
        org.junit.Assert.assertNotNull(inputStream9);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0765");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        byte[] byteArray9 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder10 = builder7.setByteArray(byteArray9);
        java.lang.CharSequence charSequence11 = builder7.getCharSequence();
        java.lang.CharSequence charSequence12 = builder7.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser13 = builder7.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray14 = builder7.getOpenOptions();
        java.nio.charset.Charset charset15 = builder7.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder0.setCharset(charset15);
        java.io.InputStream inputStream17 = builder16.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset19 = builder18.getCharsetDefault();
        java.nio.charset.Charset charset20 = builder18.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean22 = cSVFormat21.getSkipHeaderRecord();
        java.lang.String str23 = cSVFormat21.getRecordSeparator();
        boolean boolean24 = cSVFormat21.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder25 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat21);
        org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse(inputStream17, charset20, cSVFormat21);
        java.lang.String[] strArray27 = cSVFormat21.getHeader();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "" + "'", charSequence11, "");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertNotNull(cSVParser13);
        org.junit.Assert.assertNotNull(openOptionArray14);
        org.junit.Assert.assertArrayEquals(openOptionArray14, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\n" + "'", str23, "\n");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(cSVParser26);
        org.junit.Assert.assertNull(strArray27);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0766");
        java.net.URL uRL0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset2 = builder1.getCharsetDefault();
        byte[] byteArray3 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder4 = builder1.setByteArray(byteArray3);
        java.lang.CharSequence charSequence5 = builder1.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder1.setBufferSize((int) ' ');
        java.io.InputStream inputStream8 = builder7.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset10 = builder9.getCharsetDefault();
        byte[] byteArray11 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder12 = builder9.setByteArray(byteArray11);
        java.nio.charset.Charset charset13 = builder9.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder16 = cSVFormat15.builder();
        java.lang.String str17 = cSVFormat15.getNullString();
        org.apache.commons.csv.CSVParser cSVParser18 = org.apache.commons.csv.CSVParser.parse(inputStream8, charset13, cSVFormat15);
        org.apache.commons.csv.CSVParser.Builder builder19 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset20 = builder19.getCharsetDefault();
        byte[] byteArray21 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder22 = builder19.setByteArray(byteArray21);
        java.lang.CharSequence charSequence23 = builder19.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder19.setBufferSize((int) ' ');
        java.io.InputStream inputStream26 = builder25.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder27 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset28 = builder27.getCharsetDefault();
        byte[] byteArray29 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder30 = builder27.setByteArray(byteArray29);
        java.nio.charset.Charset charset31 = builder27.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder34 = cSVFormat33.builder();
        java.lang.String str35 = cSVFormat33.getNullString();
        org.apache.commons.csv.CSVParser cSVParser36 = org.apache.commons.csv.CSVParser.parse(inputStream26, charset31, cSVFormat33);
        org.apache.commons.csv.CSVParser.Builder builder37 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset38 = builder37.getCharsetDefault();
        byte[] byteArray39 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder40 = builder37.setByteArray(byteArray39);
        org.apache.commons.csv.CSVParser.Builder builder42 = builder37.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder44 = builder37.setBufferSize((int) 'a');
        java.nio.charset.Charset charset45 = builder44.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat47 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVParser cSVParser48 = org.apache.commons.csv.CSVParser.parse(inputStream26, charset45, cSVFormat47);
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        boolean boolean52 = cSVFormat51.getIgnoreHeaderCase();
        java.lang.String str53 = cSVFormat51.getDelimiterString();
        boolean boolean54 = cSVFormat51.isQuoteCharacterSet();
        org.apache.commons.csv.CSVParser cSVParser55 = org.apache.commons.csv.CSVParser.parse(",", cSVFormat51);
        org.apache.commons.csv.CSVParser cSVParser56 = org.apache.commons.csv.CSVParser.parse(inputStream8, charset45, cSVFormat51);
        org.apache.commons.csv.CSVFormat.Predefined predefined57 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat58 = predefined57.getFormat();
        boolean boolean59 = cSVFormat58.getIgnoreHeaderCase();
        java.lang.Object[] objArray64 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str65 = cSVFormat58.format(objArray64);
        java.lang.String str66 = cSVFormat58.getRecordSeparator();
        boolean boolean67 = cSVFormat58.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode68 = cSVFormat58.getQuoteMode();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser69 = org.apache.commons.csv.CSVParser.parse(uRL0, charset45, cSVFormat58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertArrayEquals(byteArray3, new byte[] {});
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + charSequence5 + "' != '" + "" + "'", charSequence5, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(inputStream8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertArrayEquals(byteArray11, new byte[] {});
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(cSVParser18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertArrayEquals(byteArray21, new byte[] {});
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + charSequence23 + "' != '" + "" + "'", charSequence23, "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(inputStream26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertArrayEquals(byteArray29, new byte[] {});
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(cSVParser36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertArrayEquals(byteArray39, new byte[] {});
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertNotNull(cSVParser48);
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "," + "'", str53, ",");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(cSVParser55);
        org.junit.Assert.assertNotNull(cSVParser56);
        org.junit.Assert.assertTrue("'" + predefined57 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined57.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str65, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\r\n" + "'", str66, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + quoteMode68 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode68.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0767");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setIgnoreSurroundingSpaces(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0768");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) 1);
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        int int8 = builder6.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser11 = builder6.getUnchecked();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder6.setPath(",");
        java.nio.file.OpenOption[] openOptionArray14 = builder13.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder5.setOpenOptions(openOptionArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder15.setBufferSize((java.lang.Integer) 0);
        java.net.URI uRI18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setURI(uRI18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8192 + "'", int3 == 8192);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVParser11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(openOptionArray14);
        org.junit.Assert.assertArrayEquals(openOptionArray14, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0769");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset15 = builder14.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder11.setCharset(charset15);
        java.nio.charset.Charset charset17 = builder11.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder0.setCharset(charset17);
        java.io.File file19 = builder0.getFile();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Reader reader20 = builder0.getReader();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertNull("file19.getParent() == null", file19.getParent());
        org.junit.Assert.assertEquals(file19.toString(), "");
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0770");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getIgnoreHeaderCase();
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str8 = cSVFormat1.format(objArray7);
        boolean boolean9 = cSVFormat1.getTrim();
        boolean boolean10 = cSVFormat1.getAllowMissingColumnNames();
        boolean boolean11 = cSVFormat1.getAllowMissingColumnNames();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str8, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0771");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeaderComments();
        boolean boolean2 = cSVFormat0.getTrim();
        boolean boolean3 = cSVFormat0.getTrailingDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0772");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVParser3);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0773");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isNullStringSet();
        boolean boolean2 = cSVFormat0.getAllowMissingColumnNames();
        boolean boolean3 = cSVFormat0.getTrim();
        java.lang.String[] strArray4 = cSVFormat0.getHeaderComments();
        boolean boolean5 = cSVFormat0.isQuoteCharacterSet();
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        int int8 = builder6.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder14 = builder6.setByteArray(byteArray13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder6.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder18 = builder6.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder6.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset22 = builder21.getCharsetDefault();
        int int23 = builder21.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder21.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder29 = builder21.setByteArray(byteArray28);
        org.apache.commons.csv.CSVParser.Builder builder30 = builder20.setByteArray(byteArray28);
        java.nio.charset.Charset charset31 = builder20.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder20.setBufferSize((java.lang.Integer) 8192);
        java.io.InputStream inputStream34 = builder33.getInputStream();
        java.lang.Appendable appendable35 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat0.print((java.lang.Object) builder33, appendable35, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertArrayEquals(byteArray13, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8192 + "'", int23 == 8192);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertArrayEquals(byteArray28, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(inputStream34);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0774");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean5 = cSVFormat4.getSkipHeaderRecord();
        java.lang.String str6 = cSVFormat4.getRecordSeparator();
        boolean boolean7 = cSVFormat4.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder8 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat4);
        boolean boolean9 = cSVFormat0.equals((java.lang.Object) cSVFormat4);
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean11 = cSVFormat10.getSkipHeaderRecord();
        java.lang.String str12 = cSVFormat10.getRecordSeparator();
        boolean boolean13 = cSVFormat10.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder14 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat10);
        org.apache.commons.csv.QuoteMode quoteMode15 = null;
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setQuoteMode(quoteMode15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder14.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray25 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder14.setHeaderComments(strArray25);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder14.setCommentMarker('a');
        java.sql.ResultSetMetaData resultSetMetaData29 = null;
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setHeader(resultSetMetaData29);
        org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean32 = cSVFormat31.getSkipHeaderRecord();
        java.lang.String str33 = cSVFormat31.getRecordSeparator();
        boolean boolean34 = cSVFormat31.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder35 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat31);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setCommentMarker('a');
        java.lang.String[] strArray42 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" };
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder35.setHeader(strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder35.setNullString("");
        org.apache.commons.csv.CSVFormat cSVFormat46 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean47 = cSVFormat46.getSkipHeaderRecord();
        java.lang.String str48 = cSVFormat46.getRecordSeparator();
        boolean boolean49 = cSVFormat46.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder50 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat46);
        org.apache.commons.csv.QuoteMode quoteMode51 = null;
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder50.setQuoteMode(quoteMode51);
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder50.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray61 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder50.setHeaderComments(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder45.setHeader(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder28.setHeaderComments(strArray61);
        java.lang.String str65 = cSVFormat4.format((java.lang.Object[]) strArray61);
        boolean boolean66 = cSVFormat4.getIgnoreHeaderCase();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertArrayEquals(strArray25, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\n" + "'", str33, "\n");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertArrayEquals(strArray42, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" });
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\n" + "'", str48, "\n");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertArrayEquals(strArray61, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\",\"\",\"hi!\",\"\r\n\",\"\",\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"" + "'", str65, "\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\",\"\",\"hi!\",\"\r\n\",\"\",\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0775");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF;
        boolean boolean1 = cSVFormat0.getIgnoreEmptyLines();
        java.lang.String str2 = cSVFormat0.getDelimiterString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\t" + "'", str2, "\t");
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0776");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setIgnoreHeaderCase(true);
        java.sql.ResultSet resultSet6 = null;
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setHeader(resultSet6);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0777");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getIgnoreHeaderCase();
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str8 = cSVFormat1.format(objArray7);
        java.lang.String str9 = cSVFormat1.getRecordSeparator();
        boolean boolean10 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode11 = cSVFormat1.getQuoteMode();
        boolean boolean12 = cSVFormat1.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str8, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\r\n" + "'", str9, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + quoteMode11 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode11.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0778");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getAutoFlush();
        boolean boolean3 = cSVFormat1.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter4 = cSVFormat1.printer();
        boolean boolean5 = cSVFormat1.getAllowMissingColumnNames();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(cSVPrinter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0779");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        java.nio.file.Path path13 = builder0.getPath();
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset15 = builder14.getCharsetDefault();
        int int16 = builder14.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder14.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser19 = builder14.getUnchecked();
        java.lang.CharSequence charSequence20 = builder14.getCharSequence();
        java.nio.file.OpenOption[] openOptionArray21 = builder14.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder0.setOpenOptions(openOptionArray21);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser23 = builder0.getUnchecked();
            org.junit.Assert.fail("Expected exception of type java.io.UncheckedIOException; message: java.nio.file.AccessDeniedException: ");
        } catch (java.io.UncheckedIOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8192 + "'", int16 == 8192);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(cSVParser19);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", charSequence20, "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertNotNull(openOptionArray21);
        org.junit.Assert.assertArrayEquals(openOptionArray21, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0780");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser5.iterator();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor7 = cSVParser5.iterator();
        long long8 = cSVParser5.getCurrentLineNumber();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertNotNull(cSVRecordItor7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0781");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setEscape('\"');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setTrim(true);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder12.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder12.setRecordSeparator("\n");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0782");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser5.iterator();
        java.lang.String str7 = cSVParser5.getFirstEndOfLine();
        java.util.List<java.lang.String> strList8 = cSVParser5.getHeaderNames();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0783");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean10 = cSVFormat9.getSkipHeaderRecord();
        java.lang.String str11 = cSVFormat9.getRecordSeparator();
        boolean boolean12 = cSVFormat9.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder13 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat9);
        org.apache.commons.csv.QuoteMode quoteMode14 = null;
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setQuoteMode(quoteMode14);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray24 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder13.setHeaderComments(strArray24);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder4.setHeaderComments(strArray24);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setRecordSeparator('4');
        org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean30 = cSVFormat29.getSkipHeaderRecord();
        java.lang.String str31 = cSVFormat29.getRecordSeparator();
        boolean boolean32 = cSVFormat29.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder33 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat29);
        org.apache.commons.csv.QuoteMode quoteMode34 = null;
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setQuoteMode(quoteMode34);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder33.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray44 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder33.setHeaderComments(strArray44);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder33.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder47.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder47.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder47.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean55 = cSVFormat54.getSkipHeaderRecord();
        java.lang.String str56 = cSVFormat54.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode57 = cSVFormat54.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder47.setDuplicateHeaderMode(duplicateHeaderMode57);
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder26.setDuplicateHeaderMode(duplicateHeaderMode57);
        org.apache.commons.csv.CSVFormat cSVFormat60 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean61 = cSVFormat60.getSkipHeaderRecord();
        java.lang.String str62 = cSVFormat60.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode63 = cSVFormat60.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder59.setDuplicateHeaderMode(duplicateHeaderMode63);
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder64.setLenientEof(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\n" + "'", str11, "\n");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertArrayEquals(strArray24, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\n" + "'", str31, "\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertArrayEquals(strArray44, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\n" + "'", str56, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode57 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode57.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\n" + "'", str62, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode63 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode63.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0784");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.toString();
        boolean boolean5 = cSVFormat3.isEscapeCharacterSet();
        boolean boolean6 = cSVFormat1.equals((java.lang.Object) cSVFormat3);
        java.lang.String str7 = cSVFormat1.getDelimiterString();
        java.lang.Character char8 = cSVFormat1.getCommentMarker();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str4, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\"" + "'", str7, "\"");
        org.junit.Assert.assertNull(char8);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0785");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setDelimiter('a');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setTrim(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode12 = cSVFormat11.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder10.setDuplicateHeaderMode(duplicateHeaderMode12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder10.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder10.setQuote((java.lang.Character) 'a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode12 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode12.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0786");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setBufferSize((int) 'a');
        java.io.Writer writer8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setWriter(writer8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0787");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"\t\thi!\t\"\r\n\"\t\t\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\"\"\"??hi!?\"??\"??\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\"\"\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0788");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) 1);
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        int int8 = builder6.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser11 = builder6.getUnchecked();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder6.setPath(",");
        java.nio.file.OpenOption[] openOptionArray14 = builder13.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder5.setOpenOptions(openOptionArray14);
        org.apache.commons.csv.CSVParser.Builder builder16 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset17 = builder16.getCharsetDefault();
        int int18 = builder16.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder16.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray23 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder24 = builder16.setByteArray(byteArray23);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder16.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder28 = builder16.setBufferSize((int) (byte) 0);
        java.nio.file.Path path29 = builder16.getPath();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder15.setPath(path29);
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset32 = builder31.getCharsetDefault();
        int int33 = builder31.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder31.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray38 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder39 = builder31.setByteArray(byteArray38);
        org.apache.commons.csv.CSVParser.Builder builder41 = builder31.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder43 = builder31.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder45 = builder31.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder47 = builder45.setCharacterOffset((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder49 = builder45.setCharacterOffset((long) 'a');
        java.nio.charset.Charset charset50 = builder45.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat51 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean52 = cSVFormat51.getSkipHeaderRecord();
        java.lang.String str53 = cSVFormat51.getRecordSeparator();
        boolean boolean54 = cSVFormat51.isNullStringSet();
        boolean boolean55 = cSVFormat51.isCommentMarkerSet();
        boolean boolean56 = cSVFormat51.getIgnoreHeaderCase();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser57 = org.apache.commons.csv.CSVParser.parse(path29, charset50, cSVFormat51);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8192 + "'", int3 == 8192);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVParser11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(openOptionArray14);
        org.junit.Assert.assertArrayEquals(openOptionArray14, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8192 + "'", int18 == 8192);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertArrayEquals(byteArray23, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(path29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8192 + "'", int33 == 8192);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertArrayEquals(byteArray38, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\n" + "'", str53, "\n");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0789");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setQuote((java.lang.Character) ' ');
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder0.setDelimiter('4');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0790");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean2 = cSVFormat1.getSkipHeaderRecord();
        java.lang.String str3 = cSVFormat1.getRecordSeparator();
        boolean boolean4 = cSVFormat1.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder5 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        java.sql.ResultSetMetaData resultSetMetaData6 = null;
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setHeader(resultSetMetaData6);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setTrailingData(true);
        org.apache.commons.csv.CSVFormat cSVFormat12 = builder9.get();
        boolean boolean13 = cSVFormat12.getTrailingDelimiter();
        boolean boolean14 = cSVFormat12.isEscapeCharacterSet();
        org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("\"", cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(cSVParser15);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0791");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        java.sql.ResultSet resultSet21 = null;
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setHeader(resultSet21);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder18.setRecordSeparator('4');
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder18.setTrailingData(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0792");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.nio.charset.Charset charset4 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        int int9 = builder7.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder7.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder7.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder19 = builder7.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder7.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) '#');
        java.io.File file24 = builder23.getFile();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder6.setFile(file24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder6.setCharacterOffset((long) 10);
        org.apache.commons.csv.CSVParser.Builder builder29 = builder6.setCharacterOffset((-1L));
        java.io.OutputStream outputStream30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder31 = builder6.setOutputStream(outputStream30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0793");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean5 = cSVFormat4.getSkipHeaderRecord();
        java.lang.String str6 = cSVFormat4.getRecordSeparator();
        boolean boolean7 = cSVFormat4.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder8 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat4);
        boolean boolean9 = cSVFormat0.equals((java.lang.Object) cSVFormat4);
        java.lang.String str10 = cSVFormat4.toString();
        boolean boolean11 = cSVFormat4.getIgnoreSurroundingSpaces();
        boolean boolean12 = cSVFormat4.isCommentMarkerSet();
        boolean boolean13 = cSVFormat4.getTrim();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str10, "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0794");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.nio.charset.Charset charset4 = builder0.getCharset();
        org.apache.commons.csv.CSVParser cSVParser5 = builder0.getUnchecked();
        org.apache.commons.csv.CSVParser cSVParser6 = builder0.get();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVParser6);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0795");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getAutoFlush();
        org.apache.commons.csv.CSVFormat.Predefined predefined4 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat5 = predefined4.getFormat();
        boolean boolean6 = cSVFormat5.getAutoFlush();
        boolean boolean7 = cSVFormat5.getTrim();
        org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat5);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor9 = cSVParser8.iterator();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = cSVParser8.getHeaderMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap11 = cSVParser8.getHeaderMap();
        boolean boolean12 = cSVParser8.hasTrailerComment();
        long long13 = cSVParser8.getRecordNumber();
        cSVParser8.close();
        boolean boolean15 = cSVFormat1.equals((java.lang.Object) cSVParser8);
        java.util.List<java.lang.String> strList16 = cSVParser8.getHeaderNames();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + predefined4 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined4.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVParser8);
        org.junit.Assert.assertNotNull(cSVRecordItor9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strList16);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0796");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVParser5.hasTrailerComment();
        boolean boolean7 = cSVParser5.isClosed();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream8 = cSVParser5.stream();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser5.getHeaderMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = cSVParser5.getHeaderMap();
        boolean boolean11 = cSVParser5.isClosed();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVRecordStream8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0797");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setIgnoreEmptyLines(false);
        java.sql.ResultSetMetaData resultSetMetaData11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setHeader(resultSetMetaData11);
        java.sql.ResultSetMetaData resultSetMetaData13 = null;
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setHeader(resultSetMetaData13);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder10.setLenientEof(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0798");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser5 = builder0.getUnchecked();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setPath(",");
        org.apache.commons.csv.CSVFormat.Predefined predefined8 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat9 = predefined8.getFormat();
        boolean boolean10 = cSVFormat9.isCommentMarkerSet();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder0.setFormat(cSVFormat9);
        java.io.OutputStream outputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder13 = builder0.setOutputStream(outputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + predefined8 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined8.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0799");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode3 = cSVFormat0.getDuplicateHeaderMode();
        boolean boolean4 = cSVFormat0.isEscapeCharacterSet();
        java.lang.String str5 = cSVFormat0.getNullString();
        boolean boolean6 = cSVFormat0.isQuoteCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode3 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode3.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0800");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setCharacterOffset((long) (byte) 1);
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 100, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder19 = builder14.setByteArray(byteArray18);
        org.apache.commons.csv.CSVParser cSVParser20 = builder19.get();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder19.setCharacterOffset((long) (byte) 1);
        org.apache.commons.csv.CSVParser cSVParser23 = builder19.getUnchecked();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] { (byte) -1, (byte) 100, (byte) 1 });
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(cSVParser20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(cSVParser23);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0801");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.io.IORandomAccessFile iORandomAccessFile15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder16 = builder0.setRandomAccessFile(iORandomAccessFile15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0802");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset10 = builder9.getCharsetDefault();
        int int11 = builder9.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder9.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder17 = builder9.setByteArray(byteArray16);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder9.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder21 = builder9.setBufferSize((int) (byte) 0);
        java.nio.file.Path path22 = builder9.getPath();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder0.setPath(path22);
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder27 = builder23.setBufferSize((java.lang.Integer) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Reader reader28 = builder23.getReader();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8192 + "'", int11 == 8192);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertArrayEquals(byteArray16, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(path22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0803");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.EXCEL;
        java.lang.String str1 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode3 = cSVFormat0.getDuplicateHeaderMode();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "," + "'", str1, ",");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode3 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode3.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0804");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder2.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setBufferSizeMax((int) (byte) -1);
        java.nio.charset.Charset charset6 = builder5.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder5.setBufferSizeMax(0);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setCharacterOffset((long) (short) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0805");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setEscape('\"');
        java.sql.ResultSet resultSet9 = null;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setHeader(resultSet9);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder4.get();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0806");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        java.lang.String[] strArray11 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" };
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder4.setHeader(strArray11);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder4.setNullString("");
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setLenientEof(false);
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean18 = cSVFormat17.getSkipHeaderRecord();
        java.lang.String str19 = cSVFormat17.getRecordSeparator();
        boolean boolean20 = cSVFormat17.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder21 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat17);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode24 = null;
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setQuoteMode(quoteMode24);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder23.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder23.setCommentMarker('#');
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean31 = cSVFormat30.getSkipHeaderRecord();
        java.lang.String str32 = cSVFormat30.getRecordSeparator();
        boolean boolean33 = cSVFormat30.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder34 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat30);
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode37 = null;
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setQuoteMode(quoteMode37);
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder36.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat41 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean42 = cSVFormat41.getSkipHeaderRecord();
        java.lang.String str43 = cSVFormat41.getRecordSeparator();
        boolean boolean44 = cSVFormat41.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder45 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat41);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder45.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder47.setQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat50 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode51 = cSVFormat50.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder47.setDuplicateHeaderMode(duplicateHeaderMode51);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder40.setDuplicateHeaderMode(duplicateHeaderMode51);
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder29.setDuplicateHeaderMode(duplicateHeaderMode51);
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder16.setDuplicateHeaderMode(duplicateHeaderMode51);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertArrayEquals(strArray11, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" });
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\n" + "'", str19, "\n");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\n" + "'", str32, "\n");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\n" + "'", str43, "\n");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode51 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode51.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0807");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        int int8 = builder6.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder14 = builder6.setByteArray(byteArray13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder6.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder18 = builder6.setBufferSize((int) (byte) 0);
        java.nio.file.Path path19 = builder6.getPath();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder0.setPath(path19);
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset22 = builder21.getCharsetDefault();
        int int23 = builder21.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder21.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder29 = builder21.setByteArray(byteArray28);
        org.apache.commons.csv.CSVParser.Builder builder31 = builder21.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder33 = builder21.setBufferSize((int) (byte) 0);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier34 = builder21.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder35 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder38 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset39 = builder38.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder40 = builder35.setCharset(charset39);
        java.nio.charset.Charset charset41 = builder35.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder42 = builder21.setCharset(charset41);
        org.apache.commons.csv.CSVFormat cSVFormat43 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean44 = cSVFormat43.getSkipHeaderRecord();
        java.lang.String str45 = cSVFormat43.getRecordSeparator();
        boolean boolean46 = cSVFormat43.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder47 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat43);
        boolean boolean48 = cSVFormat43.isCommentMarkerSet();
        boolean boolean49 = cSVFormat43.getAllowMissingColumnNames();
        java.lang.String[] strArray50 = cSVFormat43.getHeaderComments();
        boolean boolean51 = cSVFormat43.getAllowMissingColumnNames();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser52 = org.apache.commons.csv.CSVParser.parse(path19, charset41, cSVFormat43);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertArrayEquals(byteArray13, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(path19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8192 + "'", int23 == 8192);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertArrayEquals(byteArray28, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(cSVParserSupplier34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\n" + "'", str45, "\n");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0808");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a');
        boolean boolean2 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean4 = cSVFormat3.getSkipHeaderRecord();
        java.lang.String str5 = cSVFormat3.getRecordSeparator();
        boolean boolean6 = cSVFormat3.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder7 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat3);
        org.apache.commons.csv.QuoteMode quoteMode8 = null;
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setQuoteMode(quoteMode8);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray18 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder7.setHeaderComments(strArray18);
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder7.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder21.setEscape('#');
        java.lang.Appendable appendable26 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat1.print((java.lang.Object) builder21, appendable26, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\n" + "'", str5, "\n");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertArrayEquals(strArray18, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0809");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isNullStringSet();
        boolean boolean2 = cSVFormat0.isQuoteCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0810");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getIgnoreHeaderCase();
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str8 = cSVFormat1.format(objArray7);
        java.lang.String str9 = cSVFormat1.getRecordSeparator();
        boolean boolean10 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode11 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Predefined predefined12 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined12.getFormat();
        boolean boolean14 = cSVFormat13.getIgnoreHeaderCase();
        java.lang.Object[] objArray19 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str20 = cSVFormat13.format(objArray19);
        java.lang.String str21 = cSVFormat1.format(objArray19);
        java.lang.String str22 = cSVFormat1.getNullString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str8, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\r\n" + "'", str9, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + quoteMode11 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode11.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + predefined12 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined12.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str20, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str21, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0811");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        boolean boolean5 = cSVFormat0.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat.Builder builder6 = cSVFormat0.builder();
        java.lang.String str7 = cSVFormat0.toString();
        boolean boolean8 = cSVFormat0.getAllowMissingColumnNames();
        java.lang.Appendable appendable9 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat0.println(appendable9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str7, "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0812");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setIgnoreHeaderCase(true);
        java.sql.ResultSetMetaData resultSetMetaData6 = null;
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setHeader(resultSetMetaData6);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setLenientEof(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder3.setEscape(' ');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0813");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        java.lang.String str9 = cSVFormat7.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode10 = cSVFormat7.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder6.setDuplicateHeaderMode(duplicateHeaderMode10);
        org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean13 = cSVFormat12.getSkipHeaderRecord();
        java.lang.String str14 = cSVFormat12.getRecordSeparator();
        boolean boolean15 = cSVFormat12.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder16 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat12);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder16.setTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder16.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        boolean boolean25 = cSVFormat24.getIgnoreHeaderCase();
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str31 = cSVFormat24.format(objArray30);
        java.lang.String str32 = cSVFormat24.getRecordSeparator();
        boolean boolean33 = cSVFormat24.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode34 = cSVFormat24.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder16.setQuoteMode(quoteMode34);
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder11.setQuoteMode(quoteMode34);
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean38 = cSVFormat37.getSkipHeaderRecord();
        java.lang.String str39 = cSVFormat37.getRecordSeparator();
        boolean boolean40 = cSVFormat37.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder41 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat37);
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder41.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder43.setQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat46 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode47 = cSVFormat46.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder43.setDuplicateHeaderMode(duplicateHeaderMode47);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder36.setDuplicateHeaderMode(duplicateHeaderMode47);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode10 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode10.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\n" + "'", str14, "\n");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str31, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\r\n" + "'", str32, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + quoteMode34 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode34.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\n" + "'", str39, "\n");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode47 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode47.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0814");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser5 = builder0.getUnchecked();
        java.lang.CharSequence charSequence6 = builder0.getCharSequence();
        java.nio.file.OpenOption[] openOptionArray7 = builder0.getOpenOptions();
        java.util.function.IntUnaryOperator intUnaryOperator8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder0.setBufferSizeChecker(intUnaryOperator8);
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream10 = builder0.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: CharSequenceOrigin#getPath() for String origin \"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\"");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", charSequence6, "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertNotNull(openOptionArray7);
        org.junit.Assert.assertArrayEquals(openOptionArray7, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0815");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setSkipHeaderRecord(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0816");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder6.setQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean14 = cSVFormat13.getSkipHeaderRecord();
        java.lang.String str15 = cSVFormat13.getRecordSeparator();
        boolean boolean16 = cSVFormat13.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder17 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat13);
        org.apache.commons.csv.QuoteMode quoteMode18 = null;
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setQuoteMode(quoteMode18);
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder17.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray28 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder17.setHeaderComments(strArray28);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder17.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder31.setEscape('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        boolean boolean38 = cSVFormat37.getIgnoreHeaderCase();
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str44 = cSVFormat37.format(objArray43);
        java.lang.String str45 = cSVFormat37.getRecordSeparator();
        boolean boolean46 = cSVFormat37.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode47 = cSVFormat37.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder35.setQuoteMode(quoteMode47);
        org.apache.commons.csv.CSVFormat cSVFormat49 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean50 = cSVFormat49.getSkipHeaderRecord();
        java.lang.String str51 = cSVFormat49.getRecordSeparator();
        boolean boolean52 = cSVFormat49.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder53 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat49);
        org.apache.commons.csv.QuoteMode quoteMode54 = null;
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder53.setQuoteMode(quoteMode54);
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder53.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray64 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder53.setHeaderComments(strArray64);
        org.apache.commons.csv.CSVFormat.Builder builder66 = builder35.setHeaderComments(strArray64);
        org.apache.commons.csv.CSVFormat.Builder builder67 = builder12.setHeaderComments(strArray64);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\n" + "'", str15, "\n");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertArrayEquals(strArray28, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str44, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\r\n" + "'", str45, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + quoteMode47 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode47.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(cSVFormat49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\n" + "'", str51, "\n");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertArrayEquals(strArray64, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0817");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier4 = builder0.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset6 = builder5.getCharsetDefault();
        byte[] byteArray7 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder8 = builder5.setByteArray(byteArray7);
        java.lang.CharSequence charSequence9 = builder5.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder5.setBufferSize((int) ' ');
        java.io.InputStream inputStream12 = builder11.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder13 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset14 = builder13.getCharsetDefault();
        byte[] byteArray15 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder16 = builder13.setByteArray(byteArray15);
        java.nio.charset.Charset charset17 = builder13.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder20 = cSVFormat19.builder();
        java.lang.String str21 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse(inputStream12, charset17, cSVFormat19);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder0.setInputStream(inputStream12);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path24 = builder0.getPath();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: InputStreamOrigin#getPath() for ByteArrayInputStream origin java.io.ByteArrayInputStream@6448d663");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVParserSupplier4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "" + "'", charSequence9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertArrayEquals(byteArray15, new byte[] {});
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(cSVParser22);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0818");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setLenientEof(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0819");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.String[] strArray3 = cSVFormat0.getHeader();
        java.lang.String str4 = cSVFormat0.getDelimiterString();
        boolean boolean5 = cSVFormat0.getIgnoreEmptyLines();
        boolean boolean6 = cSVFormat0.getSkipHeaderRecord();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode7 = cSVFormat0.getDuplicateHeaderMode();
        org.apache.commons.csv.QuoteMode quoteMode8 = cSVFormat0.getQuoteMode();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "," + "'", str4, ",");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode7 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode7.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertTrue("'" + quoteMode8 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode8.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0820");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser cSVParser4 = builder3.get();
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset6 = builder5.getCharsetDefault();
        int int7 = builder5.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder5.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder13 = builder5.setByteArray(byteArray12);
        org.apache.commons.csv.CSVParser.Builder builder15 = builder5.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder17 = builder5.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder5.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset21 = builder20.getCharsetDefault();
        int int22 = builder20.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder20.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray27 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder28 = builder20.setByteArray(byteArray27);
        org.apache.commons.csv.CSVParser.Builder builder29 = builder19.setByteArray(byteArray27);
        java.util.function.IntUnaryOperator intUnaryOperator30 = null;
        org.apache.commons.csv.CSVParser.Builder builder31 = builder19.setBufferSizeChecker(intUnaryOperator30);
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharacterOffset((long) (short) -1);
        org.apache.commons.csv.CSVParser.Builder builder34 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset35 = builder34.getCharsetDefault();
        byte[] byteArray36 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder37 = builder34.setByteArray(byteArray36);
        java.lang.CharSequence charSequence38 = builder34.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder40 = builder34.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder41 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset42 = builder41.getCharsetDefault();
        int int43 = builder41.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder45 = builder41.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray48 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder49 = builder41.setByteArray(byteArray48);
        java.nio.charset.Charset charset50 = builder41.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder51 = builder40.setCharset(charset50);
        org.apache.commons.csv.CSVParser.Builder builder52 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset53 = builder52.getCharsetDefault();
        int int54 = builder52.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder56 = builder52.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray59 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder60 = builder52.setByteArray(byteArray59);
        org.apache.commons.csv.CSVParser.Builder builder62 = builder52.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder64 = builder52.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder66 = builder52.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder67 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset68 = builder67.getCharsetDefault();
        int int69 = builder67.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder71 = builder67.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray74 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder75 = builder67.setByteArray(byteArray74);
        org.apache.commons.csv.CSVParser.Builder builder76 = builder66.setByteArray(byteArray74);
        org.apache.commons.csv.CSVParser.Builder builder77 = builder51.setByteArray(byteArray74);
        org.apache.commons.csv.CSVParser.Builder builder78 = builder33.setByteArray(byteArray74);
        org.apache.commons.csv.CSVParser.Builder builder79 = builder3.setByteArray(byteArray74);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8192 + "'", int7 == 8192);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertArrayEquals(byteArray12, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8192 + "'", int22 == 8192);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertArrayEquals(byteArray27, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertArrayEquals(byteArray36, new byte[] {});
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "" + "'", charSequence38, "");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8192 + "'", int43 == 8192);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertArrayEquals(byteArray48, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8192 + "'", int54 == 8192);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertArrayEquals(byteArray59, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(charset68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 8192 + "'", int69 == 8192);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertArrayEquals(byteArray74, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0821");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        boolean boolean3 = cSVFormat1.isEscapeCharacterSet();
        boolean boolean4 = cSVFormat1.getIgnoreHeaderCase();
        boolean boolean5 = cSVFormat1.getIgnoreSurroundingSpaces();
        java.io.Reader reader6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser7 = cSVFormat1.parse(reader6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0822");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVParser5.hasTrailerComment();
        boolean boolean7 = cSVParser5.isClosed();
        java.util.List<java.lang.String> strList8 = cSVParser5.getHeaderNames();
        java.lang.String str9 = cSVParser5.getTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0823");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        java.nio.charset.Charset charset11 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset13 = builder12.getCharsetDefault();
        int int14 = builder12.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder12.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser17 = builder12.getUnchecked();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder12.setPath(",");
        java.nio.file.OpenOption[] openOptionArray20 = builder19.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder0.setOpenOptions(openOptionArray20);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder0.setFile("Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8192 + "'", int14 == 8192);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(cSVParser17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(openOptionArray20);
        org.junit.Assert.assertArrayEquals(openOptionArray20, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0824");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setTrailingData(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder8.get();
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder8.setLenientEof(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0825");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.String[] strArray3 = cSVFormat0.getHeader();
        java.lang.String str4 = cSVFormat0.getDelimiterString();
        boolean boolean5 = cSVFormat0.getIgnoreEmptyLines();
        java.lang.String str6 = cSVFormat0.getDelimiterString();
        boolean boolean7 = cSVFormat0.isNullStringSet();
        boolean boolean8 = cSVFormat0.getAllowMissingColumnNames();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "," + "'", str4, ",");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "," + "'", str6, ",");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0826");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        boolean boolean2 = cSVFormat0.getIgnoreEmptyLines();
        boolean boolean3 = cSVFormat0.getIgnoreHeaderCase();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0827");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setRecordNumber((long) (byte) -1);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder12.setBufferSize((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.io.RandomAccessFile randomAccessFile17 = builder16.getRandomAccessFile();
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0828");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset10 = builder9.getCharsetDefault();
        byte[] byteArray11 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder12 = builder9.setByteArray(byteArray11);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder9.setBufferSize((int) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray15 = new java.nio.file.OpenOption[] {};
        org.apache.commons.csv.CSVParser.Builder builder16 = builder9.setOpenOptions(openOptionArray15);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder8.setOpenOptions(openOptionArray15);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder8.setBufferSize((java.lang.Integer) 100);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertArrayEquals(byteArray11, new byte[] {});
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(openOptionArray15);
        org.junit.Assert.assertArrayEquals(openOptionArray15, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0829");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset15 = builder14.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder11.setCharset(charset15);
        java.nio.charset.Charset charset17 = builder11.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder0.setCharset(charset17);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setFile("\t");
        java.nio.file.OpenOption[] openOptionArray21 = builder18.getOpenOptions();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(openOptionArray21);
        org.junit.Assert.assertArrayEquals(openOptionArray21, new java.nio.file.OpenOption[] {});
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0830");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        boolean boolean3 = cSVFormat1.isEscapeCharacterSet();
        boolean boolean4 = cSVFormat1.getIgnoreHeaderCase();
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat1.printer();
        java.lang.Appendable appendable6 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat1.println(appendable6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVPrinter5);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0831");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean10 = cSVFormat9.getSkipHeaderRecord();
        java.lang.String str11 = cSVFormat9.getRecordSeparator();
        boolean boolean12 = cSVFormat9.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder13 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat9);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setTrim(false);
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean19 = cSVFormat18.getSkipHeaderRecord();
        java.lang.String str20 = cSVFormat18.getRecordSeparator();
        boolean boolean21 = cSVFormat18.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder22 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat18);
        org.apache.commons.csv.QuoteMode quoteMode23 = null;
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setQuoteMode(quoteMode23);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder22.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean28 = cSVFormat27.getSkipHeaderRecord();
        java.lang.String str29 = cSVFormat27.getRecordSeparator();
        boolean boolean30 = cSVFormat27.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder31 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat27);
        org.apache.commons.csv.QuoteMode quoteMode32 = null;
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setQuoteMode(quoteMode32);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder31.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray42 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder31.setHeaderComments(strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder22.setHeaderComments(strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder17.setHeaderComments((java.lang.Object[]) strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder8.setHeader(strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder46.setAutoFlush(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\n" + "'", str11, "\n");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\n" + "'", str20, "\n");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\n" + "'", str29, "\n");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertArrayEquals(strArray42, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0832");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getIgnoreHeaderCase();
        boolean boolean2 = cSVFormat0.getTrim();
        java.lang.Character char3 = cSVFormat0.getEscapeCharacter();
        org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean5 = cSVFormat4.getSkipHeaderRecord();
        java.lang.String str6 = cSVFormat4.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder7 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat4);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setIgnoreHeaderCase(true);
        java.sql.ResultSetMetaData resultSetMetaData10 = null;
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setHeader(resultSetMetaData10);
        java.lang.Appendable appendable12 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat0.print((java.lang.Object) builder11, appendable12, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0833");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        byte[] byteArray9 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder10 = builder7.setByteArray(byteArray9);
        java.lang.CharSequence charSequence11 = builder7.getCharSequence();
        java.lang.CharSequence charSequence12 = builder7.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser13 = builder7.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray14 = builder7.getOpenOptions();
        java.nio.charset.Charset charset15 = builder7.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder0.setCharset(charset15);
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setBufferSizeMax((int) (short) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "" + "'", charSequence11, "");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertNotNull(cSVParser13);
        org.junit.Assert.assertNotNull(openOptionArray14);
        org.junit.Assert.assertArrayEquals(openOptionArray14, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0834");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder18.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder18.setLenientEof(false);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder18.setLenientEof(false);
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder18.setLenientEof(false);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder30.setIgnoreEmptyLines(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0835");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) 1);
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        int int8 = builder6.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder14 = builder6.setByteArray(byteArray13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setBufferSize((java.lang.Integer) (-1));
        byte[] byteArray17 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder18 = builder14.setByteArray(byteArray17);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder5.setByteArray(byteArray17);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder5.setFile("\"\r\n\",\"Delimiter=<,> Escape=< > QuoteChar=<\"\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\", , hi!, \r\n, , 100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"]\",\"Delimiter=<,> QuoteChar=<\"\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false\"");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8192 + "'", int3 == 8192);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertArrayEquals(byteArray13, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] {});
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0836");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setBufferSize((int) 'a');
        java.nio.file.OpenOption[] openOptionArray8 = builder7.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder7.setCharSequence((java.lang.CharSequence) "\r\n#Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]#Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder7.setCharSequence((java.lang.CharSequence) ",");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder14 = builder7.setPath("\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"\t\thi!\t\"\r\n\"\t\t\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"");
            org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException; message: Illegal char <\"> at index 0: \"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\"\"\"??hi!?\"??\"??\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\"\"\"");
        } catch (java.nio.file.InvalidPathException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(openOptionArray8);
        org.junit.Assert.assertArrayEquals(openOptionArray8, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0837");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        java.lang.String str9 = cSVFormat7.getRecordSeparator();
        boolean boolean10 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat7);
        org.apache.commons.csv.QuoteMode quoteMode12 = null;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuoteMode(quoteMode12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray22 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder11.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder6.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder6.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder6.setRecordSeparator("\r\n#Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]#Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder6.setIgnoreEmptyLines(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertArrayEquals(strArray22, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0838");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        boolean boolean5 = cSVFormat0.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat.Builder builder6 = cSVFormat0.builder();
        java.lang.Character char7 = cSVFormat0.getEscapeCharacter();
        org.apache.commons.csv.CSVPrinter cSVPrinter8 = cSVFormat0.printer();
        java.lang.Appendable appendable9 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat0.println(appendable9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(cSVPrinter8);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0839");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setBufferSize((java.lang.Integer) 100);
        java.nio.file.OpenOption[] openOptionArray8 = builder0.getOpenOptions();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(openOptionArray8);
        org.junit.Assert.assertArrayEquals(openOptionArray8, new java.nio.file.OpenOption[] {});
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0840");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setRecordSeparator("a");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0841");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MONGODB_CSV;
        boolean boolean1 = cSVFormat0.isNullStringSet();
        org.apache.commons.csv.CSVFormat.Builder builder2 = cSVFormat0.builder();
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setNullString("\r\n");
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder2.setCommentMarker((java.lang.Character) '\"');
        java.sql.ResultSet resultSet7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder2.setHeader(resultSet7);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0842");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setLenientEof(false);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setDelimiter('4');
        org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean14 = cSVFormat13.getSkipHeaderRecord();
        java.lang.String str15 = cSVFormat13.getRecordSeparator();
        boolean boolean16 = cSVFormat13.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder17 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat13);
        boolean boolean18 = cSVFormat13.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat.Builder builder19 = cSVFormat13.builder();
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        org.apache.commons.csv.QuoteMode quoteMode22 = cSVFormat21.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean24 = cSVFormat23.getSkipHeaderRecord();
        java.lang.String str25 = cSVFormat23.getRecordSeparator();
        boolean boolean26 = cSVFormat23.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder27 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat23);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode30 = null;
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setQuoteMode(quoteMode30);
        java.lang.String[] strArray35 = new java.lang.String[] { "\r\n", "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]", "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder31.setHeader(strArray35);
        java.lang.String str37 = cSVFormat21.format((java.lang.Object[]) strArray35);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder19.setHeaderComments(strArray35);
        java.lang.String str39 = cSVFormat12.format((java.lang.Object[]) strArray35);
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder6.setHeaderComments(strArray35);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\n" + "'", str15, "\n");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(quoteMode22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\n" + "'", str25, "\n");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertArrayEquals(strArray35, new java.lang.String[] { "\r\n", "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]", "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" });
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\r\n\"Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]\"Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str37, "\r\n\"Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]\"Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\r\n#Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]#Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str39, "\r\n#Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]#Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0843");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharacterOffset((long) '#');
        java.io.File file17 = builder16.getFile();
        java.nio.file.OpenOption[] openOptionArray18 = builder16.getOpenOptions();
        java.io.Writer writer19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder20 = builder16.setWriter(writer19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "");
        org.junit.Assert.assertNotNull(openOptionArray18);
        org.junit.Assert.assertArrayEquals(openOptionArray18, new java.nio.file.OpenOption[] {});
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0844");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharacterOffset((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder18 = builder14.setCharacterOffset((long) 'a');
        org.apache.commons.csv.CSVParser.Builder builder20 = builder14.setBufferSize(8192);
        java.nio.file.OpenOption[] openOptionArray21 = builder20.getOpenOptions();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(openOptionArray21);
        org.junit.Assert.assertArrayEquals(openOptionArray21, new java.nio.file.OpenOption[] {});
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0845");
        org.apache.commons.csv.CSVFormat cSVFormat1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\",,hi!,\"\r\n\",,\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"", cSVFormat1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: format");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0846");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVParser5.hasTrailerComment();
        java.lang.String str7 = cSVParser5.getFirstEndOfLine();
        long long8 = cSVParser5.getRecordNumber();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0847");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.String[] strArray3 = cSVFormat0.getHeader();
        java.lang.String str4 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVFormat.Builder builder5 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        boolean boolean6 = cSVFormat0.getIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0848");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        java.lang.String str3 = cSVFormat1.toString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str3, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0849");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        boolean boolean2 = cSVFormat0.getLenientEof();
        java.lang.String str3 = cSVFormat0.getNullString();
        boolean boolean4 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder5 = cSVFormat0.builder();
        java.lang.String str6 = cSVFormat0.toString();
        java.lang.String[] strArray7 = cSVFormat0.getHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false" + "'", str6, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNull(strArray7);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0850");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isNullStringSet();
        boolean boolean2 = cSVFormat0.getAllowMissingColumnNames();
        boolean boolean3 = cSVFormat0.getTrim();
        java.lang.String[] strArray4 = cSVFormat0.getHeaderComments();
        boolean boolean5 = cSVFormat0.isQuoteCharacterSet();
        boolean boolean6 = cSVFormat0.getLenientEof();
        org.apache.commons.csv.CSVFormat.Builder builder7 = cSVFormat0.builder();
        boolean boolean8 = cSVFormat0.getSkipHeaderRecord();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0851");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        int int8 = builder6.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder14 = builder6.setByteArray(byteArray13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder6.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder18 = builder6.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder6.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset22 = builder21.getCharsetDefault();
        int int23 = builder21.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder21.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder29 = builder21.setByteArray(byteArray28);
        org.apache.commons.csv.CSVParser.Builder builder30 = builder20.setByteArray(byteArray28);
        java.nio.charset.Charset charset31 = builder20.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder0.setCharset(charset31);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder32.setBufferSizeMax((int) ' ');
        int int35 = builder32.getBufferSizeDefault();
        java.net.URI uRI36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder37 = builder32.setURI(uRI36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertArrayEquals(byteArray13, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8192 + "'", int23 == 8192);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertArrayEquals(byteArray28, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8192 + "'", int35 == 8192);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0852");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier4 = builder0.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset6 = builder5.getCharsetDefault();
        byte[] byteArray7 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder8 = builder5.setByteArray(byteArray7);
        java.lang.CharSequence charSequence9 = builder5.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder5.setBufferSize((int) ' ');
        java.io.InputStream inputStream12 = builder11.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder13 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset14 = builder13.getCharsetDefault();
        byte[] byteArray15 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder16 = builder13.setByteArray(byteArray15);
        java.nio.charset.Charset charset17 = builder13.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder20 = cSVFormat19.builder();
        java.lang.String str21 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse(inputStream12, charset17, cSVFormat19);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder0.setInputStream(inputStream12);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier24 = builder0.asSupplier();
        java.io.RandomAccessFile randomAccessFile25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder26 = builder0.setRandomAccessFile(randomAccessFile25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVParserSupplier4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "" + "'", charSequence9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertArrayEquals(byteArray15, new byte[] {});
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(cSVParser22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(cSVParserSupplier24);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0853");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.sql.ResultSet resultSet9 = null;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setHeader(resultSet9);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setTrailingData(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setEscape((java.lang.Character) '4');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0854");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        boolean boolean4 = cSVFormat0.isNullStringSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        boolean boolean8 = cSVFormat7.getAutoFlush();
        boolean boolean9 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat7);
        java.lang.String str11 = cSVParser10.getHeaderComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream12 = cSVParser10.stream();
        boolean boolean13 = cSVFormat0.equals((java.lang.Object) cSVParser10);
        cSVParser10.close();
        boolean boolean15 = cSVParser10.hasHeaderComment();
        java.lang.String str16 = cSVParser10.getTrailerComment();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVRecordStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0855");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        boolean boolean2 = cSVFormat0.getLenientEof();
        java.lang.String str3 = cSVFormat0.getNullString();
        boolean boolean4 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean6 = cSVFormat5.getSkipHeaderRecord();
        java.lang.String str7 = cSVFormat5.getRecordSeparator();
        boolean boolean8 = cSVFormat5.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder9 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat5);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode12 = null;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuoteMode(quoteMode12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean17 = cSVFormat16.getSkipHeaderRecord();
        java.lang.String str18 = cSVFormat16.getRecordSeparator();
        boolean boolean19 = cSVFormat16.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder20 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat16);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode26 = cSVFormat25.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder22.setDuplicateHeaderMode(duplicateHeaderMode26);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder15.setDuplicateHeaderMode(duplicateHeaderMode26);
        org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean30 = cSVFormat29.getSkipHeaderRecord();
        java.lang.String str31 = cSVFormat29.getRecordSeparator();
        boolean boolean32 = cSVFormat29.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder33 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat29);
        org.apache.commons.csv.QuoteMode quoteMode34 = null;
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setQuoteMode(quoteMode34);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder33.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean39 = cSVFormat38.getSkipHeaderRecord();
        java.lang.String str40 = cSVFormat38.getRecordSeparator();
        boolean boolean41 = cSVFormat38.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder42 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat38);
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder42.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder42.setTrim(false);
        org.apache.commons.csv.CSVFormat cSVFormat47 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean48 = cSVFormat47.getSkipHeaderRecord();
        java.lang.String str49 = cSVFormat47.getRecordSeparator();
        boolean boolean50 = cSVFormat47.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder51 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat47);
        org.apache.commons.csv.QuoteMode quoteMode52 = null;
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder51.setQuoteMode(quoteMode52);
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder51.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat56 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean57 = cSVFormat56.getSkipHeaderRecord();
        java.lang.String str58 = cSVFormat56.getRecordSeparator();
        boolean boolean59 = cSVFormat56.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder60 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat56);
        org.apache.commons.csv.QuoteMode quoteMode61 = null;
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder60.setQuoteMode(quoteMode61);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder60.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray71 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder72 = builder60.setHeaderComments(strArray71);
        org.apache.commons.csv.CSVFormat.Builder builder73 = builder51.setHeaderComments(strArray71);
        org.apache.commons.csv.CSVFormat.Builder builder74 = builder46.setHeaderComments((java.lang.Object[]) strArray71);
        org.apache.commons.csv.CSVFormat.Builder builder75 = builder37.setHeader(strArray71);
        org.apache.commons.csv.CSVFormat.Builder builder76 = builder15.setHeader(strArray71);
        java.lang.String str77 = cSVFormat0.format((java.lang.Object[]) strArray71);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\n" + "'", str18, "\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode26 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode26.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\n" + "'", str31, "\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\n" + "'", str40, "\n");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\n" + "'", str49, "\n");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\n" + "'", str58, "\n");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertArrayEquals(strArray71, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\",,hi!,\"\r\n\",,\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"" + "'", str77, "\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\",,hi!,\"\r\n\",,\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"");
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0856");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.isCommentMarkerSet();
        java.lang.String str4 = cSVFormat2.getNullString();
        java.lang.String[] strArray5 = cSVFormat2.getHeader();
        org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse("\r\n\"Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]\"Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat2);
        java.lang.Character char7 = cSVFormat2.getQuoteCharacter();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNotNull(cSVParser6);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + '\"' + "'", char7 == '\"');
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0857");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getAutoFlush();
        boolean boolean3 = cSVFormat1.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter4 = cSVFormat1.printer();
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        boolean boolean6 = cSVFormat1.getTrim();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(cSVPrinter4);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0858");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.String[] strArray3 = cSVFormat0.getHeader();
        java.lang.String str4 = cSVFormat0.getDelimiterString();
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset6 = builder5.getCharsetDefault();
        int int7 = builder5.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder5.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder13 = builder5.setByteArray(byteArray12);
        org.apache.commons.csv.CSVParser.Builder builder15 = builder5.setRecordNumber((long) (short) 10);
        org.apache.commons.csv.CSVFormat.Predefined predefined16 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat17 = predefined16.getFormat();
        java.lang.String str18 = cSVFormat17.toString();
        boolean boolean19 = cSVFormat17.isEscapeCharacterSet();
        boolean boolean20 = cSVFormat17.isQuoteCharacterSet();
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset22 = builder21.getCharsetDefault();
        byte[] byteArray23 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder24 = builder21.setByteArray(byteArray23);
        java.nio.charset.Charset charset25 = builder21.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder21.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset29 = builder28.getCharsetDefault();
        int int30 = builder28.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder28.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray35 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder36 = builder28.setByteArray(byteArray35);
        org.apache.commons.csv.CSVParser.Builder builder38 = builder28.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder40 = builder28.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder42 = builder28.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder44 = builder42.setCharacterOffset((long) '#');
        java.io.File file45 = builder44.getFile();
        org.apache.commons.csv.CSVParser.Builder builder46 = builder27.setFile(file45);
        org.apache.commons.csv.CSVParser.Builder builder48 = builder46.setFile(",");
        java.io.Reader reader49 = null; // flaky "6) test0858(org.apache.commons.csv.randoop.RegressionTest1)": builder46.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat50 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean51 = cSVFormat50.getSkipHeaderRecord();
        java.lang.String str52 = cSVFormat50.getRecordSeparator();
        boolean boolean53 = cSVFormat50.isNullStringSet();
        boolean boolean54 = cSVFormat50.isCommentMarkerSet();
        org.apache.commons.csv.CSVParser cSVParser55 = null; // flaky "6) test0858(org.apache.commons.csv.randoop.RegressionTest1)": org.apache.commons.csv.CSVParser.parse(reader49, cSVFormat50);
        org.apache.commons.csv.CSVParser cSVParser56 = null; // flaky "6) test0858(org.apache.commons.csv.randoop.RegressionTest1)": cSVFormat17.parse(reader49);
        org.apache.commons.csv.CSVParser.Builder builder57 = null; // flaky "6) test0858(org.apache.commons.csv.randoop.RegressionTest1)": builder15.setReader(reader49);
        org.apache.commons.csv.CSVParser cSVParser58 = null; // flaky "6) test0858(org.apache.commons.csv.randoop.RegressionTest1)": cSVFormat0.parse(reader49);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "," + "'", str4, ",");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8192 + "'", int7 == 8192);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertArrayEquals(byteArray12, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + predefined16 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined16.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str18, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertArrayEquals(byteArray23, new byte[] {});
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8192 + "'", int30 == 8192);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertArrayEquals(byteArray35, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(file45);
        org.junit.Assert.assertNull("file45.getParent() == null", file45.getParent());
        org.junit.Assert.assertEquals(file45.toString(), "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
// flaky "5) test0858(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(reader49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\n" + "'", str52, "\n");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky "3) test0858(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser55);
// flaky "2) test0858(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser56);
// flaky "1) test0858(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(builder57);
// flaky "1) test0858(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser58);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0859");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        java.util.function.IntUnaryOperator intUnaryOperator13 = null;
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setBufferSizeChecker(intUnaryOperator13);
        org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat16.builder();
        java.lang.String str18 = cSVFormat16.getNullString();
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        boolean boolean22 = cSVFormat21.getAutoFlush();
        boolean boolean23 = cSVFormat21.getTrim();
        org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat21);
        boolean boolean25 = cSVParser24.hasTrailerComment();
        java.lang.String str26 = cSVParser24.getHeaderComment();
        long long27 = cSVParser24.getCurrentLineNumber();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator28 = cSVParser24.spliterator();
        boolean boolean29 = cSVFormat16.equals((java.lang.Object) cSVParser24);
        org.apache.commons.csv.CSVParser.Builder builder30 = builder12.setFormat(cSVFormat16);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Writer writer31 = builder30.getWriter();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(cSVParser24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0860");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getIgnoreHeaderCase();
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str8 = cSVFormat1.format(objArray7);
        boolean boolean9 = cSVFormat1.getTrim();
        org.apache.commons.csv.QuoteMode quoteMode10 = cSVFormat1.getQuoteMode();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str8, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + quoteMode10 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode10.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0861");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
        boolean boolean2 = cSVFormat1.getTrim();
        boolean boolean3 = cSVFormat1.getAllowMissingColumnNames();
        boolean boolean4 = cSVFormat1.getTrim();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0862");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder16.setNullString("Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0863");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setEscape('\"');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setTrim(true);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter18 = cSVFormat17.printer();
        boolean boolean19 = cSVFormat17.getLenientEof();
        java.lang.String str20 = cSVFormat17.getNullString();
        org.apache.commons.csv.QuoteMode quoteMode21 = cSVFormat17.getQuoteMode();
        boolean boolean22 = cSVFormat17.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean26 = cSVFormat25.getSkipHeaderRecord();
        java.lang.String str27 = cSVFormat25.getRecordSeparator();
        boolean boolean28 = cSVFormat25.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder29 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat25);
        boolean boolean30 = cSVFormat25.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat.Builder builder31 = cSVFormat25.builder();
        org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        org.apache.commons.csv.QuoteMode quoteMode34 = cSVFormat33.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean36 = cSVFormat35.getSkipHeaderRecord();
        java.lang.String str37 = cSVFormat35.getRecordSeparator();
        boolean boolean38 = cSVFormat35.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder39 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat35);
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder39.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode42 = null;
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder41.setQuoteMode(quoteMode42);
        java.lang.String[] strArray47 = new java.lang.String[] { "\r\n", "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]", "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder43.setHeader(strArray47);
        java.lang.String str49 = cSVFormat33.format((java.lang.Object[]) strArray47);
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder31.setHeaderComments(strArray47);
        java.lang.String str51 = cSVFormat24.format((java.lang.Object[]) strArray47);
        java.lang.String str52 = cSVFormat17.format((java.lang.Object[]) strArray47);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder12.setHeader(strArray47);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVPrinter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(quoteMode21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\n" + "'", str27, "\n");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(cSVFormat33);
        org.junit.Assert.assertNull(quoteMode34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\n" + "'", str37, "\n");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertArrayEquals(strArray47, new java.lang.String[] { "\r\n", "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]", "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" });
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\r\n\"Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]\"Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str49, "\r\n\"Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]\"Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\r\n#Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]#Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str51, "\r\n#Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]#Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\"\r\n\",\"Delimiter=<,> Escape=< > QuoteChar=<\"\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\", , hi!, \r\n, , 100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"]\",\"Delimiter=<,> QuoteChar=<\"\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false\"" + "'", str52, "\"\r\n\",\"Delimiter=<,> Escape=< > QuoteChar=<\"\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\", , hi!, \r\n, , 100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"]\",\"Delimiter=<,> QuoteChar=<\"\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false\"");
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0864");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getIgnoreHeaderCase();
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str8 = cSVFormat1.format(objArray7);
        boolean boolean9 = cSVFormat1.getTrim();
        boolean boolean10 = cSVFormat1.getIgnoreEmptyLines();
        java.lang.String str11 = cSVFormat1.getDelimiterString();
        org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean13 = cSVFormat12.getSkipHeaderRecord();
        java.lang.String str14 = cSVFormat12.getRecordSeparator();
        boolean boolean15 = cSVFormat12.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder16 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat12);
        org.apache.commons.csv.QuoteMode quoteMode17 = null;
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setQuoteMode(quoteMode17);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder16.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray27 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder16.setHeaderComments(strArray27);
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder16.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder30.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder30.setQuote((java.lang.Character) '#');
        boolean boolean35 = cSVFormat1.equals((java.lang.Object) builder30);
        java.lang.Appendable appendable36 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat1.println(appendable36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str8, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "," + "'", str11, ",");
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\n" + "'", str14, "\n");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertArrayEquals(strArray27, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0865");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser5 = builder0.getUnchecked();
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        int int8 = builder6.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder14 = builder6.setByteArray(byteArray13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder6.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder18 = builder6.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder6.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) '#');
        java.io.File file23 = builder22.getFile();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder0.setFile(file23);
        org.apache.commons.csv.CSVParser.Builder builder25 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setBufferSize((java.lang.Integer) 100);
        int int28 = builder25.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder25.setCharacterOffset((long) 1);
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset32 = builder31.getCharsetDefault();
        int int33 = builder31.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder31.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser36 = builder31.getUnchecked();
        org.apache.commons.csv.CSVParser.Builder builder38 = builder31.setPath(",");
        java.nio.file.OpenOption[] openOptionArray39 = builder38.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder40 = builder30.setOpenOptions(openOptionArray39);
        org.apache.commons.csv.CSVParser.Builder builder41 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset42 = builder41.getCharsetDefault();
        int int43 = builder41.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder45 = builder41.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray48 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder49 = builder41.setByteArray(byteArray48);
        org.apache.commons.csv.CSVParser.Builder builder51 = builder41.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder53 = builder41.setBufferSize((int) (byte) 0);
        java.nio.file.Path path54 = builder41.getPath();
        org.apache.commons.csv.CSVParser.Builder builder55 = builder40.setPath(path54);
        org.apache.commons.csv.CSVParser.Builder builder56 = builder24.setPath(path54);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertArrayEquals(byteArray13, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertNull("file23.getParent() == null", file23.getParent());
        org.junit.Assert.assertEquals(file23.toString(), "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8192 + "'", int28 == 8192);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8192 + "'", int33 == 8192);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(cSVParser36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(openOptionArray39);
        org.junit.Assert.assertArrayEquals(openOptionArray39, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8192 + "'", int43 == 8192);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertArrayEquals(byteArray48, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(path54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0866");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setLenientEof(false);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setDelimiter('4');
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean12 = cSVFormat11.getSkipHeaderRecord();
        java.lang.String str13 = cSVFormat11.getRecordSeparator();
        boolean boolean14 = cSVFormat11.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat11);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode18 = null;
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setQuoteMode(quoteMode18);
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder17.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean23 = cSVFormat22.getSkipHeaderRecord();
        java.lang.String str24 = cSVFormat22.getRecordSeparator();
        boolean boolean25 = cSVFormat22.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder26 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat22);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode32 = cSVFormat31.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder28.setDuplicateHeaderMode(duplicateHeaderMode32);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder21.setDuplicateHeaderMode(duplicateHeaderMode32);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder6.setDuplicateHeaderMode(duplicateHeaderMode32);
        org.apache.commons.csv.CSVFormat cSVFormat36 = builder35.get();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\n" + "'", str24, "\n");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode32 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode32.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(cSVFormat36);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0867");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.nio.charset.Charset charset4 = builder0.getCharset();
        org.apache.commons.csv.CSVParser cSVParser5 = builder0.getUnchecked();
        java.lang.String str6 = cSVParser5.getFirstEndOfLine();
        boolean boolean7 = cSVParser5.hasHeaderComment();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0868");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setCommentMarker('#');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setIgnoreHeaderCase(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0869");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setEscape('\"');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder15 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setQuote((java.lang.Character) ' ');
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean19 = cSVFormat18.getSkipHeaderRecord();
        java.lang.String str20 = cSVFormat18.getRecordSeparator();
        boolean boolean21 = cSVFormat18.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder22 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat18);
        java.sql.ResultSetMetaData resultSetMetaData23 = null;
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setHeader(resultSetMetaData23);
        org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean26 = cSVFormat25.getSkipHeaderRecord();
        java.lang.String str27 = cSVFormat25.getRecordSeparator();
        boolean boolean28 = cSVFormat25.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder29 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat25);
        org.apache.commons.csv.QuoteMode quoteMode30 = null;
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setQuoteMode(quoteMode30);
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder29.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray40 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder29.setHeaderComments(strArray40);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder24.setHeaderComments(strArray40);
        org.apache.commons.csv.CSVFormat cSVFormat43 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean44 = cSVFormat43.getSkipHeaderRecord();
        java.lang.String str45 = cSVFormat43.getRecordSeparator();
        boolean boolean46 = cSVFormat43.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder47 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat43);
        org.apache.commons.csv.QuoteMode quoteMode48 = null;
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder47.setQuoteMode(quoteMode48);
        org.apache.commons.csv.CSVFormat cSVFormat50 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean51 = cSVFormat50.getSkipHeaderRecord();
        java.lang.String str52 = cSVFormat50.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode53 = cSVFormat50.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder49.setDuplicateHeaderMode(duplicateHeaderMode53);
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder42.setDuplicateHeaderMode(duplicateHeaderMode53);
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder17.setDuplicateHeaderMode(duplicateHeaderMode53);
        org.apache.commons.csv.CSVFormat.Builder builder57 = builder10.setDuplicateHeaderMode(duplicateHeaderMode53);
        java.sql.ResultSet resultSet58 = null;
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder57.setHeader(resultSet58);
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder57.setRecordSeparator(",");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\n" + "'", str20, "\n");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\n" + "'", str27, "\n");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertArrayEquals(strArray40, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\n" + "'", str45, "\n");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\n" + "'", str52, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode53 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode53.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0870");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder15 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset16 = builder15.getCharsetDefault();
        int int17 = builder15.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder15.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder23 = builder15.setByteArray(byteArray22);
        org.apache.commons.csv.CSVParser.Builder builder24 = builder14.setByteArray(byteArray22);
        java.util.function.IntUnaryOperator intUnaryOperator25 = null;
        org.apache.commons.csv.CSVParser.Builder builder26 = builder14.setBufferSizeChecker(intUnaryOperator25);
        org.apache.commons.csv.CSVParser cSVParser27 = builder14.get();
        cSVParser27.close();
        long long29 = cSVParser27.getRecordNumber();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8192 + "'", int17 == 8192);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertArrayEquals(byteArray22, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVParser27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0871");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.io.InputStream inputStream4 = builder0.getInputStream();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path5 = builder0.getPath();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getPath() for byte[] origin [B@c8a589f");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(inputStream4);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0872");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.nio.charset.Charset charset4 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        int int9 = builder7.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder7.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder7.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder19 = builder7.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder7.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) '#');
        java.io.File file24 = builder23.getFile();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder6.setFile(file24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setCharacterOffset((long) '#');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0873");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.sql.ResultSet resultSet9 = null;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setHeader(resultSet9);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setEscape('4');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0874");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        boolean boolean4 = cSVFormat0.isNullStringSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        boolean boolean8 = cSVFormat7.getAutoFlush();
        boolean boolean9 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat7);
        java.lang.String str11 = cSVParser10.getHeaderComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream12 = cSVParser10.stream();
        boolean boolean13 = cSVFormat0.equals((java.lang.Object) cSVParser10);
        java.lang.String str14 = cSVFormat0.getRecordSeparator();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVRecordStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\n" + "'", str14, "\n");
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0875");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.nio.charset.Charset charset4 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        int int9 = builder7.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder7.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder7.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder19 = builder7.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder7.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) '#');
        java.io.File file24 = builder23.getFile();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder6.setFile(file24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setFile(",");
        java.io.Reader reader28 = null; // flaky "7) test0875(org.apache.commons.csv.randoop.RegressionTest1)": builder25.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean30 = cSVFormat29.getSkipHeaderRecord();
        java.lang.String str31 = cSVFormat29.getRecordSeparator();
        boolean boolean32 = cSVFormat29.isNullStringSet();
        boolean boolean33 = cSVFormat29.isCommentMarkerSet();
        org.apache.commons.csv.CSVParser cSVParser34 = null; // flaky "7) test0875(org.apache.commons.csv.randoop.RegressionTest1)": org.apache.commons.csv.CSVParser.parse(reader28, cSVFormat29);
        org.apache.commons.csv.CSVFormat.Predefined predefined35 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat36 = predefined35.getFormat();
        boolean boolean37 = cSVFormat36.isCommentMarkerSet();
        java.lang.String str38 = cSVFormat36.getNullString();
        java.lang.String str39 = cSVFormat36.getNullString();
        org.apache.commons.csv.CSVParser cSVParser40 = null; // flaky "7) test0875(org.apache.commons.csv.randoop.RegressionTest1)": org.apache.commons.csv.CSVParser.parse(reader28, cSVFormat36);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
// flaky "7) test0875(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(reader28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\n" + "'", str31, "\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky "7) test0875(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser34);
        org.junit.Assert.assertTrue("'" + predefined35 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined35.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
// flaky "6) test0875(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser40);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0876");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.nio.charset.Charset charset4 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        int int9 = builder7.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder7.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder7.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder19 = builder7.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder7.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) '#');
        java.io.File file24 = builder23.getFile();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder6.setFile(file24);
        java.util.function.IntUnaryOperator intUnaryOperator26 = null;
        org.apache.commons.csv.CSVParser.Builder builder27 = builder6.setBufferSizeChecker(intUnaryOperator26);
        // The following exception was thrown during execution in test generation
        try {
            java.io.RandomAccessFile randomAccessFile28 = builder27.getRandomAccessFile();
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0877");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setLenientEof(false);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setLenientEof(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat13 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean14 = cSVFormat13.getSkipHeaderRecord();
        java.lang.String str15 = cSVFormat13.getRecordSeparator();
        boolean boolean16 = cSVFormat13.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder17 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat13);
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setLenientEof(false);
        java.sql.ResultSetMetaData resultSetMetaData20 = null;
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setHeader(resultSetMetaData20);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setDelimiter('4');
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean25 = cSVFormat24.getSkipHeaderRecord();
        java.lang.String str26 = cSVFormat24.getRecordSeparator();
        boolean boolean27 = cSVFormat24.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder28 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat24);
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode31 = null;
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder30.setQuoteMode(quoteMode31);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder30.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean36 = cSVFormat35.getSkipHeaderRecord();
        java.lang.String str37 = cSVFormat35.getRecordSeparator();
        boolean boolean38 = cSVFormat35.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder39 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat35);
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder39.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder41.setQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat44 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode45 = cSVFormat44.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder41.setDuplicateHeaderMode(duplicateHeaderMode45);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder34.setDuplicateHeaderMode(duplicateHeaderMode45);
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder19.setDuplicateHeaderMode(duplicateHeaderMode45);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder12.setDuplicateHeaderMode(duplicateHeaderMode45);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\n" + "'", str15, "\n");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\n" + "'", str26, "\n");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\n" + "'", str37, "\n");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode45 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode45.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0878");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        boolean boolean13 = cSVFormat12.getIgnoreHeaderCase();
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str19 = cSVFormat12.format(objArray18);
        java.lang.String str20 = cSVFormat12.getRecordSeparator();
        boolean boolean21 = cSVFormat12.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode22 = cSVFormat12.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder4.setQuoteMode(quoteMode22);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setQuote('\"');
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder23.setRecordSeparator("\r\n\"Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]\"Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder27.setTrailingDelimiter(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str19, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\r\n" + "'", str20, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + quoteMode22 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode22.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0879");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        java.lang.String str9 = cSVFormat7.getRecordSeparator();
        boolean boolean10 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat7);
        org.apache.commons.csv.QuoteMode quoteMode12 = null;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuoteMode(quoteMode12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray22 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder11.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder6.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder6.setQuote((java.lang.Character) ' ');
        org.apache.commons.csv.CSVFormat.Predefined predefined27 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat28 = predefined27.getFormat();
        java.lang.String str29 = cSVFormat28.toString();
        org.apache.commons.csv.QuoteMode quoteMode30 = cSVFormat28.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder26.setQuoteMode(quoteMode30);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertArrayEquals(strArray22, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + predefined27 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined27.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str29, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + quoteMode30 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode30.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0880");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setBufferSize((java.lang.Integer) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setCharset("\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\",\"\",\"hi!\",\"\r\n\",\"\",\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: \"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\"\"\",\"\",\"hi!\",\"??\",\"\",\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\"\"\"");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0881");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setEscape('\"');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setTrailingData(false);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setTrailingDelimiter(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0882");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder2.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset5 = builder4.getCharsetDefault();
        byte[] byteArray6 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder7 = builder4.setByteArray(byteArray6);
        java.lang.CharSequence charSequence8 = builder4.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder4.setBufferSize((int) ' ');
        java.io.InputStream inputStream11 = builder10.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset13 = builder12.getCharsetDefault();
        byte[] byteArray14 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder15 = builder12.setByteArray(byteArray14);
        java.nio.charset.Charset charset16 = builder12.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder19 = cSVFormat18.builder();
        java.lang.String str20 = cSVFormat18.getNullString();
        org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse(inputStream11, charset16, cSVFormat18);
        org.apache.commons.csv.CSVParser.Builder builder22 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset23 = builder22.getCharsetDefault();
        byte[] byteArray24 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder25 = builder22.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder22.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder29 = builder22.setBufferSize((int) 'a');
        java.nio.charset.Charset charset30 = builder29.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse(inputStream11, charset30, cSVFormat32);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder2.setCharset(charset30);
        org.apache.commons.csv.CSVParser.Builder builder36 = builder2.setRecordNumber((long) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder38 = builder2.setCharset("Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<?> SkipHeaderRecord:false");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] {});
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "" + "'", charSequence8, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] {});
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVParser21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] {});
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVParser33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0883");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharacterOffset((long) '#');
        java.io.File file17 = builder16.getFile();
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset19 = builder18.getCharsetDefault();
        int int20 = builder18.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder18.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder26 = builder18.setByteArray(byteArray25);
        org.apache.commons.csv.CSVParser.Builder builder28 = builder18.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder30 = builder18.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder32 = builder18.setCharacterOffset((long) (byte) 1);
        byte[] byteArray36 = new byte[] { (byte) -1, (byte) 100, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder37 = builder32.setByteArray(byteArray36);
        org.apache.commons.csv.CSVParser.Builder builder38 = builder16.setByteArray(byteArray36);
        java.nio.file.OpenOption[] openOptionArray39 = builder16.getOpenOptions();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8192 + "'", int20 == 8192);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertArrayEquals(byteArray25, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertArrayEquals(byteArray36, new byte[] { (byte) -1, (byte) 100, (byte) 1 });
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(openOptionArray39);
        org.junit.Assert.assertArrayEquals(openOptionArray39, new java.nio.file.OpenOption[] {});
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0884");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder2 = cSVFormat1.builder();
        org.apache.commons.csv.QuoteMode quoteMode3 = cSVFormat1.getQuoteMode();
        boolean boolean4 = cSVFormat1.getTrim();
        java.lang.Appendable appendable5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat1.print(appendable5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(quoteMode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0885");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset15 = builder14.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder11.setCharset(charset15);
        java.nio.charset.Charset charset17 = builder11.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder0.setCharset(charset17);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setFile("\t");
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.newFormat(' ');
        org.apache.commons.csv.CSVParser.Builder builder23 = builder18.setFormat(cSVFormat22);
        boolean boolean24 = cSVFormat22.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0886");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        boolean boolean2 = cSVFormat0.isCommentMarkerSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0887");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.nio.charset.Charset charset4 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        int int9 = builder7.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder7.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder7.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder19 = builder7.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder7.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) '#');
        java.io.File file24 = builder23.getFile();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder6.setFile(file24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder6.setRecordNumber((long) 10);
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setBufferSize((java.lang.Integer) 100);
        int int31 = builder30.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder32 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset33 = builder32.getCharsetDefault();
        byte[] byteArray34 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder35 = builder32.setByteArray(byteArray34);
        java.lang.CharSequence charSequence36 = builder32.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder38 = builder32.setBufferSize((int) ' ');
        java.io.InputStream inputStream39 = builder38.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder40 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset41 = builder40.getCharsetDefault();
        byte[] byteArray42 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder43 = builder40.setByteArray(byteArray42);
        java.nio.charset.Charset charset44 = builder40.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat46 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder47 = cSVFormat46.builder();
        java.lang.String str48 = cSVFormat46.getNullString();
        org.apache.commons.csv.CSVParser cSVParser49 = org.apache.commons.csv.CSVParser.parse(inputStream39, charset44, cSVFormat46);
        org.apache.commons.csv.CSVParser.Builder builder50 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset51 = builder50.getCharsetDefault();
        byte[] byteArray52 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder53 = builder50.setByteArray(byteArray52);
        org.apache.commons.csv.CSVParser.Builder builder55 = builder50.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder57 = builder50.setBufferSize((int) 'a');
        java.nio.charset.Charset charset58 = builder57.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat60 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVParser cSVParser61 = org.apache.commons.csv.CSVParser.parse(inputStream39, charset58, cSVFormat60);
        org.apache.commons.csv.CSVParser.Builder builder62 = builder30.setCharset(charset58);
        java.nio.charset.Charset charset63 = builder62.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder64 = builder6.setCharset(charset63);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertArrayEquals(byteArray34, new byte[] {});
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + charSequence36 + "' != '" + "" + "'", charSequence36, "");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(inputStream39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertArrayEquals(byteArray42, new byte[] {});
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(cSVParser49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertArrayEquals(byteArray52, new byte[] {});
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertNotNull(cSVParser61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(charset63);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0888");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getAutoFlush();
        org.apache.commons.csv.QuoteMode quoteMode3 = cSVFormat1.getQuoteMode();
        boolean boolean4 = cSVFormat1.getIgnoreEmptyLines();
        boolean boolean5 = cSVFormat1.getTrailingData();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + quoteMode3 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode3.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0889");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder2 = cSVFormat1.builder();
        java.lang.String[] strArray3 = cSVFormat1.getHeaderComments();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(strArray3);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0890");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.isNullStringSet();
        java.lang.Character char4 = cSVFormat0.getQuoteCharacter();
        java.lang.String[] strArray5 = cSVFormat0.getHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\"' + "'", char4 == '\"');
        org.junit.Assert.assertNull(strArray5);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0891");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        java.lang.String str4 = cSVFormat3.toString();
        boolean boolean5 = cSVFormat3.isEscapeCharacterSet();
        boolean boolean6 = cSVFormat1.equals((java.lang.Object) cSVFormat3);
        org.apache.commons.csv.CSVPrinter cSVPrinter7 = cSVFormat1.printer();
        boolean boolean8 = cSVFormat1.isCommentMarkerSet();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str4, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVPrinter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0892");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        java.nio.file.Path path13 = builder0.getPath();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVPrinter cSVPrinter15 = cSVFormat14.printer();
        boolean boolean16 = cSVFormat14.getTrim();
        boolean boolean17 = cSVFormat14.isNullStringSet();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder0.setFormat(cSVFormat14);
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean21 = cSVFormat20.getSkipHeaderRecord();
        org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("\n", cSVFormat20);
        boolean boolean23 = cSVFormat14.equals((java.lang.Object) cSVFormat20);
        org.apache.commons.csv.CSVFormat.Builder builder24 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat20);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVPrinter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(cSVParser22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0893");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder2.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setBufferSizeMax(100);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setRecordNumber(0L);
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setBufferSize((int) (short) 10);
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setBufferSizeMax((int) (byte) -1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8192 + "'", int3 == 8192);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0894");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser5 = builder0.getUnchecked();
        java.lang.CharSequence charSequence6 = builder0.getCharSequence();
        java.nio.file.OpenOption[] openOptionArray7 = builder0.getOpenOptions();
        java.util.function.IntUnaryOperator intUnaryOperator8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder0.setBufferSizeChecker(intUnaryOperator8);
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset11 = builder10.getCharsetDefault();
        byte[] byteArray12 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder13 = builder10.setByteArray(byteArray12);
        org.apache.commons.csv.CSVParser.Builder builder15 = builder10.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder10.setBufferSize((int) 'a');
        org.apache.commons.csv.CSVParser.Builder builder19 = builder10.setCharacterOffset((long) 0);
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset21 = builder20.getCharsetDefault();
        byte[] byteArray22 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder23 = builder20.setByteArray(byteArray22);
        java.lang.CharSequence charSequence24 = builder20.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder26 = builder20.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder27 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset28 = builder27.getCharsetDefault();
        byte[] byteArray29 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder30 = builder27.setByteArray(byteArray29);
        java.lang.CharSequence charSequence31 = builder27.getCharSequence();
        java.lang.CharSequence charSequence32 = builder27.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser33 = builder27.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray34 = builder27.getOpenOptions();
        java.nio.charset.Charset charset35 = builder27.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder36 = builder20.setCharset(charset35);
        org.apache.commons.csv.CSVParser.Builder builder37 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset38 = builder37.getCharsetDefault();
        byte[] byteArray39 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder40 = builder37.setByteArray(byteArray39);
        java.lang.CharSequence charSequence41 = builder37.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder37.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder45 = builder37.setRecordNumber((long) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder46 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset47 = builder46.getCharsetDefault();
        int int48 = builder46.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder50 = builder46.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray53 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder54 = builder46.setByteArray(byteArray53);
        org.apache.commons.csv.CSVParser.Builder builder56 = builder46.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder58 = builder46.setBufferSize((int) (byte) 0);
        java.nio.file.Path path59 = builder46.getPath();
        org.apache.commons.csv.CSVParser.Builder builder60 = builder37.setPath(path59);
        org.apache.commons.csv.CSVParser.Builder builder61 = builder20.setPath(path59);
        org.apache.commons.csv.CSVParser.Builder builder62 = builder19.setPath(path59);
        org.apache.commons.csv.CSVParser.Builder builder63 = builder0.setPath(path59);
        int int64 = builder0.getBufferSize();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", charSequence6, "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertNotNull(openOptionArray7);
        org.junit.Assert.assertArrayEquals(openOptionArray7, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertArrayEquals(byteArray12, new byte[] {});
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertArrayEquals(byteArray22, new byte[] {});
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "" + "'", charSequence24, "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertArrayEquals(byteArray29, new byte[] {});
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + charSequence31 + "' != '" + "" + "'", charSequence31, "");
        org.junit.Assert.assertEquals("'" + charSequence32 + "' != '" + "" + "'", charSequence32, "");
        org.junit.Assert.assertNotNull(cSVParser33);
        org.junit.Assert.assertNotNull(openOptionArray34);
        org.junit.Assert.assertArrayEquals(openOptionArray34, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertArrayEquals(byteArray39, new byte[] {});
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "" + "'", charSequence41, "");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8192 + "'", int48 == 8192);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertArrayEquals(byteArray53, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(path59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 8192 + "'", int64 == 8192);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0895");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser5 = builder0.getUnchecked();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setPath(",");
        java.nio.file.OpenOption[] openOptionArray8 = builder7.getOpenOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder10 = builder7.setCharset("\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"\t\thi!\t\"\r\n\"\t\t\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: \"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\"\"\"??hi!?\"??\"??\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\"\"\"");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(openOptionArray8);
        org.junit.Assert.assertArrayEquals(openOptionArray8, new java.nio.file.OpenOption[] {});
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0896");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.isCommentMarkerSet();
        java.lang.String str3 = cSVFormat1.getNullString();
        boolean boolean4 = cSVFormat1.getTrailingDelimiter();
        java.lang.Character char5 = cSVFormat1.getQuoteCharacter();
        boolean boolean6 = cSVFormat1.getAllowMissingColumnNames();
        boolean boolean7 = cSVFormat1.getLenientEof();
        java.lang.Character char8 = cSVFormat1.getEscapeCharacter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\"' + "'", char5 == '\"');
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + char8 + "' != '" + '\"' + "'", char8 == '\"');
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0897");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 100);
        java.util.function.IntUnaryOperator intUnaryOperator9 = null;
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setBufferSizeChecker(intUnaryOperator9);
        org.apache.commons.csv.CSVParser.Builder builder12 = builder8.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder8.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0898");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        boolean boolean5 = cSVFormat0.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat.Builder builder6 = cSVFormat0.builder();
        java.lang.Character char7 = cSVFormat0.getEscapeCharacter();
        java.lang.String[] strArray8 = cSVFormat0.getHeaderComments();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNull(strArray8);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0899");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setNullString("\r\n#Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]#Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0900");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        boolean boolean2 = cSVFormat0.getLenientEof();
        java.lang.String str3 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean6 = cSVFormat5.getSkipHeaderRecord();
        java.lang.String str7 = cSVFormat5.getRecordSeparator();
        boolean boolean8 = cSVFormat5.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder9 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat5);
        org.apache.commons.csv.QuoteMode quoteMode10 = null;
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setQuoteMode(quoteMode10);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder9.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean15 = cSVFormat14.getSkipHeaderRecord();
        java.lang.String str16 = cSVFormat14.getRecordSeparator();
        boolean boolean17 = cSVFormat14.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder18 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat14);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setTrim(false);
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean24 = cSVFormat23.getSkipHeaderRecord();
        java.lang.String str25 = cSVFormat23.getRecordSeparator();
        boolean boolean26 = cSVFormat23.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder27 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat23);
        org.apache.commons.csv.QuoteMode quoteMode28 = null;
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setQuoteMode(quoteMode28);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder27.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean33 = cSVFormat32.getSkipHeaderRecord();
        java.lang.String str34 = cSVFormat32.getRecordSeparator();
        boolean boolean35 = cSVFormat32.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder36 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat32);
        org.apache.commons.csv.QuoteMode quoteMode37 = null;
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setQuoteMode(quoteMode37);
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder36.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray47 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder36.setHeaderComments(strArray47);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder27.setHeaderComments(strArray47);
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder22.setHeaderComments((java.lang.Object[]) strArray47);
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder13.setHeader(strArray47);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder13.setIgnoreHeaderCase(true);
        boolean boolean54 = cSVFormat0.equals((java.lang.Object) builder13);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\r\n" + "'", str3, "\r\n");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\n" + "'", str16, "\n");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\n" + "'", str25, "\n");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\n" + "'", str34, "\n");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertArrayEquals(strArray47, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0901");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('#');
        boolean boolean2 = cSVFormat1.getTrailingDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0902");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat(' ');
        boolean boolean3 = cSVFormat2.getTrim();
        boolean boolean4 = cSVFormat2.getIgnoreEmptyLines();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse(",", cSVFormat2);
        boolean boolean6 = cSVParser5.isClosed();
        boolean boolean7 = cSVParser5.hasHeaderComment();
        cSVParser5.close();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0903");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.String[] strArray3 = cSVFormat0.getHeader();
        java.lang.String str4 = cSVFormat0.getNullString();
        boolean boolean5 = cSVFormat0.isNullStringSet();
        java.lang.String str6 = cSVFormat0.getDelimiterString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "," + "'", str6, ",");
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0904");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setBufferSize((int) 'a');
        org.apache.commons.csv.CSVParser.Builder builder9 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder11 = builder0.setCharacterOffset(0L);
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file12 = builder11.getFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getFile() for byte[] origin [B@360689c6");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0905");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        org.apache.commons.csv.CSVFormat.Predefined predefined3 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat4 = predefined3.getFormat();
        java.lang.String str5 = cSVFormat4.toString();
        boolean boolean6 = cSVFormat4.isEscapeCharacterSet();
        boolean boolean7 = cSVFormat2.equals((java.lang.Object) cSVFormat4);
        java.lang.String str8 = cSVFormat2.getDelimiterString();
        org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("\r\n\"Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]\"Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat2);
        boolean boolean10 = cSVFormat2.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + predefined3 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined3.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str5, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\"" + "'", str8, "\"");
        org.junit.Assert.assertNotNull(cSVParser9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0906");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setCommentMarker('a');
        java.sql.ResultSetMetaData resultSetMetaData19 = null;
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setHeader(resultSetMetaData19);
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean22 = cSVFormat21.getSkipHeaderRecord();
        java.lang.String str23 = cSVFormat21.getRecordSeparator();
        boolean boolean24 = cSVFormat21.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder25 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat21);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setCommentMarker('a');
        java.lang.String[] strArray32 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" };
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder25.setHeader(strArray32);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder25.setNullString("");
        org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean37 = cSVFormat36.getSkipHeaderRecord();
        java.lang.String str38 = cSVFormat36.getRecordSeparator();
        boolean boolean39 = cSVFormat36.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder40 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat36);
        org.apache.commons.csv.QuoteMode quoteMode41 = null;
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder40.setQuoteMode(quoteMode41);
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder40.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray51 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder40.setHeaderComments(strArray51);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder35.setHeader(strArray51);
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder18.setHeaderComments(strArray51);
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder18.setDelimiter("\t");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\n" + "'", str23, "\n");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertArrayEquals(strArray32, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" });
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\n" + "'", str38, "\n");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertArrayEquals(strArray51, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0907");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder2.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setBufferSizeMax((int) (byte) -1);
        java.nio.charset.Charset charset6 = builder5.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder5.setBufferSizeMax(0);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVPrinter cSVPrinter10 = cSVFormat9.printer();
        boolean boolean11 = cSVFormat9.getTrim();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder5.setFormat(cSVFormat9);
        java.io.RandomAccessFile randomAccessFile13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder14 = builder5.setRandomAccessFile(randomAccessFile13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVPrinter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0908");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setTrailingData(true);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder22.setAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder22.setRecordSeparator("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setLenientEof(false);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder28.setEscape('a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0909");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVParser5.hasTrailerComment();
        cSVParser5.close();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser5.getRecords();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser5.getRecords();
        java.util.List<java.lang.String> strList10 = cSVParser5.getHeaderNames();
        java.lang.String str11 = cSVParser5.getHeaderComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVRecordList8);
        org.junit.Assert.assertNotNull(cSVRecordList9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0910");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setCommentMarker('#');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setCommentMarker((java.lang.Character) '\"');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0911");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setQuoteMode(quoteMode7);
        java.lang.String[] strArray12 = new java.lang.String[] { "\r\n", "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]", "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder8.setHeader(strArray12);
        org.apache.commons.csv.CSVFormat cSVFormat14 = builder8.get();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertArrayEquals(strArray12, new java.lang.String[] { "\r\n", "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]", "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" });
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(cSVFormat14);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0912");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        java.lang.String str3 = cSVParser2.getFirstEndOfLine();
        java.lang.String str4 = cSVParser2.getTrailerComment();
        boolean boolean5 = cSVParser2.isClosed();
        boolean boolean6 = cSVParser2.isClosed();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVParser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0913");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Predefined predefined10 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat11 = predefined10.getFormat();
        boolean boolean12 = cSVFormat11.getAutoFlush();
        boolean boolean13 = cSVFormat11.getTrim();
        org.apache.commons.csv.CSVParser cSVParser14 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat11);
        boolean boolean15 = cSVFormat11.getSkipHeaderRecord();
        boolean boolean17 = cSVFormat11.equals((java.lang.Object) '4');
        org.apache.commons.csv.CSVFormat.Predefined predefined18 = org.apache.commons.csv.CSVFormat.Predefined.ORACLE;
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        boolean boolean22 = cSVFormat21.getAutoFlush();
        boolean boolean23 = cSVFormat21.getTrim();
        org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat21);
        boolean boolean25 = cSVParser24.hasTrailerComment();
        boolean boolean26 = cSVParser24.isClosed();
        org.apache.commons.csv.CSVParser.Builder builder27 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder27.setBufferSize((java.lang.Integer) 100);
        java.lang.Object[] objArray31 = new java.lang.Object[] { boolean17, predefined18, cSVParser24, builder29, 100L };
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder8.setHeaderComments(objArray31);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder8.setAutoFlush(false);
        org.apache.commons.csv.CSVParser.Builder builder35 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset36 = builder35.getCharsetDefault();
        int int37 = builder35.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder39 = builder35.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray42 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder43 = builder35.setByteArray(byteArray42);
        org.apache.commons.csv.CSVParser.Builder builder45 = builder35.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder47 = builder35.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder49 = builder35.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder51 = builder49.setCharacterOffset((long) '#');
        java.io.File file52 = builder51.getFile();
        java.nio.file.OpenOption[] openOptionArray53 = builder51.getOpenOptions();
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder34.setHeaderComments((java.lang.Object[]) openOptionArray53);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + predefined10 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined10.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVParser14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + predefined18 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.ORACLE + "'", predefined18.equals(org.apache.commons.csv.CSVFormat.Predefined.ORACLE));
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(cSVParser24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8192 + "'", int37 == 8192);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertArrayEquals(byteArray42, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(file52);
        org.junit.Assert.assertNull("file52.getParent() == null", file52.getParent());
        org.junit.Assert.assertEquals(file52.toString(), "");
        org.junit.Assert.assertNotNull(openOptionArray53);
        org.junit.Assert.assertArrayEquals(openOptionArray53, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0914");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setNullString("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder16.setAllowMissingColumnNames(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0915");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setBufferSize((int) 'a');
        java.nio.file.OpenOption[] openOptionArray8 = builder7.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder7.setCharSequence((java.lang.CharSequence) "\r\n#Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]#Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        java.util.function.IntUnaryOperator intUnaryOperator11 = null;
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setBufferSizeChecker(intUnaryOperator11);
        java.io.OutputStream outputStream13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder14 = builder10.setOutputStream(outputStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(openOptionArray8);
        org.junit.Assert.assertArrayEquals(openOptionArray8, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0916");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setLenientEof(false);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setNullString("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder8.setIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setIgnoreHeaderCase(false);
        java.lang.Class<?> wildcardClass15 = builder12.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0917");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        java.lang.CharSequence charSequence5 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setCharSequence((java.lang.CharSequence) "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder9 = builder0.setCharacterOffset((long) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder11 = builder0.setPath("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException; message: Illegal char <<> at index 10: Delimiter=<,> QuoteChar=<\"> RecordSeparator=<??> SkipHeaderRecord:false");
        } catch (java.nio.file.InvalidPathException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertEquals("'" + charSequence5 + "' != '" + "" + "'", charSequence5, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0918");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        boolean boolean1 = cSVFormat0.getAllowMissingColumnNames();
        boolean boolean2 = cSVFormat0.isQuoteCharacterSet();
        org.apache.commons.csv.CSVPrinter cSVPrinter3 = cSVFormat0.printer();
        boolean boolean4 = cSVFormat0.getAllowMissingColumnNames();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(cSVPrinter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0919");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        org.apache.commons.csv.QuoteMode quoteMode2 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean4 = cSVFormat3.isNullStringSet();
        java.lang.String[] strArray5 = cSVFormat3.getHeaderComments();
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        byte[] byteArray8 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder9 = builder6.setByteArray(byteArray8);
        java.nio.charset.Charset charset10 = builder6.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder6.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder13 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset14 = builder13.getCharsetDefault();
        int int15 = builder13.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder17 = builder13.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder21 = builder13.setByteArray(byteArray20);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder13.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder25 = builder13.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder13.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder29 = builder27.setCharacterOffset((long) '#');
        java.io.File file30 = builder29.getFile();
        org.apache.commons.csv.CSVParser.Builder builder31 = builder12.setFile(file30);
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setFile(",");
        java.io.Reader reader34 = null; // flaky "8) test0919(org.apache.commons.csv.randoop.RegressionTest1)": builder31.getReader();
        org.apache.commons.csv.CSVParser cSVParser35 = null; // flaky "8) test0919(org.apache.commons.csv.randoop.RegressionTest1)": cSVFormat3.parse(reader34);
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse("", cSVFormat37);
        java.lang.String str39 = cSVFormat37.getDelimiterString();
        java.lang.String[] strArray40 = cSVFormat37.getHeader();
        org.apache.commons.csv.CSVParser cSVParser41 = null; // flaky "8) test0919(org.apache.commons.csv.randoop.RegressionTest1)": org.apache.commons.csv.CSVParser.parse(reader34, cSVFormat37);
        org.apache.commons.csv.CSVParser cSVParser42 = null; // flaky "8) test0919(org.apache.commons.csv.randoop.RegressionTest1)": cSVFormat1.parse(reader34);
        org.apache.commons.csv.CSVFormat cSVFormat44 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVParser cSVParser47 = null; // flaky "8) test0919(org.apache.commons.csv.randoop.RegressionTest1)": new org.apache.commons.csv.CSVParser(reader34, cSVFormat44, (long) '#', (long) (short) 100);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(quoteMode2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertArrayEquals(byteArray8, new byte[] {});
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8192 + "'", int15 == 8192);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertArrayEquals(byteArray20, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertNull("file30.getParent() == null", file30.getParent());
        org.junit.Assert.assertEquals(file30.toString(), "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
// flaky "7) test0919(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(reader34);
// flaky "4) test0919(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser35);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVParser38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\t" + "'", str39, "\t");
        org.junit.Assert.assertNull(strArray40);
// flaky "3) test0919(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser41);
// flaky "2) test0919(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser42);
        org.junit.Assert.assertNotNull(cSVFormat44);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0920");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        java.lang.String str9 = cSVFormat7.getRecordSeparator();
        boolean boolean10 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat7);
        org.apache.commons.csv.QuoteMode quoteMode12 = null;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuoteMode(quoteMode12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray22 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder11.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder6.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder6.setQuote('#');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setIgnoreSurroundingSpaces(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertArrayEquals(strArray22, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0921");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        java.util.function.IntUnaryOperator intUnaryOperator9 = null;
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setBufferSizeChecker(intUnaryOperator9);
        org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        org.apache.commons.csv.QuoteMode quoteMode13 = cSVFormat12.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean15 = cSVFormat14.isNullStringSet();
        java.lang.String[] strArray16 = cSVFormat14.getHeaderComments();
        org.apache.commons.csv.CSVParser.Builder builder17 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset18 = builder17.getCharsetDefault();
        byte[] byteArray19 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder20 = builder17.setByteArray(byteArray19);
        java.nio.charset.Charset charset21 = builder17.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder17.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder24 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset25 = builder24.getCharsetDefault();
        int int26 = builder24.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder28 = builder24.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray31 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder32 = builder24.setByteArray(byteArray31);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder24.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder36 = builder24.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder38 = builder24.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder40 = builder38.setCharacterOffset((long) '#');
        java.io.File file41 = builder40.getFile();
        org.apache.commons.csv.CSVParser.Builder builder42 = builder23.setFile(file41);
        org.apache.commons.csv.CSVParser.Builder builder44 = builder42.setFile(",");
        java.io.Reader reader45 = null; // flaky "9) test0921(org.apache.commons.csv.randoop.RegressionTest1)": builder42.getReader();
        org.apache.commons.csv.CSVParser cSVParser46 = null; // flaky "9) test0921(org.apache.commons.csv.randoop.RegressionTest1)": cSVFormat14.parse(reader45);
        org.apache.commons.csv.CSVFormat cSVFormat48 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser49 = org.apache.commons.csv.CSVParser.parse("", cSVFormat48);
        java.lang.String str50 = cSVFormat48.getDelimiterString();
        java.lang.String[] strArray51 = cSVFormat48.getHeader();
        org.apache.commons.csv.CSVParser cSVParser52 = null; // flaky "9) test0921(org.apache.commons.csv.randoop.RegressionTest1)": org.apache.commons.csv.CSVParser.parse(reader45, cSVFormat48);
        org.apache.commons.csv.CSVParser cSVParser53 = null; // flaky "9) test0921(org.apache.commons.csv.randoop.RegressionTest1)": cSVFormat12.parse(reader45);
        org.apache.commons.csv.CSVParser.Builder builder54 = null; // flaky "9) test0921(org.apache.commons.csv.randoop.RegressionTest1)": builder10.setReader(reader45);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNull(quoteMode13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertArrayEquals(byteArray19, new byte[] {});
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8192 + "'", int26 == 8192);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertArrayEquals(byteArray31, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertNull("file41.getParent() == null", file41.getParent());
        org.junit.Assert.assertEquals(file41.toString(), "");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
// flaky "8) test0921(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(reader45);
// flaky "5) test0921(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser46);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(cSVParser49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\t" + "'", str50, "\t");
        org.junit.Assert.assertNull(strArray51);
// flaky "4) test0921(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser52);
// flaky "3) test0921(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser53);
// flaky "2) test0921(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0922");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.String[] strArray3 = cSVFormat0.getHeader();
        java.lang.String str4 = cSVFormat0.getDelimiterString();
        boolean boolean5 = cSVFormat0.getIgnoreEmptyLines();
        java.lang.String str6 = cSVFormat0.getDelimiterString();
        boolean boolean7 = cSVFormat0.getAutoFlush();
        java.lang.String[] strArray8 = cSVFormat0.getHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "," + "'", str4, ",");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "," + "'", str6, ",");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strArray8);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0923");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setCommentMarker('a');
        java.sql.ResultSetMetaData resultSetMetaData19 = null;
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setHeader(resultSetMetaData19);
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean22 = cSVFormat21.getSkipHeaderRecord();
        java.lang.String str23 = cSVFormat21.getRecordSeparator();
        boolean boolean24 = cSVFormat21.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder25 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat21);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setCommentMarker('a');
        java.lang.String[] strArray32 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" };
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder25.setHeader(strArray32);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder25.setNullString("");
        org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean37 = cSVFormat36.getSkipHeaderRecord();
        java.lang.String str38 = cSVFormat36.getRecordSeparator();
        boolean boolean39 = cSVFormat36.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder40 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat36);
        org.apache.commons.csv.QuoteMode quoteMode41 = null;
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder40.setQuoteMode(quoteMode41);
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder40.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray51 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder40.setHeaderComments(strArray51);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder35.setHeader(strArray51);
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder18.setHeaderComments(strArray51);
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder18.setAutoFlush(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\n" + "'", str23, "\n");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertArrayEquals(strArray32, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" });
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\n" + "'", str38, "\n");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertArrayEquals(strArray51, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0924");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        java.lang.CharSequence charSequence5 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        byte[] byteArray8 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder9 = builder6.setByteArray(byteArray8);
        java.lang.CharSequence charSequence10 = builder6.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder6.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder13 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset14 = builder13.getCharsetDefault();
        int int15 = builder13.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder17 = builder13.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder21 = builder13.setByteArray(byteArray20);
        java.nio.charset.Charset charset22 = builder13.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder12.setCharset(charset22);
        org.apache.commons.csv.CSVParser.Builder builder24 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset25 = builder24.getCharsetDefault();
        int int26 = builder24.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder28 = builder24.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray31 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder32 = builder24.setByteArray(byteArray31);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder24.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder36 = builder24.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder38 = builder24.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder39 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset40 = builder39.getCharsetDefault();
        int int41 = builder39.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder39.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder47 = builder39.setByteArray(byteArray46);
        org.apache.commons.csv.CSVParser.Builder builder48 = builder38.setByteArray(byteArray46);
        org.apache.commons.csv.CSVParser.Builder builder49 = builder23.setByteArray(byteArray46);
        org.apache.commons.csv.CSVParser.Builder builder50 = builder0.setByteArray(byteArray46);
        int int51 = builder50.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser cSVParser52 = builder50.getUnchecked();
        int int53 = builder50.getBufferSizeDefault();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertEquals("'" + charSequence5 + "' != '" + "" + "'", charSequence5, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertArrayEquals(byteArray8, new byte[] {});
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "" + "'", charSequence10, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8192 + "'", int15 == 8192);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertArrayEquals(byteArray20, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8192 + "'", int26 == 8192);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertArrayEquals(byteArray31, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8192 + "'", int41 == 8192);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertArrayEquals(byteArray46, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 8192 + "'", int51 == 8192);
        org.junit.Assert.assertNotNull(cSVParser52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 8192 + "'", int53 == 8192);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0925");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getIgnoreHeaderCase();
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str8 = cSVFormat1.format(objArray7);
        boolean boolean9 = cSVFormat1.getTrim();
        boolean boolean10 = cSVFormat1.getAllowMissingColumnNames();
        boolean boolean11 = cSVFormat1.isQuoteCharacterSet();
        boolean boolean12 = cSVFormat1.getSkipHeaderRecord();
        boolean boolean13 = cSVFormat1.getTrailingDelimiter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str8, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0926");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat9 = builder8.get();
        java.lang.String str10 = cSVFormat9.getNullString();
        java.lang.String str11 = cSVFormat9.toString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Delimiter=<,> Escape=<#> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str11, "Delimiter=<,> Escape=<#> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0927");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setLenientEof(true);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setIgnoreEmptyLines(true);
        java.lang.String[] strArray21 = null;
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setHeader(strArray21);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder18.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setSkipHeaderRecord(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0928");
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat2.builder();
        org.apache.commons.csv.QuoteMode quoteMode4 = cSVFormat2.getQuoteMode();
        java.lang.String[] strArray5 = cSVFormat2.getHeader();
        org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse("", cSVFormat2);
        java.lang.Character char7 = cSVFormat2.getCommentMarker();
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(quoteMode4);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNotNull(cSVParser6);
        org.junit.Assert.assertNull(char7);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0929");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 100);
        java.util.function.IntUnaryOperator intUnaryOperator9 = null;
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setBufferSizeChecker(intUnaryOperator9);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset12 = builder11.getCharsetDefault();
        int int13 = builder11.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder11.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder19 = builder11.setByteArray(byteArray18);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder10.setByteArray(byteArray18);
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset22 = builder21.getCharsetDefault();
        byte[] byteArray23 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder24 = builder21.setByteArray(byteArray23);
        java.lang.CharSequence charSequence25 = builder21.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder21.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset29 = builder28.getCharsetDefault();
        byte[] byteArray30 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder31 = builder28.setByteArray(byteArray30);
        java.lang.CharSequence charSequence32 = builder28.getCharSequence();
        java.lang.CharSequence charSequence33 = builder28.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser34 = builder28.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray35 = builder28.getOpenOptions();
        java.nio.charset.Charset charset36 = builder28.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder37 = builder21.setCharset(charset36);
        org.apache.commons.csv.CSVParser.Builder builder38 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset39 = builder38.getCharsetDefault();
        byte[] byteArray40 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder41 = builder38.setByteArray(byteArray40);
        java.lang.CharSequence charSequence42 = builder38.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder44 = builder38.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder46 = builder38.setRecordNumber((long) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder47 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset48 = builder47.getCharsetDefault();
        int int49 = builder47.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder51 = builder47.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray54 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder55 = builder47.setByteArray(byteArray54);
        org.apache.commons.csv.CSVParser.Builder builder57 = builder47.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder59 = builder47.setBufferSize((int) (byte) 0);
        java.nio.file.Path path60 = builder47.getPath();
        org.apache.commons.csv.CSVParser.Builder builder61 = builder38.setPath(path60);
        org.apache.commons.csv.CSVParser.Builder builder62 = builder21.setPath(path60);
        org.apache.commons.csv.CSVParser.Builder builder63 = builder10.setPath(path60);
        org.apache.commons.csv.CSVParser.Builder builder64 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset65 = builder64.getCharsetDefault();
        int int66 = builder64.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder68 = builder64.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        java.nio.file.OpenOption[] openOptionArray69 = builder64.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder71 = builder64.setBufferSize((java.lang.Integer) (-1));
        java.nio.charset.Charset charset72 = builder64.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat74 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean75 = cSVFormat74.getSkipHeaderRecord();
        java.lang.String str76 = cSVFormat74.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder77 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat74);
        org.apache.commons.csv.CSVFormat cSVFormat78 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean79 = cSVFormat78.getSkipHeaderRecord();
        java.lang.String str80 = cSVFormat78.getRecordSeparator();
        boolean boolean81 = cSVFormat78.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder82 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat78);
        boolean boolean83 = cSVFormat74.equals((java.lang.Object) cSVFormat78);
        java.lang.String str84 = cSVFormat78.toString();
        java.lang.String str85 = cSVFormat78.getNullString();
        boolean boolean86 = cSVFormat78.getTrim();
        org.apache.commons.csv.CSVParser cSVParser87 = org.apache.commons.csv.CSVParser.parse("hi!", cSVFormat78);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser88 = org.apache.commons.csv.CSVParser.parse(path60, charset72, cSVFormat78);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8192 + "'", int13 == 8192);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertArrayEquals(byteArray23, new byte[] {});
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + charSequence25 + "' != '" + "" + "'", charSequence25, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertArrayEquals(byteArray30, new byte[] {});
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + charSequence32 + "' != '" + "" + "'", charSequence32, "");
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "" + "'", charSequence33, "");
        org.junit.Assert.assertNotNull(cSVParser34);
        org.junit.Assert.assertNotNull(openOptionArray35);
        org.junit.Assert.assertArrayEquals(openOptionArray35, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertArrayEquals(byteArray40, new byte[] {});
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "" + "'", charSequence42, "");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8192 + "'", int49 == 8192);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertArrayEquals(byteArray54, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(path60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(charset65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 8192 + "'", int66 == 8192);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(openOptionArray69);
        org.junit.Assert.assertArrayEquals(openOptionArray69, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(charset72);
        org.junit.Assert.assertNotNull(cSVFormat74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\n" + "'", str76, "\n");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(cSVFormat78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\n" + "'", str80, "\n");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str84, "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(cSVParser87);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0930");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset15 = builder14.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder11.setCharset(charset15);
        java.nio.charset.Charset charset17 = builder11.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder0.setCharset(charset17);
        java.io.File file19 = builder0.getFile();
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset21 = builder20.getCharsetDefault();
        int int22 = builder20.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder20.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray27 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder28 = builder20.setByteArray(byteArray27);
        org.apache.commons.csv.CSVParser.Builder builder30 = builder20.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder34 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset35 = builder34.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder36 = builder31.setCharset(charset35);
        java.nio.charset.Charset charset37 = builder31.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder38 = builder20.setCharset(charset37);
        org.apache.commons.csv.CSVFormat cSVFormat39 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean40 = cSVFormat39.getSkipHeaderRecord();
        java.lang.String str41 = cSVFormat39.getRecordSeparator();
        boolean boolean42 = cSVFormat39.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder43 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat39);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser44 = org.apache.commons.csv.CSVParser.parse(file19, charset37, cSVFormat39);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertNull("file19.getParent() == null", file19.getParent());
        org.junit.Assert.assertEquals(file19.toString(), "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8192 + "'", int22 == 8192);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertArrayEquals(byteArray27, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\n" + "'", str41, "\n");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0931");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setRecordSeparator('a');
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setDelimiter('\"');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder24.setAllowMissingColumnNames(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0932");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.String[] strArray3 = cSVFormat0.getHeader();
        java.lang.String str4 = cSVFormat0.getDelimiterString();
        boolean boolean5 = cSVFormat0.getIgnoreEmptyLines();
        boolean boolean6 = cSVFormat0.getSkipHeaderRecord();
        boolean boolean7 = cSVFormat0.getTrim();
        boolean boolean8 = cSVFormat0.getAutoFlush();
        boolean boolean9 = cSVFormat0.getIgnoreHeaderCase();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "," + "'", str4, ",");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0933");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeaderComments();
        boolean boolean2 = cSVFormat0.isEscapeCharacterSet();
        java.lang.String str3 = cSVFormat0.getNullString();
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset5 = builder4.getCharsetDefault();
        byte[] byteArray6 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder7 = builder4.setByteArray(byteArray6);
        java.lang.CharSequence charSequence8 = builder4.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder4.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder12 = builder4.setRecordNumber((long) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder13 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset14 = builder13.getCharsetDefault();
        byte[] byteArray15 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder16 = builder13.setByteArray(byteArray15);
        org.apache.commons.csv.CSVParser.Builder builder18 = builder13.setBufferSize((int) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray19 = new java.nio.file.OpenOption[] {};
        org.apache.commons.csv.CSVParser.Builder builder20 = builder13.setOpenOptions(openOptionArray19);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder12.setOpenOptions(openOptionArray19);
        boolean boolean22 = cSVFormat0.equals((java.lang.Object) builder12);
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.MONGODB_CSV;
        boolean boolean24 = cSVFormat23.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder12.setFormat(cSVFormat23);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] {});
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "" + "'", charSequence8, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertArrayEquals(byteArray15, new byte[] {});
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(openOptionArray19);
        org.junit.Assert.assertArrayEquals(openOptionArray19, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0934");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        byte[] byteArray9 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder10 = builder7.setByteArray(byteArray9);
        java.lang.CharSequence charSequence11 = builder7.getCharSequence();
        java.lang.CharSequence charSequence12 = builder7.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser13 = builder7.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray14 = builder7.getOpenOptions();
        java.nio.charset.Charset charset15 = builder7.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder0.setCharset(charset15);
        java.io.InputStream inputStream17 = builder16.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset19 = builder18.getCharsetDefault();
        java.nio.charset.Charset charset20 = builder18.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean22 = cSVFormat21.getSkipHeaderRecord();
        java.lang.String str23 = cSVFormat21.getRecordSeparator();
        boolean boolean24 = cSVFormat21.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder25 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat21);
        org.apache.commons.csv.CSVParser cSVParser26 = org.apache.commons.csv.CSVParser.parse(inputStream17, charset20, cSVFormat21);
        java.lang.String str27 = cSVParser26.getHeaderComment();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "" + "'", charSequence11, "");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertNotNull(cSVParser13);
        org.junit.Assert.assertNotNull(openOptionArray14);
        org.junit.Assert.assertArrayEquals(openOptionArray14, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\n" + "'", str23, "\n");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(cSVParser26);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0935");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.Delimiter=<,> QuoteChar=<\"> RecordSeparator=<??> SkipHeaderRecord:false");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0936");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean2 = cSVFormat1.getSkipHeaderRecord();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("\n", cSVFormat1);
        long long4 = cSVParser3.getRecordNumber();
        long long5 = cSVParser3.getRecordNumber();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVParser3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0937");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVFormat2.getTrailingData();
        org.apache.commons.csv.QuoteMode quoteMode7 = cSVFormat2.getQuoteMode();
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        int int10 = builder8.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder8.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder16 = builder8.setByteArray(byteArray15);
        org.apache.commons.csv.CSVParser.Builder builder18 = builder8.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder20 = builder8.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder22 = builder8.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset24 = builder23.getCharsetDefault();
        int int25 = builder23.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder23.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder31 = builder23.setByteArray(byteArray30);
        org.apache.commons.csv.CSVParser.Builder builder32 = builder22.setByteArray(byteArray30);
        java.nio.charset.Charset charset33 = builder22.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder22.setBufferSize((java.lang.Integer) 8192);
        org.apache.commons.csv.CSVParser.Builder builder36 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset37 = builder36.getCharsetDefault();
        byte[] byteArray38 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder39 = builder36.setByteArray(byteArray38);
        java.nio.charset.Charset charset40 = builder36.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder42 = builder36.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder43 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset44 = builder43.getCharsetDefault();
        int int45 = builder43.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder47 = builder43.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray50 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder51 = builder43.setByteArray(byteArray50);
        org.apache.commons.csv.CSVParser.Builder builder53 = builder43.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder55 = builder43.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder57 = builder43.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder59 = builder57.setCharacterOffset((long) '#');
        java.io.File file60 = builder59.getFile();
        org.apache.commons.csv.CSVParser.Builder builder61 = builder42.setFile(file60);
        org.apache.commons.csv.CSVParser.Builder builder63 = builder61.setFile(",");
        java.io.Reader reader64 = null; // flaky "10) test0937(org.apache.commons.csv.randoop.RegressionTest1)": builder61.getReader();
        org.apache.commons.csv.CSVParser.Builder builder65 = null; // flaky "10) test0937(org.apache.commons.csv.randoop.RegressionTest1)": builder35.setReader(reader64);
        org.apache.commons.csv.CSVParser cSVParser66 = null; // flaky "10) test0937(org.apache.commons.csv.randoop.RegressionTest1)": cSVFormat2.parse(reader64);
        boolean boolean67 = cSVFormat2.getTrailingData();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + quoteMode7 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode7.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8192 + "'", int10 == 8192);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertArrayEquals(byteArray15, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8192 + "'", int25 == 8192);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertArrayEquals(byteArray30, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertArrayEquals(byteArray38, new byte[] {});
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8192 + "'", int45 == 8192);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertArrayEquals(byteArray50, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(file60);
        org.junit.Assert.assertNull("file60.getParent() == null", file60.getParent());
        org.junit.Assert.assertEquals(file60.toString(), "");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
// flaky "10) test0937(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(reader64);
// flaky "10) test0937(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(builder65);
// flaky "9) test0937(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0938");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        java.lang.String[] strArray11 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" };
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder4.setHeader(strArray11);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder4.setNullString("");
        org.apache.commons.csv.CSVFormat cSVFormat15 = builder4.get();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertArrayEquals(strArray11, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" });
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVFormat15);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0939");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder16.setEscape('a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0940");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat1.printer();
        boolean boolean3 = cSVFormat1.getLenientEof();
        java.lang.String str4 = cSVFormat1.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder5 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse("a", cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVPrinter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\r\n" + "'", str4, "\r\n");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVParser6);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0941");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getAutoFlush();
        java.lang.Character char3 = cSVFormat1.getEscapeCharacter();
        boolean boolean4 = cSVFormat1.getSkipHeaderRecord();
        boolean boolean5 = cSVFormat1.getIgnoreHeaderCase();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + '\"' + "'", char3 == '\"');
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0942");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getIgnoreHeaderCase();
        java.lang.Object[] objArray7 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str8 = cSVFormat1.format(objArray7);
        boolean boolean9 = cSVFormat1.getTrim();
        boolean boolean10 = cSVFormat1.getTrailingData();
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.DEFAULT;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        org.apache.commons.csv.CSVFormat cSVFormat13 = predefined11.getFormat();
        org.apache.commons.csv.CSVFormat cSVFormat14 = predefined11.getFormat();
        boolean boolean15 = cSVFormat1.equals((java.lang.Object) predefined11);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str8, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.DEFAULT + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.DEFAULT));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertNotNull(cSVFormat13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0943");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter4 = cSVFormat0.printer();
        boolean boolean5 = cSVFormat0.getIgnoreHeaderCase();
        boolean boolean6 = cSVFormat0.isQuoteCharacterSet();
        java.lang.String[] strArray7 = cSVFormat0.getHeaderComments();
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        int int10 = builder8.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder8.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder16 = builder8.setByteArray(byteArray15);
        org.apache.commons.csv.CSVParser.Builder builder18 = builder8.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder20 = builder8.setBufferSize((int) (byte) 0);
        java.util.function.IntUnaryOperator intUnaryOperator21 = null;
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setBufferSizeChecker(intUnaryOperator21);
        java.nio.file.Path path23 = builder22.getPath();
        org.apache.commons.csv.CSVParser.Builder builder24 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset25 = builder24.getCharsetDefault();
        int int26 = builder24.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder28 = builder24.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray31 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder32 = builder24.setByteArray(byteArray31);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder24.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder36 = builder24.setBufferSize((int) (byte) 0);
        java.nio.file.Path path37 = builder24.getPath();
        org.apache.commons.csv.CSVParser.Builder builder38 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset39 = builder38.getCharsetDefault();
        int int40 = builder38.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder42 = builder38.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray45 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder46 = builder38.setByteArray(byteArray45);
        org.apache.commons.csv.CSVParser.Builder builder48 = builder38.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder50 = builder38.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder52 = builder38.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder54 = builder52.setCharacterOffset((long) '#');
        java.io.File file55 = builder54.getFile();
        org.apache.commons.csv.CSVParser.Builder builder56 = builder24.setFile(file55);
        org.apache.commons.csv.CSVParser.Builder builder57 = builder22.setFile(file55);
        org.apache.commons.csv.CSVParser.Builder builder58 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset59 = builder58.getCharsetDefault();
        java.nio.charset.Charset charset60 = builder58.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter61 = cSVFormat0.print(file55, charset60);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(cSVPrinter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8192 + "'", int10 == 8192);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertArrayEquals(byteArray15, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(path23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8192 + "'", int26 == 8192);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertArrayEquals(byteArray31, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(path37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8192 + "'", int40 == 8192);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertArrayEquals(byteArray45, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(file55);
        org.junit.Assert.assertNull("file55.getParent() == null", file55.getParent());
        org.junit.Assert.assertEquals(file55.toString(), "");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(charset59);
        org.junit.Assert.assertNotNull(charset60);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0944");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.INFORMIX_UNLOAD_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        org.apache.commons.csv.CSVFormat.Builder builder2 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        boolean boolean3 = cSVFormat1.isQuoteCharacterSet();
        boolean boolean4 = cSVFormat1.getIgnoreHeaderCase();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.INFORMIX_UNLOAD_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.INFORMIX_UNLOAD_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0945");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a');
        boolean boolean2 = cSVFormat1.isQuoteCharacterSet();
        java.lang.Character char3 = cSVFormat1.getQuoteCharacter();
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset5 = builder4.getCharsetDefault();
        byte[] byteArray6 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder7 = builder4.setByteArray(byteArray6);
        org.apache.commons.csv.CSVParser.Builder builder9 = builder4.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setRecordNumber((long) (short) 10);
        org.apache.commons.csv.CSVParser cSVParser12 = builder11.get();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder11.setRecordNumber(10L);
        org.apache.commons.csv.CSVParser.Builder builder15 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset16 = builder15.getCharsetDefault();
        byte[] byteArray17 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder18 = builder15.setByteArray(byteArray17);
        java.lang.CharSequence charSequence19 = builder15.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder15.setBufferSize((int) ' ');
        java.io.Reader reader22 = builder21.getReader();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder11.setReader(reader22);
        org.apache.commons.csv.CSVParser cSVParser24 = cSVFormat1.parse(reader22);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] {});
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(cSVParser12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] {});
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(reader22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(cSVParser24);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0946");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        boolean boolean1 = cSVFormat0.getAllowMissingColumnNames();
        boolean boolean2 = cSVFormat0.isQuoteCharacterSet();
        org.apache.commons.csv.CSVPrinter cSVPrinter3 = cSVFormat0.printer();
        boolean boolean4 = cSVFormat0.isNullStringSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(cSVPrinter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0947");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.String[] strArray3 = cSVFormat0.getHeaderComments();
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset5 = builder4.getCharsetDefault();
        byte[] byteArray6 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder7 = builder4.setByteArray(byteArray6);
        java.lang.CharSequence charSequence8 = builder4.getCharSequence();
        java.lang.CharSequence charSequence9 = builder4.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset11 = builder10.getCharsetDefault();
        byte[] byteArray12 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder13 = builder10.setByteArray(byteArray12);
        java.lang.CharSequence charSequence14 = builder10.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder10.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder17 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset18 = builder17.getCharsetDefault();
        int int19 = builder17.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder17.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder25 = builder17.setByteArray(byteArray24);
        java.nio.charset.Charset charset26 = builder17.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder16.setCharset(charset26);
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset29 = builder28.getCharsetDefault();
        int int30 = builder28.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder28.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray35 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder36 = builder28.setByteArray(byteArray35);
        org.apache.commons.csv.CSVParser.Builder builder38 = builder28.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder40 = builder28.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder42 = builder28.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder43 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset44 = builder43.getCharsetDefault();
        int int45 = builder43.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder47 = builder43.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray50 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder51 = builder43.setByteArray(byteArray50);
        org.apache.commons.csv.CSVParser.Builder builder52 = builder42.setByteArray(byteArray50);
        org.apache.commons.csv.CSVParser.Builder builder53 = builder27.setByteArray(byteArray50);
        org.apache.commons.csv.CSVParser.Builder builder54 = builder4.setByteArray(byteArray50);
        int int55 = builder54.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder56 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset57 = builder56.getCharsetDefault();
        int int58 = builder56.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder60 = builder56.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser61 = builder56.getUnchecked();
        org.apache.commons.csv.CSVParser.Builder builder62 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset63 = builder62.getCharsetDefault();
        int int64 = builder62.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder66 = builder62.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray69 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder70 = builder62.setByteArray(byteArray69);
        org.apache.commons.csv.CSVParser.Builder builder72 = builder62.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder74 = builder62.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder76 = builder62.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder78 = builder76.setCharacterOffset((long) '#');
        java.io.File file79 = builder78.getFile();
        org.apache.commons.csv.CSVParser.Builder builder80 = builder56.setFile(file79);
        org.apache.commons.csv.CSVParser.Builder builder81 = builder54.setFile(file79);
        org.apache.commons.csv.CSVParser.Builder builder82 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset83 = builder82.getCharsetDefault();
        java.nio.charset.Charset charset84 = builder82.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter85 = cSVFormat0.print(file79, charset84);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\r\n" + "'", str2, "\r\n");
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] {});
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "" + "'", charSequence8, "");
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "" + "'", charSequence9, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertArrayEquals(byteArray12, new byte[] {});
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8192 + "'", int19 == 8192);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8192 + "'", int30 == 8192);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertArrayEquals(byteArray35, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8192 + "'", int45 == 8192);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertArrayEquals(byteArray50, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8192 + "'", int55 == 8192);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(charset57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 8192 + "'", int58 == 8192);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(cSVParser61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(charset63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 8192 + "'", int64 == 8192);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertArrayEquals(byteArray69, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(file79);
        org.junit.Assert.assertNull("file79.getParent() == null", file79.getParent());
        org.junit.Assert.assertEquals(file79.toString(), "");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(charset83);
        org.junit.Assert.assertNotNull(charset84);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0948");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        java.nio.charset.Charset charset9 = builder0.getCharset();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1, (byte) 0, (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder17 = builder0.setByteArray(byteArray16);
        org.apache.commons.io.IORandomAccessFile iORandomAccessFile18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder19 = builder0.setRandomAccessFile(iORandomAccessFile18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertArrayEquals(byteArray16, new byte[] { (byte) 1, (byte) 10, (byte) 1, (byte) 0, (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0949");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setRecordNumber((long) (short) 10);
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        byte[] byteArray10 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder11 = builder8.setByteArray(byteArray10);
        java.lang.CharSequence charSequence12 = builder8.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder8.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder16 = builder8.setRecordNumber((long) (byte) 100);
        java.util.function.IntUnaryOperator intUnaryOperator17 = null;
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setBufferSizeChecker(intUnaryOperator17);
        org.apache.commons.csv.CSVParser.Builder builder19 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset20 = builder19.getCharsetDefault();
        int int21 = builder19.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder19.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder27 = builder19.setByteArray(byteArray26);
        org.apache.commons.csv.CSVParser.Builder builder28 = builder18.setByteArray(byteArray26);
        org.apache.commons.csv.CSVParser.Builder builder29 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset30 = builder29.getCharsetDefault();
        byte[] byteArray31 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder32 = builder29.setByteArray(byteArray31);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier33 = builder29.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder34 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset35 = builder34.getCharsetDefault();
        byte[] byteArray36 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder37 = builder34.setByteArray(byteArray36);
        java.lang.CharSequence charSequence38 = builder34.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder40 = builder34.setBufferSize((int) ' ');
        java.io.InputStream inputStream41 = builder40.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder42 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset43 = builder42.getCharsetDefault();
        byte[] byteArray44 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder45 = builder42.setByteArray(byteArray44);
        java.nio.charset.Charset charset46 = builder42.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat48 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder49 = cSVFormat48.builder();
        java.lang.String str50 = cSVFormat48.getNullString();
        org.apache.commons.csv.CSVParser cSVParser51 = org.apache.commons.csv.CSVParser.parse(inputStream41, charset46, cSVFormat48);
        org.apache.commons.csv.CSVParser.Builder builder52 = builder29.setInputStream(inputStream41);
        org.apache.commons.csv.CSVParser.Builder builder53 = builder18.setInputStream(inputStream41);
        org.apache.commons.csv.CSVParser.Builder builder54 = builder5.setInputStream(inputStream41);
        org.apache.commons.csv.CSVParser.Builder builder55 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset56 = builder55.getCharsetDefault();
        byte[] byteArray57 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder58 = builder55.setByteArray(byteArray57);
        java.lang.CharSequence charSequence59 = builder55.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder61 = builder55.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder62 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset63 = builder62.getCharsetDefault();
        byte[] byteArray64 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder65 = builder62.setByteArray(byteArray64);
        java.lang.CharSequence charSequence66 = builder62.getCharSequence();
        java.lang.CharSequence charSequence67 = builder62.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser68 = builder62.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray69 = builder62.getOpenOptions();
        java.nio.charset.Charset charset70 = builder62.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder71 = builder55.setCharset(charset70);
        org.apache.commons.csv.CSVParser.Builder builder72 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset73 = builder72.getCharsetDefault();
        byte[] byteArray74 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder75 = builder72.setByteArray(byteArray74);
        java.lang.CharSequence charSequence76 = builder72.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder78 = builder72.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder80 = builder72.setRecordNumber((long) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder81 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset82 = builder81.getCharsetDefault();
        int int83 = builder81.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder85 = builder81.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray88 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder89 = builder81.setByteArray(byteArray88);
        org.apache.commons.csv.CSVParser.Builder builder91 = builder81.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder93 = builder81.setBufferSize((int) (byte) 0);
        java.nio.file.Path path94 = builder81.getPath();
        org.apache.commons.csv.CSVParser.Builder builder95 = builder72.setPath(path94);
        org.apache.commons.csv.CSVParser.Builder builder96 = builder55.setPath(path94);
        org.apache.commons.csv.CSVParser.Builder builder97 = builder5.setPath(path94);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertArrayEquals(byteArray10, new byte[] {});
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8192 + "'", int21 == 8192);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertArrayEquals(byteArray26, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertArrayEquals(byteArray31, new byte[] {});
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(cSVParserSupplier33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertArrayEquals(byteArray36, new byte[] {});
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "" + "'", charSequence38, "");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(inputStream41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertArrayEquals(byteArray44, new byte[] {});
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(cSVFormat48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(cSVParser51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertArrayEquals(byteArray57, new byte[] {});
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "" + "'", charSequence59, "");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(charset63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertArrayEquals(byteArray64, new byte[] {});
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertEquals("'" + charSequence66 + "' != '" + "" + "'", charSequence66, "");
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "" + "'", charSequence67, "");
        org.junit.Assert.assertNotNull(cSVParser68);
        org.junit.Assert.assertNotNull(openOptionArray69);
        org.junit.Assert.assertArrayEquals(openOptionArray69, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(charset73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertArrayEquals(byteArray74, new byte[] {});
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertEquals("'" + charSequence76 + "' != '" + "" + "'", charSequence76, "");
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(charset82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 8192 + "'", int83 == 8192);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertArrayEquals(byteArray88, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(path94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertNotNull(builder97);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0950");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        boolean boolean4 = cSVFormat0.isNullStringSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        boolean boolean8 = cSVFormat7.getAutoFlush();
        boolean boolean9 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat7);
        java.lang.String str11 = cSVParser10.getHeaderComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream12 = cSVParser10.stream();
        boolean boolean13 = cSVFormat0.equals((java.lang.Object) cSVParser10);
        cSVParser10.close();
        java.lang.String str15 = cSVParser10.getFirstEndOfLine();
        long long16 = cSVParser10.getCurrentLineNumber();
        long long17 = cSVParser10.getRecordNumber();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVRecordStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0951");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setLenientEof(false);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        java.sql.ResultSet resultSet9 = null;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setHeader(resultSet9);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder6.setCommentMarker((java.lang.Character) '\"');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0952");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setCharacterOffset((long) (byte) 1);
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 100, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder19 = builder14.setByteArray(byteArray18);
        java.io.InputStream inputStream20 = builder19.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset22 = builder21.getCharsetDefault();
        int int23 = builder21.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder21.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder29 = builder21.setByteArray(byteArray28);
        org.apache.commons.csv.CSVParser.Builder builder31 = builder21.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder33 = builder21.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder35 = builder21.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setCharacterOffset((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder39 = builder35.setCharacterOffset((long) 'a');
        java.nio.charset.Charset charset40 = builder35.getCharset();
        org.apache.commons.csv.CSVFormat.Predefined predefined41 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat42 = predefined41.getFormat();
        boolean boolean43 = cSVFormat42.getAutoFlush();
        org.apache.commons.csv.QuoteMode quoteMode44 = cSVFormat42.getQuoteMode();
        boolean boolean45 = cSVFormat42.getIgnoreEmptyLines();
        org.apache.commons.csv.CSVParser cSVParser46 = org.apache.commons.csv.CSVParser.parse(inputStream20, charset40, cSVFormat42);
        org.apache.commons.csv.CSVParser.Builder builder47 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset48 = builder47.getCharsetDefault();
        byte[] byteArray49 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder50 = builder47.setByteArray(byteArray49);
        java.lang.CharSequence charSequence51 = builder47.getCharSequence();
        java.lang.CharSequence charSequence52 = builder47.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser53 = builder47.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray54 = builder47.getOpenOptions();
        java.nio.charset.Charset charset55 = builder47.getCharset();
        org.apache.commons.csv.CSVFormat.Predefined predefined56 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat57 = predefined56.getFormat();
        java.lang.String str58 = cSVFormat57.toString();
        boolean boolean59 = cSVFormat57.isEscapeCharacterSet();
        boolean boolean60 = cSVFormat57.getIgnoreHeaderCase();
        org.apache.commons.csv.CSVParser cSVParser61 = org.apache.commons.csv.CSVParser.parse(inputStream20, charset55, cSVFormat57);
        org.apache.commons.csv.CSVParser.Builder builder62 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset63 = builder62.getCharsetDefault();
        int int64 = builder62.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder66 = builder62.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray69 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder70 = builder62.setByteArray(byteArray69);
        org.apache.commons.csv.CSVParser.Builder builder72 = builder62.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder74 = builder62.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder76 = builder62.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder78 = builder76.setCharacterOffset((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder80 = builder76.setCharacterOffset((long) 'a');
        java.nio.charset.Charset charset81 = builder76.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat82 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean83 = cSVFormat82.getSkipHeaderRecord();
        java.lang.String str84 = cSVFormat82.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder85 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat82);
        org.apache.commons.csv.CSVFormat cSVFormat86 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean87 = cSVFormat86.getSkipHeaderRecord();
        java.lang.String str88 = cSVFormat86.getRecordSeparator();
        boolean boolean89 = cSVFormat86.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder90 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat86);
        boolean boolean91 = cSVFormat82.equals((java.lang.Object) cSVFormat86);
        java.lang.String str92 = cSVFormat82.getNullString();
        java.lang.String str93 = cSVFormat82.getRecordSeparator();
        org.apache.commons.csv.CSVParser cSVParser94 = org.apache.commons.csv.CSVParser.parse(inputStream20, charset81, cSVFormat82);
        boolean boolean95 = cSVFormat82.isNullStringSet();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] { (byte) -1, (byte) 100, (byte) 1 });
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8192 + "'", int23 == 8192);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertArrayEquals(byteArray28, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertTrue("'" + predefined41 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined41.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + quoteMode44 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode44.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(cSVParser46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertArrayEquals(byteArray49, new byte[] {});
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "" + "'", charSequence51, "");
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "" + "'", charSequence52, "");
        org.junit.Assert.assertNotNull(cSVParser53);
        org.junit.Assert.assertNotNull(openOptionArray54);
        org.junit.Assert.assertArrayEquals(openOptionArray54, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertTrue("'" + predefined56 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined56.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str58, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(cSVParser61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(charset63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 8192 + "'", int64 == 8192);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertArrayEquals(byteArray69, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(charset81);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\n" + "'", str84, "\n");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(cSVFormat86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "\n" + "'", str88, "\n");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "\n" + "'", str93, "\n");
        org.junit.Assert.assertNotNull(cSVParser94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0953");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder2.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setBufferSizeMax((int) (byte) -1);
        java.nio.charset.Charset charset6 = builder5.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder5.setBufferSizeMax(0);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVPrinter cSVPrinter10 = cSVFormat9.printer();
        boolean boolean11 = cSVFormat9.getTrim();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder5.setFormat(cSVFormat9);
        java.io.RandomAccessFile randomAccessFile13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setRandomAccessFile(randomAccessFile13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(cSVPrinter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0954");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier13 = builder0.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder17 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset18 = builder17.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder14.setCharset(charset18);
        java.nio.charset.Charset charset20 = builder14.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder0.setCharset(charset20);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder0.setFile("");
        int int24 = builder23.getBufferSize();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVParserSupplier13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8192 + "'", int24 == 8192);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0955");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF;
        boolean boolean1 = cSVFormat0.getIgnoreEmptyLines();
        boolean boolean2 = cSVFormat0.isCommentMarkerSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0956");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        org.apache.commons.csv.QuoteMode quoteMode2 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean4 = cSVFormat3.isNullStringSet();
        java.lang.String[] strArray5 = cSVFormat3.getHeaderComments();
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        byte[] byteArray8 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder9 = builder6.setByteArray(byteArray8);
        java.nio.charset.Charset charset10 = builder6.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder6.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder13 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset14 = builder13.getCharsetDefault();
        int int15 = builder13.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder17 = builder13.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder21 = builder13.setByteArray(byteArray20);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder13.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder25 = builder13.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder13.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder29 = builder27.setCharacterOffset((long) '#');
        java.io.File file30 = builder29.getFile();
        org.apache.commons.csv.CSVParser.Builder builder31 = builder12.setFile(file30);
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setFile(",");
        java.io.Reader reader34 = null; // flaky "11) test0956(org.apache.commons.csv.randoop.RegressionTest1)": builder31.getReader();
        org.apache.commons.csv.CSVParser cSVParser35 = null; // flaky "11) test0956(org.apache.commons.csv.randoop.RegressionTest1)": cSVFormat3.parse(reader34);
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser38 = org.apache.commons.csv.CSVParser.parse("", cSVFormat37);
        java.lang.String str39 = cSVFormat37.getDelimiterString();
        java.lang.String[] strArray40 = cSVFormat37.getHeader();
        org.apache.commons.csv.CSVParser cSVParser41 = null; // flaky "11) test0956(org.apache.commons.csv.randoop.RegressionTest1)": org.apache.commons.csv.CSVParser.parse(reader34, cSVFormat37);
        org.apache.commons.csv.CSVParser cSVParser42 = null; // flaky "11) test0956(org.apache.commons.csv.randoop.RegressionTest1)": cSVFormat1.parse(reader34);
        java.lang.String str43 = null; // flaky "11) test0956(org.apache.commons.csv.randoop.RegressionTest1)": cSVParser42.getFirstEndOfLine();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList44 = null; // flaky "10) test0956(org.apache.commons.csv.randoop.RegressionTest1)": cSVParser42.getRecords();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(quoteMode2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertArrayEquals(byteArray8, new byte[] {});
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8192 + "'", int15 == 8192);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertArrayEquals(byteArray20, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertNull("file30.getParent() == null", file30.getParent());
        org.junit.Assert.assertEquals(file30.toString(), "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
// flaky "6) test0956(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(reader34);
// flaky "5) test0956(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser35);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVParser38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\t" + "'", str39, "\t");
        org.junit.Assert.assertNull(strArray40);
// flaky "4) test0956(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser41);
// flaky "3) test0956(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser42);
        org.junit.Assert.assertNull(str43);
// flaky "1) test0956(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVRecordList44);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0957");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        int int8 = builder6.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder14 = builder6.setByteArray(byteArray13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder6.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder18 = builder6.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder6.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset22 = builder21.getCharsetDefault();
        int int23 = builder21.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder21.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder29 = builder21.setByteArray(byteArray28);
        org.apache.commons.csv.CSVParser.Builder builder30 = builder20.setByteArray(byteArray28);
        java.nio.charset.Charset charset31 = builder20.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder0.setCharset(charset31);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder32.setBufferSize((java.lang.Integer) 0);
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean36 = cSVFormat35.isNullStringSet();
        java.lang.String[] strArray37 = cSVFormat35.getHeaderComments();
        org.apache.commons.csv.CSVParser.Builder builder38 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset39 = builder38.getCharsetDefault();
        byte[] byteArray40 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder41 = builder38.setByteArray(byteArray40);
        java.nio.charset.Charset charset42 = builder38.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder44 = builder38.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder45 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset46 = builder45.getCharsetDefault();
        int int47 = builder45.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder49 = builder45.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray52 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder53 = builder45.setByteArray(byteArray52);
        org.apache.commons.csv.CSVParser.Builder builder55 = builder45.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder57 = builder45.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder59 = builder45.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder61 = builder59.setCharacterOffset((long) '#');
        java.io.File file62 = builder61.getFile();
        org.apache.commons.csv.CSVParser.Builder builder63 = builder44.setFile(file62);
        org.apache.commons.csv.CSVParser.Builder builder65 = builder63.setFile(",");
        java.io.Reader reader66 = null; // flaky "12) test0957(org.apache.commons.csv.randoop.RegressionTest1)": builder63.getReader();
        org.apache.commons.csv.CSVParser cSVParser67 = null; // flaky "12) test0957(org.apache.commons.csv.randoop.RegressionTest1)": cSVFormat35.parse(reader66);
        org.apache.commons.csv.CSVFormat cSVFormat69 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser70 = org.apache.commons.csv.CSVParser.parse("", cSVFormat69);
        java.lang.String str71 = cSVFormat69.getDelimiterString();
        java.lang.String[] strArray72 = cSVFormat69.getHeader();
        org.apache.commons.csv.CSVParser cSVParser73 = null; // flaky "12) test0957(org.apache.commons.csv.randoop.RegressionTest1)": org.apache.commons.csv.CSVParser.parse(reader66, cSVFormat69);
        org.apache.commons.csv.CSVParser.Builder builder74 = null; // flaky "12) test0957(org.apache.commons.csv.randoop.RegressionTest1)": builder34.setReader(reader66);
        java.io.OutputStream outputStream75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder76 = builder34.setOutputStream(outputStream75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertArrayEquals(byteArray13, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8192 + "'", int23 == 8192);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertArrayEquals(byteArray28, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(strArray37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertArrayEquals(byteArray40, new byte[] {});
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8192 + "'", int47 == 8192);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertArrayEquals(byteArray52, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(file62);
        org.junit.Assert.assertNull("file62.getParent() == null", file62.getParent());
        org.junit.Assert.assertEquals(file62.toString(), "");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
// flaky "12) test0957(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(reader66);
// flaky "11) test0957(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVParser70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\t" + "'", str71, "\t");
        org.junit.Assert.assertNull(strArray72);
// flaky "7) test0957(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser73);
// flaky "6) test0957(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0958");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        boolean boolean1 = cSVFormat0.getAllowMissingColumnNames();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0959");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        boolean boolean2 = cSVFormat0.getLenientEof();
        java.lang.String str3 = cSVFormat0.getNullString();
        org.apache.commons.csv.QuoteMode quoteMode4 = cSVFormat0.getQuoteMode();
        boolean boolean5 = cSVFormat0.getAllowMissingColumnNames();
        boolean boolean6 = cSVFormat0.getAutoFlush();
        java.lang.Appendable appendable7 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat0.println(appendable7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(quoteMode4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0960");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setDelimiter('a');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setTrim(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode12 = cSVFormat11.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder10.setDuplicateHeaderMode(duplicateHeaderMode12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean19 = cSVFormat18.getSkipHeaderRecord();
        java.lang.String str20 = cSVFormat18.getRecordSeparator();
        boolean boolean21 = cSVFormat18.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder22 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat18);
        boolean boolean23 = cSVFormat18.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat.Builder builder24 = cSVFormat18.builder();
        org.apache.commons.csv.CSVFormat cSVFormat26 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        org.apache.commons.csv.QuoteMode quoteMode27 = cSVFormat26.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean29 = cSVFormat28.getSkipHeaderRecord();
        java.lang.String str30 = cSVFormat28.getRecordSeparator();
        boolean boolean31 = cSVFormat28.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder32 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat28);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder32.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode35 = null;
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setQuoteMode(quoteMode35);
        java.lang.String[] strArray40 = new java.lang.String[] { "\r\n", "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]", "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder36.setHeader(strArray40);
        java.lang.String str42 = cSVFormat26.format((java.lang.Object[]) strArray40);
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder24.setHeaderComments(strArray40);
        java.lang.String str44 = cSVFormat17.format((java.lang.Object[]) strArray40);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder13.setHeaderComments(strArray40);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode12 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode12.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\n" + "'", str20, "\n");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNull(quoteMode27);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\n" + "'", str30, "\n");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertArrayEquals(strArray40, new java.lang.String[] { "\r\n", "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]", "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" });
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\r\n\"Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]\"Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str42, "\r\n\"Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]\"Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\r\n#Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]#Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str44, "\r\n#Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]#Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0961");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        java.util.function.IntUnaryOperator intUnaryOperator13 = null;
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setBufferSizeChecker(intUnaryOperator13);
        org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder17 = cSVFormat16.builder();
        java.lang.String str18 = cSVFormat16.getNullString();
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        boolean boolean22 = cSVFormat21.getAutoFlush();
        boolean boolean23 = cSVFormat21.getTrim();
        org.apache.commons.csv.CSVParser cSVParser24 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat21);
        boolean boolean25 = cSVParser24.hasTrailerComment();
        java.lang.String str26 = cSVParser24.getHeaderComment();
        long long27 = cSVParser24.getCurrentLineNumber();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator28 = cSVParser24.spliterator();
        boolean boolean29 = cSVFormat16.equals((java.lang.Object) cSVParser24);
        org.apache.commons.csv.CSVParser.Builder builder30 = builder12.setFormat(cSVFormat16);
        org.apache.commons.csv.CSVParser.Builder builder32 = builder12.setRecordNumber((long) 'a');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(cSVParser24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0962");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Builder builder2 = cSVFormat0.builder();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0963");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        boolean boolean2 = cSVFormat0.getLenientEof();
        java.lang.String str3 = cSVFormat0.getNullString();
        boolean boolean4 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder5 = cSVFormat0.builder();
        boolean boolean6 = cSVFormat0.getAutoFlush();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0964");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        boolean boolean3 = cSVFormat1.getIgnoreHeaderCase();
        java.lang.Appendable appendable4 = null;
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset6 = builder5.getCharsetDefault();
        int int7 = builder5.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder9 = builder5.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray12 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder13 = builder5.setByteArray(byteArray12);
        org.apache.commons.csv.CSVParser.Builder builder15 = builder5.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder17 = builder5.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder5.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset21 = builder20.getCharsetDefault();
        int int22 = builder20.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder20.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray27 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder28 = builder20.setByteArray(byteArray27);
        org.apache.commons.csv.CSVParser.Builder builder29 = builder19.setByteArray(byteArray27);
        java.nio.charset.Charset charset30 = builder19.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder19.setBufferSize((java.lang.Integer) 8192);
        java.nio.file.OpenOption[] openOptionArray33 = builder32.getOpenOptions();
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat1.printRecord(appendable4, (java.lang.Object[]) openOptionArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8192 + "'", int7 == 8192);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertArrayEquals(byteArray12, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8192 + "'", int22 == 8192);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertArrayEquals(byteArray27, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(openOptionArray33);
        org.junit.Assert.assertArrayEquals(openOptionArray33, new java.nio.file.OpenOption[] {});
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0965");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        boolean boolean5 = cSVFormat0.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat.Builder builder6 = cSVFormat0.builder();
        java.lang.String str7 = cSVFormat0.toString();
        boolean boolean8 = cSVFormat0.getAllowMissingColumnNames();
        java.lang.String[] strArray9 = cSVFormat0.getHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str7, "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strArray9);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0966");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder2 = cSVFormat1.builder();
        java.lang.String str3 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        boolean boolean7 = cSVFormat6.getAutoFlush();
        boolean boolean8 = cSVFormat6.getTrim();
        org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat6);
        boolean boolean10 = cSVParser9.hasTrailerComment();
        java.lang.String str11 = cSVParser9.getHeaderComment();
        long long12 = cSVParser9.getCurrentLineNumber();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator13 = cSVParser9.spliterator();
        boolean boolean14 = cSVFormat1.equals((java.lang.Object) cSVParser9);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator15 = cSVParser9.spliterator();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVParser9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator15);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0967");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setRecordNumber((long) (short) 10);
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        java.lang.String str13 = cSVFormat12.toString();
        boolean boolean14 = cSVFormat12.isEscapeCharacterSet();
        boolean boolean15 = cSVFormat12.isQuoteCharacterSet();
        org.apache.commons.csv.CSVParser.Builder builder16 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset17 = builder16.getCharsetDefault();
        byte[] byteArray18 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder19 = builder16.setByteArray(byteArray18);
        java.nio.charset.Charset charset20 = builder16.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder16.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset24 = builder23.getCharsetDefault();
        int int25 = builder23.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder23.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder31 = builder23.setByteArray(byteArray30);
        org.apache.commons.csv.CSVParser.Builder builder33 = builder23.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder35 = builder23.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder37 = builder23.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder39 = builder37.setCharacterOffset((long) '#');
        java.io.File file40 = builder39.getFile();
        org.apache.commons.csv.CSVParser.Builder builder41 = builder22.setFile(file40);
        org.apache.commons.csv.CSVParser.Builder builder43 = builder41.setFile(",");
        java.io.Reader reader44 = null; // flaky "13) test0967(org.apache.commons.csv.randoop.RegressionTest1)": builder41.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat45 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean46 = cSVFormat45.getSkipHeaderRecord();
        java.lang.String str47 = cSVFormat45.getRecordSeparator();
        boolean boolean48 = cSVFormat45.isNullStringSet();
        boolean boolean49 = cSVFormat45.isCommentMarkerSet();
        org.apache.commons.csv.CSVParser cSVParser50 = null; // flaky "13) test0967(org.apache.commons.csv.randoop.RegressionTest1)": org.apache.commons.csv.CSVParser.parse(reader44, cSVFormat45);
        org.apache.commons.csv.CSVParser cSVParser51 = null; // flaky "13) test0967(org.apache.commons.csv.randoop.RegressionTest1)": cSVFormat12.parse(reader44);
        org.apache.commons.csv.CSVParser.Builder builder52 = null; // flaky "13) test0967(org.apache.commons.csv.randoop.RegressionTest1)": builder10.setReader(reader44);
        org.apache.commons.csv.CSVFormat cSVFormat53 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        org.apache.commons.csv.CSVParser.Builder builder54 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset55 = builder54.getCharsetDefault();
        byte[] byteArray56 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder57 = builder54.setByteArray(byteArray56);
        java.lang.CharSequence charSequence58 = builder54.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder60 = builder54.setBufferSize((int) ' ');
        java.io.Reader reader61 = builder60.getReader();
        org.apache.commons.csv.CSVParser cSVParser62 = cSVFormat53.parse(reader61);
        org.apache.commons.csv.CSVParser cSVParser63 = null; // flaky "13) test0967(org.apache.commons.csv.randoop.RegressionTest1)": org.apache.commons.csv.CSVParser.parse(reader44, cSVFormat53);
        java.lang.Appendable appendable64 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat53.println(appendable64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str13, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] {});
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8192 + "'", int25 == 8192);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertArrayEquals(byteArray30, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(file40);
        org.junit.Assert.assertNull("file40.getParent() == null", file40.getParent());
        org.junit.Assert.assertEquals(file40.toString(), "");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
// flaky "12) test0967(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(reader44);
        org.junit.Assert.assertNotNull(cSVFormat45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\n" + "'", str47, "\n");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky "8) test0967(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser50);
// flaky "7) test0967(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser51);
// flaky "5) test0967(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(cSVFormat53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertArrayEquals(byteArray56, new byte[] {});
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals("'" + charSequence58 + "' != '" + "" + "'", charSequence58, "");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(reader61);
        org.junit.Assert.assertNotNull(cSVParser62);
// flaky "4) test0967(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser63);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0968");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getAutoFlush();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        byte[] byteArray5 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder6 = builder3.setByteArray(byteArray5);
        org.apache.commons.csv.CSVParser.Builder builder8 = builder3.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset10 = builder9.getCharsetDefault();
        int int11 = builder9.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder9.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder17 = builder9.setByteArray(byteArray16);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder9.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder21 = builder9.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder9.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder24 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset25 = builder24.getCharsetDefault();
        int int26 = builder24.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder28 = builder24.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray31 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder32 = builder24.setByteArray(byteArray31);
        org.apache.commons.csv.CSVParser.Builder builder33 = builder23.setByteArray(byteArray31);
        java.nio.charset.Charset charset34 = builder23.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder3.setCharset(charset34);
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setBufferSize((java.lang.Integer) 0);
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean39 = cSVFormat38.isNullStringSet();
        java.lang.String[] strArray40 = cSVFormat38.getHeaderComments();
        org.apache.commons.csv.CSVParser.Builder builder41 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset42 = builder41.getCharsetDefault();
        byte[] byteArray43 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder44 = builder41.setByteArray(byteArray43);
        java.nio.charset.Charset charset45 = builder41.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder47 = builder41.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder48 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset49 = builder48.getCharsetDefault();
        int int50 = builder48.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder52 = builder48.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray55 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder56 = builder48.setByteArray(byteArray55);
        org.apache.commons.csv.CSVParser.Builder builder58 = builder48.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder60 = builder48.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder62 = builder48.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder64 = builder62.setCharacterOffset((long) '#');
        java.io.File file65 = builder64.getFile();
        org.apache.commons.csv.CSVParser.Builder builder66 = builder47.setFile(file65);
        org.apache.commons.csv.CSVParser.Builder builder68 = builder66.setFile(",");
        java.io.Reader reader69 = null; // flaky "14) test0968(org.apache.commons.csv.randoop.RegressionTest1)": builder66.getReader();
        org.apache.commons.csv.CSVParser cSVParser70 = null; // flaky "14) test0968(org.apache.commons.csv.randoop.RegressionTest1)": cSVFormat38.parse(reader69);
        org.apache.commons.csv.CSVFormat cSVFormat72 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser73 = org.apache.commons.csv.CSVParser.parse("", cSVFormat72);
        java.lang.String str74 = cSVFormat72.getDelimiterString();
        java.lang.String[] strArray75 = cSVFormat72.getHeader();
        org.apache.commons.csv.CSVParser cSVParser76 = null; // flaky "14) test0968(org.apache.commons.csv.randoop.RegressionTest1)": org.apache.commons.csv.CSVParser.parse(reader69, cSVFormat72);
        org.apache.commons.csv.CSVParser.Builder builder77 = null; // flaky "14) test0968(org.apache.commons.csv.randoop.RegressionTest1)": builder37.setReader(reader69);
        org.apache.commons.csv.CSVParser cSVParser78 = null; // flaky "14) test0968(org.apache.commons.csv.randoop.RegressionTest1)": cSVFormat1.parse(reader69);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator79 = null; // flaky "13) test0968(org.apache.commons.csv.randoop.RegressionTest1)": cSVParser78.spliterator();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList80 = null; // flaky "9) test0968(org.apache.commons.csv.randoop.RegressionTest1)": cSVParser78.getRecords();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertArrayEquals(byteArray5, new byte[] {});
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8192 + "'", int11 == 8192);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertArrayEquals(byteArray16, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8192 + "'", int26 == 8192);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertArrayEquals(byteArray31, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(strArray40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertArrayEquals(byteArray43, new byte[] {});
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8192 + "'", int50 == 8192);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertArrayEquals(byteArray55, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(file65);
        org.junit.Assert.assertNull("file65.getParent() == null", file65.getParent());
        org.junit.Assert.assertEquals(file65.toString(), "");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
// flaky "8) test0968(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(reader69);
// flaky "6) test0968(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser70);
        org.junit.Assert.assertNotNull(cSVFormat72);
        org.junit.Assert.assertNotNull(cSVParser73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\t" + "'", str74, "\t");
        org.junit.Assert.assertNull(strArray75);
// flaky "5) test0968(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser76);
// flaky "2) test0968(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(builder77);
// flaky "1) test0968(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVParser78);
// flaky "1) test0968(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVRecordSpliterator79);
// flaky "1) test0968(org.apache.commons.csv.randoop.RegressionTest1)":         org.junit.Assert.assertNotNull(cSVRecordList80);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0969");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setEscape('\"');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setTrim(true);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean20 = cSVFormat19.getSkipHeaderRecord();
        java.lang.String str21 = cSVFormat19.getRecordSeparator();
        boolean boolean22 = cSVFormat19.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder23 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat19);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode26 = null;
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setQuoteMode(quoteMode26);
        java.lang.String[] strArray31 = new java.lang.String[] { "\r\n", "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]", "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder27.setHeader(strArray31);
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder16.setHeaderComments(strArray31);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\n" + "'", str21, "\n");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertArrayEquals(strArray31, new java.lang.String[] { "\r\n", "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]", "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" });
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0970");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getIgnoreHeaderCase();
        java.lang.String str4 = cSVFormat2.getDelimiterString();
        boolean boolean5 = cSVFormat2.isQuoteCharacterSet();
        org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse(",", cSVFormat2);
        boolean boolean7 = cSVParser6.hasHeaderComment();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser6.getRecords();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVRecordList8.spliterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "," + "'", str4, ",");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVParser6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVRecordList8);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator9);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0971");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setEscape('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        boolean boolean25 = cSVFormat24.getIgnoreHeaderCase();
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str31 = cSVFormat24.format(objArray30);
        java.lang.String str32 = cSVFormat24.getRecordSeparator();
        boolean boolean33 = cSVFormat24.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode34 = cSVFormat24.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder22.setQuoteMode(quoteMode34);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder22.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder22.setIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat cSVFormat40 = builder22.get();
        boolean boolean41 = cSVFormat40.getTrailingData();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str31, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\r\n" + "'", str32, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + quoteMode34 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode34.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0972");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.Character char3 = cSVFormat0.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder4 = cSVFormat0.builder();
        boolean boolean5 = cSVFormat0.getLenientEof();
        boolean boolean6 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0973");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isNullStringSet();
        boolean boolean2 = cSVFormat0.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat.Builder builder3 = cSVFormat0.builder();
        boolean boolean4 = cSVFormat0.isQuoteCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0974");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean5 = cSVFormat4.getSkipHeaderRecord();
        java.lang.String str6 = cSVFormat4.getRecordSeparator();
        boolean boolean7 = cSVFormat4.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder8 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat4);
        boolean boolean9 = cSVFormat0.equals((java.lang.Object) cSVFormat4);
        java.lang.Character char10 = cSVFormat4.getCommentMarker();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode11 = cSVFormat4.getDuplicateHeaderMode();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(char10);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode11 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode11.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0975");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        boolean boolean4 = cSVFormat0.isNullStringSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        boolean boolean8 = cSVFormat7.getAutoFlush();
        boolean boolean9 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat7);
        java.lang.String str11 = cSVParser10.getHeaderComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream12 = cSVParser10.stream();
        boolean boolean13 = cSVFormat0.equals((java.lang.Object) cSVParser10);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator14 = cSVParser10.spliterator();
        boolean boolean15 = cSVParser10.hasTrailerComment();
        long long16 = cSVParser10.getCurrentLineNumber();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVRecordStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0976");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setCharacterOffset((long) (byte) 1);
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 100, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder19 = builder14.setByteArray(byteArray18);
        org.apache.commons.csv.CSVParser cSVParser20 = builder19.get();
        java.lang.String str21 = cSVParser20.getTrailerComment();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] { (byte) -1, (byte) 100, (byte) 1 });
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(cSVParser20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0977");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean5 = cSVFormat4.getSkipHeaderRecord();
        java.lang.String str6 = cSVFormat4.getRecordSeparator();
        boolean boolean7 = cSVFormat4.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder8 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat4);
        boolean boolean9 = cSVFormat0.equals((java.lang.Object) cSVFormat4);
        org.apache.commons.csv.CSVFormat.Builder builder10 = cSVFormat4.builder();
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setRecordSeparator(' ');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setTrailingData(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0978");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 100);
        java.util.function.IntUnaryOperator intUnaryOperator9 = null;
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setBufferSizeChecker(intUnaryOperator9);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset12 = builder11.getCharsetDefault();
        int int13 = builder11.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder11.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder19 = builder11.setByteArray(byteArray18);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder10.setByteArray(byteArray18);
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset22 = builder21.getCharsetDefault();
        byte[] byteArray23 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder24 = builder21.setByteArray(byteArray23);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier25 = builder21.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder26 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset27 = builder26.getCharsetDefault();
        byte[] byteArray28 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder29 = builder26.setByteArray(byteArray28);
        java.lang.CharSequence charSequence30 = builder26.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder26.setBufferSize((int) ' ');
        java.io.InputStream inputStream33 = builder32.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder34 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset35 = builder34.getCharsetDefault();
        byte[] byteArray36 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder37 = builder34.setByteArray(byteArray36);
        java.nio.charset.Charset charset38 = builder34.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder41 = cSVFormat40.builder();
        java.lang.String str42 = cSVFormat40.getNullString();
        org.apache.commons.csv.CSVParser cSVParser43 = org.apache.commons.csv.CSVParser.parse(inputStream33, charset38, cSVFormat40);
        org.apache.commons.csv.CSVParser.Builder builder44 = builder21.setInputStream(inputStream33);
        org.apache.commons.csv.CSVParser.Builder builder45 = builder10.setInputStream(inputStream33);
        org.apache.commons.csv.CSVParser.Builder builder47 = builder10.setCharSequence((java.lang.CharSequence) "a");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8192 + "'", int13 == 8192);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertArrayEquals(byteArray23, new byte[] {});
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(cSVParserSupplier25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertArrayEquals(byteArray28, new byte[] {});
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "" + "'", charSequence30, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertArrayEquals(byteArray36, new byte[] {});
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(cSVParser43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0979");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSizeMax(8192);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setCharSequence((java.lang.CharSequence) "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        java.lang.CharSequence charSequence8 = builder7.getCharSequence();
        java.nio.charset.Charset charset9 = builder7.getCharsetDefault();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", charSequence8, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(charset9);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0980");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVParser5.hasTrailerComment();
        java.lang.String str7 = cSVParser5.getHeaderComment();
        java.util.List<java.lang.String> strList8 = cSVParser5.getHeaderNames();
        cSVParser5.close();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0981");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.lang.String str6 = cSVParser5.getHeaderComment();
        java.lang.String str7 = cSVParser5.getTrailerComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream8 = cSVParser5.stream();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(cSVRecordStream8);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0982");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean2 = cSVFormat1.isNullStringSet();
        org.apache.commons.csv.CSVPrinter cSVPrinter3 = cSVFormat1.printer();
        org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse(",", cSVFormat1);
        boolean boolean5 = cSVFormat1.isQuoteCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVPrinter3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0983");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MONGODB_TSV;
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode1 = cSVFormat0.getDuplicateHeaderMode();
        boolean boolean2 = cSVFormat0.isCommentMarkerSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode1 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode1.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0984");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser5.iterator();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser5.getHeaderMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = cSVParser5.getHeaderMap();
        boolean boolean9 = cSVParser5.hasTrailerComment();
        boolean boolean10 = cSVParser5.isClosed();
        boolean boolean11 = cSVParser5.hasHeaderComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0985");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter4 = cSVFormat0.printer();
        boolean boolean5 = cSVFormat0.getIgnoreHeaderCase();
        boolean boolean6 = cSVFormat0.isQuoteCharacterSet();
        boolean boolean7 = cSVFormat0.getIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(cSVPrinter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0986");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setBufferSize((int) 'a');
        org.apache.commons.csv.CSVParser cSVParser8 = builder0.get();
        boolean boolean9 = cSVParser8.hasHeaderComment();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(cSVParser8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0987");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setTrailingData(true);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder22.setAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder22.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder22.setCommentMarker('\"');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0988");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        java.lang.String str3 = cSVFormat1.getDelimiterString();
        java.lang.String[] strArray4 = cSVFormat1.getHeader();
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean6 = cSVFormat5.getSkipHeaderRecord();
        java.lang.String str7 = cSVFormat5.getRecordSeparator();
        boolean boolean8 = cSVFormat5.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder9 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat5);
        org.apache.commons.csv.QuoteMode quoteMode10 = null;
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setQuoteMode(quoteMode10);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder9.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean15 = cSVFormat14.getSkipHeaderRecord();
        java.lang.String str16 = cSVFormat14.getRecordSeparator();
        boolean boolean17 = cSVFormat14.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder18 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat14);
        org.apache.commons.csv.QuoteMode quoteMode19 = null;
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setQuoteMode(quoteMode19);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray29 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder18.setHeaderComments(strArray29);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder9.setHeaderComments(strArray29);
        java.lang.String str32 = cSVFormat1.format((java.lang.Object[]) strArray29);
        org.apache.commons.csv.CSVFormat.Builder builder33 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat1);
        boolean boolean34 = cSVFormat1.getTrailingDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVParser2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\t" + "'", str3, "\t");
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\n" + "'", str16, "\n");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertArrayEquals(strArray29, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"\t\thi!\t\"\r\n\"\t\t\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"" + "'", str32, "\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"\t\thi!\t\"\r\n\"\t\t\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0989");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.getLenientEof();
        java.lang.String[] strArray2 = cSVFormat0.getHeader();
        boolean boolean3 = cSVFormat0.getIgnoreEmptyLines();
        boolean boolean4 = cSVFormat0.getIgnoreEmptyLines();
        boolean boolean5 = cSVFormat0.getTrailingData();
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        byte[] byteArray8 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder9 = builder6.setByteArray(byteArray8);
        org.apache.commons.csv.CSVParser.Builder builder11 = builder6.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder13 = builder6.setBufferSize((int) 'a');
        java.nio.charset.Charset charset14 = builder13.getCharsetDefault();
        boolean boolean15 = cSVFormat0.equals((java.lang.Object) builder13);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder17 = builder13.setCharset("\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertArrayEquals(byteArray8, new byte[] {});
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0990");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVParser5.isClosed();
        java.lang.String str7 = cSVParser5.getFirstEndOfLine();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0991");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        boolean boolean5 = cSVFormat0.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat.Builder builder6 = cSVFormat0.builder();
        java.lang.Character char7 = cSVFormat0.getEscapeCharacter();
        boolean boolean8 = cSVFormat0.getIgnoreEmptyLines();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0992");
        java.net.URL uRL0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset2 = builder1.getCharsetDefault();
        int int3 = builder1.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder1.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        java.nio.file.OpenOption[] openOptionArray6 = builder1.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder1.setBufferSize((java.lang.Integer) (-1));
        java.nio.charset.Charset charset9 = builder1.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean11 = cSVFormat10.getSkipHeaderRecord();
        java.lang.String str12 = cSVFormat10.getRecordSeparator();
        boolean boolean13 = cSVFormat10.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder14 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat10);
        org.apache.commons.csv.QuoteMode quoteMode15 = null;
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setQuoteMode(quoteMode15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder14.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray25 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder14.setHeaderComments(strArray25);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder14.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder14.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat31 = builder14.get();
        java.lang.String str32 = cSVFormat31.toString();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode33 = cSVFormat31.getDuplicateHeaderMode();
        boolean boolean34 = cSVFormat31.getTrailingDelimiter();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse(uRL0, charset9, cSVFormat31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8192 + "'", int3 == 8192);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(openOptionArray6);
        org.junit.Assert.assertArrayEquals(openOptionArray6, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertArrayEquals(strArray25, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]" + "'", str32, "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode33 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode33.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0993");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.isCommentMarkerSet();
        java.lang.String str3 = cSVFormat1.getNullString();
        boolean boolean4 = cSVFormat1.getTrailingDelimiter();
        java.lang.Character char5 = cSVFormat1.getQuoteCharacter();
        java.lang.Character char6 = cSVFormat1.getEscapeCharacter();
        org.apache.commons.csv.QuoteMode quoteMode7 = cSVFormat1.getQuoteMode();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\"' + "'", char5 == '\"');
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\"' + "'", char6 == '\"');
        org.junit.Assert.assertTrue("'" + quoteMode7 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode7.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0994");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 100);
        java.util.function.IntUnaryOperator intUnaryOperator9 = null;
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setBufferSizeChecker(intUnaryOperator9);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset12 = builder11.getCharsetDefault();
        int int13 = builder11.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder11.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder19 = builder11.setByteArray(byteArray18);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder10.setByteArray(byteArray18);
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset22 = builder21.getCharsetDefault();
        byte[] byteArray23 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder24 = builder21.setByteArray(byteArray23);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier25 = builder21.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder26 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset27 = builder26.getCharsetDefault();
        byte[] byteArray28 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder29 = builder26.setByteArray(byteArray28);
        java.lang.CharSequence charSequence30 = builder26.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder26.setBufferSize((int) ' ');
        java.io.InputStream inputStream33 = builder32.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder34 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset35 = builder34.getCharsetDefault();
        byte[] byteArray36 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder37 = builder34.setByteArray(byteArray36);
        java.nio.charset.Charset charset38 = builder34.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder41 = cSVFormat40.builder();
        java.lang.String str42 = cSVFormat40.getNullString();
        org.apache.commons.csv.CSVParser cSVParser43 = org.apache.commons.csv.CSVParser.parse(inputStream33, charset38, cSVFormat40);
        org.apache.commons.csv.CSVParser.Builder builder44 = builder21.setInputStream(inputStream33);
        org.apache.commons.csv.CSVParser.Builder builder45 = builder10.setInputStream(inputStream33);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder47 = builder10.setCharset("\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\",\"\",\"hi!\",\"\r\n\",\"\",\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: \"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\"\"\",\"\",\"hi!\",\"??\",\"\",\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\"\"\"");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8192 + "'", int13 == 8192);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertArrayEquals(byteArray23, new byte[] {});
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(cSVParserSupplier25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertArrayEquals(byteArray28, new byte[] {});
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "" + "'", charSequence30, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertArrayEquals(byteArray36, new byte[] {});
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(cSVParser43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0995");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset2 = builder1.getCharsetDefault();
        byte[] byteArray3 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder4 = builder1.setByteArray(byteArray3);
        java.lang.CharSequence charSequence5 = builder1.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder1.setBufferSize((int) ' ');
        java.io.Reader reader8 = builder7.getReader();
        org.apache.commons.csv.CSVParser cSVParser9 = cSVFormat0.parse(reader8);
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        boolean boolean13 = cSVFormat12.getIgnoreHeaderCase();
        java.lang.String str14 = cSVFormat12.getDelimiterString();
        boolean boolean15 = cSVFormat12.isQuoteCharacterSet();
        org.apache.commons.csv.CSVParser cSVParser16 = org.apache.commons.csv.CSVParser.parse(",", cSVFormat12);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor17 = cSVParser16.iterator();
        boolean boolean18 = cSVFormat0.equals((java.lang.Object) cSVParser16);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertArrayEquals(byteArray3, new byte[] {});
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + charSequence5 + "' != '" + "" + "'", charSequence5, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(reader8);
        org.junit.Assert.assertNotNull(cSVParser9);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "," + "'", str14, ",");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(cSVParser16);
        org.junit.Assert.assertNotNull(cSVRecordItor17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0996");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        int int8 = builder6.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder14 = builder6.setByteArray(byteArray13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder6.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder18 = builder6.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder6.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset22 = builder21.getCharsetDefault();
        int int23 = builder21.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder21.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder29 = builder21.setByteArray(byteArray28);
        org.apache.commons.csv.CSVParser.Builder builder30 = builder20.setByteArray(byteArray28);
        java.nio.charset.Charset charset31 = builder20.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder0.setCharset(charset31);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder32.setBufferSizeMax((int) ' ');
        java.nio.charset.Charset charset35 = builder34.getCharset();
        org.apache.commons.io.IORandomAccessFile iORandomAccessFile36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder37 = builder34.setRandomAccessFile(iORandomAccessFile36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertArrayEquals(byteArray13, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8192 + "'", int23 == 8192);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertArrayEquals(byteArray28, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(charset35);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0997");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        java.lang.String str3 = cSVParser2.getFirstEndOfLine();
        long long4 = cSVParser2.getCurrentLineNumber();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor5 = cSVParser2.iterator();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser2.iterator();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser2.getRecords();
        cSVParser2.close();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVParser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordItor5);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertNotNull(cSVRecordList7);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0998");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset10 = builder9.getCharsetDefault();
        int int11 = builder9.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder9.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder17 = builder9.setByteArray(byteArray16);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder9.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder21 = builder9.setBufferSize((int) (byte) 0);
        java.nio.file.Path path22 = builder9.getPath();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder0.setPath(path22);
        org.apache.commons.csv.CSVParser.Builder builder24 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset25 = builder24.getCharsetDefault();
        int int26 = builder24.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder28 = builder24.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray31 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder32 = builder24.setByteArray(byteArray31);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder24.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder36 = builder24.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder38 = builder24.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder40 = builder38.setCharacterOffset((long) '#');
        java.io.File file41 = builder40.getFile();
        org.apache.commons.csv.CSVParser.Builder builder42 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset43 = builder42.getCharsetDefault();
        int int44 = builder42.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder46 = builder42.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray49 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder50 = builder42.setByteArray(byteArray49);
        org.apache.commons.csv.CSVParser.Builder builder52 = builder42.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder54 = builder42.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder56 = builder42.setCharacterOffset((long) (byte) 1);
        byte[] byteArray60 = new byte[] { (byte) -1, (byte) 100, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder61 = builder56.setByteArray(byteArray60);
        org.apache.commons.csv.CSVParser.Builder builder62 = builder40.setByteArray(byteArray60);
        org.apache.commons.csv.CSVParser.Builder builder63 = builder0.setByteArray(byteArray60);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8192 + "'", int11 == 8192);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertArrayEquals(byteArray16, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(path22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8192 + "'", int26 == 8192);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertArrayEquals(byteArray31, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(file41);
        org.junit.Assert.assertNull("file41.getParent() == null", file41.getParent());
        org.junit.Assert.assertEquals(file41.toString(), "");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8192 + "'", int44 == 8192);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertArrayEquals(byteArray49, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertArrayEquals(byteArray60, new byte[] { (byte) -1, (byte) 100, (byte) 1 });
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test0999");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        boolean boolean4 = cSVFormat0.isNullStringSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        boolean boolean8 = cSVFormat7.getAutoFlush();
        boolean boolean9 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat7);
        java.lang.String str11 = cSVParser10.getHeaderComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream12 = cSVParser10.stream();
        boolean boolean13 = cSVFormat0.equals((java.lang.Object) cSVParser10);
        boolean boolean14 = cSVFormat0.getLenientEof();
        boolean boolean15 = cSVFormat0.getAutoFlush();
        java.lang.String[] strArray16 = cSVFormat0.getHeaderComments();
        org.apache.commons.csv.CSVParser.Builder builder17 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset18 = builder17.getCharsetDefault();
        int int19 = builder17.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder17.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder25 = builder17.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder17.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder29 = builder17.setBufferSize((int) (byte) 0);
        java.util.function.IntUnaryOperator intUnaryOperator30 = null;
        org.apache.commons.csv.CSVParser.Builder builder31 = builder29.setBufferSizeChecker(intUnaryOperator30);
        java.nio.file.Path path32 = builder31.getPath();
        org.apache.commons.csv.CSVParser.Builder builder33 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset34 = builder33.getCharsetDefault();
        int int35 = builder33.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder37 = builder33.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder41 = builder33.setByteArray(byteArray40);
        org.apache.commons.csv.CSVParser.Builder builder43 = builder33.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder45 = builder33.setBufferSize((int) (byte) 0);
        java.nio.file.Path path46 = builder33.getPath();
        org.apache.commons.csv.CSVParser.Builder builder47 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset48 = builder47.getCharsetDefault();
        int int49 = builder47.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder51 = builder47.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray54 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder55 = builder47.setByteArray(byteArray54);
        org.apache.commons.csv.CSVParser.Builder builder57 = builder47.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder59 = builder47.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder61 = builder47.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder63 = builder61.setCharacterOffset((long) '#');
        java.io.File file64 = builder63.getFile();
        org.apache.commons.csv.CSVParser.Builder builder65 = builder33.setFile(file64);
        org.apache.commons.csv.CSVParser.Builder builder66 = builder31.setFile(file64);
        org.apache.commons.csv.CSVParser.Builder builder67 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset68 = builder67.getCharsetDefault();
        byte[] byteArray69 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder70 = builder67.setByteArray(byteArray69);
        java.lang.CharSequence charSequence71 = builder67.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder73 = builder67.setBufferSize((int) ' ');
        java.io.InputStream inputStream74 = builder73.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder75 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset76 = builder75.getCharsetDefault();
        byte[] byteArray77 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder78 = builder75.setByteArray(byteArray77);
        java.nio.charset.Charset charset79 = builder75.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat81 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder82 = cSVFormat81.builder();
        java.lang.String str83 = cSVFormat81.getNullString();
        org.apache.commons.csv.CSVParser cSVParser84 = org.apache.commons.csv.CSVParser.parse(inputStream74, charset79, cSVFormat81);
        org.apache.commons.csv.CSVParser.Builder builder85 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset86 = builder85.getCharsetDefault();
        byte[] byteArray87 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder88 = builder85.setByteArray(byteArray87);
        org.apache.commons.csv.CSVParser.Builder builder90 = builder85.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder92 = builder85.setBufferSize((int) 'a');
        java.nio.charset.Charset charset93 = builder92.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat95 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVParser cSVParser96 = org.apache.commons.csv.CSVParser.parse(inputStream74, charset93, cSVFormat95);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter97 = cSVFormat0.print(file64, charset93);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVRecordStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strArray16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8192 + "'", int19 == 8192);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(path32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8192 + "'", int35 == 8192);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertArrayEquals(byteArray40, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(path46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8192 + "'", int49 == 8192);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertArrayEquals(byteArray54, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(file64);
        org.junit.Assert.assertNull("file64.getParent() == null", file64.getParent());
        org.junit.Assert.assertEquals(file64.toString(), "");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(charset68);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertArrayEquals(byteArray69, new byte[] {});
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertEquals("'" + charSequence71 + "' != '" + "" + "'", charSequence71, "");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(inputStream74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(charset76);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertArrayEquals(byteArray77, new byte[] {});
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(charset79);
        org.junit.Assert.assertNotNull(cSVFormat81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(cSVParser84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(charset86);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertArrayEquals(byteArray87, new byte[] {});
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(charset93);
        org.junit.Assert.assertNotNull(cSVFormat95);
        org.junit.Assert.assertNotNull(cSVParser96);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest1.test1000");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder6.setQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setRecordSeparator(' ');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }
}
