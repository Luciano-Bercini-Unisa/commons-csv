package org.apache.commons.csv.randoop;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    public void assertBooleanArrayEquals(boolean[] expectedArray, boolean[] actualArray) {
        if (expectedArray.length != actualArray.length) {
            throw new AssertionError("Array lengths differ: " + expectedArray.length + " != " + actualArray.length);
        }
        for (int i = 0; i < expectedArray.length; i++) {
            if (expectedArray[i] != actualArray[i]) {
                throw new AssertionError("Arrays differ at index " + i + ": " + expectedArray[i] + " != " + actualArray[i]);
            }
        }
    }

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1001");
        org.apache.commons.csv.CSVFormat cSVFormat1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("\r\n#Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]#Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false", cSVFormat1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: format");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1002");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setEscape('\"');
        org.apache.commons.csv.CSVFormat cSVFormat9 = builder4.get();
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder4.setNullString("Delimiter=<,> Escape=<#> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1003");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        boolean boolean4 = cSVFormat0.isNullStringSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        boolean boolean8 = cSVFormat7.getAutoFlush();
        boolean boolean9 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat7);
        java.lang.String str11 = cSVParser10.getHeaderComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream12 = cSVParser10.stream();
        boolean boolean13 = cSVFormat0.equals((java.lang.Object) cSVParser10);
        boolean boolean14 = cSVParser10.isClosed();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor15 = cSVParser10.iterator();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVRecordStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(cSVRecordItor15);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1004");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser cSVParser4 = builder0.getUnchecked();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVParser4);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1005");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        java.nio.charset.Charset charset9 = builder0.getCharset();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1, (byte) 0, (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder17 = builder0.setByteArray(byteArray16);
        java.io.InputStream inputStream18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setInputStream(inputStream18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertArrayEquals(byteArray16, new byte[] { (byte) 1, (byte) 10, (byte) 1, (byte) 0, (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1006");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setEscape('\"');
        java.sql.ResultSet resultSet9 = null;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setHeader(resultSet9);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setQuote('\"');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1007");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder0.setEscape((java.lang.Character) 'a');
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder0.setHeader(resultSet5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = builder6.get();
        java.lang.Character char8 = cSVFormat7.getCommentMarker();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + char8 + "' != '" + ' ' + "'", char8 == ' ');
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1008");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        boolean boolean4 = cSVFormat3.getIgnoreHeaderCase();
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str10 = cSVFormat3.format(objArray9);
        java.lang.String str11 = cSVFormat0.format(objArray9);
        boolean boolean12 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode13 = cSVFormat0.getQuoteMode();
        boolean boolean14 = cSVFormat0.getTrim();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str10, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str11, "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + quoteMode13 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode13.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1009");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        boolean boolean3 = cSVFormat1.isEscapeCharacterSet();
        boolean boolean4 = cSVFormat1.getIgnoreHeaderCase();
        org.apache.commons.csv.QuoteMode quoteMode5 = cSVFormat1.getQuoteMode();
        java.lang.String str6 = cSVFormat1.getNullString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + quoteMode5 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode5.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1010");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.valueOf("\r\n#Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]#Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No enum constant org.apache.commons.csv.CSVFormat.Predefined.??#Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<?> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, ??, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<??> EmptyLines:ignored SkipHeaderRecord:false\"]#Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<?> SkipHeaderRecord:false");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1011");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser5.iterator();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser5.getHeaderMap();
        boolean boolean8 = cSVParser5.hasTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1012");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset10 = builder9.getCharsetDefault();
        int int11 = builder9.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder9.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder17 = builder9.setByteArray(byteArray16);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder9.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder21 = builder9.setBufferSize((int) (byte) 0);
        java.nio.file.Path path22 = builder9.getPath();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder0.setPath(path22);
        org.apache.commons.csv.CSVParser.Builder builder25 = builder23.setCharacterOffset((long) '4');
        org.apache.commons.csv.CSVParser.Builder builder27 = builder23.setBufferSize((java.lang.Integer) 1);
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset29 = builder28.getCharsetDefault();
        int int30 = builder28.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder28.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray35 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder36 = builder28.setByteArray(byteArray35);
        org.apache.commons.csv.CSVParser.Builder builder38 = builder28.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder40 = builder28.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder42 = builder28.setCharacterOffset((long) (byte) 1);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 100, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder47 = builder42.setByteArray(byteArray46);
        java.io.InputStream inputStream48 = builder47.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder49 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset50 = builder49.getCharsetDefault();
        byte[] byteArray51 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder52 = builder49.setByteArray(byteArray51);
        java.lang.CharSequence charSequence53 = builder49.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder55 = builder49.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder56 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset57 = builder56.getCharsetDefault();
        byte[] byteArray58 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder59 = builder56.setByteArray(byteArray58);
        java.lang.CharSequence charSequence60 = builder56.getCharSequence();
        java.lang.CharSequence charSequence61 = builder56.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser62 = builder56.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray63 = builder56.getOpenOptions();
        java.nio.charset.Charset charset64 = builder56.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder65 = builder49.setCharset(charset64);
        java.io.InputStream inputStream66 = builder65.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder67 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset68 = builder67.getCharsetDefault();
        java.nio.charset.Charset charset69 = builder67.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat70 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean71 = cSVFormat70.getSkipHeaderRecord();
        java.lang.String str72 = cSVFormat70.getRecordSeparator();
        boolean boolean73 = cSVFormat70.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder74 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat70);
        org.apache.commons.csv.CSVParser cSVParser75 = org.apache.commons.csv.CSVParser.parse(inputStream66, charset69, cSVFormat70);
        org.apache.commons.csv.CSVFormat cSVFormat76 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean77 = cSVFormat76.getIgnoreHeaderCase();
        boolean boolean78 = cSVFormat76.getTrim();
        org.apache.commons.csv.CSVParser.Builder builder79 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset80 = builder79.getCharsetDefault();
        byte[] byteArray81 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder82 = builder79.setByteArray(byteArray81);
        boolean boolean83 = cSVFormat76.equals((java.lang.Object) builder79);
        org.apache.commons.csv.CSVParser cSVParser84 = org.apache.commons.csv.CSVParser.parse(inputStream48, charset69, cSVFormat76);
        org.apache.commons.csv.CSVParser.Builder builder85 = builder27.setInputStream(inputStream48);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8192 + "'", int11 == 8192);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertArrayEquals(byteArray16, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(path22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8192 + "'", int30 == 8192);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertArrayEquals(byteArray35, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertArrayEquals(byteArray46, new byte[] { (byte) -1, (byte) 100, (byte) 1 });
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(inputStream48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertArrayEquals(byteArray51, new byte[] {});
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertEquals("'" + charSequence53 + "' != '" + "" + "'", charSequence53, "");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(charset57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertArrayEquals(byteArray58, new byte[] {});
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "" + "'", charSequence60, "");
        org.junit.Assert.assertEquals("'" + charSequence61 + "' != '" + "" + "'", charSequence61, "");
        org.junit.Assert.assertNotNull(cSVParser62);
        org.junit.Assert.assertNotNull(openOptionArray63);
        org.junit.Assert.assertArrayEquals(openOptionArray63, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(inputStream66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(charset68);
        org.junit.Assert.assertNotNull(charset69);
        org.junit.Assert.assertNotNull(cSVFormat70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\n" + "'", str72, "\n");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(cSVParser75);
        org.junit.Assert.assertNotNull(cSVFormat76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(charset80);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertArrayEquals(byteArray81, new byte[] {});
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(cSVParser84);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1013");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        java.lang.String[] strArray11 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" };
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder4.setHeader(strArray11);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder4.setNullString("");
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean16 = cSVFormat15.getSkipHeaderRecord();
        java.lang.String str17 = cSVFormat15.getRecordSeparator();
        boolean boolean18 = cSVFormat15.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder19 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat15);
        org.apache.commons.csv.QuoteMode quoteMode20 = null;
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setQuoteMode(quoteMode20);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray30 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder19.setHeaderComments(strArray30);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder14.setHeader(strArray30);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder32.setEscape('a');
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setEscape('\"');
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder36.setEscape('a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertArrayEquals(strArray11, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" });
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\n" + "'", str17, "\n");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertArrayEquals(strArray30, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1014");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setBufferSize((int) 'a');
        org.apache.commons.csv.CSVParser cSVParser8 = builder0.get();
        java.io.InputStream inputStream9 = builder0.getInputStream();
        java.io.RandomAccessFile randomAccessFile10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder11 = builder0.setRandomAccessFile(randomAccessFile10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(cSVParser8);
        org.junit.Assert.assertNotNull(inputStream9);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1015");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean10 = cSVFormat9.getSkipHeaderRecord();
        java.lang.String str11 = cSVFormat9.getRecordSeparator();
        boolean boolean12 = cSVFormat9.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder13 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat9);
        org.apache.commons.csv.QuoteMode quoteMode14 = null;
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setQuoteMode(quoteMode14);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray24 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder13.setHeaderComments(strArray24);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder4.setHeaderComments(strArray24);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setRecordSeparator('4');
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setNullString("");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\n" + "'", str11, "\n");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertArrayEquals(strArray24, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1016");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder4.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat21 = builder4.get();
        java.lang.String str22 = cSVFormat21.toString();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode23 = cSVFormat21.getDuplicateHeaderMode();
        boolean boolean24 = cSVFormat21.getTrailingDelimiter();
        java.lang.Appendable appendable25 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat21.println(appendable25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]" + "'", str22, "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode23 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode23.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1017");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setFile("Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setPath("\r\n");
            org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException; message: Illegal char <?> at index 0: ??");
        } catch (java.nio.file.InvalidPathException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1018");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder0.setEscape((java.lang.Character) 'a');
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder0.setHeader(resultSet5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = builder6.get();
        org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean9 = cSVFormat8.getSkipHeaderRecord();
        java.lang.String str10 = cSVFormat8.getRecordSeparator();
        boolean boolean11 = cSVFormat8.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder12 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat8);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode15 = null;
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setQuoteMode(quoteMode15);
        java.lang.String[] strArray20 = new java.lang.String[] { "\r\n", "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]", "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder16.setHeader(strArray20);
        java.lang.String str22 = cSVFormat7.format((java.lang.Object[]) strArray20);
        boolean boolean23 = cSVFormat7.getAllowMissingColumnNames();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(cSVFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\n" + "'", str10, "\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertArrayEquals(strArray20, new java.lang.String[] { "\r\n", "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]", "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" });
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\"\r\n\",\"Delimiter=<,> Escaape=< > QuoteChaar=<a\"> NullString=<> RecordSepaaraator=<\n> SurroundingSpaaces:ignored SkipHeaaderRecord:faalse HeaaderComments:[100,a\"#a\",faalse,a\"Delimiter=<,> Escaape=<a\"a\"> QuoteChaar=<a\"a\"> QuoteMode=<MINIMAL> RecordSepaaraator=<\r\n> EmptyLines:ignored SkipHeaaderRecord:faalsea\", , hi!, \r\n, , 100,a\"#a\",faalse,a\"Delimiter=<,> Escaape=<a\"a\"> QuoteChaar=<a\"a\"> QuoteMode=<MINIMAL> RecordSepaaraator=<\r\n> EmptyLines:ignored SkipHeaaderRecord:faalsea\"]\",\"Delimiter=<,> QuoteChaar=<a\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSepaaraator=<\n> SkipHeaaderRecord:faalse\"" + "'", str22, "\"\r\n\",\"Delimiter=<,> Escaape=< > QuoteChaar=<a\"> NullString=<> RecordSepaaraator=<\n> SurroundingSpaaces:ignored SkipHeaaderRecord:faalse HeaaderComments:[100,a\"#a\",faalse,a\"Delimiter=<,> Escaape=<a\"a\"> QuoteChaar=<a\"a\"> QuoteMode=<MINIMAL> RecordSepaaraator=<\r\n> EmptyLines:ignored SkipHeaaderRecord:faalsea\", , hi!, \r\n, , 100,a\"#a\",faalse,a\"Delimiter=<,> Escaape=<a\"a\"> QuoteChaar=<a\"a\"> QuoteMode=<MINIMAL> RecordSepaaraator=<\r\n> EmptyLines:ignored SkipHeaaderRecord:faalsea\"]\",\"Delimiter=<,> QuoteChaar=<a\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSepaaraator=<\n> SkipHeaaderRecord:faalse\"");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1019");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setBufferSize((int) 'a');
        org.apache.commons.csv.CSVParser cSVParser8 = builder0.get();
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset10 = builder9.getCharsetDefault();
        int int11 = builder9.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder9.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser14 = builder9.getUnchecked();
        org.apache.commons.csv.CSVParser.Builder builder15 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset16 = builder15.getCharsetDefault();
        int int17 = builder15.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder15.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder23 = builder15.setByteArray(byteArray22);
        org.apache.commons.csv.CSVParser.Builder builder25 = builder15.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder27 = builder15.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder29 = builder15.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder31 = builder29.setCharacterOffset((long) '#');
        java.io.File file32 = builder31.getFile();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder9.setFile(file32);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder0.setFile(file32);
        // The following exception was thrown during execution in test generation
        try {
            java.io.RandomAccessFile randomAccessFile35 = builder34.getRandomAccessFile();
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(cSVParser8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8192 + "'", int11 == 8192);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(cSVParser14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8192 + "'", int17 == 8192);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertArrayEquals(byteArray22, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(file32);
        org.junit.Assert.assertNull("file32.getParent() == null", file32.getParent());
        org.junit.Assert.assertEquals(file32.toString(), "");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1020");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        boolean boolean3 = cSVFormat1.isEscapeCharacterSet();
        boolean boolean4 = cSVFormat1.isQuoteCharacterSet();
        java.lang.Character char5 = cSVFormat1.getCommentMarker();
        boolean boolean6 = cSVFormat1.getTrailingData();
        org.apache.commons.csv.CSVPrinter cSVPrinter7 = cSVFormat1.printer();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(char5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVPrinter7);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1021");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        java.nio.charset.Charset charset11 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset13 = builder12.getCharsetDefault();
        int int14 = builder12.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder12.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser17 = builder12.getUnchecked();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder12.setPath(",");
        java.nio.file.OpenOption[] openOptionArray20 = builder19.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder0.setOpenOptions(openOptionArray20);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier22 = builder21.asSupplier();
        int int23 = builder21.getBufferSize();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8192 + "'", int14 == 8192);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(cSVParser17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(openOptionArray20);
        org.junit.Assert.assertArrayEquals(openOptionArray20, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(cSVParserSupplier22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8192 + "'", int23 == 8192);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1022");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder6.setCommentMarker('#');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder6.setTrailingDelimiter(false);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder6.setTrailingData(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1023");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        boolean boolean2 = cSVFormat0.getLenientEof();
        boolean boolean3 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        boolean boolean8 = cSVFormat7.getIgnoreHeaderCase();
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str14 = cSVFormat7.format(objArray13);
        java.lang.String str15 = cSVFormat4.format(objArray13);
        java.lang.String str16 = cSVFormat0.format(objArray13);
        java.lang.String str17 = cSVFormat0.toString();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str14, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str15, "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str16, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false" + "'", str17, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1024");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.nio.charset.Charset charset4 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        int int9 = builder7.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder7.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder7.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder19 = builder7.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder7.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) '#');
        java.io.File file24 = builder23.getFile();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder6.setFile(file24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder6.setRecordNumber((long) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Reader reader28 = builder6.getReader();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1025");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setRecordNumber((long) '#');
        int int7 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset12 = builder11.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder8.setCharset(charset12);
        java.nio.charset.Charset charset14 = builder8.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder8.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder17 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset18 = builder17.getCharsetDefault();
        int int19 = builder17.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder17.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder25 = builder17.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder17.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder29 = builder17.setBufferSize((int) (byte) 0);
        java.nio.file.Path path30 = builder17.getPath();
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset32 = builder31.getCharsetDefault();
        int int33 = builder31.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder31.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray38 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder39 = builder31.setByteArray(byteArray38);
        org.apache.commons.csv.CSVParser.Builder builder41 = builder31.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder43 = builder31.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder45 = builder31.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder47 = builder45.setCharacterOffset((long) '#');
        java.io.File file48 = builder47.getFile();
        org.apache.commons.csv.CSVParser.Builder builder49 = builder17.setFile(file48);
        org.apache.commons.csv.CSVParser.Builder builder50 = builder16.setFile(file48);
        org.apache.commons.csv.CSVFormat cSVFormat51 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean52 = cSVFormat51.isNullStringSet();
        java.lang.String[] strArray53 = cSVFormat51.getHeaderComments();
        org.apache.commons.csv.CSVParser.Builder builder54 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset55 = builder54.getCharsetDefault();
        byte[] byteArray56 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder57 = builder54.setByteArray(byteArray56);
        java.nio.charset.Charset charset58 = builder54.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder60 = builder54.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder61 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset62 = builder61.getCharsetDefault();
        int int63 = builder61.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder65 = builder61.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray68 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder69 = builder61.setByteArray(byteArray68);
        org.apache.commons.csv.CSVParser.Builder builder71 = builder61.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder73 = builder61.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder75 = builder61.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder77 = builder75.setCharacterOffset((long) '#');
        java.io.File file78 = builder77.getFile();
        org.apache.commons.csv.CSVParser.Builder builder79 = builder60.setFile(file78);
        org.apache.commons.csv.CSVParser.Builder builder81 = builder79.setFile(",");
        java.io.Reader reader82 = null; // flaky "1) test1025(org.apache.commons.csv.randoop.RegressionTest2)": builder79.getReader();
        org.apache.commons.csv.CSVParser cSVParser83 = null; // flaky "1) test1025(org.apache.commons.csv.randoop.RegressionTest2)": cSVFormat51.parse(reader82);
        org.apache.commons.csv.CSVParser.Builder builder84 = null; // flaky "1) test1025(org.apache.commons.csv.randoop.RegressionTest2)": builder16.setReader(reader82);
        org.apache.commons.csv.CSVParser.Builder builder85 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset86 = builder85.getCharsetDefault();
        byte[] byteArray87 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder88 = builder85.setByteArray(byteArray87);
        org.apache.commons.csv.CSVParser.Builder builder89 = builder16.setByteArray(byteArray87);
        org.apache.commons.csv.CSVParser.Builder builder90 = builder0.setByteArray(byteArray87);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8192 + "'", int7 == 8192);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8192 + "'", int19 == 8192);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(path30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8192 + "'", int33 == 8192);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertArrayEquals(byteArray38, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertNull("file48.getParent() == null", file48.getParent());
        org.junit.Assert.assertEquals(file48.toString(), "");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(strArray53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertArrayEquals(byteArray56, new byte[] {});
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(charset62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 8192 + "'", int63 == 8192);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertArrayEquals(byteArray68, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(file78);
        org.junit.Assert.assertNull("file78.getParent() == null", file78.getParent());
        org.junit.Assert.assertEquals(file78.toString(), "");
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
// flaky "1) test1025(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(reader82);
// flaky "1) test1025(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(cSVParser83);
// flaky "1) test1025(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(charset86);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertArrayEquals(byteArray87, new byte[] {});
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1026");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        boolean boolean13 = cSVFormat12.getIgnoreHeaderCase();
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str19 = cSVFormat12.format(objArray18);
        java.lang.String str20 = cSVFormat12.getRecordSeparator();
        boolean boolean21 = cSVFormat12.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode22 = cSVFormat12.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder4.setQuoteMode(quoteMode22);
        org.apache.commons.csv.CSVFormat cSVFormat25 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        org.apache.commons.csv.QuoteMode quoteMode26 = cSVFormat25.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean28 = cSVFormat27.getSkipHeaderRecord();
        java.lang.String str29 = cSVFormat27.getRecordSeparator();
        boolean boolean30 = cSVFormat27.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder31 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat27);
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode34 = null;
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setQuoteMode(quoteMode34);
        java.lang.String[] strArray39 = new java.lang.String[] { "\r\n", "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]", "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder35.setHeader(strArray39);
        java.lang.String str41 = cSVFormat25.format((java.lang.Object[]) strArray39);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder4.setHeader(strArray39);
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder4.setAutoFlush(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str19, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\r\n" + "'", str20, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + quoteMode22 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode22.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(cSVFormat25);
        org.junit.Assert.assertNull(quoteMode26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\n" + "'", str29, "\n");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertArrayEquals(strArray39, new java.lang.String[] { "\r\n", "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]", "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" });
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\r\n\"Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]\"Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str41, "\r\n\"Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]\"Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1027");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean10 = cSVFormat9.getSkipHeaderRecord();
        java.lang.String str11 = cSVFormat9.getRecordSeparator();
        boolean boolean12 = cSVFormat9.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat9.printer();
        boolean boolean14 = cSVFormat9.getIgnoreHeaderCase();
        org.apache.commons.csv.QuoteMode quoteMode15 = cSVFormat9.getQuoteMode();
        org.apache.commons.csv.QuoteMode quoteMode16 = cSVFormat9.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder8.setQuoteMode(quoteMode16);
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder8.setQuote('a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\n" + "'", str11, "\n");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVPrinter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + quoteMode15 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode15.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertTrue("'" + quoteMode16 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode16.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1028");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        java.nio.file.Path path13 = builder0.getPath();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVPrinter cSVPrinter15 = cSVFormat14.printer();
        boolean boolean16 = cSVFormat14.getTrim();
        boolean boolean17 = cSVFormat14.isNullStringSet();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder0.setFormat(cSVFormat14);
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean21 = cSVFormat20.getSkipHeaderRecord();
        org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("\n", cSVFormat20);
        boolean boolean23 = cSVFormat14.equals((java.lang.Object) cSVFormat20);
        java.lang.String str24 = cSVFormat14.getRecordSeparator();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVPrinter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(cSVParser22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\n" + "'", str24, "\n");
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1029");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        java.lang.String str9 = cSVFormat7.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode10 = cSVFormat7.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder6.setDuplicateHeaderMode(duplicateHeaderMode10);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setEscape((java.lang.Character) ' ');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode10 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode10.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1030");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_TSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Appendable appendable2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter3 = cSVFormat1.print(appendable2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_TSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_TSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1031");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        boolean boolean13 = cSVFormat12.getIgnoreHeaderCase();
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str19 = cSVFormat12.format(objArray18);
        java.lang.String str20 = cSVFormat12.getRecordSeparator();
        boolean boolean21 = cSVFormat12.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode22 = cSVFormat12.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder4.setQuoteMode(quoteMode22);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder4.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat cSVFormat26 = builder25.get();
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder25.setIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder25.setSkipHeaderRecord(true);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder25.setIgnoreEmptyLines(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str19, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\r\n" + "'", str20, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + quoteMode22 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode22.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1032");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser5.iterator();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser5.getHeaderMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = cSVParser5.getHeaderMap();
        long long9 = cSVParser5.getRecordNumber();
        java.lang.String str10 = cSVParser5.getFirstEndOfLine();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1033");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setIgnoreSurroundingSpaces(false);
        java.sql.ResultSet resultSet11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setHeader(resultSet11);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setCommentMarker((java.lang.Character) '\"');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1034");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        boolean boolean2 = cSVFormat0.getLenientEof();
        java.lang.String str3 = cSVFormat0.getNullString();
        boolean boolean4 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder5 = cSVFormat0.builder();
        java.lang.Character char6 = cSVFormat0.getCommentMarker();
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        byte[] byteArray9 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder10 = builder7.setByteArray(byteArray9);
        java.nio.charset.Charset charset11 = builder7.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder7.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset15 = builder14.getCharsetDefault();
        int int16 = builder14.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder14.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder22 = builder14.setByteArray(byteArray21);
        org.apache.commons.csv.CSVParser.Builder builder24 = builder14.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder26 = builder14.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder28 = builder14.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setCharacterOffset((long) '#');
        java.io.File file31 = builder30.getFile();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder13.setFile(file31);
        org.apache.commons.csv.CSVParser.Builder builder33 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset34 = builder33.getCharsetDefault();
        byte[] byteArray35 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder36 = builder33.setByteArray(byteArray35);
        java.nio.charset.Charset charset37 = builder33.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter38 = cSVFormat0.print(file31, charset37);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(char6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8192 + "'", int16 == 8192);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertArrayEquals(byteArray21, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertNull("file31.getParent() == null", file31.getParent());
        org.junit.Assert.assertEquals(file31.toString(), "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertArrayEquals(byteArray35, new byte[] {});
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(charset37);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1035");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder18.setLenientEof(false);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder18.setAutoFlush(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1036");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        boolean boolean4 = cSVFormat3.getIgnoreHeaderCase();
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str10 = cSVFormat3.format(objArray9);
        java.lang.String str11 = cSVFormat0.format(objArray9);
        boolean boolean12 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode13 = cSVFormat0.getQuoteMode();
        boolean boolean14 = cSVFormat0.getTrailingData();
        boolean boolean15 = cSVFormat0.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined17 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat18 = predefined17.getFormat();
        boolean boolean19 = cSVFormat18.getAutoFlush();
        boolean boolean20 = cSVFormat18.getTrim();
        org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat18);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor22 = cSVParser21.iterator();
        boolean boolean23 = cSVParser21.isClosed();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList24 = cSVParser21.getRecords();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator25 = cSVParser21.spliterator();
        java.lang.String str26 = cSVParser21.getFirstEndOfLine();
        java.lang.Appendable appendable27 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat0.print((java.lang.Object) str26, appendable27, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str10, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str11, "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + quoteMode13 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode13.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + predefined17 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined17.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(cSVParser21);
        org.junit.Assert.assertNotNull(cSVRecordItor22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(cSVRecordList24);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator25);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1037");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        byte[] byteArray8 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder9 = builder6.setByteArray(byteArray8);
        org.apache.commons.csv.CSVParser.Builder builder11 = builder6.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder13 = builder6.setBufferSize((int) 'a');
        org.apache.commons.csv.CSVParser cSVParser14 = builder6.get();
        java.io.InputStream inputStream15 = builder6.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder5.setInputStream(inputStream15);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertArrayEquals(byteArray8, new byte[] {});
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(cSVParser14);
        org.junit.Assert.assertNotNull(inputStream15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1038");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        int int8 = builder6.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder14 = builder6.setByteArray(byteArray13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder6.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder18 = builder6.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder6.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset22 = builder21.getCharsetDefault();
        int int23 = builder21.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder21.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder29 = builder21.setByteArray(byteArray28);
        org.apache.commons.csv.CSVParser.Builder builder30 = builder20.setByteArray(byteArray28);
        java.nio.charset.Charset charset31 = builder20.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder0.setCharset(charset31);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder32.setBufferSizeMax((int) ' ');
        java.net.URI uRI35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder36 = builder32.setURI(uRI35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertArrayEquals(byteArray13, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8192 + "'", int23 == 8192);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertArrayEquals(byteArray28, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1039");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getIgnoreHeaderCase();
        java.lang.String str3 = cSVFormat1.getDelimiterString();
        boolean boolean4 = cSVFormat1.isQuoteCharacterSet();
        java.lang.Character char5 = cSVFormat1.getEscapeCharacter();
        java.lang.Appendable appendable6 = null;
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        int int9 = builder7.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser12 = builder7.getUnchecked();
        java.lang.CharSequence charSequence13 = builder7.getCharSequence();
        java.nio.file.OpenOption[] openOptionArray14 = builder7.getOpenOptions();
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat1.printRecord(appendable6, (java.lang.Object[]) openOptionArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "," + "'", str3, ",");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\"' + "'", char5 == '\"');
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(cSVParser12);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", charSequence13, "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertNotNull(openOptionArray14);
        org.junit.Assert.assertArrayEquals(openOptionArray14, new java.nio.file.OpenOption[] {});
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1040");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        // The following exception was thrown during execution in test generation
        try {
            java.io.Reader reader11 = builder10.getReader();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1041");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        java.lang.String str3 = cSVParser2.getFirstEndOfLine();
        java.lang.String str4 = cSVParser2.getTrailerComment();
        java.lang.String str5 = cSVParser2.getTrailerComment();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVParser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1042");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        boolean boolean2 = cSVFormat0.getLenientEof();
        java.lang.String str3 = cSVFormat0.getNullString();
        boolean boolean4 = cSVFormat0.getTrailingDelimiter();
        java.lang.Character char5 = cSVFormat0.getQuoteCharacter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '\"' + "'", char5 == '\"');
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1043");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setCharacterOffset((long) (byte) 1);
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 100, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder19 = builder14.setByteArray(byteArray18);
        java.io.InputStream inputStream20 = builder19.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset22 = builder21.getCharsetDefault();
        int int23 = builder21.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder21.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder29 = builder21.setByteArray(byteArray28);
        org.apache.commons.csv.CSVParser.Builder builder31 = builder21.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder33 = builder21.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder35 = builder21.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setCharacterOffset((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder39 = builder35.setCharacterOffset((long) 'a');
        java.nio.charset.Charset charset40 = builder35.getCharset();
        org.apache.commons.csv.CSVFormat.Predefined predefined41 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat42 = predefined41.getFormat();
        boolean boolean43 = cSVFormat42.getAutoFlush();
        org.apache.commons.csv.QuoteMode quoteMode44 = cSVFormat42.getQuoteMode();
        boolean boolean45 = cSVFormat42.getIgnoreEmptyLines();
        org.apache.commons.csv.CSVParser cSVParser46 = org.apache.commons.csv.CSVParser.parse(inputStream20, charset40, cSVFormat42);
        boolean boolean47 = cSVParser46.isClosed();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] { (byte) -1, (byte) 100, (byte) 1 });
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(inputStream20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8192 + "'", int23 == 8192);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertArrayEquals(byteArray28, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertTrue("'" + predefined41 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined41.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + quoteMode44 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode44.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(cSVParser46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1044");
        java.net.URL uRL0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset2 = builder1.getCharsetDefault();
        int int3 = builder1.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder1.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray8 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder9 = builder1.setByteArray(byteArray8);
        java.nio.charset.Charset charset10 = builder1.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean12 = cSVFormat11.getSkipHeaderRecord();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser13 = org.apache.commons.csv.CSVParser.parse(uRL0, charset10, cSVFormat11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8192 + "'", int3 == 8192);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertArrayEquals(byteArray8, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1045");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setRecordNumber((long) (short) 10);
        org.apache.commons.csv.CSVParser.Builder builder9 = builder5.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset11 = builder10.getCharsetDefault();
        int int12 = builder10.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder10.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder18 = builder10.setByteArray(byteArray17);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setBufferSize((java.lang.Integer) (-1));
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset22 = builder21.getCharsetDefault();
        int int23 = builder21.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder21.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder29 = builder21.setByteArray(byteArray28);
        org.apache.commons.csv.CSVParser.Builder builder31 = builder21.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder33 = builder21.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder35 = builder21.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setCharacterOffset((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder39 = builder35.setCharacterOffset((long) 'a');
        java.nio.charset.Charset charset40 = builder35.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder41 = builder18.setCharset(charset40);
        org.apache.commons.csv.CSVParser.Builder builder42 = builder5.setCharset(charset40);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier43 = builder5.asSupplier();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8192 + "'", int12 == 8192);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8192 + "'", int23 == 8192);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertArrayEquals(byteArray28, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(cSVParserSupplier43);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1046");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder6.setQuote('#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1047");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
        boolean boolean2 = cSVFormat1.getLenientEof();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean4 = cSVFormat3.getSkipHeaderRecord();
        java.lang.String str5 = cSVFormat3.getRecordSeparator();
        boolean boolean6 = cSVFormat3.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder7 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat3);
        org.apache.commons.csv.QuoteMode quoteMode8 = null;
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setQuoteMode(quoteMode8);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder7.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray18 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder7.setHeaderComments(strArray18);
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder7.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder21.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder21.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean29 = cSVFormat28.getSkipHeaderRecord();
        java.lang.String str30 = cSVFormat28.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode31 = cSVFormat28.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder21.setDuplicateHeaderMode(duplicateHeaderMode31);
        java.sql.ResultSetMetaData resultSetMetaData33 = null;
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder21.setHeader(resultSetMetaData33);
        boolean boolean35 = cSVFormat1.equals((java.lang.Object) builder34);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\n" + "'", str5, "\n");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertArrayEquals(strArray18, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\n" + "'", str30, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode31 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode31.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1048");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String[] strArray1 = cSVFormat0.getHeaderComments();
        org.apache.commons.csv.QuoteMode quoteMode2 = cSVFormat0.getQuoteMode();
        boolean boolean3 = cSVFormat0.isCommentMarkerSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertNull(quoteMode2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1049");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder2.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setBufferSizeMax(100);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setRecordNumber(0L);
        java.net.URI uRI8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder9 = builder5.setURI(uRI8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8192 + "'", int3 == 8192);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1050");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setBufferSize((java.lang.Integer) (-1));
        byte[] byteArray11 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder12 = builder8.setByteArray(byteArray11);
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file13 = builder8.getFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getFile() for byte[] origin [B@308dd125");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertArrayEquals(byteArray11, new byte[] {});
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1051");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setIgnoreHeaderCase(true);
        java.sql.ResultSetMetaData resultSetMetaData6 = null;
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setHeader(resultSetMetaData6);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setLenientEof(false);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setRecordSeparator("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1052");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setBufferSize((int) 'a');
        org.apache.commons.csv.CSVParser.Builder builder9 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setBufferSize((java.lang.Integer) 10);
        java.nio.charset.Charset charset12 = builder11.getCharset();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(charset12);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1053");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        boolean boolean2 = cSVFormat0.getTrim();
        boolean boolean3 = cSVFormat0.isNullStringSet();
        org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean5 = cSVFormat4.getSkipHeaderRecord();
        java.lang.String str6 = cSVFormat4.getRecordSeparator();
        boolean boolean7 = cSVFormat4.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder8 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat4);
        java.sql.ResultSetMetaData resultSetMetaData9 = null;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setHeader(resultSetMetaData9);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setTrailingData(true);
        org.apache.commons.csv.CSVFormat cSVFormat15 = builder12.get();
        java.lang.Character char16 = cSVFormat15.getEscapeCharacter();
        boolean boolean17 = cSVFormat0.equals((java.lang.Object) char16);
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset19 = builder18.getCharsetDefault();
        int int20 = builder18.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder18.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder26 = builder18.setByteArray(byteArray25);
        org.apache.commons.csv.CSVParser.Builder builder28 = builder18.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder30 = builder18.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder32 = builder18.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder32.setCharacterOffset((long) '#');
        java.io.File file35 = builder34.getFile();
        boolean boolean36 = cSVFormat0.equals((java.lang.Object) file35);
        java.nio.charset.Charset charset37 = null;
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        boolean boolean39 = cSVFormat38.getAllowMissingColumnNames();
        org.apache.commons.csv.CSVFormat.Builder builder40 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat38);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser41 = org.apache.commons.csv.CSVParser.parse(file35, charset37, cSVFormat38);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + char16 + "' != '" + '#' + "'", char16 == '#');
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8192 + "'", int20 == 8192);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertArrayEquals(byteArray25, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(file35);
        org.junit.Assert.assertNull("file35.getParent() == null", file35.getParent());
        org.junit.Assert.assertEquals(file35.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1054");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 100);
        java.util.function.IntUnaryOperator intUnaryOperator9 = null;
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setBufferSizeChecker(intUnaryOperator9);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset12 = builder11.getCharsetDefault();
        int int13 = builder11.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder11.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder19 = builder11.setByteArray(byteArray18);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder10.setByteArray(byteArray18);
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset22 = builder21.getCharsetDefault();
        byte[] byteArray23 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder24 = builder21.setByteArray(byteArray23);
        java.lang.CharSequence charSequence25 = builder21.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder21.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset29 = builder28.getCharsetDefault();
        byte[] byteArray30 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder31 = builder28.setByteArray(byteArray30);
        java.lang.CharSequence charSequence32 = builder28.getCharSequence();
        java.lang.CharSequence charSequence33 = builder28.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser34 = builder28.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray35 = builder28.getOpenOptions();
        java.nio.charset.Charset charset36 = builder28.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder37 = builder21.setCharset(charset36);
        org.apache.commons.csv.CSVParser.Builder builder38 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset39 = builder38.getCharsetDefault();
        byte[] byteArray40 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder41 = builder38.setByteArray(byteArray40);
        java.lang.CharSequence charSequence42 = builder38.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder44 = builder38.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder46 = builder38.setRecordNumber((long) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder47 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset48 = builder47.getCharsetDefault();
        int int49 = builder47.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder51 = builder47.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray54 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder55 = builder47.setByteArray(byteArray54);
        org.apache.commons.csv.CSVParser.Builder builder57 = builder47.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder59 = builder47.setBufferSize((int) (byte) 0);
        java.nio.file.Path path60 = builder47.getPath();
        org.apache.commons.csv.CSVParser.Builder builder61 = builder38.setPath(path60);
        org.apache.commons.csv.CSVParser.Builder builder62 = builder21.setPath(path60);
        org.apache.commons.csv.CSVParser.Builder builder63 = builder10.setPath(path60);
        org.apache.commons.csv.CSVParser.Builder builder64 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset65 = builder64.getCharsetDefault();
        byte[] byteArray66 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder67 = builder64.setByteArray(byteArray66);
        java.lang.CharSequence charSequence68 = builder64.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder70 = builder64.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder71 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset72 = builder71.getCharsetDefault();
        byte[] byteArray73 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder74 = builder71.setByteArray(byteArray73);
        java.lang.CharSequence charSequence75 = builder71.getCharSequence();
        java.lang.CharSequence charSequence76 = builder71.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser77 = builder71.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray78 = builder71.getOpenOptions();
        java.nio.charset.Charset charset79 = builder71.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder80 = builder64.setCharset(charset79);
        java.io.InputStream inputStream81 = builder80.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder82 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset83 = builder82.getCharsetDefault();
        java.nio.charset.Charset charset84 = builder82.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat85 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean86 = cSVFormat85.getSkipHeaderRecord();
        java.lang.String str87 = cSVFormat85.getRecordSeparator();
        boolean boolean88 = cSVFormat85.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder89 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat85);
        org.apache.commons.csv.CSVParser cSVParser90 = org.apache.commons.csv.CSVParser.parse(inputStream81, charset84, cSVFormat85);
        org.apache.commons.csv.CSVFormat.Predefined predefined91 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat92 = predefined91.getFormat();
        boolean boolean93 = cSVFormat92.getAutoFlush();
        boolean boolean94 = cSVFormat92.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter95 = cSVFormat92.printer();
        org.apache.commons.csv.QuoteMode quoteMode96 = cSVFormat92.getQuoteMode();
        java.lang.String str97 = cSVFormat92.getNullString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser98 = org.apache.commons.csv.CSVParser.parse(path60, charset84, cSVFormat92);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8192 + "'", int13 == 8192);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertArrayEquals(byteArray23, new byte[] {});
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + charSequence25 + "' != '" + "" + "'", charSequence25, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertArrayEquals(byteArray30, new byte[] {});
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + charSequence32 + "' != '" + "" + "'", charSequence32, "");
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "" + "'", charSequence33, "");
        org.junit.Assert.assertNotNull(cSVParser34);
        org.junit.Assert.assertNotNull(openOptionArray35);
        org.junit.Assert.assertArrayEquals(openOptionArray35, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertArrayEquals(byteArray40, new byte[] {});
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "" + "'", charSequence42, "");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8192 + "'", int49 == 8192);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertArrayEquals(byteArray54, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(path60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(charset65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertArrayEquals(byteArray66, new byte[] {});
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "" + "'", charSequence68, "");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(charset72);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertArrayEquals(byteArray73, new byte[] {});
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertEquals("'" + charSequence75 + "' != '" + "" + "'", charSequence75, "");
        org.junit.Assert.assertEquals("'" + charSequence76 + "' != '" + "" + "'", charSequence76, "");
        org.junit.Assert.assertNotNull(cSVParser77);
        org.junit.Assert.assertNotNull(openOptionArray78);
        org.junit.Assert.assertArrayEquals(openOptionArray78, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(inputStream81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(charset83);
        org.junit.Assert.assertNotNull(charset84);
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "\n" + "'", str87, "\n");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(cSVParser90);
        org.junit.Assert.assertTrue("'" + predefined91 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined91.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(cSVPrinter95);
        org.junit.Assert.assertTrue("'" + quoteMode96 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode96.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNull(str97);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1055");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        boolean boolean13 = cSVFormat12.getIgnoreHeaderCase();
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str19 = cSVFormat12.format(objArray18);
        java.lang.String str20 = cSVFormat12.getRecordSeparator();
        boolean boolean21 = cSVFormat12.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode22 = cSVFormat12.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder4.setQuoteMode(quoteMode22);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setQuote('\"');
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder23.setNullString("\"");
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setEscape((java.lang.Character) '#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str19, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\r\n" + "'", str20, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + quoteMode22 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode22.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1056");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isNullStringSet();
        boolean boolean2 = cSVFormat0.getAllowMissingColumnNames();
        boolean boolean3 = cSVFormat0.getTrim();
        java.lang.String[] strArray4 = cSVFormat0.getHeaderComments();
        boolean boolean5 = cSVFormat0.isQuoteCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        org.apache.commons.csv.QuoteMode quoteMode8 = cSVFormat7.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean10 = cSVFormat9.isNullStringSet();
        java.lang.String[] strArray11 = cSVFormat9.getHeaderComments();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset13 = builder12.getCharsetDefault();
        byte[] byteArray14 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder15 = builder12.setByteArray(byteArray14);
        java.nio.charset.Charset charset16 = builder12.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder12.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder19 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset20 = builder19.getCharsetDefault();
        int int21 = builder19.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder19.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder27 = builder19.setByteArray(byteArray26);
        org.apache.commons.csv.CSVParser.Builder builder29 = builder19.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder31 = builder19.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder33 = builder19.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder35 = builder33.setCharacterOffset((long) '#');
        java.io.File file36 = builder35.getFile();
        org.apache.commons.csv.CSVParser.Builder builder37 = builder18.setFile(file36);
        org.apache.commons.csv.CSVParser.Builder builder39 = builder37.setFile(",");
        java.io.Reader reader40 = null; // flaky "2) test1056(org.apache.commons.csv.randoop.RegressionTest2)": builder37.getReader();
        org.apache.commons.csv.CSVParser cSVParser41 = null; // flaky "2) test1056(org.apache.commons.csv.randoop.RegressionTest2)": cSVFormat9.parse(reader40);
        org.apache.commons.csv.CSVFormat cSVFormat43 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser44 = org.apache.commons.csv.CSVParser.parse("", cSVFormat43);
        java.lang.String str45 = cSVFormat43.getDelimiterString();
        java.lang.String[] strArray46 = cSVFormat43.getHeader();
        org.apache.commons.csv.CSVParser cSVParser47 = null; // flaky "2) test1056(org.apache.commons.csv.randoop.RegressionTest2)": org.apache.commons.csv.CSVParser.parse(reader40, cSVFormat43);
        org.apache.commons.csv.CSVParser cSVParser48 = null; // flaky "2) test1056(org.apache.commons.csv.randoop.RegressionTest2)": cSVFormat7.parse(reader40);
        org.apache.commons.csv.CSVParser cSVParser49 = null; // flaky "2) test1056(org.apache.commons.csv.randoop.RegressionTest2)": cSVFormat0.parse(reader40);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNull(quoteMode8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strArray11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] {});
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8192 + "'", int21 == 8192);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertArrayEquals(byteArray26, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(file36);
        org.junit.Assert.assertNull("file36.getParent() == null", file36.getParent());
        org.junit.Assert.assertEquals(file36.toString(), "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
// flaky "2) test1056(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(reader40);
// flaky "1) test1056(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(cSVParser41);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertNotNull(cSVParser44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\t" + "'", str45, "\t");
        org.junit.Assert.assertNull(strArray46);
// flaky "1) test1056(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(cSVParser47);
// flaky "1) test1056(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(cSVParser48);
// flaky "1) test1056(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(cSVParser49);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1057");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getAutoFlush();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        byte[] byteArray5 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder6 = builder3.setByteArray(byteArray5);
        org.apache.commons.csv.CSVParser.Builder builder8 = builder3.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset10 = builder9.getCharsetDefault();
        int int11 = builder9.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder9.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder17 = builder9.setByteArray(byteArray16);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder9.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder21 = builder9.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder9.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder24 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset25 = builder24.getCharsetDefault();
        int int26 = builder24.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder28 = builder24.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray31 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder32 = builder24.setByteArray(byteArray31);
        org.apache.commons.csv.CSVParser.Builder builder33 = builder23.setByteArray(byteArray31);
        java.nio.charset.Charset charset34 = builder23.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder3.setCharset(charset34);
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setBufferSize((java.lang.Integer) 0);
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean39 = cSVFormat38.isNullStringSet();
        java.lang.String[] strArray40 = cSVFormat38.getHeaderComments();
        org.apache.commons.csv.CSVParser.Builder builder41 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset42 = builder41.getCharsetDefault();
        byte[] byteArray43 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder44 = builder41.setByteArray(byteArray43);
        java.nio.charset.Charset charset45 = builder41.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder47 = builder41.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder48 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset49 = builder48.getCharsetDefault();
        int int50 = builder48.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder52 = builder48.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray55 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder56 = builder48.setByteArray(byteArray55);
        org.apache.commons.csv.CSVParser.Builder builder58 = builder48.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder60 = builder48.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder62 = builder48.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder64 = builder62.setCharacterOffset((long) '#');
        java.io.File file65 = builder64.getFile();
        org.apache.commons.csv.CSVParser.Builder builder66 = builder47.setFile(file65);
        org.apache.commons.csv.CSVParser.Builder builder68 = builder66.setFile(",");
        java.io.Reader reader69 = null; // flaky "3) test1057(org.apache.commons.csv.randoop.RegressionTest2)": builder66.getReader();
        org.apache.commons.csv.CSVParser cSVParser70 = null; // flaky "3) test1057(org.apache.commons.csv.randoop.RegressionTest2)": cSVFormat38.parse(reader69);
        org.apache.commons.csv.CSVFormat cSVFormat72 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser73 = org.apache.commons.csv.CSVParser.parse("", cSVFormat72);
        java.lang.String str74 = cSVFormat72.getDelimiterString();
        java.lang.String[] strArray75 = cSVFormat72.getHeader();
        org.apache.commons.csv.CSVParser cSVParser76 = null; // flaky "3) test1057(org.apache.commons.csv.randoop.RegressionTest2)": org.apache.commons.csv.CSVParser.parse(reader69, cSVFormat72);
        org.apache.commons.csv.CSVParser.Builder builder77 = null; // flaky "3) test1057(org.apache.commons.csv.randoop.RegressionTest2)": builder37.setReader(reader69);
        org.apache.commons.csv.CSVParser cSVParser78 = null; // flaky "3) test1057(org.apache.commons.csv.randoop.RegressionTest2)": cSVFormat1.parse(reader69);
        org.apache.commons.csv.CSVFormat.Predefined predefined79 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat80 = predefined79.getFormat();
        java.lang.String str81 = cSVFormat80.toString();
        boolean boolean82 = cSVFormat80.isEscapeCharacterSet();
        boolean boolean83 = cSVFormat80.getIgnoreHeaderCase();
        boolean boolean84 = cSVFormat80.getIgnoreSurroundingSpaces();
        java.lang.String str85 = cSVFormat80.getDelimiterString();
        org.apache.commons.csv.CSVParser cSVParser88 = null; // flaky "3) test1057(org.apache.commons.csv.randoop.RegressionTest2)": new org.apache.commons.csv.CSVParser(reader69, cSVFormat80, (long) (short) 100, (long) (short) -1);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertArrayEquals(byteArray5, new byte[] {});
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8192 + "'", int11 == 8192);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertArrayEquals(byteArray16, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8192 + "'", int26 == 8192);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertArrayEquals(byteArray31, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(strArray40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertArrayEquals(byteArray43, new byte[] {});
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8192 + "'", int50 == 8192);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertArrayEquals(byteArray55, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(file65);
        org.junit.Assert.assertNull("file65.getParent() == null", file65.getParent());
        org.junit.Assert.assertEquals(file65.toString(), "");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
// flaky "2) test1057(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(reader69);
// flaky "2) test1057(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(cSVParser70);
        org.junit.Assert.assertNotNull(cSVFormat72);
        org.junit.Assert.assertNotNull(cSVParser73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\t" + "'", str74, "\t");
        org.junit.Assert.assertNull(strArray75);
// flaky "2) test1057(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(cSVParser76);
// flaky "2) test1057(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(builder77);
// flaky "1) test1057(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(cSVParser78);
        org.junit.Assert.assertTrue("'" + predefined79 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined79.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str81, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "," + "'", str85, ",");
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1058");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        java.nio.file.Path path13 = builder0.getPath();
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset15 = builder14.getCharsetDefault();
        int int16 = builder14.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder14.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder22 = builder14.setByteArray(byteArray21);
        org.apache.commons.csv.CSVParser.Builder builder24 = builder14.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder26 = builder14.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder28 = builder14.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setCharacterOffset((long) '#');
        java.io.File file31 = builder30.getFile();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder0.setFile(file31);
        org.apache.commons.csv.CSVParser.Builder builder33 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder33.setRecordNumber((long) 1);
        org.apache.commons.csv.CSVParser.Builder builder36 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset37 = builder36.getCharsetDefault();
        int int38 = builder36.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder40 = builder36.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder44 = builder36.setByteArray(byteArray43);
        org.apache.commons.csv.CSVParser.Builder builder46 = builder36.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder48 = builder36.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder50 = builder36.setCharacterOffset((long) (byte) 1);
        byte[] byteArray54 = new byte[] { (byte) -1, (byte) 100, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder55 = builder50.setByteArray(byteArray54);
        org.apache.commons.csv.CSVParser.Builder builder56 = builder35.setByteArray(byteArray54);
        org.apache.commons.csv.CSVParser.Builder builder57 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset58 = builder57.getCharsetDefault();
        byte[] byteArray59 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder60 = builder57.setByteArray(byteArray59);
        java.lang.CharSequence charSequence61 = builder57.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder63 = builder57.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder64 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset65 = builder64.getCharsetDefault();
        byte[] byteArray66 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder67 = builder64.setByteArray(byteArray66);
        java.lang.CharSequence charSequence68 = builder64.getCharSequence();
        java.lang.CharSequence charSequence69 = builder64.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser70 = builder64.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray71 = builder64.getOpenOptions();
        java.nio.charset.Charset charset72 = builder64.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder73 = builder57.setCharset(charset72);
        java.io.InputStream inputStream74 = builder73.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder75 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset76 = builder75.getCharsetDefault();
        java.nio.charset.Charset charset77 = builder75.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat78 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean79 = cSVFormat78.getSkipHeaderRecord();
        java.lang.String str80 = cSVFormat78.getRecordSeparator();
        boolean boolean81 = cSVFormat78.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder82 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat78);
        org.apache.commons.csv.CSVParser cSVParser83 = org.apache.commons.csv.CSVParser.parse(inputStream74, charset77, cSVFormat78);
        org.apache.commons.csv.CSVParser.Builder builder84 = builder35.setCharset(charset77);
        org.apache.commons.csv.CSVFormat cSVFormat85 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean86 = cSVFormat85.getSkipHeaderRecord();
        java.lang.String str87 = cSVFormat85.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder88 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat85);
        org.apache.commons.csv.CSVFormat cSVFormat89 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean90 = cSVFormat89.getSkipHeaderRecord();
        java.lang.String str91 = cSVFormat89.getRecordSeparator();
        boolean boolean92 = cSVFormat89.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder93 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat89);
        boolean boolean94 = cSVFormat85.equals((java.lang.Object) cSVFormat89);
        java.lang.String str95 = cSVFormat89.toString();
        boolean boolean96 = cSVFormat89.getIgnoreSurroundingSpaces();
        boolean boolean97 = cSVFormat89.isCommentMarkerSet();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser98 = org.apache.commons.csv.CSVParser.parse(file31, charset77, cSVFormat89);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8192 + "'", int16 == 8192);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertArrayEquals(byteArray21, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertNull("file31.getParent() == null", file31.getParent());
        org.junit.Assert.assertEquals(file31.toString(), "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8192 + "'", int38 == 8192);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertArrayEquals(byteArray43, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertArrayEquals(byteArray54, new byte[] { (byte) -1, (byte) 100, (byte) 1 });
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertArrayEquals(byteArray59, new byte[] {});
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals("'" + charSequence61 + "' != '" + "" + "'", charSequence61, "");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(charset65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertArrayEquals(byteArray66, new byte[] {});
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "" + "'", charSequence68, "");
        org.junit.Assert.assertEquals("'" + charSequence69 + "' != '" + "" + "'", charSequence69, "");
        org.junit.Assert.assertNotNull(cSVParser70);
        org.junit.Assert.assertNotNull(openOptionArray71);
        org.junit.Assert.assertArrayEquals(openOptionArray71, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(inputStream74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(charset76);
        org.junit.Assert.assertNotNull(charset77);
        org.junit.Assert.assertNotNull(cSVFormat78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\n" + "'", str80, "\n");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(cSVParser83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(cSVFormat85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "\n" + "'", str87, "\n");
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(cSVFormat89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "\n" + "'", str91, "\n");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str95, "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1059");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode3 = cSVFormat0.getDuplicateHeaderMode();
        boolean boolean4 = cSVFormat0.getAutoFlush();
        java.lang.String[] strArray5 = cSVFormat0.getHeaderComments();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode3 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode3.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strArray5);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1060");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder2.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset5 = builder4.getCharsetDefault();
        byte[] byteArray6 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder7 = builder4.setByteArray(byteArray6);
        java.lang.CharSequence charSequence8 = builder4.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder4.setBufferSize((int) ' ');
        java.io.InputStream inputStream11 = builder10.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset13 = builder12.getCharsetDefault();
        byte[] byteArray14 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder15 = builder12.setByteArray(byteArray14);
        java.nio.charset.Charset charset16 = builder12.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder19 = cSVFormat18.builder();
        java.lang.String str20 = cSVFormat18.getNullString();
        org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse(inputStream11, charset16, cSVFormat18);
        org.apache.commons.csv.CSVParser.Builder builder22 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset23 = builder22.getCharsetDefault();
        byte[] byteArray24 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder25 = builder22.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder22.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder29 = builder22.setBufferSize((int) 'a');
        java.nio.charset.Charset charset30 = builder29.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse(inputStream11, charset30, cSVFormat32);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder2.setCharset(charset30);
        org.apache.commons.csv.CSVParser.Builder builder36 = builder2.setRecordNumber((long) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder38 = builder36.setRecordNumber((long) (short) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] {});
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "" + "'", charSequence8, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] {});
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVParser21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] {});
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVParser33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1061");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray6 = new java.nio.file.OpenOption[] {};
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setOpenOptions(openOptionArray6);
        org.apache.commons.csv.CSVParser cSVParser8 = builder0.get();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(openOptionArray6);
        org.junit.Assert.assertArrayEquals(openOptionArray6, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(cSVParser8);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1062");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setTrailingData(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder8.get();
        java.lang.Character char12 = cSVFormat11.getEscapeCharacter();
        java.lang.Character char13 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVPrinter cSVPrinter14 = cSVFormat11.printer();
        boolean boolean15 = cSVFormat11.getLenientEof();
        org.apache.commons.csv.CSVFormat.Builder builder16 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat11);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + '#' + "'", char12 == '#');
        org.junit.Assert.assertNull(char13);
        org.junit.Assert.assertNotNull(cSVPrinter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1063");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder2.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset5 = builder4.getCharsetDefault();
        byte[] byteArray6 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder7 = builder4.setByteArray(byteArray6);
        java.lang.CharSequence charSequence8 = builder4.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder4.setBufferSize((int) ' ');
        java.io.InputStream inputStream11 = builder10.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset13 = builder12.getCharsetDefault();
        byte[] byteArray14 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder15 = builder12.setByteArray(byteArray14);
        java.nio.charset.Charset charset16 = builder12.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder19 = cSVFormat18.builder();
        java.lang.String str20 = cSVFormat18.getNullString();
        org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse(inputStream11, charset16, cSVFormat18);
        org.apache.commons.csv.CSVParser.Builder builder22 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset23 = builder22.getCharsetDefault();
        byte[] byteArray24 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder25 = builder22.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder22.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder29 = builder22.setBufferSize((int) 'a');
        java.nio.charset.Charset charset30 = builder29.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse(inputStream11, charset30, cSVFormat32);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder2.setCharset(charset30);
        java.nio.charset.Charset charset35 = builder34.getCharsetDefault();
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        java.lang.String str38 = cSVFormat37.toString();
        org.apache.commons.csv.QuoteMode quoteMode39 = cSVFormat37.getQuoteMode();
        org.apache.commons.csv.CSVParser.Builder builder40 = builder34.setFormat(cSVFormat37);
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream41 = builder40.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] {});
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "" + "'", charSequence8, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] {});
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVParser21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] {});
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVParser33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str38, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + quoteMode39 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode39.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1064");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        java.lang.String str3 = cSVParser2.getFirstEndOfLine();
        long long4 = cSVParser2.getCurrentLineNumber();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor5 = cSVParser2.iterator();
        long long6 = cSVParser2.getCurrentLineNumber();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser2.getRecords();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVParser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordItor5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordList7);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1065");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.DEFAULT;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder2 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder2.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset6 = builder5.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder2.setCharset(charset6);
        java.nio.charset.Charset charset8 = builder2.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder2.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset12 = builder11.getCharsetDefault();
        int int13 = builder11.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder11.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder19 = builder11.setByteArray(byteArray18);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder11.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder23 = builder11.setBufferSize((int) (byte) 0);
        java.nio.file.Path path24 = builder11.getPath();
        org.apache.commons.csv.CSVParser.Builder builder25 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset26 = builder25.getCharsetDefault();
        int int27 = builder25.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder25.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder33 = builder25.setByteArray(byteArray32);
        org.apache.commons.csv.CSVParser.Builder builder35 = builder25.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder37 = builder25.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder39 = builder25.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder41 = builder39.setCharacterOffset((long) '#');
        java.io.File file42 = builder41.getFile();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder11.setFile(file42);
        org.apache.commons.csv.CSVParser.Builder builder44 = builder10.setFile(file42);
        org.apache.commons.csv.CSVParser.Builder builder45 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset46 = builder45.getCharsetDefault();
        byte[] byteArray47 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder48 = builder45.setByteArray(byteArray47);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier49 = builder45.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder50 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset51 = builder50.getCharsetDefault();
        byte[] byteArray52 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder53 = builder50.setByteArray(byteArray52);
        java.lang.CharSequence charSequence54 = builder50.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder56 = builder50.setBufferSize((int) ' ');
        java.io.InputStream inputStream57 = builder56.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder58 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset59 = builder58.getCharsetDefault();
        byte[] byteArray60 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder61 = builder58.setByteArray(byteArray60);
        java.nio.charset.Charset charset62 = builder58.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat64 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder65 = cSVFormat64.builder();
        java.lang.String str66 = cSVFormat64.getNullString();
        org.apache.commons.csv.CSVParser cSVParser67 = org.apache.commons.csv.CSVParser.parse(inputStream57, charset62, cSVFormat64);
        org.apache.commons.csv.CSVParser.Builder builder68 = builder45.setInputStream(inputStream57);
        java.nio.charset.Charset charset69 = builder68.getCharsetDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter70 = cSVFormat1.print(file42, charset69);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.DEFAULT + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.DEFAULT));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8192 + "'", int13 == 8192);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(path24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8192 + "'", int27 == 8192);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertArrayEquals(byteArray32, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(file42);
        org.junit.Assert.assertNull("file42.getParent() == null", file42.getParent());
        org.junit.Assert.assertEquals(file42.toString(), "");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertArrayEquals(byteArray47, new byte[] {});
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(cSVParserSupplier49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertArrayEquals(byteArray52, new byte[] {});
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertEquals("'" + charSequence54 + "' != '" + "" + "'", charSequence54, "");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(inputStream57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(charset59);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertArrayEquals(byteArray60, new byte[] {});
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(charset62);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(cSVParser67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(charset69);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1066");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSizeMax(8192);
        java.io.Reader reader6 = builder5.getReader();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(reader6);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1067");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) 1);
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        int int8 = builder6.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser11 = builder6.getUnchecked();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder6.setPath(",");
        java.nio.file.OpenOption[] openOptionArray14 = builder13.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder5.setOpenOptions(openOptionArray14);
        org.apache.commons.csv.CSVParser.Builder builder16 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset17 = builder16.getCharsetDefault();
        byte[] byteArray18 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder19 = builder16.setByteArray(byteArray18);
        java.lang.CharSequence charSequence20 = builder16.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder16.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder24 = builder16.setRecordNumber((long) (byte) 100);
        java.util.function.IntUnaryOperator intUnaryOperator25 = null;
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setBufferSizeChecker(intUnaryOperator25);
        org.apache.commons.csv.CSVParser.Builder builder27 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset28 = builder27.getCharsetDefault();
        int int29 = builder27.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder31 = builder27.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder35 = builder27.setByteArray(byteArray34);
        org.apache.commons.csv.CSVParser.Builder builder36 = builder26.setByteArray(byteArray34);
        org.apache.commons.csv.CSVParser.Builder builder37 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset38 = builder37.getCharsetDefault();
        byte[] byteArray39 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder40 = builder37.setByteArray(byteArray39);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier41 = builder37.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder42 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset43 = builder42.getCharsetDefault();
        byte[] byteArray44 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder45 = builder42.setByteArray(byteArray44);
        java.lang.CharSequence charSequence46 = builder42.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder48 = builder42.setBufferSize((int) ' ');
        java.io.InputStream inputStream49 = builder48.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder50 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset51 = builder50.getCharsetDefault();
        byte[] byteArray52 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder53 = builder50.setByteArray(byteArray52);
        java.nio.charset.Charset charset54 = builder50.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat56 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder57 = cSVFormat56.builder();
        java.lang.String str58 = cSVFormat56.getNullString();
        org.apache.commons.csv.CSVParser cSVParser59 = org.apache.commons.csv.CSVParser.parse(inputStream49, charset54, cSVFormat56);
        org.apache.commons.csv.CSVParser.Builder builder60 = builder37.setInputStream(inputStream49);
        org.apache.commons.csv.CSVParser.Builder builder61 = builder26.setInputStream(inputStream49);
        org.apache.commons.csv.CSVParser.Builder builder62 = builder5.setInputStream(inputStream49);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8192 + "'", int3 == 8192);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVParser11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(openOptionArray14);
        org.junit.Assert.assertArrayEquals(openOptionArray14, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] {});
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "" + "'", charSequence20, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8192 + "'", int29 == 8192);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertArrayEquals(byteArray34, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertArrayEquals(byteArray39, new byte[] {});
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(cSVParserSupplier41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertArrayEquals(byteArray44, new byte[] {});
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + charSequence46 + "' != '" + "" + "'", charSequence46, "");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(inputStream49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(charset51);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertArrayEquals(byteArray52, new byte[] {});
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertNotNull(cSVFormat56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(cSVParser59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1068");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 100);
        java.util.function.IntUnaryOperator intUnaryOperator9 = null;
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setBufferSizeChecker(intUnaryOperator9);
        java.nio.charset.Charset charset11 = builder0.getCharset();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1069");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder0.setEscape((java.lang.Character) 'a');
        java.sql.ResultSet resultSet5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder0.setHeader(resultSet5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = builder6.get();
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder6.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean11 = cSVFormat10.getSkipHeaderRecord();
        java.lang.String str12 = cSVFormat10.getRecordSeparator();
        boolean boolean13 = cSVFormat10.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder14 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat10);
        org.apache.commons.csv.QuoteMode quoteMode15 = null;
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setQuoteMode(quoteMode15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder14.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray25 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder14.setHeaderComments(strArray25);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder14.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setRecordSeparator("");
        java.sql.ResultSet resultSet31 = null;
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder28.setHeader(resultSet31);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder28.setRecordSeparator('4');
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder28.setDelimiter('a');
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter38 = cSVFormat37.printer();
        boolean boolean39 = cSVFormat37.getLenientEof();
        boolean boolean40 = cSVFormat37.getIgnoreSurroundingSpaces();
        java.lang.String str41 = cSVFormat37.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat42 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean43 = cSVFormat42.getSkipHeaderRecord();
        java.lang.String str44 = cSVFormat42.getRecordSeparator();
        boolean boolean45 = cSVFormat42.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder46 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat42);
        org.apache.commons.csv.QuoteMode quoteMode47 = null;
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder46.setQuoteMode(quoteMode47);
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder46.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray57 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder46.setHeaderComments(strArray57);
        org.apache.commons.csv.CSVFormat.Builder builder60 = builder46.setCommentMarker('a');
        java.sql.ResultSetMetaData resultSetMetaData61 = null;
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder60.setHeader(resultSetMetaData61);
        org.apache.commons.csv.CSVFormat cSVFormat63 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean64 = cSVFormat63.getSkipHeaderRecord();
        java.lang.String str65 = cSVFormat63.getRecordSeparator();
        boolean boolean66 = cSVFormat63.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder67 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat63);
        org.apache.commons.csv.CSVFormat.Builder builder69 = builder67.setCommentMarker('a');
        java.lang.String[] strArray74 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" };
        org.apache.commons.csv.CSVFormat.Builder builder75 = builder67.setHeader(strArray74);
        org.apache.commons.csv.CSVFormat.Builder builder77 = builder67.setNullString("");
        org.apache.commons.csv.CSVFormat cSVFormat78 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean79 = cSVFormat78.getSkipHeaderRecord();
        java.lang.String str80 = cSVFormat78.getRecordSeparator();
        boolean boolean81 = cSVFormat78.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder82 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat78);
        org.apache.commons.csv.QuoteMode quoteMode83 = null;
        org.apache.commons.csv.CSVFormat.Builder builder84 = builder82.setQuoteMode(quoteMode83);
        org.apache.commons.csv.CSVFormat.Builder builder86 = builder82.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray93 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder94 = builder82.setHeaderComments(strArray93);
        org.apache.commons.csv.CSVFormat.Builder builder95 = builder77.setHeader(strArray93);
        org.apache.commons.csv.CSVFormat.Builder builder96 = builder60.setHeaderComments(strArray93);
        java.lang.String str97 = cSVFormat37.format((java.lang.Object[]) strArray93);
        org.apache.commons.csv.CSVFormat.Builder builder98 = builder28.setHeaderComments(strArray93);
        org.apache.commons.csv.CSVFormat.Builder builder99 = builder6.setHeaderComments((java.lang.Object[]) strArray93);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertArrayEquals(strArray25, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(cSVPrinter38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\r\n" + "'", str41, "\r\n");
        org.junit.Assert.assertNotNull(cSVFormat42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\n" + "'", str44, "\n");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertArrayEquals(strArray57, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(cSVFormat63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\n" + "'", str65, "\n");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertArrayEquals(strArray74, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" });
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(cSVFormat78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\n" + "'", str80, "\n");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertArrayEquals(strArray93, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\",,hi!,\"\r\n\",,\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"" + "'", str97, "\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\",,hi!,\"\r\n\",,\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"");
        org.junit.Assert.assertNotNull(builder98);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1070");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        java.nio.charset.Charset charset11 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset13 = builder12.getCharsetDefault();
        int int14 = builder12.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder12.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser17 = builder12.getUnchecked();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder12.setPath(",");
        java.nio.file.OpenOption[] openOptionArray20 = builder19.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder0.setOpenOptions(openOptionArray20);
        java.util.function.IntUnaryOperator intUnaryOperator22 = null;
        org.apache.commons.csv.CSVParser.Builder builder23 = builder0.setBufferSizeChecker(intUnaryOperator22);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser24 = builder0.getUnchecked();
            org.junit.Assert.fail("Expected exception of type java.io.UncheckedIOException; message: java.nio.file.AccessDeniedException: ");
        } catch (java.io.UncheckedIOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8192 + "'", int14 == 8192);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(cSVParser17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(openOptionArray20);
        org.junit.Assert.assertArrayEquals(openOptionArray20, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1071");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setRecordSeparator("Delimiter=<,> Escape=<#> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1072");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.io.IORandomAccessFile iORandomAccessFile11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setRandomAccessFile(iORandomAccessFile11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1073");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean10 = cSVFormat9.getSkipHeaderRecord();
        java.lang.String str11 = cSVFormat9.getRecordSeparator();
        boolean boolean12 = cSVFormat9.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder13 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat9);
        org.apache.commons.csv.QuoteMode quoteMode14 = null;
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setQuoteMode(quoteMode14);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray24 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder13.setHeaderComments(strArray24);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder4.setHeaderComments(strArray24);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setCommentMarker((java.lang.Character) '\"');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\n" + "'", str11, "\n");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertArrayEquals(strArray24, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1074");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter4 = cSVFormat0.printer();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("", cSVFormat6);
        boolean boolean8 = cSVFormat0.equals((java.lang.Object) cSVFormat6);
        java.lang.Appendable appendable9 = null;
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset11 = builder10.getCharsetDefault();
        int int12 = builder10.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder10.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder18 = builder10.setByteArray(byteArray17);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder10.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder22 = builder10.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder24 = builder10.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder25 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset26 = builder25.getCharsetDefault();
        int int27 = builder25.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder25.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder33 = builder25.setByteArray(byteArray32);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder24.setByteArray(byteArray32);
        org.apache.commons.csv.CSVParser.Builder builder35 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset36 = builder35.getCharsetDefault();
        int int37 = builder35.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder39 = builder35.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser40 = builder35.getUnchecked();
        java.lang.CharSequence charSequence41 = builder35.getCharSequence();
        java.nio.file.OpenOption[] openOptionArray42 = builder35.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder24.setOpenOptions(openOptionArray42);
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat0.printRecord(appendable9, (java.lang.Object[]) openOptionArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(cSVPrinter4);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8192 + "'", int12 == 8192);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8192 + "'", int27 == 8192);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertArrayEquals(byteArray32, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8192 + "'", int37 == 8192);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(cSVParser40);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", charSequence41, "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertNotNull(openOptionArray42);
        org.junit.Assert.assertArrayEquals(openOptionArray42, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1075");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setIgnoreHeaderCase(true);
        java.sql.ResultSetMetaData resultSetMetaData6 = null;
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setHeader(resultSetMetaData6);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setQuote((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setEscape((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuote('a');
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setLenientEof(true);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setAllowMissingColumnNames(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1076");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        boolean boolean13 = cSVFormat12.getIgnoreHeaderCase();
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str19 = cSVFormat12.format(objArray18);
        java.lang.String str20 = cSVFormat12.getRecordSeparator();
        boolean boolean21 = cSVFormat12.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode22 = cSVFormat12.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder4.setQuoteMode(quoteMode22);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder4.setCommentMarker('4');
        org.apache.commons.csv.CSVFormat cSVFormat26 = builder25.get();
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder25.setIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setCommentMarker((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder28.setRecordSeparator(",");
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder28.setLenientEof(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str19, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\r\n" + "'", str20, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + quoteMode22 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode22.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1077");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset15 = builder14.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder11.setCharset(charset15);
        java.nio.charset.Charset charset17 = builder11.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder0.setCharset(charset17);
        java.nio.file.OpenOption[] openOptionArray19 = builder18.getOpenOptions();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(openOptionArray19);
        org.junit.Assert.assertArrayEquals(openOptionArray19, new java.nio.file.OpenOption[] {});
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1078");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser5 = builder0.getUnchecked();
        java.lang.CharSequence charSequence6 = builder0.getCharSequence();
        java.nio.file.OpenOption[] openOptionArray7 = builder0.getOpenOptions();
        java.util.function.IntUnaryOperator intUnaryOperator8 = null;
        org.apache.commons.csv.CSVParser.Builder builder9 = builder0.setBufferSizeChecker(intUnaryOperator8);
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset11 = builder10.getCharsetDefault();
        byte[] byteArray12 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder13 = builder10.setByteArray(byteArray12);
        org.apache.commons.csv.CSVParser.Builder builder15 = builder10.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder10.setBufferSize((int) 'a');
        org.apache.commons.csv.CSVParser.Builder builder19 = builder10.setCharacterOffset((long) 0);
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset21 = builder20.getCharsetDefault();
        byte[] byteArray22 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder23 = builder20.setByteArray(byteArray22);
        java.lang.CharSequence charSequence24 = builder20.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder26 = builder20.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder27 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset28 = builder27.getCharsetDefault();
        byte[] byteArray29 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder30 = builder27.setByteArray(byteArray29);
        java.lang.CharSequence charSequence31 = builder27.getCharSequence();
        java.lang.CharSequence charSequence32 = builder27.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser33 = builder27.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray34 = builder27.getOpenOptions();
        java.nio.charset.Charset charset35 = builder27.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder36 = builder20.setCharset(charset35);
        org.apache.commons.csv.CSVParser.Builder builder37 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset38 = builder37.getCharsetDefault();
        byte[] byteArray39 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder40 = builder37.setByteArray(byteArray39);
        java.lang.CharSequence charSequence41 = builder37.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder37.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder45 = builder37.setRecordNumber((long) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder46 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset47 = builder46.getCharsetDefault();
        int int48 = builder46.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder50 = builder46.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray53 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder54 = builder46.setByteArray(byteArray53);
        org.apache.commons.csv.CSVParser.Builder builder56 = builder46.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder58 = builder46.setBufferSize((int) (byte) 0);
        java.nio.file.Path path59 = builder46.getPath();
        org.apache.commons.csv.CSVParser.Builder builder60 = builder37.setPath(path59);
        org.apache.commons.csv.CSVParser.Builder builder61 = builder20.setPath(path59);
        org.apache.commons.csv.CSVParser.Builder builder62 = builder19.setPath(path59);
        org.apache.commons.csv.CSVParser.Builder builder63 = builder0.setPath(path59);
        // The following exception was thrown during execution in test generation
        try {
            java.io.RandomAccessFile randomAccessFile64 = builder0.getRandomAccessFile();
            org.junit.Assert.fail("Expected exception of type java.io.FileNotFoundException; message: ");
        } catch (java.io.FileNotFoundException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", charSequence6, "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertNotNull(openOptionArray7);
        org.junit.Assert.assertArrayEquals(openOptionArray7, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertArrayEquals(byteArray12, new byte[] {});
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertArrayEquals(byteArray22, new byte[] {});
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "" + "'", charSequence24, "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertArrayEquals(byteArray29, new byte[] {});
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + charSequence31 + "' != '" + "" + "'", charSequence31, "");
        org.junit.Assert.assertEquals("'" + charSequence32 + "' != '" + "" + "'", charSequence32, "");
        org.junit.Assert.assertNotNull(cSVParser33);
        org.junit.Assert.assertNotNull(openOptionArray34);
        org.junit.Assert.assertArrayEquals(openOptionArray34, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertArrayEquals(byteArray39, new byte[] {});
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "" + "'", charSequence41, "");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8192 + "'", int48 == 8192);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertArrayEquals(byteArray53, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(path59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1079");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setCommentMarker('#');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setEscape((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setIgnoreSurroundingSpaces(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1080");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 100);
        java.util.function.IntUnaryOperator intUnaryOperator9 = null;
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setBufferSizeChecker(intUnaryOperator9);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset12 = builder11.getCharsetDefault();
        int int13 = builder11.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder11.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder19 = builder11.setByteArray(byteArray18);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder10.setByteArray(byteArray18);
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset22 = builder21.getCharsetDefault();
        byte[] byteArray23 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder24 = builder21.setByteArray(byteArray23);
        java.lang.CharSequence charSequence25 = builder21.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder21.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset29 = builder28.getCharsetDefault();
        byte[] byteArray30 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder31 = builder28.setByteArray(byteArray30);
        java.lang.CharSequence charSequence32 = builder28.getCharSequence();
        java.lang.CharSequence charSequence33 = builder28.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser34 = builder28.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray35 = builder28.getOpenOptions();
        java.nio.charset.Charset charset36 = builder28.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder37 = builder21.setCharset(charset36);
        org.apache.commons.csv.CSVParser.Builder builder38 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset39 = builder38.getCharsetDefault();
        byte[] byteArray40 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder41 = builder38.setByteArray(byteArray40);
        java.lang.CharSequence charSequence42 = builder38.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder44 = builder38.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder46 = builder38.setRecordNumber((long) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder47 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset48 = builder47.getCharsetDefault();
        int int49 = builder47.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder51 = builder47.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray54 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder55 = builder47.setByteArray(byteArray54);
        org.apache.commons.csv.CSVParser.Builder builder57 = builder47.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder59 = builder47.setBufferSize((int) (byte) 0);
        java.nio.file.Path path60 = builder47.getPath();
        org.apache.commons.csv.CSVParser.Builder builder61 = builder38.setPath(path60);
        org.apache.commons.csv.CSVParser.Builder builder62 = builder21.setPath(path60);
        org.apache.commons.csv.CSVParser.Builder builder63 = builder10.setPath(path60);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder65 = builder63.setPath("\"");
            org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException; message: Illegal char <\"> at index 0: \"");
        } catch (java.nio.file.InvalidPathException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8192 + "'", int13 == 8192);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertArrayEquals(byteArray23, new byte[] {});
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + charSequence25 + "' != '" + "" + "'", charSequence25, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertArrayEquals(byteArray30, new byte[] {});
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + charSequence32 + "' != '" + "" + "'", charSequence32, "");
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "" + "'", charSequence33, "");
        org.junit.Assert.assertNotNull(cSVParser34);
        org.junit.Assert.assertNotNull(openOptionArray35);
        org.junit.Assert.assertArrayEquals(openOptionArray35, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertArrayEquals(byteArray40, new byte[] {});
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "" + "'", charSequence42, "");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8192 + "'", int49 == 8192);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertArrayEquals(byteArray54, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(path60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1081");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        boolean boolean5 = cSVFormat0.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat.Builder builder6 = cSVFormat0.builder();
        java.lang.String str7 = cSVFormat0.toString();
        java.lang.String[] strArray8 = cSVFormat0.getHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str7, "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNull(strArray8);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1082");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        boolean boolean5 = cSVFormat0.isCommentMarkerSet();
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        int int8 = builder6.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser11 = builder6.getUnchecked();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder6.setPath(",");
        java.nio.file.OpenOption[] openOptionArray14 = builder13.getOpenOptions();
        java.lang.String str15 = cSVFormat0.format((java.lang.Object[]) openOptionArray14);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVParser11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(openOptionArray14);
        org.junit.Assert.assertArrayEquals(openOptionArray14, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1083");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setRecordNumber((long) (short) 10);
        org.apache.commons.csv.CSVParser cSVParser8 = builder7.get();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder7.setBufferSizeMax((int) (short) 1);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(cSVParser8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1084");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setCharacterOffset((long) (byte) 100);
        int int15 = builder0.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder16 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset17 = builder16.getCharsetDefault();
        byte[] byteArray18 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder19 = builder16.setByteArray(byteArray18);
        java.lang.CharSequence charSequence20 = builder16.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder16.setBufferSize((int) ' ');
        java.io.InputStream inputStream23 = builder22.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder0.setInputStream(inputStream23);
        org.apache.commons.csv.CSVParser.Builder builder25 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset26 = builder25.getCharsetDefault();
        byte[] byteArray27 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder28 = builder25.setByteArray(byteArray27);
        org.apache.commons.csv.CSVParser.Builder builder30 = builder25.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder32 = builder25.setBufferSize((int) 'a');
        java.nio.charset.Charset charset33 = builder32.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVPrinter cSVPrinter35 = cSVFormat34.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined36 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat37 = predefined36.getFormat();
        boolean boolean38 = cSVFormat37.getIgnoreHeaderCase();
        java.lang.Object[] objArray43 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str44 = cSVFormat37.format(objArray43);
        java.lang.String str45 = cSVFormat34.format(objArray43);
        boolean boolean46 = cSVFormat34.isEscapeCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode47 = cSVFormat34.getQuoteMode();
        boolean boolean48 = cSVFormat34.getTrailingData();
        boolean boolean49 = cSVFormat34.isEscapeCharacterSet();
        boolean boolean50 = cSVFormat34.getIgnoreEmptyLines();
        org.apache.commons.csv.CSVParser cSVParser51 = org.apache.commons.csv.CSVParser.parse(inputStream23, charset33, cSVFormat34);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8192 + "'", int15 == 8192);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] {});
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "" + "'", charSequence20, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertArrayEquals(byteArray27, new byte[] {});
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertNotNull(cSVPrinter35);
        org.junit.Assert.assertTrue("'" + predefined36 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined36.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str44, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str45, "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + quoteMode47 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode47.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(cSVParser51);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1085");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MONGODB_CSV;
        boolean boolean1 = cSVFormat0.isNullStringSet();
        org.apache.commons.csv.CSVFormat.Builder builder2 = cSVFormat0.builder();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        byte[] byteArray5 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder6 = builder3.setByteArray(byteArray5);
        org.apache.commons.csv.CSVParser.Builder builder8 = builder3.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder3.setBufferSize((int) 'a');
        java.nio.charset.Charset charset11 = builder10.getCharsetDefault();
        org.apache.commons.csv.CSVParser cSVParser12 = builder10.get();
        boolean boolean13 = cSVFormat0.equals((java.lang.Object) cSVParser12);
        boolean boolean14 = cSVFormat0.getLenientEof();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertArrayEquals(byteArray5, new byte[] {});
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(cSVParser12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1086");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setEscape('\"');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setTrim(true);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setTrailingData(true);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder16.setAutoFlush(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1087");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        java.lang.String str9 = cSVFormat7.getRecordSeparator();
        boolean boolean10 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat7);
        org.apache.commons.csv.QuoteMode quoteMode12 = null;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuoteMode(quoteMode12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray22 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder11.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder6.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder6.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder6.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setRecordSeparator('4');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertArrayEquals(strArray22, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1088");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setRecordNumber((long) (short) 10);
        org.apache.commons.csv.CSVParser cSVParser8 = builder7.get();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream9 = cSVParser8.stream();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(cSVParser8);
        org.junit.Assert.assertNotNull(cSVRecordStream9);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1089");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser5 = builder0.getUnchecked();
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        int int8 = builder6.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder14 = builder6.setByteArray(byteArray13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder6.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder18 = builder6.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder6.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) '#');
        java.io.File file23 = builder22.getFile();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder0.setFile(file23);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder0.setRecordNumber((long) (short) 100);
        java.nio.file.Path path27 = builder26.getPath();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertArrayEquals(byteArray13, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertNull("file23.getParent() == null", file23.getParent());
        org.junit.Assert.assertEquals(file23.toString(), "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(path27);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1090");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder15 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset16 = builder15.getCharsetDefault();
        int int17 = builder15.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder15.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder23 = builder15.setByteArray(byteArray22);
        org.apache.commons.csv.CSVParser.Builder builder24 = builder14.setByteArray(byteArray22);
        org.apache.commons.csv.CSVParser.Builder builder25 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset26 = builder25.getCharsetDefault();
        int int27 = builder25.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder25.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder33 = builder25.setByteArray(byteArray32);
        org.apache.commons.csv.CSVParser.Builder builder35 = builder25.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder37 = builder25.setBufferSize((int) (byte) 0);
        java.util.function.IntUnaryOperator intUnaryOperator38 = null;
        org.apache.commons.csv.CSVParser.Builder builder39 = builder37.setBufferSizeChecker(intUnaryOperator38);
        java.nio.file.Path path40 = builder39.getPath();
        org.apache.commons.csv.CSVParser.Builder builder41 = builder24.setPath(path40);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8192 + "'", int17 == 8192);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertArrayEquals(byteArray22, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8192 + "'", int27 == 8192);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertArrayEquals(byteArray32, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(path40);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1091");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        java.nio.file.Path path13 = builder0.getPath();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVPrinter cSVPrinter15 = cSVFormat14.printer();
        boolean boolean16 = cSVFormat14.getTrim();
        boolean boolean17 = cSVFormat14.isNullStringSet();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder0.setFormat(cSVFormat14);
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean21 = cSVFormat20.getSkipHeaderRecord();
        org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse("\n", cSVFormat20);
        boolean boolean23 = cSVFormat14.equals((java.lang.Object) cSVFormat20);
        boolean boolean24 = cSVFormat20.getTrim();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(cSVPrinter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(cSVParser22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1092");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) 1);
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        int int8 = builder6.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder14 = builder6.setByteArray(byteArray13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setBufferSize((java.lang.Integer) (-1));
        byte[] byteArray17 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder18 = builder14.setByteArray(byteArray17);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder5.setByteArray(byteArray17);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setBufferSize(8192);
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file22 = builder21.getFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getFile() for byte[] origin [B@70600c64");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8192 + "'", int3 == 8192);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertArrayEquals(byteArray13, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] {});
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1093");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        int int8 = builder6.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder14 = builder6.setByteArray(byteArray13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder6.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder18 = builder6.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder6.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset22 = builder21.getCharsetDefault();
        int int23 = builder21.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder21.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder29 = builder21.setByteArray(byteArray28);
        org.apache.commons.csv.CSVParser.Builder builder30 = builder20.setByteArray(byteArray28);
        java.nio.charset.Charset charset31 = builder20.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder0.setCharset(charset31);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder32.setBufferSize((java.lang.Integer) 0);
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean36 = cSVFormat35.isNullStringSet();
        java.lang.String[] strArray37 = cSVFormat35.getHeaderComments();
        org.apache.commons.csv.CSVParser.Builder builder38 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset39 = builder38.getCharsetDefault();
        byte[] byteArray40 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder41 = builder38.setByteArray(byteArray40);
        java.nio.charset.Charset charset42 = builder38.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder44 = builder38.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder45 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset46 = builder45.getCharsetDefault();
        int int47 = builder45.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder49 = builder45.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray52 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder53 = builder45.setByteArray(byteArray52);
        org.apache.commons.csv.CSVParser.Builder builder55 = builder45.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder57 = builder45.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder59 = builder45.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder61 = builder59.setCharacterOffset((long) '#');
        java.io.File file62 = builder61.getFile();
        org.apache.commons.csv.CSVParser.Builder builder63 = builder44.setFile(file62);
        org.apache.commons.csv.CSVParser.Builder builder65 = builder63.setFile(",");
        java.io.Reader reader66 = null; // flaky "4) test1093(org.apache.commons.csv.randoop.RegressionTest2)": builder63.getReader();
        org.apache.commons.csv.CSVParser cSVParser67 = null; // flaky "4) test1093(org.apache.commons.csv.randoop.RegressionTest2)": cSVFormat35.parse(reader66);
        org.apache.commons.csv.CSVFormat cSVFormat69 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser70 = org.apache.commons.csv.CSVParser.parse("", cSVFormat69);
        java.lang.String str71 = cSVFormat69.getDelimiterString();
        java.lang.String[] strArray72 = cSVFormat69.getHeader();
        org.apache.commons.csv.CSVParser cSVParser73 = null; // flaky "4) test1093(org.apache.commons.csv.randoop.RegressionTest2)": org.apache.commons.csv.CSVParser.parse(reader66, cSVFormat69);
        org.apache.commons.csv.CSVParser.Builder builder74 = null; // flaky "4) test1093(org.apache.commons.csv.randoop.RegressionTest2)": builder34.setReader(reader66);
        org.apache.commons.csv.CSVFormat cSVFormat75 = org.apache.commons.csv.CSVFormat.MONGODB_CSV;
        boolean boolean76 = cSVFormat75.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVParser cSVParser77 = null; // flaky "4) test1093(org.apache.commons.csv.randoop.RegressionTest2)": org.apache.commons.csv.CSVParser.parse(reader66, cSVFormat75);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertArrayEquals(byteArray13, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8192 + "'", int23 == 8192);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertArrayEquals(byteArray28, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(strArray37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertArrayEquals(byteArray40, new byte[] {});
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8192 + "'", int47 == 8192);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertArrayEquals(byteArray52, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(file62);
        org.junit.Assert.assertNull("file62.getParent() == null", file62.getParent());
        org.junit.Assert.assertEquals(file62.toString(), "");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
// flaky "4) test1093(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(reader66);
// flaky "3) test1093(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(cSVParser67);
        org.junit.Assert.assertNotNull(cSVFormat69);
        org.junit.Assert.assertNotNull(cSVParser70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\t" + "'", str71, "\t");
        org.junit.Assert.assertNull(strArray72);
// flaky "3) test1093(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(cSVParser73);
// flaky "3) test1093(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(cSVFormat75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
// flaky "3) test1093(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(cSVParser77);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1094");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setTrailingData(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder10.get();
        boolean boolean12 = cSVFormat11.getTrailingDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1095");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier13 = builder0.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder17 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset18 = builder17.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder14.setCharset(charset18);
        java.nio.charset.Charset charset20 = builder14.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder0.setCharset(charset20);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder0.setFile("");
        org.apache.commons.csv.CSVParser.Builder builder25 = builder0.setFile("Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVParserSupplier13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1096");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setBufferSize((java.lang.Integer) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream8 = builder7.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1097");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setEscape('a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder8.setCommentMarker((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setCommentMarker((java.lang.Character) '#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1098");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getIgnoreHeaderCase();
        java.lang.String str4 = cSVFormat2.getDelimiterString();
        boolean boolean5 = cSVFormat2.isQuoteCharacterSet();
        org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse(",", cSVFormat2);
        java.lang.String str7 = cSVParser6.getTrailerComment();
        java.lang.String str8 = cSVParser6.getHeaderComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "," + "'", str4, ",");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVParser6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1099");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        java.io.InputStream inputStream7 = builder6.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        byte[] byteArray10 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder11 = builder8.setByteArray(byteArray10);
        java.nio.charset.Charset charset12 = builder8.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat14.builder();
        java.lang.String str16 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse(inputStream7, charset12, cSVFormat14);
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset19 = builder18.getCharsetDefault();
        byte[] byteArray20 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder21 = builder18.setByteArray(byteArray20);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder18.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder25 = builder18.setBufferSize((int) 'a');
        java.nio.charset.Charset charset26 = builder25.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVParser cSVParser29 = org.apache.commons.csv.CSVParser.parse(inputStream7, charset26, cSVFormat28);
        org.apache.commons.csv.CSVParser.Builder builder30 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset31 = builder30.getCharsetDefault();
        byte[] byteArray32 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder33 = builder30.setByteArray(byteArray32);
        java.nio.charset.Charset charset34 = builder30.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean36 = cSVFormat35.getSkipHeaderRecord();
        java.lang.String str37 = cSVFormat35.getRecordSeparator();
        boolean boolean38 = cSVFormat35.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder39 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat35);
        java.sql.ResultSetMetaData resultSetMetaData40 = null;
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder39.setHeader(resultSetMetaData40);
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder41.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder43.setTrailingData(true);
        org.apache.commons.csv.CSVFormat cSVFormat46 = builder43.get();
        java.lang.Character char47 = cSVFormat46.getEscapeCharacter();
        java.lang.Character char48 = cSVFormat46.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder49 = cSVFormat46.builder();
        org.apache.commons.csv.CSVParser cSVParser50 = org.apache.commons.csv.CSVParser.parse(inputStream7, charset34, cSVFormat46);
        org.apache.commons.csv.CSVParser.Builder builder51 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset52 = builder51.getCharsetDefault();
        int int53 = builder51.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder55 = builder51.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray58 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder59 = builder51.setByteArray(byteArray58);
        org.apache.commons.csv.CSVParser.Builder builder61 = builder51.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder63 = builder51.setBufferSize((int) (byte) 0);
        java.util.function.IntUnaryOperator intUnaryOperator64 = null;
        org.apache.commons.csv.CSVParser.Builder builder65 = builder63.setBufferSizeChecker(intUnaryOperator64);
        java.nio.file.Path path66 = builder65.getPath();
        org.apache.commons.csv.CSVParser.Builder builder67 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset68 = builder67.getCharsetDefault();
        byte[] byteArray69 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder70 = builder67.setByteArray(byteArray69);
        java.lang.CharSequence charSequence71 = builder67.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder73 = builder67.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder74 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset75 = builder74.getCharsetDefault();
        byte[] byteArray76 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder77 = builder74.setByteArray(byteArray76);
        java.lang.CharSequence charSequence78 = builder74.getCharSequence();
        java.lang.CharSequence charSequence79 = builder74.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser80 = builder74.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray81 = builder74.getOpenOptions();
        java.nio.charset.Charset charset82 = builder74.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder83 = builder67.setCharset(charset82);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter84 = cSVFormat46.print(path66, charset82);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertArrayEquals(byteArray10, new byte[] {});
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVParser17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertArrayEquals(byteArray20, new byte[] {});
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVParser29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertArrayEquals(byteArray32, new byte[] {});
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\n" + "'", str37, "\n");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + char47 + "' != '" + '#' + "'", char47 == '#');
        org.junit.Assert.assertNull(char48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(cSVParser50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 8192 + "'", int53 == 8192);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertArrayEquals(byteArray58, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(path66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(charset68);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertArrayEquals(byteArray69, new byte[] {});
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertEquals("'" + charSequence71 + "' != '" + "" + "'", charSequence71, "");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(charset75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertArrayEquals(byteArray76, new byte[] {});
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertEquals("'" + charSequence78 + "' != '" + "" + "'", charSequence78, "");
        org.junit.Assert.assertEquals("'" + charSequence79 + "' != '" + "" + "'", charSequence79, "");
        org.junit.Assert.assertNotNull(cSVParser80);
        org.junit.Assert.assertNotNull(openOptionArray81);
        org.junit.Assert.assertArrayEquals(openOptionArray81, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset82);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1100");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        java.lang.String str3 = cSVParser2.getFirstEndOfLine();
        long long4 = cSVParser2.getCurrentLineNumber();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor5 = cSVParser2.iterator();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser2.iterator();
        java.lang.String str7 = cSVParser2.getFirstEndOfLine();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVParser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordItor5);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1101");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder18.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder18.setLenientEof(false);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder18.setLenientEof(false);
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder18.setAllowMissingColumnNames(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1102");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        java.lang.String str9 = cSVFormat7.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode10 = cSVFormat7.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder6.setDuplicateHeaderMode(duplicateHeaderMode10);
        org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean13 = cSVFormat12.getSkipHeaderRecord();
        java.lang.String str14 = cSVFormat12.getRecordSeparator();
        boolean boolean15 = cSVFormat12.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder16 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat12);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder16.setTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder16.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        boolean boolean25 = cSVFormat24.getIgnoreHeaderCase();
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str31 = cSVFormat24.format(objArray30);
        java.lang.String str32 = cSVFormat24.getRecordSeparator();
        boolean boolean33 = cSVFormat24.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode34 = cSVFormat24.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder16.setQuoteMode(quoteMode34);
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder11.setQuoteMode(quoteMode34);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder11.setDelimiter(' ');
        org.apache.commons.csv.CSVFormat cSVFormat39 = builder38.get();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode10 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode10.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\n" + "'", str14, "\n");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str31, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\r\n" + "'", str32, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + quoteMode34 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode34.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(cSVFormat39);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1103");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setBufferSize((java.lang.Integer) (-1));
        byte[] byteArray11 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder12 = builder8.setByteArray(byteArray11);
        int int13 = builder8.getBufferSizeDefault();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertArrayEquals(byteArray11, new byte[] {});
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8192 + "'", int13 == 8192);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1104");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isNullStringSet();
        boolean boolean2 = cSVFormat0.getAllowMissingColumnNames();
        boolean boolean3 = cSVFormat0.getTrim();
        java.lang.String[] strArray4 = cSVFormat0.getHeaderComments();
        boolean boolean5 = cSVFormat0.isNullStringSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1105");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset15 = builder14.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder11.setCharset(charset15);
        java.nio.charset.Charset charset17 = builder11.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder0.setCharset(charset17);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setCharacterOffset((long) (short) 10);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1106");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setRecordNumber((long) '#');
        java.io.InputStream inputStream7 = builder6.getInputStream();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(inputStream7);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1107");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.lang.String str6 = cSVParser5.getHeaderComment();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor7 = cSVParser5.iterator();
        cSVParser5.close();
        boolean boolean9 = cSVParser5.isClosed();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(cSVRecordItor7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1108");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.nio.charset.Charset charset4 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        int int9 = builder7.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder7.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder7.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder19 = builder7.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder7.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) '#');
        java.io.File file24 = builder23.getFile();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder6.setFile(file24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setFile(",");
        org.apache.commons.csv.CSVParser.Builder builder29 = builder25.setBufferSize((int) (byte) -1);
        java.io.File file30 = builder29.getFile();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertNull("file30.getParent() == null", file30.getParent());
        org.junit.Assert.assertEquals(file30.toString(), ",");
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1109");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setTrailingData(true);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder22.setNullString("\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\",,hi!,\"\r\n\",,\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"");
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean28 = cSVFormat27.getSkipHeaderRecord();
        java.lang.String str29 = cSVFormat27.getRecordSeparator();
        boolean boolean30 = cSVFormat27.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder31 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat27);
        java.sql.ResultSetMetaData resultSetMetaData32 = null;
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setHeader(resultSetMetaData32);
        org.apache.commons.csv.CSVFormat cSVFormat34 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean35 = cSVFormat34.getSkipHeaderRecord();
        java.lang.String str36 = cSVFormat34.getRecordSeparator();
        boolean boolean37 = cSVFormat34.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder38 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat34);
        org.apache.commons.csv.QuoteMode quoteMode39 = null;
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setQuoteMode(quoteMode39);
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder38.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray49 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder50 = builder38.setHeaderComments(strArray49);
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder33.setHeaderComments(strArray49);
        org.apache.commons.csv.CSVFormat cSVFormat52 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean53 = cSVFormat52.getSkipHeaderRecord();
        java.lang.String str54 = cSVFormat52.getRecordSeparator();
        boolean boolean55 = cSVFormat52.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder56 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat52);
        org.apache.commons.csv.QuoteMode quoteMode57 = null;
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder56.setQuoteMode(quoteMode57);
        org.apache.commons.csv.CSVFormat cSVFormat59 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean60 = cSVFormat59.getSkipHeaderRecord();
        java.lang.String str61 = cSVFormat59.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode62 = cSVFormat59.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder58.setDuplicateHeaderMode(duplicateHeaderMode62);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder51.setDuplicateHeaderMode(duplicateHeaderMode62);
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder22.setDuplicateHeaderMode(duplicateHeaderMode62);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\n" + "'", str29, "\n");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(cSVFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\n" + "'", str36, "\n");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertArrayEquals(strArray49, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(cSVFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\n" + "'", str54, "\n");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(cSVFormat59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\n" + "'", str61, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode62 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode62.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1110");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        boolean boolean3 = cSVFormat1.isEscapeCharacterSet();
        org.apache.commons.csv.CSVPrinter cSVPrinter4 = cSVFormat1.printer();
        org.apache.commons.csv.CSVFormat.Builder builder5 = cSVFormat1.builder();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(cSVPrinter4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1111");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined2 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined2.getFormat();
        boolean boolean4 = cSVFormat3.getIgnoreHeaderCase();
        java.lang.Object[] objArray9 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str10 = cSVFormat3.format(objArray9);
        java.lang.String str11 = cSVFormat0.format(objArray9);
        boolean boolean12 = cSVFormat0.isEscapeCharacterSet();
        java.lang.Character char13 = cSVFormat0.getCommentMarker();
        java.lang.String str14 = cSVFormat0.getRecordSeparator();
        boolean boolean15 = cSVFormat0.isEscapeCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + predefined2 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined2.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str10, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str11, "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(char13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\n" + "'", str14, "\n");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1112");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setTrailingData(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder8.get();
        boolean boolean12 = cSVFormat11.getTrailingDelimiter();
        boolean boolean13 = cSVFormat11.isEscapeCharacterSet();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean15 = cSVFormat14.getSkipHeaderRecord();
        java.lang.String str16 = cSVFormat14.getRecordSeparator();
        boolean boolean17 = cSVFormat14.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder18 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat14);
        org.apache.commons.csv.QuoteMode quoteMode19 = null;
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setQuoteMode(quoteMode19);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray29 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder18.setHeaderComments(strArray29);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder30.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder32.setTrailingData(false);
        java.sql.ResultSetMetaData resultSetMetaData35 = null;
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setHeader(resultSetMetaData35);
        java.lang.Appendable appendable37 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat11.print((java.lang.Object) builder34, appendable37, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\n" + "'", str16, "\n");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertArrayEquals(strArray29, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1113");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        boolean boolean2 = cSVFormat0.getLenientEof();
        java.lang.String str3 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset6 = builder5.getCharsetDefault();
        byte[] byteArray7 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder8 = builder5.setByteArray(byteArray7);
        java.nio.charset.Charset charset9 = builder5.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder5.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset13 = builder12.getCharsetDefault();
        int int14 = builder12.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder12.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder20 = builder12.setByteArray(byteArray19);
        org.apache.commons.csv.CSVParser.Builder builder22 = builder12.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder24 = builder12.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder26 = builder12.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder28 = builder26.setCharacterOffset((long) '#');
        java.io.File file29 = builder28.getFile();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder11.setFile(file29);
        org.apache.commons.csv.CSVParser.Builder builder32 = builder30.setFile(",");
        java.io.Reader reader33 = null; // flaky "5) test1113(org.apache.commons.csv.randoop.RegressionTest2)": builder30.getReader();
        org.apache.commons.csv.CSVParser cSVParser34 = null; // flaky "5) test1113(org.apache.commons.csv.randoop.RegressionTest2)": cSVFormat0.parse(reader33);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\r\n" + "'", str3, "\r\n");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8192 + "'", int14 == 8192);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertArrayEquals(byteArray19, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertNull("file29.getParent() == null", file29.getParent());
        org.junit.Assert.assertEquals(file29.toString(), "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
// flaky "5) test1113(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(reader33);
// flaky "5) test1113(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(cSVParser34);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1114");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        java.lang.String str9 = cSVFormat7.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode10 = cSVFormat7.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder6.setDuplicateHeaderMode(duplicateHeaderMode10);
        org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean13 = cSVFormat12.getSkipHeaderRecord();
        java.lang.String str14 = cSVFormat12.getRecordSeparator();
        boolean boolean15 = cSVFormat12.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder16 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat12);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder16.setTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder16.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        boolean boolean25 = cSVFormat24.getIgnoreHeaderCase();
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str31 = cSVFormat24.format(objArray30);
        java.lang.String str32 = cSVFormat24.getRecordSeparator();
        boolean boolean33 = cSVFormat24.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode34 = cSVFormat24.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder16.setQuoteMode(quoteMode34);
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder11.setQuoteMode(quoteMode34);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder11.setQuote((java.lang.Character) '#');
        java.sql.ResultSet resultSet39 = null;
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setHeader(resultSet39);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode10 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode10.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\n" + "'", str14, "\n");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str31, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\r\n" + "'", str32, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + quoteMode34 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode34.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1115");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        java.nio.charset.Charset charset6 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset10 = builder9.getCharsetDefault();
        int int11 = builder9.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder9.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder17 = builder9.setByteArray(byteArray16);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder9.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder21 = builder9.setBufferSize((int) (byte) 0);
        java.nio.file.Path path22 = builder9.getPath();
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset24 = builder23.getCharsetDefault();
        int int25 = builder23.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder23.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder31 = builder23.setByteArray(byteArray30);
        org.apache.commons.csv.CSVParser.Builder builder33 = builder23.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder35 = builder23.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder37 = builder23.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder39 = builder37.setCharacterOffset((long) '#');
        java.io.File file40 = builder39.getFile();
        org.apache.commons.csv.CSVParser.Builder builder41 = builder9.setFile(file40);
        org.apache.commons.csv.CSVParser.Builder builder42 = builder8.setFile(file40);
        org.apache.commons.csv.CSVFormat cSVFormat44 = org.apache.commons.csv.CSVFormat.newFormat('a');
        java.lang.Character char45 = cSVFormat44.getCommentMarker();
        org.apache.commons.csv.CSVParser.Builder builder46 = builder8.setFormat(cSVFormat44);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8192 + "'", int11 == 8192);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertArrayEquals(byteArray16, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(path22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8192 + "'", int25 == 8192);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertArrayEquals(byteArray30, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(file40);
        org.junit.Assert.assertNull("file40.getParent() == null", file40.getParent());
        org.junit.Assert.assertEquals(file40.toString(), "");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(cSVFormat44);
        org.junit.Assert.assertNull(char45);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1116");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setQuoteMode(quoteMode7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean12 = cSVFormat11.getSkipHeaderRecord();
        java.lang.String str13 = cSVFormat11.getRecordSeparator();
        boolean boolean14 = cSVFormat11.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat11);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode21 = cSVFormat20.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder17.setDuplicateHeaderMode(duplicateHeaderMode21);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder10.setDuplicateHeaderMode(duplicateHeaderMode21);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder10.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder25.setIgnoreSurroundingSpaces(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode21 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode21.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1117");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setTrailingData(true);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder22.setAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder22.setRecordSeparator("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean30 = cSVFormat29.getSkipHeaderRecord();
        java.lang.String str31 = cSVFormat29.getRecordSeparator();
        boolean boolean32 = cSVFormat29.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder33 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat29);
        org.apache.commons.csv.QuoteMode quoteMode34 = null;
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setQuoteMode(quoteMode34);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder33.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray44 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder33.setHeaderComments(strArray44);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder33.setCommentMarker('a');
        java.sql.ResultSetMetaData resultSetMetaData48 = null;
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder47.setHeader(resultSetMetaData48);
        org.apache.commons.csv.CSVFormat cSVFormat50 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean51 = cSVFormat50.getSkipHeaderRecord();
        java.lang.String str52 = cSVFormat50.getRecordSeparator();
        boolean boolean53 = cSVFormat50.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder54 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat50);
        org.apache.commons.csv.CSVFormat.Builder builder56 = builder54.setCommentMarker('a');
        java.lang.String[] strArray61 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" };
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder54.setHeader(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder54.setNullString("");
        org.apache.commons.csv.CSVFormat cSVFormat65 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean66 = cSVFormat65.getSkipHeaderRecord();
        java.lang.String str67 = cSVFormat65.getRecordSeparator();
        boolean boolean68 = cSVFormat65.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder69 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat65);
        org.apache.commons.csv.QuoteMode quoteMode70 = null;
        org.apache.commons.csv.CSVFormat.Builder builder71 = builder69.setQuoteMode(quoteMode70);
        org.apache.commons.csv.CSVFormat.Builder builder73 = builder69.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray80 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder81 = builder69.setHeaderComments(strArray80);
        org.apache.commons.csv.CSVFormat.Builder builder82 = builder64.setHeader(strArray80);
        org.apache.commons.csv.CSVFormat.Builder builder83 = builder47.setHeaderComments(strArray80);
        org.apache.commons.csv.CSVFormat.Builder builder84 = builder22.setHeaderComments(strArray80);
        org.apache.commons.csv.CSVFormat.Builder builder86 = builder22.setTrailingData(false);
        org.apache.commons.csv.CSVFormat.Builder builder88 = builder22.setRecordSeparator("a");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\n" + "'", str31, "\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertArrayEquals(strArray44, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\n" + "'", str52, "\n");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertArrayEquals(strArray61, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" });
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(cSVFormat65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\n" + "'", str67, "\n");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertArrayEquals(strArray80, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1118");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        boolean boolean4 = cSVFormat0.isNullStringSet();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        boolean boolean8 = cSVFormat7.getAutoFlush();
        boolean boolean9 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVParser cSVParser10 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat7);
        java.lang.String str11 = cSVParser10.getHeaderComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream12 = cSVParser10.stream();
        boolean boolean13 = cSVFormat0.equals((java.lang.Object) cSVParser10);
        boolean boolean14 = cSVFormat0.getLenientEof();
        boolean boolean15 = cSVFormat0.getAutoFlush();
        org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVPrinter cSVPrinter17 = cSVFormat16.printer();
        boolean boolean18 = cSVFormat16.getTrim();
        boolean boolean19 = cSVFormat16.isNullStringSet();
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean21 = cSVFormat20.getSkipHeaderRecord();
        java.lang.String str22 = cSVFormat20.getRecordSeparator();
        boolean boolean23 = cSVFormat20.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder24 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat20);
        java.sql.ResultSetMetaData resultSetMetaData25 = null;
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setHeader(resultSetMetaData25);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setTrailingData(true);
        org.apache.commons.csv.CSVFormat cSVFormat31 = builder28.get();
        java.lang.Character char32 = cSVFormat31.getEscapeCharacter();
        boolean boolean33 = cSVFormat16.equals((java.lang.Object) char32);
        org.apache.commons.csv.CSVParser.Builder builder34 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset35 = builder34.getCharsetDefault();
        int int36 = builder34.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder38 = builder34.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder42 = builder34.setByteArray(byteArray41);
        org.apache.commons.csv.CSVParser.Builder builder44 = builder34.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder46 = builder34.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder48 = builder34.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder50 = builder48.setCharacterOffset((long) '#');
        java.io.File file51 = builder50.getFile();
        boolean boolean52 = cSVFormat16.equals((java.lang.Object) file51);
        org.apache.commons.csv.CSVParser.Builder builder53 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset54 = builder53.getCharsetDefault();
        byte[] byteArray55 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder56 = builder53.setByteArray(byteArray55);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier57 = builder53.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder58 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset59 = builder58.getCharsetDefault();
        byte[] byteArray60 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder61 = builder58.setByteArray(byteArray60);
        java.lang.CharSequence charSequence62 = builder58.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder64 = builder58.setBufferSize((int) ' ');
        java.io.InputStream inputStream65 = builder64.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder66 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset67 = builder66.getCharsetDefault();
        byte[] byteArray68 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder69 = builder66.setByteArray(byteArray68);
        java.nio.charset.Charset charset70 = builder66.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat72 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder73 = cSVFormat72.builder();
        java.lang.String str74 = cSVFormat72.getNullString();
        org.apache.commons.csv.CSVParser cSVParser75 = org.apache.commons.csv.CSVParser.parse(inputStream65, charset70, cSVFormat72);
        org.apache.commons.csv.CSVParser.Builder builder76 = builder53.setInputStream(inputStream65);
        java.nio.charset.Charset charset77 = builder76.getCharsetDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter78 = cSVFormat0.print(file51, charset77);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVParser10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(cSVRecordStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(cSVFormat16);
        org.junit.Assert.assertNotNull(cSVPrinter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\n" + "'", str22, "\n");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + char32 + "' != '" + '#' + "'", char32 == '#');
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8192 + "'", int36 == 8192);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertArrayEquals(byteArray41, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(file51);
        org.junit.Assert.assertNull("file51.getParent() == null", file51.getParent());
        org.junit.Assert.assertEquals(file51.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertArrayEquals(byteArray55, new byte[] {});
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(cSVParserSupplier57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(charset59);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertArrayEquals(byteArray60, new byte[] {});
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertEquals("'" + charSequence62 + "' != '" + "" + "'", charSequence62, "");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(inputStream65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(charset67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertArrayEquals(byteArray68, new byte[] {});
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(charset70);
        org.junit.Assert.assertNotNull(cSVFormat72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(cSVParser75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(charset77);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1119");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setCommentMarker('#');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setAllowMissingColumnNames(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setEscape((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder12.setEscape((java.lang.Character) ' ');
        java.sql.ResultSetMetaData resultSetMetaData19 = null;
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder12.setHeader(resultSetMetaData19);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1120");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        boolean boolean4 = cSVFormat0.isNullStringSet();
        org.apache.commons.csv.CSVFormat.Builder builder5 = cSVFormat0.builder();
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setQuote((java.lang.Character) 'a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1121");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setBufferSize((java.lang.Integer) (-1));
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset12 = builder11.getCharsetDefault();
        int int13 = builder11.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder11.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder19 = builder11.setByteArray(byteArray18);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder11.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder23 = builder11.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder25 = builder11.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setCharacterOffset((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder29 = builder25.setCharacterOffset((long) 'a');
        java.nio.charset.Charset charset30 = builder25.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder31 = builder8.setCharset(charset30);
        org.apache.commons.csv.CSVParser.Builder builder33 = builder31.setCharSequence((java.lang.CharSequence) "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8192 + "'", int13 == 8192);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1122");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setIgnoreHeaderCase(true);
        java.sql.ResultSetMetaData resultSetMetaData6 = null;
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setHeader(resultSetMetaData6);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setAutoFlush(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1123");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.nio.charset.Charset charset4 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        int int9 = builder7.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder7.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder7.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder19 = builder7.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder7.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) '#');
        java.io.File file24 = builder23.getFile();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder6.setFile(file24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder6.setCharacterOffset((long) 10);
        int int28 = builder27.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder29 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset30 = builder29.getCharsetDefault();
        byte[] byteArray31 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder32 = builder29.setByteArray(byteArray31);
        java.lang.CharSequence charSequence33 = builder29.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder29.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder36 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset37 = builder36.getCharsetDefault();
        int int38 = builder36.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder40 = builder36.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder44 = builder36.setByteArray(byteArray43);
        java.nio.charset.Charset charset45 = builder36.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder46 = builder35.setCharset(charset45);
        org.apache.commons.csv.CSVParser.Builder builder47 = builder27.setCharset(charset45);
        java.io.OutputStream outputStream48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder49 = builder47.setOutputStream(outputStream48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8192 + "'", int28 == 8192);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertArrayEquals(byteArray31, new byte[] {});
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "" + "'", charSequence33, "");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8192 + "'", int38 == 8192);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertArrayEquals(byteArray43, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1124");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setBufferSize((int) 'a');
        java.nio.file.OpenOption[] openOptionArray8 = builder7.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder7.setCharSequence((java.lang.CharSequence) "\r\n#Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]#Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder7.setCharSequence((java.lang.CharSequence) ",");
        java.lang.CharSequence charSequence13 = builder7.getCharSequence();
        java.nio.charset.Charset charset14 = builder7.getCharset();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(openOptionArray8);
        org.junit.Assert.assertArrayEquals(openOptionArray8, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "," + "'", charSequence13, ",");
        org.junit.Assert.assertNotNull(charset14);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1125");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVParser5.hasTrailerComment();
        java.lang.String str7 = cSVParser5.getHeaderComment();
        long long8 = cSVParser5.getCurrentLineNumber();
        java.lang.String str9 = cSVParser5.getHeaderComment();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList10 = cSVParser5.getRecords();
        cSVParser5.close();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(cSVRecordList10);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1126");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.DEFAULT;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined0.getFormat();
        org.apache.commons.csv.CSVFormat cSVFormat3 = predefined0.getFormat();
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset5 = builder4.getCharsetDefault();
        byte[] byteArray6 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder7 = builder4.setByteArray(byteArray6);
        java.lang.CharSequence charSequence8 = builder4.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder4.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset12 = builder11.getCharsetDefault();
        byte[] byteArray13 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder14 = builder11.setByteArray(byteArray13);
        java.lang.CharSequence charSequence15 = builder11.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder17 = builder11.setBufferSize((int) ' ');
        java.io.Reader reader18 = builder17.getReader();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder4.setReader(reader18);
        org.apache.commons.csv.CSVFormat.Predefined predefined20 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat21 = predefined20.getFormat();
        boolean boolean22 = cSVFormat21.getIgnoreHeaderCase();
        java.lang.Object[] objArray27 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str28 = cSVFormat21.format(objArray27);
        boolean boolean29 = cSVFormat21.getTrim();
        org.apache.commons.csv.CSVParser cSVParser32 = new org.apache.commons.csv.CSVParser(reader18, cSVFormat21, (-1L), (long) (byte) 0);
        org.apache.commons.csv.CSVParser cSVParser33 = cSVFormat3.parse(reader18);
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.DEFAULT + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.DEFAULT));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] {});
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "" + "'", charSequence8, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertArrayEquals(byteArray13, new byte[] {});
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "" + "'", charSequence15, "");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(reader18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + predefined20 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined20.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str28, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(cSVParser33);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1127");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        java.lang.String str9 = cSVFormat7.getRecordSeparator();
        boolean boolean10 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat7);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode14 = null;
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setQuoteMode(quoteMode14);
        java.lang.String[] strArray19 = new java.lang.String[] { "\r\n", "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]", "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder15.setHeader(strArray19);
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder4.setHeader(strArray19);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder21.setRecordSeparator("\r\n");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertArrayEquals(strArray19, new java.lang.String[] { "\r\n", "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]", "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" });
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1128");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        java.nio.charset.Charset charset6 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset10 = builder9.getCharsetDefault();
        int int11 = builder9.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder9.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder17 = builder9.setByteArray(byteArray16);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder9.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder21 = builder9.setBufferSize((int) (byte) 0);
        java.nio.file.Path path22 = builder9.getPath();
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset24 = builder23.getCharsetDefault();
        int int25 = builder23.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder23.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder31 = builder23.setByteArray(byteArray30);
        org.apache.commons.csv.CSVParser.Builder builder33 = builder23.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder35 = builder23.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder37 = builder23.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder39 = builder37.setCharacterOffset((long) '#');
        java.io.File file40 = builder39.getFile();
        org.apache.commons.csv.CSVParser.Builder builder41 = builder9.setFile(file40);
        org.apache.commons.csv.CSVParser.Builder builder42 = builder8.setFile(file40);
        org.apache.commons.csv.CSVFormat cSVFormat43 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean44 = cSVFormat43.isNullStringSet();
        java.lang.String[] strArray45 = cSVFormat43.getHeaderComments();
        org.apache.commons.csv.CSVParser.Builder builder46 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset47 = builder46.getCharsetDefault();
        byte[] byteArray48 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder49 = builder46.setByteArray(byteArray48);
        java.nio.charset.Charset charset50 = builder46.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder52 = builder46.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder53 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset54 = builder53.getCharsetDefault();
        int int55 = builder53.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder57 = builder53.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray60 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder61 = builder53.setByteArray(byteArray60);
        org.apache.commons.csv.CSVParser.Builder builder63 = builder53.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder65 = builder53.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder67 = builder53.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder69 = builder67.setCharacterOffset((long) '#');
        java.io.File file70 = builder69.getFile();
        org.apache.commons.csv.CSVParser.Builder builder71 = builder52.setFile(file70);
        org.apache.commons.csv.CSVParser.Builder builder73 = builder71.setFile(",");
        java.io.Reader reader74 = null; // flaky "6) test1128(org.apache.commons.csv.randoop.RegressionTest2)": builder71.getReader();
        org.apache.commons.csv.CSVParser cSVParser75 = null; // flaky "6) test1128(org.apache.commons.csv.randoop.RegressionTest2)": cSVFormat43.parse(reader74);
        org.apache.commons.csv.CSVParser.Builder builder76 = null; // flaky "6) test1128(org.apache.commons.csv.randoop.RegressionTest2)": builder8.setReader(reader74);
        org.apache.commons.csv.CSVParser.Builder builder77 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset78 = builder77.getCharsetDefault();
        byte[] byteArray79 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder80 = builder77.setByteArray(byteArray79);
        org.apache.commons.csv.CSVParser.Builder builder82 = builder77.setBufferSizeMax(8192);
        org.apache.commons.csv.CSVParser.Builder builder84 = builder82.setCharSequence((java.lang.CharSequence) "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        java.lang.CharSequence charSequence85 = builder84.getCharSequence();
        java.nio.file.OpenOption[] openOptionArray86 = builder84.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder87 = null; // flaky "6) test1128(org.apache.commons.csv.randoop.RegressionTest2)": builder76.setOpenOptions(openOptionArray86);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Writer writer88 = null; // flaky "5) test1128(org.apache.commons.csv.randoop.RegressionTest2)": builder76.getWriter();
// flaky "5) test1128(org.apache.commons.csv.randoop.RegressionTest2)":             org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ReaderOrigin#getPath() for BufferedReader origin java.io.BufferedReader@49d8d05e");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8192 + "'", int11 == 8192);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertArrayEquals(byteArray16, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(path22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8192 + "'", int25 == 8192);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertArrayEquals(byteArray30, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(file40);
        org.junit.Assert.assertNull("file40.getParent() == null", file40.getParent());
        org.junit.Assert.assertEquals(file40.toString(), "");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(strArray45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertArrayEquals(byteArray48, new byte[] {});
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8192 + "'", int55 == 8192);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertArrayEquals(byteArray60, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(file70);
        org.junit.Assert.assertNull("file70.getParent() == null", file70.getParent());
        org.junit.Assert.assertEquals(file70.toString(), "");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
// flaky "4) test1128(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(reader74);
// flaky "4) test1128(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(cSVParser75);
// flaky "4) test1128(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(charset78);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertArrayEquals(byteArray79, new byte[] {});
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertEquals("'" + charSequence85 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", charSequence85, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(openOptionArray86);
        org.junit.Assert.assertArrayEquals(openOptionArray86, new java.nio.file.OpenOption[] {});
// flaky "4) test1128(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1129");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.nio.charset.Charset charset4 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        int int9 = builder7.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder7.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder7.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder19 = builder7.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder7.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) '#');
        java.io.File file24 = builder23.getFile();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder6.setFile(file24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setFile(",");
        java.io.Reader reader28 = null; // flaky "7) test1129(org.apache.commons.csv.randoop.RegressionTest2)": builder25.getReader();
        org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean30 = cSVFormat29.getSkipHeaderRecord();
        java.lang.String str31 = cSVFormat29.getRecordSeparator();
        boolean boolean32 = cSVFormat29.isNullStringSet();
        boolean boolean33 = cSVFormat29.isCommentMarkerSet();
        org.apache.commons.csv.CSVParser cSVParser34 = null; // flaky "7) test1129(org.apache.commons.csv.randoop.RegressionTest2)": org.apache.commons.csv.CSVParser.parse(reader28, cSVFormat29);
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean36 = cSVFormat35.getSkipHeaderRecord();
        java.lang.String str37 = cSVFormat35.getRecordSeparator();
        boolean boolean38 = cSVFormat35.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder39 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat35);
        java.sql.ResultSetMetaData resultSetMetaData40 = null;
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder39.setHeader(resultSetMetaData40);
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder41.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder43.setTrailingData(true);
        org.apache.commons.csv.CSVFormat cSVFormat46 = builder43.get();
        java.lang.Character char47 = cSVFormat46.getEscapeCharacter();
        java.lang.Character char48 = cSVFormat46.getCommentMarker();
        org.apache.commons.csv.CSVParser cSVParser49 = null; // flaky "7) test1129(org.apache.commons.csv.randoop.RegressionTest2)": org.apache.commons.csv.CSVParser.parse(reader28, cSVFormat46);
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator50 = null; // flaky "7) test1129(org.apache.commons.csv.randoop.RegressionTest2)": cSVParser49.spliterator();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
// flaky "6) test1129(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(reader28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\n" + "'", str31, "\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky "6) test1129(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(cSVParser34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\n" + "'", str37, "\n");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + char47 + "' != '" + '#' + "'", char47 == '#');
        org.junit.Assert.assertNull(char48);
// flaky "5) test1129(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(cSVParser49);
// flaky "5) test1129(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(cSVRecordSpliterator50);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1130");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        java.io.InputStream inputStream7 = builder6.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        byte[] byteArray10 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder11 = builder8.setByteArray(byteArray10);
        java.nio.charset.Charset charset12 = builder8.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat14.builder();
        java.lang.String str16 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse(inputStream7, charset12, cSVFormat14);
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset19 = builder18.getCharsetDefault();
        byte[] byteArray20 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder21 = builder18.setByteArray(byteArray20);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder18.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder25 = builder18.setBufferSize((int) 'a');
        java.nio.charset.Charset charset26 = builder25.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVParser cSVParser29 = org.apache.commons.csv.CSVParser.parse(inputStream7, charset26, cSVFormat28);
        org.apache.commons.csv.CSVParser.Builder builder30 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset31 = builder30.getCharsetDefault();
        byte[] byteArray32 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder33 = builder30.setByteArray(byteArray32);
        java.nio.charset.Charset charset34 = builder30.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean36 = cSVFormat35.getSkipHeaderRecord();
        java.lang.String str37 = cSVFormat35.getRecordSeparator();
        boolean boolean38 = cSVFormat35.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder39 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat35);
        java.sql.ResultSetMetaData resultSetMetaData40 = null;
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder39.setHeader(resultSetMetaData40);
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder41.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder43.setTrailingData(true);
        org.apache.commons.csv.CSVFormat cSVFormat46 = builder43.get();
        java.lang.Character char47 = cSVFormat46.getEscapeCharacter();
        java.lang.Character char48 = cSVFormat46.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder49 = cSVFormat46.builder();
        org.apache.commons.csv.CSVParser cSVParser50 = org.apache.commons.csv.CSVParser.parse(inputStream7, charset34, cSVFormat46);
        org.apache.commons.csv.CSVFormat.Builder builder51 = cSVFormat46.builder();
        java.lang.Appendable appendable52 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat46.println(appendable52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertArrayEquals(byteArray10, new byte[] {});
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVParser17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertArrayEquals(byteArray20, new byte[] {});
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVParser29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertArrayEquals(byteArray32, new byte[] {});
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\n" + "'", str37, "\n");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + char47 + "' != '" + '#' + "'", char47 == '#');
        org.junit.Assert.assertNull(char48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(cSVParser50);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1131");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setIgnoreSurroundingSpaces(false);
        java.sql.ResultSet resultSet11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setHeader(resultSet11);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder10.setIgnoreEmptyLines(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1132");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        boolean boolean3 = cSVFormat1.isEscapeCharacterSet();
        boolean boolean4 = cSVFormat1.getIgnoreHeaderCase();
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat1.printer();
        boolean boolean6 = cSVFormat1.getTrailingDelimiter();
        java.lang.String str7 = cSVFormat1.toString();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str7, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1133");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.getLenientEof();
        java.lang.String[] strArray2 = cSVFormat0.getHeader();
        boolean boolean3 = cSVFormat0.getIgnoreEmptyLines();
        boolean boolean4 = cSVFormat0.getIgnoreEmptyLines();
        boolean boolean5 = cSVFormat0.getTrailingData();
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        byte[] byteArray8 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder9 = builder6.setByteArray(byteArray8);
        org.apache.commons.csv.CSVParser.Builder builder11 = builder6.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder13 = builder6.setBufferSize((int) 'a');
        java.nio.charset.Charset charset14 = builder13.getCharsetDefault();
        boolean boolean15 = cSVFormat0.equals((java.lang.Object) builder13);
        java.nio.file.OpenOption[] openOptionArray16 = builder13.getOpenOptions();
        org.apache.commons.csv.CSVFormat cSVFormat17 = null;
        org.apache.commons.csv.CSVParser.Builder builder18 = builder13.setFormat(cSVFormat17);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertArrayEquals(byteArray8, new byte[] {});
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(openOptionArray16);
        org.junit.Assert.assertArrayEquals(openOptionArray16, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1134");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVFormat2.getSkipHeaderRecord();
        boolean boolean8 = cSVFormat2.equals((java.lang.Object) '4');
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setBufferSize((java.lang.Integer) 100);
        int int12 = builder9.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder9.setCharacterOffset((long) 1);
        org.apache.commons.csv.CSVParser.Builder builder15 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset16 = builder15.getCharsetDefault();
        int int17 = builder15.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder15.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser20 = builder15.getUnchecked();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder15.setPath(",");
        java.nio.file.OpenOption[] openOptionArray23 = builder22.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder14.setOpenOptions(openOptionArray23);
        org.apache.commons.csv.CSVParser.Builder builder25 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset26 = builder25.getCharsetDefault();
        int int27 = builder25.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder25.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder33 = builder25.setByteArray(byteArray32);
        org.apache.commons.csv.CSVParser.Builder builder35 = builder25.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder37 = builder25.setBufferSize((int) (byte) 0);
        java.nio.file.Path path38 = builder25.getPath();
        org.apache.commons.csv.CSVParser.Builder builder39 = builder24.setPath(path38);
        org.apache.commons.csv.CSVParser.Builder builder40 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset41 = builder40.getCharsetDefault();
        int int42 = builder40.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder44 = builder40.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray47 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder48 = builder40.setByteArray(byteArray47);
        org.apache.commons.csv.CSVParser.Builder builder50 = builder40.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder52 = builder40.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder54 = builder40.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder55 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset56 = builder55.getCharsetDefault();
        int int57 = builder55.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder59 = builder55.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray62 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder63 = builder55.setByteArray(byteArray62);
        org.apache.commons.csv.CSVParser.Builder builder64 = builder54.setByteArray(byteArray62);
        java.nio.charset.Charset charset65 = builder54.getCharsetDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter66 = cSVFormat2.print(path38, charset65);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8192 + "'", int12 == 8192);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8192 + "'", int17 == 8192);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(cSVParser20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(openOptionArray23);
        org.junit.Assert.assertArrayEquals(openOptionArray23, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8192 + "'", int27 == 8192);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertArrayEquals(byteArray32, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(path38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8192 + "'", int42 == 8192);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertArrayEquals(byteArray47, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(charset56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 8192 + "'", int57 == 8192);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertArrayEquals(byteArray62, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(charset65);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1135");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder4.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat21 = builder4.get();
        java.lang.String str22 = cSVFormat21.toString();
        org.apache.commons.csv.QuoteMode quoteMode23 = cSVFormat21.getQuoteMode();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]" + "'", str22, "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]");
        org.junit.Assert.assertNull(quoteMode23);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1136");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset6 = builder5.getCharsetDefault();
        byte[] byteArray7 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder8 = builder5.setByteArray(byteArray7);
        java.lang.CharSequence charSequence9 = builder5.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder5.setBufferSize((int) ' ');
        java.io.Reader reader12 = builder11.getReader();
        org.apache.commons.csv.CSVParser cSVParser13 = cSVFormat4.parse(reader12);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setReader(reader12);
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean16 = cSVFormat15.getSkipHeaderRecord();
        java.lang.String str17 = cSVFormat15.getRecordSeparator();
        boolean boolean18 = cSVFormat15.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder19 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat15);
        org.apache.commons.csv.QuoteMode quoteMode20 = null;
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setQuoteMode(quoteMode20);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray30 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder19.setHeaderComments(strArray30);
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder19.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder19.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat36 = builder19.get();
        java.lang.String str37 = cSVFormat36.toString();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode38 = cSVFormat36.getDuplicateHeaderMode();
        boolean boolean39 = cSVFormat36.getTrailingDelimiter();
        org.apache.commons.csv.CSVParser cSVParser40 = org.apache.commons.csv.CSVParser.parse(reader12, cSVFormat36);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "" + "'", charSequence9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(reader12);
        org.junit.Assert.assertNotNull(cSVParser13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\n" + "'", str17, "\n");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertArrayEquals(strArray30, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]" + "'", str37, "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode38 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode38.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(cSVParser40);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1137");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setLenientEof(false);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setDelimiter('4');
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean12 = cSVFormat11.getSkipHeaderRecord();
        java.lang.String str13 = cSVFormat11.getRecordSeparator();
        boolean boolean14 = cSVFormat11.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat11);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode18 = null;
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setQuoteMode(quoteMode18);
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder17.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean23 = cSVFormat22.getSkipHeaderRecord();
        java.lang.String str24 = cSVFormat22.getRecordSeparator();
        boolean boolean25 = cSVFormat22.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder26 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat22);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode32 = cSVFormat31.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder28.setDuplicateHeaderMode(duplicateHeaderMode32);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder21.setDuplicateHeaderMode(duplicateHeaderMode32);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder6.setDuplicateHeaderMode(duplicateHeaderMode32);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setQuote('a');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\n" + "'", str24, "\n");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode32 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode32.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1138");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        boolean boolean5 = cSVFormat0.isCommentMarkerSet();
        boolean boolean6 = cSVFormat0.getAllowMissingColumnNames();
        java.lang.String[] strArray7 = cSVFormat0.getHeaderComments();
        boolean boolean8 = cSVFormat0.getAllowMissingColumnNames();
        boolean boolean9 = cSVFormat0.getIgnoreHeaderCase();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1139");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        boolean boolean3 = cSVFormat1.isEscapeCharacterSet();
        boolean boolean4 = cSVFormat1.isQuoteCharacterSet();
        java.lang.Character char5 = cSVFormat1.getCommentMarker();
        boolean boolean6 = cSVFormat1.getTrailingData();
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        byte[] byteArray9 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder10 = builder7.setByteArray(byteArray9);
        java.lang.CharSequence charSequence11 = builder7.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder7.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset15 = builder14.getCharsetDefault();
        byte[] byteArray16 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder17 = builder14.setByteArray(byteArray16);
        java.lang.CharSequence charSequence18 = builder14.getCharSequence();
        java.lang.CharSequence charSequence19 = builder14.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser20 = builder14.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray21 = builder14.getOpenOptions();
        java.nio.charset.Charset charset22 = builder14.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder7.setCharset(charset22);
        org.apache.commons.csv.CSVParser.Builder builder24 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset25 = builder24.getCharsetDefault();
        byte[] byteArray26 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder27 = builder24.setByteArray(byteArray26);
        java.lang.CharSequence charSequence28 = builder24.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder24.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder32 = builder24.setRecordNumber((long) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder33 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset34 = builder33.getCharsetDefault();
        int int35 = builder33.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder37 = builder33.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray40 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder41 = builder33.setByteArray(byteArray40);
        org.apache.commons.csv.CSVParser.Builder builder43 = builder33.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder45 = builder33.setBufferSize((int) (byte) 0);
        java.nio.file.Path path46 = builder33.getPath();
        org.apache.commons.csv.CSVParser.Builder builder47 = builder24.setPath(path46);
        org.apache.commons.csv.CSVParser.Builder builder48 = builder7.setPath(path46);
        org.apache.commons.csv.CSVParser.Builder builder49 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset50 = builder49.getCharsetDefault();
        byte[] byteArray51 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder52 = builder49.setByteArray(byteArray51);
        java.nio.charset.Charset charset53 = builder49.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder55 = builder49.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder56 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset57 = builder56.getCharsetDefault();
        int int58 = builder56.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder60 = builder56.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray63 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder64 = builder56.setByteArray(byteArray63);
        org.apache.commons.csv.CSVParser.Builder builder66 = builder56.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder68 = builder56.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder70 = builder56.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder72 = builder70.setCharacterOffset((long) '#');
        java.io.File file73 = builder72.getFile();
        org.apache.commons.csv.CSVParser.Builder builder74 = builder55.setFile(file73);
        org.apache.commons.csv.CSVParser.Builder builder76 = builder55.setCharacterOffset((long) 10);
        org.apache.commons.csv.CSVParser.Builder builder77 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder79 = builder77.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder80 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset81 = builder80.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder82 = builder77.setCharset(charset81);
        java.nio.charset.Charset charset83 = builder77.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder84 = builder76.setCharset(charset83);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter85 = cSVFormat1.print(path46, charset83);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(char5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "" + "'", charSequence11, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertArrayEquals(byteArray16, new byte[] {});
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "" + "'", charSequence18, "");
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertNotNull(cSVParser20);
        org.junit.Assert.assertNotNull(openOptionArray21);
        org.junit.Assert.assertArrayEquals(openOptionArray21, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertArrayEquals(byteArray26, new byte[] {});
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + charSequence28 + "' != '" + "" + "'", charSequence28, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8192 + "'", int35 == 8192);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertArrayEquals(byteArray40, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(path46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertArrayEquals(byteArray51, new byte[] {});
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(charset57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 8192 + "'", int58 == 8192);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertArrayEquals(byteArray63, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(file73);
        org.junit.Assert.assertNull("file73.getParent() == null", file73.getParent());
        org.junit.Assert.assertEquals(file73.toString(), "");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(charset81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(charset83);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1140");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setRecordNumber((long) (short) 10);
        org.apache.commons.csv.CSVParser cSVParser8 = builder7.get();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser8.getHeaderMap();
        java.util.List<java.lang.String> strList10 = cSVParser8.getHeaderNames();
        boolean boolean11 = cSVParser8.isClosed();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(cSVParser8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1141");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream13 = builder0.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1142");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setRecordNumber((long) 1);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        int int5 = builder3.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder3.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder11 = builder3.setByteArray(byteArray10);
        org.apache.commons.csv.CSVParser.Builder builder13 = builder3.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder15 = builder3.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder3.setCharacterOffset((long) (byte) 1);
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 100, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder22 = builder17.setByteArray(byteArray21);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder2.setByteArray(byteArray21);
        org.apache.commons.csv.CSVParser.Builder builder24 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset25 = builder24.getCharsetDefault();
        byte[] byteArray26 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder27 = builder24.setByteArray(byteArray26);
        org.apache.commons.csv.CSVParser.Builder builder29 = builder24.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder31 = builder24.setBufferSize((int) 'a');
        org.apache.commons.csv.CSVParser.Builder builder33 = builder24.setCharacterOffset((long) 0);
        org.apache.commons.csv.CSVParser.Builder builder34 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset35 = builder34.getCharsetDefault();
        byte[] byteArray36 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder37 = builder34.setByteArray(byteArray36);
        java.lang.CharSequence charSequence38 = builder34.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder40 = builder34.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder41 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset42 = builder41.getCharsetDefault();
        byte[] byteArray43 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder44 = builder41.setByteArray(byteArray43);
        java.lang.CharSequence charSequence45 = builder41.getCharSequence();
        java.lang.CharSequence charSequence46 = builder41.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser47 = builder41.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray48 = builder41.getOpenOptions();
        java.nio.charset.Charset charset49 = builder41.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder50 = builder34.setCharset(charset49);
        org.apache.commons.csv.CSVParser.Builder builder51 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset52 = builder51.getCharsetDefault();
        byte[] byteArray53 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder54 = builder51.setByteArray(byteArray53);
        java.lang.CharSequence charSequence55 = builder51.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder57 = builder51.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder59 = builder51.setRecordNumber((long) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder60 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset61 = builder60.getCharsetDefault();
        int int62 = builder60.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder64 = builder60.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray67 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder68 = builder60.setByteArray(byteArray67);
        org.apache.commons.csv.CSVParser.Builder builder70 = builder60.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder72 = builder60.setBufferSize((int) (byte) 0);
        java.nio.file.Path path73 = builder60.getPath();
        org.apache.commons.csv.CSVParser.Builder builder74 = builder51.setPath(path73);
        org.apache.commons.csv.CSVParser.Builder builder75 = builder34.setPath(path73);
        org.apache.commons.csv.CSVParser.Builder builder76 = builder33.setPath(path73);
        org.apache.commons.csv.CSVParser.Builder builder77 = builder2.setPath(path73);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser78 = builder77.get();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8192 + "'", int5 == 8192);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertArrayEquals(byteArray10, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertArrayEquals(byteArray21, new byte[] { (byte) -1, (byte) 100, (byte) 1 });
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertArrayEquals(byteArray26, new byte[] {});
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertArrayEquals(byteArray36, new byte[] {});
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "" + "'", charSequence38, "");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertArrayEquals(byteArray43, new byte[] {});
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "" + "'", charSequence45, "");
        org.junit.Assert.assertEquals("'" + charSequence46 + "' != '" + "" + "'", charSequence46, "");
        org.junit.Assert.assertNotNull(cSVParser47);
        org.junit.Assert.assertNotNull(openOptionArray48);
        org.junit.Assert.assertArrayEquals(openOptionArray48, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(charset52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertArrayEquals(byteArray53, new byte[] {});
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "" + "'", charSequence55, "");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(charset61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 8192 + "'", int62 == 8192);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertArrayEquals(byteArray67, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(path73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1143");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setRecordNumber((long) (short) 10);
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setBufferSize((int) (short) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1144");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        java.lang.String str9 = cSVFormat7.getRecordSeparator();
        boolean boolean10 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat7);
        org.apache.commons.csv.QuoteMode quoteMode12 = null;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuoteMode(quoteMode12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray22 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder11.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder6.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder6.setQuote('#');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setEscape((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder26.setIgnoreSurroundingSpaces(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertArrayEquals(strArray22, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1145");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        java.lang.String str9 = cSVFormat7.getRecordSeparator();
        boolean boolean10 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat7);
        org.apache.commons.csv.QuoteMode quoteMode12 = null;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuoteMode(quoteMode12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray22 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder11.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder6.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder6.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder6.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setAllowMissingColumnNames(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertArrayEquals(strArray22, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1146");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        java.sql.ResultSet resultSet21 = null;
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setHeader(resultSet21);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder18.setRecordSeparator('4');
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat cSVFormat27 = builder24.get();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1147");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setRecordNumber((long) (short) 10);
        org.apache.commons.csv.CSVParser cSVParser8 = builder7.get();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file9 = builder7.getFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getFile() for byte[] origin [B@6035ff68");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(cSVParser8);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1148");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser6 = builder5.get();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: origin == null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8192 + "'", int3 == 8192);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1149");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        byte[] byteArray9 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder10 = builder7.setByteArray(byteArray9);
        java.lang.CharSequence charSequence11 = builder7.getCharSequence();
        java.lang.CharSequence charSequence12 = builder7.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser13 = builder7.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray14 = builder7.getOpenOptions();
        java.nio.charset.Charset charset15 = builder7.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder0.setCharset(charset15);
        org.apache.commons.csv.CSVParser.Builder builder17 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset18 = builder17.getCharsetDefault();
        byte[] byteArray19 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder20 = builder17.setByteArray(byteArray19);
        java.lang.CharSequence charSequence21 = builder17.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder17.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder25 = builder17.setRecordNumber((long) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder26 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset27 = builder26.getCharsetDefault();
        int int28 = builder26.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder30 = builder26.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder34 = builder26.setByteArray(byteArray33);
        org.apache.commons.csv.CSVParser.Builder builder36 = builder26.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder38 = builder26.setBufferSize((int) (byte) 0);
        java.nio.file.Path path39 = builder26.getPath();
        org.apache.commons.csv.CSVParser.Builder builder40 = builder17.setPath(path39);
        org.apache.commons.csv.CSVParser.Builder builder41 = builder0.setPath(path39);
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream42 = builder0.getInputStream();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertArrayEquals(byteArray9, new byte[] {});
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "" + "'", charSequence11, "");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertNotNull(cSVParser13);
        org.junit.Assert.assertNotNull(openOptionArray14);
        org.junit.Assert.assertArrayEquals(openOptionArray14, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertArrayEquals(byteArray19, new byte[] {});
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "" + "'", charSequence21, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8192 + "'", int28 == 8192);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertArrayEquals(byteArray33, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(path39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1150");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser5.iterator();
        boolean boolean7 = cSVParser5.isClosed();
        java.lang.String str8 = cSVParser5.getFirstEndOfLine();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1151");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        boolean boolean2 = cSVFormat0.getTrim();
        boolean boolean3 = cSVFormat0.getSkipHeaderRecord();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1152");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser5.iterator();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor7 = cSVParser5.iterator();
        boolean boolean8 = cSVParser5.hasHeaderComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertNotNull(cSVRecordItor7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1153");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVFormat2.getTrailingData();
        org.apache.commons.csv.QuoteMode quoteMode7 = cSVFormat2.getQuoteMode();
        java.lang.Character char8 = cSVFormat2.getQuoteCharacter();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + quoteMode7 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode7.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertTrue("'" + char8 + "' != '" + '\"' + "'", char8 == '\"');
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1154");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setTrailingData(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder8.get();
        boolean boolean12 = cSVFormat11.getTrailingDelimiter();
        boolean boolean13 = cSVFormat11.isEscapeCharacterSet();
        boolean boolean14 = cSVFormat11.getIgnoreEmptyLines();
        boolean boolean15 = cSVFormat11.isEscapeCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1155");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setLenientEof(true);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setIgnoreEmptyLines(true);
        java.lang.String[] strArray21 = null;
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setHeader(strArray21);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder18.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setAutoFlush(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1156");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getIgnoreHeaderCase();
        boolean boolean2 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        byte[] byteArray5 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder6 = builder3.setByteArray(byteArray5);
        boolean boolean7 = cSVFormat0.equals((java.lang.Object) builder3);
        org.apache.commons.csv.CSVFormat.Builder builder8 = cSVFormat0.builder();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertArrayEquals(byteArray5, new byte[] {});
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1157");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        boolean boolean2 = cSVFormat0.getIgnoreHeaderCase();
        java.lang.Appendable appendable3 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat0.println(appendable3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1158");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setRecordNumber((long) (short) 10);
        org.apache.commons.csv.CSVParser.Builder builder9 = builder5.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset11 = builder10.getCharsetDefault();
        int int12 = builder10.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder10.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder18 = builder10.setByteArray(byteArray17);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setBufferSize((java.lang.Integer) (-1));
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset22 = builder21.getCharsetDefault();
        int int23 = builder21.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder21.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder29 = builder21.setByteArray(byteArray28);
        org.apache.commons.csv.CSVParser.Builder builder31 = builder21.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder33 = builder21.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder35 = builder21.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setCharacterOffset((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder39 = builder35.setCharacterOffset((long) 'a');
        java.nio.charset.Charset charset40 = builder35.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder41 = builder18.setCharset(charset40);
        org.apache.commons.csv.CSVParser.Builder builder42 = builder5.setCharset(charset40);
        java.io.File file43 = builder5.getFile();
        java.nio.charset.Charset charset44 = builder5.getCharset();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8192 + "'", int12 == 8192);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8192 + "'", int23 == 8192);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertArrayEquals(byteArray28, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(file43);
        org.junit.Assert.assertNull("file43.getParent() == null", file43.getParent());
        org.junit.Assert.assertEquals(file43.toString(), "");
        org.junit.Assert.assertNotNull(charset44);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1159");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        java.nio.file.OpenOption[] openOptionArray6 = new java.nio.file.OpenOption[] {};
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setOpenOptions(openOptionArray6);
        org.apache.commons.csv.CSVParser.Builder builder9 = builder0.setCharacterOffset((long) (short) 0);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(openOptionArray6);
        org.junit.Assert.assertArrayEquals(openOptionArray6, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1160");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.String[] strArray3 = cSVFormat0.getHeader();
        java.lang.String str4 = cSVFormat0.getNullString();
        boolean boolean5 = cSVFormat0.isNullStringSet();
        boolean boolean6 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1161");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getIgnoreHeaderCase();
        java.lang.String str4 = cSVFormat2.getDelimiterString();
        boolean boolean5 = cSVFormat2.isQuoteCharacterSet();
        org.apache.commons.csv.CSVParser cSVParser6 = org.apache.commons.csv.CSVParser.parse(",", cSVFormat2);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor7 = cSVParser6.iterator();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator8 = cSVParser6.spliterator();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList9 = cSVParser6.getRecords();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "," + "'", str4, ",");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(cSVParser6);
        org.junit.Assert.assertNotNull(cSVRecordItor7);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator8);
        org.junit.Assert.assertNotNull(cSVRecordList9);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1162");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isNullStringSet();
        boolean boolean2 = cSVFormat0.getAllowMissingColumnNames();
        boolean boolean3 = cSVFormat0.getTrim();
        java.lang.String[] strArray4 = cSVFormat0.getHeaderComments();
        boolean boolean5 = cSVFormat0.isQuoteCharacterSet();
        boolean boolean6 = cSVFormat0.getLenientEof();
        boolean boolean7 = cSVFormat0.getTrailingData();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1163");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        java.lang.String str3 = cSVParser2.getFirstEndOfLine();
        java.util.List<java.lang.String> strList4 = cSVParser2.getHeaderNames();
        cSVParser2.close();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList6 = cSVParser2.getRecords();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser2.getHeaderMap();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVParser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(cSVRecordList6);
        org.junit.Assert.assertNotNull(strMap7);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1164");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.sql.ResultSet resultSet9 = null;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setHeader(resultSet9);
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setTrailingData(true);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setNullString("\"\r\n\",\"Delimiter=<,> Escaape=< > QuoteChaar=<a\"> NullString=<> RecordSepaaraator=<\n> SurroundingSpaaces:ignored SkipHeaaderRecord:faalse HeaaderComments:[100,a\"#a\",faalse,a\"Delimiter=<,> Escaape=<a\"a\"> QuoteChaar=<a\"a\"> QuoteMode=<MINIMAL> RecordSepaaraator=<\r\n> EmptyLines:ignored SkipHeaaderRecord:faalsea\", , hi!, \r\n, , 100,a\"#a\",faalse,a\"Delimiter=<,> Escaape=<a\"a\"> QuoteChaar=<a\"a\"> QuoteMode=<MINIMAL> RecordSepaaraator=<\r\n> EmptyLines:ignored SkipHeaaderRecord:faalsea\"]\",\"Delimiter=<,> QuoteChaar=<a\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSepaaraator=<\n> SkipHeaaderRecord:faalse\"");
        java.sql.ResultSetMetaData resultSetMetaData15 = null;
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder12.setHeader(resultSetMetaData15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setLenientEof(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1165");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        java.nio.charset.Charset charset6 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset10 = builder9.getCharsetDefault();
        int int11 = builder9.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder9.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder17 = builder9.setByteArray(byteArray16);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder9.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder21 = builder9.setBufferSize((int) (byte) 0);
        java.nio.file.Path path22 = builder9.getPath();
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset24 = builder23.getCharsetDefault();
        int int25 = builder23.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder23.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder31 = builder23.setByteArray(byteArray30);
        org.apache.commons.csv.CSVParser.Builder builder33 = builder23.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder35 = builder23.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder37 = builder23.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder39 = builder37.setCharacterOffset((long) '#');
        java.io.File file40 = builder39.getFile();
        org.apache.commons.csv.CSVParser.Builder builder41 = builder9.setFile(file40);
        org.apache.commons.csv.CSVParser.Builder builder42 = builder8.setFile(file40);
        org.apache.commons.csv.CSVFormat cSVFormat43 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean44 = cSVFormat43.isNullStringSet();
        java.lang.String[] strArray45 = cSVFormat43.getHeaderComments();
        org.apache.commons.csv.CSVParser.Builder builder46 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset47 = builder46.getCharsetDefault();
        byte[] byteArray48 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder49 = builder46.setByteArray(byteArray48);
        java.nio.charset.Charset charset50 = builder46.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder52 = builder46.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder53 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset54 = builder53.getCharsetDefault();
        int int55 = builder53.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder57 = builder53.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray60 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder61 = builder53.setByteArray(byteArray60);
        org.apache.commons.csv.CSVParser.Builder builder63 = builder53.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder65 = builder53.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder67 = builder53.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder69 = builder67.setCharacterOffset((long) '#');
        java.io.File file70 = builder69.getFile();
        org.apache.commons.csv.CSVParser.Builder builder71 = builder52.setFile(file70);
        org.apache.commons.csv.CSVParser.Builder builder73 = builder71.setFile(",");
        java.io.Reader reader74 = null; // flaky "8) test1165(org.apache.commons.csv.randoop.RegressionTest2)": builder71.getReader();
        org.apache.commons.csv.CSVParser cSVParser75 = null; // flaky "8) test1165(org.apache.commons.csv.randoop.RegressionTest2)": cSVFormat43.parse(reader74);
        org.apache.commons.csv.CSVParser.Builder builder76 = null; // flaky "8) test1165(org.apache.commons.csv.randoop.RegressionTest2)": builder8.setReader(reader74);
        org.apache.commons.csv.CSVFormat cSVFormat77 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean78 = cSVFormat77.getIgnoreHeaderCase();
        boolean boolean79 = cSVFormat77.getTrim();
        org.apache.commons.csv.CSVParser.Builder builder80 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset81 = builder80.getCharsetDefault();
        byte[] byteArray82 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder83 = builder80.setByteArray(byteArray82);
        boolean boolean84 = cSVFormat77.equals((java.lang.Object) builder80);
        java.nio.file.OpenOption[] openOptionArray85 = builder80.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder86 = builder8.setOpenOptions(openOptionArray85);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8192 + "'", int11 == 8192);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertArrayEquals(byteArray16, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(path22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8192 + "'", int25 == 8192);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertArrayEquals(byteArray30, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(file40);
        org.junit.Assert.assertNull("file40.getParent() == null", file40.getParent());
        org.junit.Assert.assertEquals(file40.toString(), "");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(strArray45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertArrayEquals(byteArray48, new byte[] {});
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8192 + "'", int55 == 8192);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertArrayEquals(byteArray60, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(file70);
        org.junit.Assert.assertNull("file70.getParent() == null", file70.getParent());
        org.junit.Assert.assertEquals(file70.toString(), "");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
// flaky "8) test1165(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(reader74);
// flaky "7) test1165(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(cSVParser75);
// flaky "7) test1165(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(cSVFormat77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(charset81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertArrayEquals(byteArray82, new byte[] {});
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(openOptionArray85);
        org.junit.Assert.assertArrayEquals(openOptionArray85, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1166");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setEscape('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        boolean boolean25 = cSVFormat24.getIgnoreHeaderCase();
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str31 = cSVFormat24.format(objArray30);
        java.lang.String str32 = cSVFormat24.getRecordSeparator();
        boolean boolean33 = cSVFormat24.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode34 = cSVFormat24.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder22.setQuoteMode(quoteMode34);
        org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean37 = cSVFormat36.getSkipHeaderRecord();
        java.lang.String str38 = cSVFormat36.getRecordSeparator();
        boolean boolean39 = cSVFormat36.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder40 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat36);
        org.apache.commons.csv.QuoteMode quoteMode41 = null;
        org.apache.commons.csv.CSVFormat.Builder builder42 = builder40.setQuoteMode(quoteMode41);
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder40.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray51 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder40.setHeaderComments(strArray51);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder22.setHeaderComments(strArray51);
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder22.setRecordSeparator('\"');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str31, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\r\n" + "'", str32, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + quoteMode34 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode34.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\n" + "'", str38, "\n");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertArrayEquals(strArray51, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1167");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setLenientEof(true);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setIgnoreEmptyLines(true);
        java.lang.String[] strArray21 = null;
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setHeader(strArray21);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder18.setSkipHeaderRecord(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1168");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder15 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset16 = builder15.getCharsetDefault();
        int int17 = builder15.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder15.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder23 = builder15.setByteArray(byteArray22);
        org.apache.commons.csv.CSVParser.Builder builder24 = builder14.setByteArray(byteArray22);
        java.nio.charset.Charset charset25 = builder14.getCharsetDefault();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file26 = builder14.getFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getFile() for byte[] origin [B@719246f2");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8192 + "'", int17 == 8192);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertArrayEquals(byteArray22, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(charset25);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1169");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        java.io.InputStream inputStream7 = builder6.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        byte[] byteArray10 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder11 = builder8.setByteArray(byteArray10);
        java.nio.charset.Charset charset12 = builder8.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder15 = cSVFormat14.builder();
        java.lang.String str16 = cSVFormat14.getNullString();
        org.apache.commons.csv.CSVParser cSVParser17 = org.apache.commons.csv.CSVParser.parse(inputStream7, charset12, cSVFormat14);
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset19 = builder18.getCharsetDefault();
        byte[] byteArray20 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder21 = builder18.setByteArray(byteArray20);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder18.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder25 = builder18.setBufferSize((int) 'a');
        java.nio.charset.Charset charset26 = builder25.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVParser cSVParser29 = org.apache.commons.csv.CSVParser.parse(inputStream7, charset26, cSVFormat28);
        org.apache.commons.csv.CSVParser.Builder builder30 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset31 = builder30.getCharsetDefault();
        byte[] byteArray32 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder33 = builder30.setByteArray(byteArray32);
        java.nio.charset.Charset charset34 = builder30.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean36 = cSVFormat35.getSkipHeaderRecord();
        java.lang.String str37 = cSVFormat35.getRecordSeparator();
        boolean boolean38 = cSVFormat35.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder39 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat35);
        java.sql.ResultSetMetaData resultSetMetaData40 = null;
        org.apache.commons.csv.CSVFormat.Builder builder41 = builder39.setHeader(resultSetMetaData40);
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder41.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder43.setTrailingData(true);
        org.apache.commons.csv.CSVFormat cSVFormat46 = builder43.get();
        java.lang.Character char47 = cSVFormat46.getEscapeCharacter();
        java.lang.Character char48 = cSVFormat46.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder49 = cSVFormat46.builder();
        org.apache.commons.csv.CSVParser cSVParser50 = org.apache.commons.csv.CSVParser.parse(inputStream7, charset34, cSVFormat46);
        org.apache.commons.csv.CSVFormat.Builder builder51 = cSVFormat46.builder();
        java.lang.String str52 = cSVFormat46.getNullString();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(inputStream7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertArrayEquals(byteArray10, new byte[] {});
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(cSVParser17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertArrayEquals(byteArray20, new byte[] {});
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVParser29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertArrayEquals(byteArray32, new byte[] {});
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(cSVFormat35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\n" + "'", str37, "\n");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + char47 + "' != '" + '#' + "'", char47 == '#');
        org.junit.Assert.assertNull(char48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(cSVParser50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1170");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        boolean boolean1 = cSVFormat0.getAllowMissingColumnNames();
        boolean boolean2 = cSVFormat0.isQuoteCharacterSet();
        org.apache.commons.csv.CSVPrinter cSVPrinter3 = cSVFormat0.printer();
        boolean boolean4 = cSVFormat0.getTrim();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(cSVPrinter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1171");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined11 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat12 = predefined11.getFormat();
        boolean boolean13 = cSVFormat12.getIgnoreHeaderCase();
        java.lang.Object[] objArray18 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str19 = cSVFormat12.format(objArray18);
        java.lang.String str20 = cSVFormat12.getRecordSeparator();
        boolean boolean21 = cSVFormat12.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode22 = cSVFormat12.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder4.setQuoteMode(quoteMode22);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder23.setQuote('\"');
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder23.setNullString("\"");
        org.apache.commons.csv.CSVFormat.Predefined predefined28 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat29 = predefined28.getFormat();
        boolean boolean30 = cSVFormat29.isCommentMarkerSet();
        java.lang.String str31 = cSVFormat29.getNullString();
        boolean boolean32 = cSVFormat29.getTrailingData();
        org.apache.commons.csv.QuoteMode quoteMode33 = cSVFormat29.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder27.setQuoteMode(quoteMode33);
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder27.setIgnoreSurroundingSpaces(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + predefined11 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined11.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str19, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\r\n" + "'", str20, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + quoteMode22 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode22.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + predefined28 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined28.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + quoteMode33 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode33.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1172");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        java.lang.String str9 = cSVFormat7.getRecordSeparator();
        boolean boolean10 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat7);
        org.apache.commons.csv.QuoteMode quoteMode12 = null;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuoteMode(quoteMode12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray22 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder11.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder6.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder6.setQuote('#');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setEscape((java.lang.Character) '\"');
        java.sql.ResultSetMetaData resultSetMetaData29 = null;
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder26.setHeader(resultSetMetaData29);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder30.setSkipHeaderRecord(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertArrayEquals(strArray22, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1173");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        boolean boolean3 = cSVFormat1.isEscapeCharacterSet();
        boolean boolean4 = cSVFormat1.getTrailingDelimiter();
        org.apache.commons.csv.CSVFormat.Builder builder5 = cSVFormat1.builder();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean7 = cSVFormat6.getSkipHeaderRecord();
        java.lang.String str8 = cSVFormat6.getRecordSeparator();
        boolean boolean9 = cSVFormat6.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter10 = cSVFormat6.printer();
        boolean boolean11 = cSVFormat1.equals((java.lang.Object) cSVPrinter10);
        boolean boolean12 = cSVFormat1.isQuoteCharacterSet();
        java.lang.String str13 = cSVFormat1.getDelimiterString();
        java.lang.Character char14 = cSVFormat1.getEscapeCharacter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\n" + "'", str8, "\n");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(cSVPrinter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "," + "'", str13, ",");
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + '\"' + "'", char14 == '\"');
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1174");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.getLenientEof();
        java.lang.String[] strArray2 = cSVFormat0.getHeader();
        boolean boolean3 = cSVFormat0.getIgnoreEmptyLines();
        boolean boolean4 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1175");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setRecordNumber((long) (short) 10);
        org.apache.commons.csv.CSVParser.Builder builder9 = builder5.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset11 = builder10.getCharsetDefault();
        int int12 = builder10.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder10.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder18 = builder10.setByteArray(byteArray17);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setBufferSize((java.lang.Integer) (-1));
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset22 = builder21.getCharsetDefault();
        int int23 = builder21.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder21.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder29 = builder21.setByteArray(byteArray28);
        org.apache.commons.csv.CSVParser.Builder builder31 = builder21.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder33 = builder21.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder35 = builder21.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder37 = builder35.setCharacterOffset((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder39 = builder35.setCharacterOffset((long) 'a');
        java.nio.charset.Charset charset40 = builder35.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder41 = builder18.setCharset(charset40);
        org.apache.commons.csv.CSVParser.Builder builder42 = builder5.setCharset(charset40);
        java.io.File file43 = builder5.getFile();
        org.apache.commons.csv.CSVParser.Builder builder44 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset45 = builder44.getCharsetDefault();
        int int46 = builder44.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder48 = builder44.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray51 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder52 = builder44.setByteArray(byteArray51);
        org.apache.commons.csv.CSVParser.Builder builder54 = builder44.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder56 = builder44.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder58 = builder56.setRecordNumber((long) (byte) -1);
        org.apache.commons.csv.CSVParser.Builder builder60 = builder56.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder61 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset62 = builder61.getCharsetDefault();
        int int63 = builder61.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder65 = builder61.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray68 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder69 = builder61.setByteArray(byteArray68);
        org.apache.commons.csv.CSVParser.Builder builder71 = builder61.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder72 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder74 = builder72.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder75 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset76 = builder75.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder77 = builder72.setCharset(charset76);
        java.nio.charset.Charset charset78 = builder72.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder79 = builder61.setCharset(charset78);
        org.apache.commons.csv.CSVParser.Builder builder80 = builder56.setCharset(charset78);
        org.apache.commons.csv.CSVFormat cSVFormat82 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        org.apache.commons.csv.CSVFormat.Predefined predefined83 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat84 = predefined83.getFormat();
        java.lang.String str85 = cSVFormat84.toString();
        boolean boolean86 = cSVFormat84.isEscapeCharacterSet();
        boolean boolean87 = cSVFormat82.equals((java.lang.Object) cSVFormat84);
        boolean boolean88 = cSVFormat82.isEscapeCharacterSet();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser89 = org.apache.commons.csv.CSVParser.parse(file43, charset78, cSVFormat82);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8192 + "'", int12 == 8192);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8192 + "'", int23 == 8192);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertArrayEquals(byteArray28, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(file43);
        org.junit.Assert.assertNull("file43.getParent() == null", file43.getParent());
        org.junit.Assert.assertEquals(file43.toString(), "");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8192 + "'", int46 == 8192);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertArrayEquals(byteArray51, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(charset62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 8192 + "'", int63 == 8192);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertArrayEquals(byteArray68, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(charset76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(charset78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(cSVFormat82);
        org.junit.Assert.assertTrue("'" + predefined83 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined83.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str85, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1176");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setCharacterOffset((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder18 = builder14.setCharacterOffset((long) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence19 = builder14.getCharSequence();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1177");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder15 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset16 = builder15.getCharsetDefault();
        byte[] byteArray17 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder18 = builder15.setByteArray(byteArray17);
        java.nio.charset.Charset charset19 = builder15.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder15.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder22 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset23 = builder22.getCharsetDefault();
        int int24 = builder22.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder26 = builder22.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray29 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder30 = builder22.setByteArray(byteArray29);
        org.apache.commons.csv.CSVParser.Builder builder32 = builder22.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder34 = builder22.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder36 = builder22.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder38 = builder36.setCharacterOffset((long) '#');
        java.io.File file39 = builder38.getFile();
        org.apache.commons.csv.CSVParser.Builder builder40 = builder21.setFile(file39);
        org.apache.commons.csv.CSVParser.Builder builder41 = builder14.setFile(file39);
        org.apache.commons.csv.CSVParser.Builder builder42 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset43 = builder42.getCharsetDefault();
        byte[] byteArray44 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder45 = builder42.setByteArray(byteArray44);
        org.apache.commons.csv.CSVParser.Builder builder47 = builder42.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder49 = builder42.setBufferSize((int) 'a');
        java.nio.file.OpenOption[] openOptionArray50 = builder49.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder51 = builder41.setOpenOptions(openOptionArray50);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] {});
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8192 + "'", int24 == 8192);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertArrayEquals(byteArray29, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(file39);
        org.junit.Assert.assertNull("file39.getParent() == null", file39.getParent());
        org.junit.Assert.assertEquals(file39.toString(), "");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertArrayEquals(byteArray44, new byte[] {});
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(openOptionArray50);
        org.junit.Assert.assertArrayEquals(openOptionArray50, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1178");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSizeMax(8192);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setCharSequence((java.lang.CharSequence) "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        java.io.RandomAccessFile randomAccessFile8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setRandomAccessFile(randomAccessFile8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1179");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser5.iterator();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser5.getHeaderMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = cSVParser5.getHeaderMap();
        long long9 = cSVParser5.getRecordNumber();
        java.util.Map<java.lang.String, java.lang.Integer> strMap10 = cSVParser5.getHeaderMap();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(strMap10);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1180");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getIgnoreHeaderCase();
        boolean boolean2 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        byte[] byteArray5 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder6 = builder3.setByteArray(byteArray5);
        boolean boolean7 = cSVFormat0.equals((java.lang.Object) builder3);
        java.nio.file.OpenOption[] openOptionArray8 = builder3.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder3.setBufferSizeMax((int) '4');
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean12 = cSVFormat11.getSkipHeaderRecord();
        java.lang.String str13 = cSVFormat11.getRecordSeparator();
        boolean boolean14 = cSVFormat11.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat11);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder15.setTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder15.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined22 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat23 = predefined22.getFormat();
        boolean boolean24 = cSVFormat23.getIgnoreHeaderCase();
        java.lang.Object[] objArray29 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str30 = cSVFormat23.format(objArray29);
        java.lang.String str31 = cSVFormat23.getRecordSeparator();
        boolean boolean32 = cSVFormat23.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode33 = cSVFormat23.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder15.setQuoteMode(quoteMode33);
        org.apache.commons.csv.CSVFormat cSVFormat36 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        org.apache.commons.csv.QuoteMode quoteMode37 = cSVFormat36.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean39 = cSVFormat38.getSkipHeaderRecord();
        java.lang.String str40 = cSVFormat38.getRecordSeparator();
        boolean boolean41 = cSVFormat38.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder42 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat38);
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder42.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode45 = null;
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder44.setQuoteMode(quoteMode45);
        java.lang.String[] strArray50 = new java.lang.String[] { "\r\n", "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]", "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder46.setHeader(strArray50);
        java.lang.String str52 = cSVFormat36.format((java.lang.Object[]) strArray50);
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder15.setHeader(strArray50);
        org.apache.commons.csv.CSVFormat.Builder builder55 = builder53.setRecordSeparator("\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\",,hi!,\"\r\n\",,\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"");
        org.apache.commons.csv.CSVParser.Builder builder56 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset57 = builder56.getCharsetDefault();
        byte[] byteArray58 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder59 = builder56.setByteArray(byteArray58);
        org.apache.commons.csv.CSVParser.Builder builder61 = builder56.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder62 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset63 = builder62.getCharsetDefault();
        int int64 = builder62.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder66 = builder62.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray69 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder70 = builder62.setByteArray(byteArray69);
        org.apache.commons.csv.CSVParser.Builder builder72 = builder62.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder74 = builder62.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder76 = builder62.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder77 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset78 = builder77.getCharsetDefault();
        int int79 = builder77.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder81 = builder77.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray84 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder85 = builder77.setByteArray(byteArray84);
        org.apache.commons.csv.CSVParser.Builder builder86 = builder76.setByteArray(byteArray84);
        java.nio.charset.Charset charset87 = builder76.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder88 = builder56.setCharset(charset87);
        org.apache.commons.csv.CSVParser.Builder builder90 = builder88.setBufferSize((java.lang.Integer) 0);
        java.nio.file.OpenOption[] openOptionArray91 = builder90.getOpenOptions();
        org.apache.commons.csv.CSVFormat.Builder builder92 = builder53.setHeaderComments((java.lang.Object[]) openOptionArray91);
        org.apache.commons.csv.CSVParser.Builder builder93 = builder3.setOpenOptions(openOptionArray91);
        org.apache.commons.csv.CSVParser.Builder builder95 = builder3.setFile("Delimiter=<,> Escape=<#> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertArrayEquals(byteArray5, new byte[] {});
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(openOptionArray8);
        org.junit.Assert.assertArrayEquals(openOptionArray8, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + predefined22 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined22.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str30, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\r\n" + "'", str31, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + quoteMode33 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode33.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(cSVFormat36);
        org.junit.Assert.assertNull(quoteMode37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\n" + "'", str40, "\n");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertArrayEquals(strArray50, new java.lang.String[] { "\r\n", "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]", "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" });
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\r\n\"Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]\"Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str52, "\r\n\"Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]\"Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(charset57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertArrayEquals(byteArray58, new byte[] {});
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(charset63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 8192 + "'", int64 == 8192);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertArrayEquals(byteArray69, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(charset78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 8192 + "'", int79 == 8192);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertArrayEquals(byteArray84, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(charset87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(openOptionArray91);
        org.junit.Assert.assertArrayEquals(openOptionArray91, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1181");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        java.sql.ResultSet resultSet21 = null;
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setHeader(resultSet21);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder18.setRecordSeparator('4');
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder18.setCommentMarker((java.lang.Character) '4');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder18.setTrailingData(false);
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setQuote((java.lang.Character) ' ');
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder30.setQuote((java.lang.Character) '#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1182");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setTrailingData(true);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setTrailingDelimiter(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1183");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        boolean boolean2 = cSVFormat0.getLenientEof();
        boolean boolean3 = cSVFormat0.getIgnoreSurroundingSpaces();
        org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat4.printer();
        org.apache.commons.csv.CSVFormat.Predefined predefined6 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat7 = predefined6.getFormat();
        boolean boolean8 = cSVFormat7.getIgnoreHeaderCase();
        java.lang.Object[] objArray13 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str14 = cSVFormat7.format(objArray13);
        java.lang.String str15 = cSVFormat4.format(objArray13);
        java.lang.String str16 = cSVFormat0.format(objArray13);
        boolean boolean17 = cSVFormat0.getSkipHeaderRecord();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + predefined6 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined6.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str14, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str15, "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str16, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1184");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        java.nio.charset.Charset charset6 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset10 = builder9.getCharsetDefault();
        int int11 = builder9.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder9.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder17 = builder9.setByteArray(byteArray16);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder9.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder21 = builder9.setBufferSize((int) (byte) 0);
        java.nio.file.Path path22 = builder9.getPath();
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset24 = builder23.getCharsetDefault();
        int int25 = builder23.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder23.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder31 = builder23.setByteArray(byteArray30);
        org.apache.commons.csv.CSVParser.Builder builder33 = builder23.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder35 = builder23.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder37 = builder23.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder39 = builder37.setCharacterOffset((long) '#');
        java.io.File file40 = builder39.getFile();
        org.apache.commons.csv.CSVParser.Builder builder41 = builder9.setFile(file40);
        org.apache.commons.csv.CSVParser.Builder builder42 = builder8.setFile(file40);
        org.apache.commons.csv.CSVFormat cSVFormat43 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean44 = cSVFormat43.isNullStringSet();
        java.lang.String[] strArray45 = cSVFormat43.getHeaderComments();
        org.apache.commons.csv.CSVParser.Builder builder46 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset47 = builder46.getCharsetDefault();
        byte[] byteArray48 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder49 = builder46.setByteArray(byteArray48);
        java.nio.charset.Charset charset50 = builder46.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder52 = builder46.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder53 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset54 = builder53.getCharsetDefault();
        int int55 = builder53.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder57 = builder53.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray60 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder61 = builder53.setByteArray(byteArray60);
        org.apache.commons.csv.CSVParser.Builder builder63 = builder53.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder65 = builder53.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder67 = builder53.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder69 = builder67.setCharacterOffset((long) '#');
        java.io.File file70 = builder69.getFile();
        org.apache.commons.csv.CSVParser.Builder builder71 = builder52.setFile(file70);
        org.apache.commons.csv.CSVParser.Builder builder73 = builder71.setFile(",");
        java.io.Reader reader74 = null; // flaky "9) test1184(org.apache.commons.csv.randoop.RegressionTest2)": builder71.getReader();
        org.apache.commons.csv.CSVParser cSVParser75 = null; // flaky "9) test1184(org.apache.commons.csv.randoop.RegressionTest2)": cSVFormat43.parse(reader74);
        org.apache.commons.csv.CSVParser.Builder builder76 = null; // flaky "9) test1184(org.apache.commons.csv.randoop.RegressionTest2)": builder8.setReader(reader74);
        org.apache.commons.csv.CSVParser.Builder builder77 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset78 = builder77.getCharsetDefault();
        byte[] byteArray79 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder80 = builder77.setByteArray(byteArray79);
        org.apache.commons.csv.CSVParser.Builder builder82 = builder77.setBufferSizeMax(8192);
        org.apache.commons.csv.CSVParser.Builder builder84 = builder82.setCharSequence((java.lang.CharSequence) "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        java.lang.CharSequence charSequence85 = builder84.getCharSequence();
        java.nio.file.OpenOption[] openOptionArray86 = builder84.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder87 = null; // flaky "9) test1184(org.apache.commons.csv.randoop.RegressionTest2)": builder76.setOpenOptions(openOptionArray86);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path88 = null; // flaky "8) test1184(org.apache.commons.csv.randoop.RegressionTest2)": builder87.getPath();
// flaky "8) test1184(org.apache.commons.csv.randoop.RegressionTest2)":             org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ReaderOrigin#getPath() for BufferedReader origin java.io.BufferedReader@49cb0a3b");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8192 + "'", int11 == 8192);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertArrayEquals(byteArray16, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(path22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8192 + "'", int25 == 8192);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertArrayEquals(byteArray30, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(file40);
        org.junit.Assert.assertNull("file40.getParent() == null", file40.getParent());
        org.junit.Assert.assertEquals(file40.toString(), "");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(cSVFormat43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(strArray45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertArrayEquals(byteArray48, new byte[] {});
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(charset50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(charset54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8192 + "'", int55 == 8192);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertArrayEquals(byteArray60, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(file70);
        org.junit.Assert.assertNull("file70.getParent() == null", file70.getParent());
        org.junit.Assert.assertEquals(file70.toString(), "");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
// flaky "6) test1184(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(reader74);
// flaky "6) test1184(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(cSVParser75);
// flaky "5) test1184(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(charset78);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertArrayEquals(byteArray79, new byte[] {});
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertEquals("'" + charSequence85 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", charSequence85, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(openOptionArray86);
        org.junit.Assert.assertArrayEquals(openOptionArray86, new java.nio.file.OpenOption[] {});
// flaky "5) test1184(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(builder87);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1185");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean5 = cSVFormat4.getSkipHeaderRecord();
        java.lang.String str6 = cSVFormat4.getRecordSeparator();
        boolean boolean7 = cSVFormat4.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder8 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat4);
        boolean boolean9 = cSVFormat0.equals((java.lang.Object) cSVFormat4);
        boolean boolean10 = cSVFormat4.getAutoFlush();
        boolean boolean11 = cSVFormat4.getIgnoreHeaderCase();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1186");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        java.lang.String[] strArray1 = cSVFormat0.getHeader();
        boolean boolean2 = cSVFormat0.getTrailingDelimiter();
        boolean boolean3 = cSVFormat0.getLenientEof();
        boolean boolean4 = cSVFormat0.isEscapeCharacterSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1187");
        org.apache.commons.csv.CSVFormat.Builder builder0 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder2 = builder0.setQuote((java.lang.Character) ' ');
        org.apache.commons.csv.CSVFormat.Builder builder4 = builder2.setCommentMarker((java.lang.Character) '\"');
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean6 = cSVFormat5.getSkipHeaderRecord();
        java.lang.String str7 = cSVFormat5.getRecordSeparator();
        boolean boolean8 = cSVFormat5.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder9 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat5);
        org.apache.commons.csv.QuoteMode quoteMode10 = null;
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setQuoteMode(quoteMode10);
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder9.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean15 = cSVFormat14.getSkipHeaderRecord();
        java.lang.String str16 = cSVFormat14.getRecordSeparator();
        boolean boolean17 = cSVFormat14.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder18 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat14);
        org.apache.commons.csv.QuoteMode quoteMode19 = null;
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setQuoteMode(quoteMode19);
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray29 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder18.setHeaderComments(strArray29);
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder9.setHeaderComments(strArray29);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder2.setHeaderComments(strArray29);
        org.apache.commons.csv.CSVFormat cSVFormat33 = builder32.get();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\n" + "'", str7, "\n");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(cSVFormat14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\n" + "'", str16, "\n");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertArrayEquals(strArray29, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(cSVFormat33);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1188");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.nio.charset.Charset charset4 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        int int9 = builder7.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder7.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder7.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder19 = builder7.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder7.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) '#');
        java.io.File file24 = builder23.getFile();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder6.setFile(file24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setFile(",");
        org.apache.commons.csv.CSVParser.Builder builder29 = builder27.setCharacterOffset((long) (byte) -1);
        java.nio.charset.Charset charset30 = builder27.getCharset();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(charset30);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1189");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        java.nio.charset.Charset charset9 = builder0.getCharset();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 10, (byte) 1, (byte) 0, (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder17 = builder0.setByteArray(byteArray16);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setBufferSize((java.lang.Integer) 8192);
        // The following exception was thrown during execution in test generation
        try {
            java.io.RandomAccessFile randomAccessFile20 = builder17.getRandomAccessFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getFile() for byte[] origin [B@747903ea");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertArrayEquals(byteArray16, new byte[] { (byte) 1, (byte) 10, (byte) 1, (byte) 0, (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1190");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setTrailingData(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder8.get();
        boolean boolean12 = cSVFormat11.getTrailingDelimiter();
        boolean boolean13 = cSVFormat11.isEscapeCharacterSet();
        boolean boolean14 = cSVFormat11.getIgnoreEmptyLines();
        java.lang.String[] strArray15 = cSVFormat11.getHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(strArray15);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1191");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier4 = builder0.asSupplier();
        int int5 = builder0.getBufferSize();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVParserSupplier4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8192 + "'", int5 == 8192);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1192");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier13 = builder0.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder14.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder17 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset18 = builder17.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder14.setCharset(charset18);
        java.nio.charset.Charset charset20 = builder14.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder0.setCharset(charset20);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder0.setFile("");
        java.util.function.IntUnaryOperator intUnaryOperator24 = null;
        org.apache.commons.csv.CSVParser.Builder builder25 = builder0.setBufferSizeChecker(intUnaryOperator24);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVParserSupplier13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1193");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder11.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset15 = builder14.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder11.setCharset(charset15);
        java.nio.charset.Charset charset17 = builder11.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder0.setCharset(charset17);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setFile("\t");
        int int21 = builder18.getBufferSizeDefault();
        java.util.function.IntUnaryOperator intUnaryOperator22 = null;
        org.apache.commons.csv.CSVParser.Builder builder23 = builder18.setBufferSizeChecker(intUnaryOperator22);
        org.apache.commons.csv.CSVParser.Builder builder24 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset25 = builder24.getCharsetDefault();
        byte[] byteArray26 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder27 = builder24.setByteArray(byteArray26);
        org.apache.commons.csv.CSVParser.Builder builder29 = builder24.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder31 = builder29.setRecordNumber((long) (short) 10);
        org.apache.commons.csv.CSVParser.Builder builder33 = builder29.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder34 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset35 = builder34.getCharsetDefault();
        int int36 = builder34.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder38 = builder34.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder42 = builder34.setByteArray(byteArray41);
        org.apache.commons.csv.CSVParser.Builder builder44 = builder42.setBufferSize((java.lang.Integer) (-1));
        org.apache.commons.csv.CSVParser.Builder builder45 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset46 = builder45.getCharsetDefault();
        int int47 = builder45.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder49 = builder45.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray52 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder53 = builder45.setByteArray(byteArray52);
        org.apache.commons.csv.CSVParser.Builder builder55 = builder45.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder57 = builder45.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder59 = builder45.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder61 = builder59.setCharacterOffset((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder63 = builder59.setCharacterOffset((long) 'a');
        java.nio.charset.Charset charset64 = builder59.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder65 = builder42.setCharset(charset64);
        org.apache.commons.csv.CSVParser.Builder builder66 = builder29.setCharset(charset64);
        java.io.File file67 = builder29.getFile();
        org.apache.commons.csv.CSVParser.Builder builder68 = builder18.setFile(file67);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8192 + "'", int21 == 8192);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertArrayEquals(byteArray26, new byte[] {});
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8192 + "'", int36 == 8192);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertArrayEquals(byteArray41, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8192 + "'", int47 == 8192);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertArrayEquals(byteArray52, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(charset64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(file67);
        org.junit.Assert.assertNull("file67.getParent() == null", file67.getParent());
        org.junit.Assert.assertEquals(file67.toString(), "");
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1194");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setLenientEof(true);
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat cSVFormat21 = builder20.get();
        java.lang.Character char22 = cSVFormat21.getCommentMarker();
        boolean boolean23 = cSVFormat21.getTrailingDelimiter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNull(char22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1195");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        java.lang.CharSequence charSequence5 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        byte[] byteArray8 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder9 = builder6.setByteArray(byteArray8);
        java.lang.CharSequence charSequence10 = builder6.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder6.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder13 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset14 = builder13.getCharsetDefault();
        int int15 = builder13.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder17 = builder13.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder21 = builder13.setByteArray(byteArray20);
        java.nio.charset.Charset charset22 = builder13.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder12.setCharset(charset22);
        org.apache.commons.csv.CSVParser.Builder builder24 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset25 = builder24.getCharsetDefault();
        int int26 = builder24.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder28 = builder24.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray31 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder32 = builder24.setByteArray(byteArray31);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder24.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder36 = builder24.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder38 = builder24.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder39 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset40 = builder39.getCharsetDefault();
        int int41 = builder39.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder39.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder47 = builder39.setByteArray(byteArray46);
        org.apache.commons.csv.CSVParser.Builder builder48 = builder38.setByteArray(byteArray46);
        org.apache.commons.csv.CSVParser.Builder builder49 = builder23.setByteArray(byteArray46);
        org.apache.commons.csv.CSVParser.Builder builder50 = builder0.setByteArray(byteArray46);
        java.nio.charset.Charset charset51 = builder0.getCharsetDefault();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertEquals("'" + charSequence5 + "' != '" + "" + "'", charSequence5, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertArrayEquals(byteArray8, new byte[] {});
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "" + "'", charSequence10, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8192 + "'", int15 == 8192);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertArrayEquals(byteArray20, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8192 + "'", int26 == 8192);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertArrayEquals(byteArray31, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8192 + "'", int41 == 8192);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertArrayEquals(byteArray46, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(charset51);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1196");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        boolean boolean2 = cSVFormat0.getLenientEof();
        boolean boolean3 = cSVFormat0.getIgnoreSurroundingSpaces();
        java.lang.String str4 = cSVFormat0.getRecordSeparator();
        java.lang.Appendable appendable5 = null;
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        int int8 = builder6.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder14 = builder6.setByteArray(byteArray13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder6.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder18 = builder6.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder6.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder22 = builder20.setCharacterOffset((long) '#');
        java.io.File file23 = builder22.getFile();
        java.nio.file.OpenOption[] openOptionArray24 = builder22.getOpenOptions();
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat0.printRecord(appendable5, (java.lang.Object[]) openOptionArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\r\n" + "'", str4, "\r\n");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertArrayEquals(byteArray13, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertNull("file23.getParent() == null", file23.getParent());
        org.junit.Assert.assertEquals(file23.toString(), "");
        org.junit.Assert.assertNotNull(openOptionArray24);
        org.junit.Assert.assertArrayEquals(openOptionArray24, new java.nio.file.OpenOption[] {});
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1197");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.lang.String str6 = cSVParser5.getHeaderComment();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser5.getHeaderMap();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strMap7);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1198");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean10 = cSVFormat9.getSkipHeaderRecord();
        java.lang.String str11 = cSVFormat9.getRecordSeparator();
        boolean boolean12 = cSVFormat9.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder13 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat9);
        org.apache.commons.csv.QuoteMode quoteMode14 = null;
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setQuoteMode(quoteMode14);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray24 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder13.setHeaderComments(strArray24);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder4.setHeaderComments(strArray24);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setRecordSeparator('4');
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder32 = builder28.setTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder32.setEscape('\"');
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setQuote((java.lang.Character) '#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\n" + "'", str11, "\n");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertArrayEquals(strArray24, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1199");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVParser5.hasTrailerComment();
        cSVParser5.close();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser5.getRecords();
        long long9 = cSVParser5.getRecordNumber();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor10 = cSVParser5.iterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVRecordList8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordItor10);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1200");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode3 = cSVFormat0.getDuplicateHeaderMode();
        java.lang.String str4 = cSVFormat0.getNullString();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode5 = cSVFormat0.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean7 = cSVFormat6.getSkipHeaderRecord();
        java.lang.String str8 = cSVFormat6.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode9 = cSVFormat6.getDuplicateHeaderMode();
        java.lang.String str10 = cSVFormat6.getNullString();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode11 = cSVFormat6.getDuplicateHeaderMode();
        java.lang.Appendable appendable12 = null;
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat0.print((java.lang.Object) duplicateHeaderMode11, appendable12, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode3 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode3.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode5 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode5.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\n" + "'", str8, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode9 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode9.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode11 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode11.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1201");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        java.nio.charset.Charset charset11 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset13 = builder12.getCharsetDefault();
        int int14 = builder12.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder12.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser17 = builder12.getUnchecked();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder12.setPath(",");
        java.nio.file.OpenOption[] openOptionArray20 = builder19.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder0.setOpenOptions(openOptionArray20);
        java.util.function.IntUnaryOperator intUnaryOperator22 = null;
        org.apache.commons.csv.CSVParser.Builder builder23 = builder0.setBufferSizeChecker(intUnaryOperator22);
        int int24 = builder23.getBufferSizeDefault();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8192 + "'", int14 == 8192);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(cSVParser17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(openOptionArray20);
        org.junit.Assert.assertArrayEquals(openOptionArray20, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8192 + "'", int24 == 8192);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1202");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean10 = cSVFormat9.getSkipHeaderRecord();
        java.lang.String str11 = cSVFormat9.getRecordSeparator();
        boolean boolean12 = cSVFormat9.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder13 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat9);
        org.apache.commons.csv.QuoteMode quoteMode14 = null;
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setQuoteMode(quoteMode14);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray24 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder13.setHeaderComments(strArray24);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder4.setHeaderComments(strArray24);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setRecordSeparator('4');
        org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean30 = cSVFormat29.getSkipHeaderRecord();
        java.lang.String str31 = cSVFormat29.getRecordSeparator();
        boolean boolean32 = cSVFormat29.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder33 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat29);
        org.apache.commons.csv.QuoteMode quoteMode34 = null;
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setQuoteMode(quoteMode34);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder33.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray44 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder33.setHeaderComments(strArray44);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder33.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder47.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder47.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder47.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean55 = cSVFormat54.getSkipHeaderRecord();
        java.lang.String str56 = cSVFormat54.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode57 = cSVFormat54.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder47.setDuplicateHeaderMode(duplicateHeaderMode57);
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder26.setDuplicateHeaderMode(duplicateHeaderMode57);
        org.apache.commons.csv.CSVFormat.Builder builder61 = builder59.setRecordSeparator('a');
        java.sql.ResultSet resultSet62 = null;
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder59.setHeader(resultSet62);
        org.apache.commons.csv.CSVFormat.Builder builder65 = builder59.setSkipHeaderRecord(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\n" + "'", str11, "\n");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertArrayEquals(strArray24, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\n" + "'", str31, "\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertArrayEquals(strArray44, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\n" + "'", str56, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode57 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode57.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1203");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 100);
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset10 = builder9.getCharsetDefault();
        int int11 = builder9.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder9.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder17 = builder9.setByteArray(byteArray16);
        java.nio.charset.Charset charset18 = builder9.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder8.setCharset(charset18);
        org.apache.commons.csv.CSVParser.Builder builder20 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset21 = builder20.getCharsetDefault();
        int int22 = builder20.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder20.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray27 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder28 = builder20.setByteArray(byteArray27);
        org.apache.commons.csv.CSVParser.Builder builder30 = builder20.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder32 = builder20.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder20.setCharacterOffset((long) (byte) 100);
        java.nio.file.OpenOption[] openOptionArray35 = builder20.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder36 = builder19.setOpenOptions(openOptionArray35);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8192 + "'", int11 == 8192);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertArrayEquals(byteArray16, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8192 + "'", int22 == 8192);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertArrayEquals(byteArray27, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(openOptionArray35);
        org.junit.Assert.assertArrayEquals(openOptionArray35, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1204");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSizeMax(8192);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setCharSequence((java.lang.CharSequence) "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        java.lang.CharSequence charSequence8 = builder7.getCharSequence();
        java.nio.file.OpenOption[] openOptionArray9 = builder7.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset11 = builder10.getCharsetDefault();
        byte[] byteArray12 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder13 = builder10.setByteArray(byteArray12);
        java.lang.CharSequence charSequence14 = builder10.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder10.setBufferSize((int) ' ');
        java.io.InputStream inputStream17 = builder16.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset19 = builder18.getCharsetDefault();
        byte[] byteArray20 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder21 = builder18.setByteArray(byteArray20);
        java.nio.charset.Charset charset22 = builder18.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder25 = cSVFormat24.builder();
        java.lang.String str26 = cSVFormat24.getNullString();
        org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse(inputStream17, charset22, cSVFormat24);
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset29 = builder28.getCharsetDefault();
        byte[] byteArray30 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder31 = builder28.setByteArray(byteArray30);
        org.apache.commons.csv.CSVParser.Builder builder33 = builder28.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder35 = builder28.setBufferSize((int) 'a');
        java.nio.charset.Charset charset36 = builder35.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVParser cSVParser39 = org.apache.commons.csv.CSVParser.parse(inputStream17, charset36, cSVFormat38);
        org.apache.commons.csv.CSVParser.Builder builder40 = builder7.setCharset(charset36);
        java.nio.file.OpenOption[] openOptionArray41 = builder7.getOpenOptions();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", charSequence8, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(openOptionArray9);
        org.junit.Assert.assertArrayEquals(openOptionArray9, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertArrayEquals(byteArray12, new byte[] {});
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertArrayEquals(byteArray20, new byte[] {});
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(cSVParser27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertArrayEquals(byteArray30, new byte[] {});
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertNotNull(cSVParser39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(openOptionArray41);
        org.junit.Assert.assertArrayEquals(openOptionArray41, new java.nio.file.OpenOption[] {});
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1205");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.isCommentMarkerSet();
        java.lang.String str4 = cSVFormat2.getNullString();
        boolean boolean5 = cSVFormat2.getTrailingDelimiter();
        java.lang.Character char6 = cSVFormat2.getQuoteCharacter();
        org.apache.commons.csv.CSVParser cSVParser7 = org.apache.commons.csv.CSVParser.parse("a", cSVFormat2);
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode8 = cSVFormat2.getDuplicateHeaderMode();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '\"' + "'", char6 == '\"');
        org.junit.Assert.assertNotNull(cSVParser7);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode8 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode8.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1206");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        java.nio.charset.Charset charset2 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset6 = builder5.getCharsetDefault();
        byte[] byteArray7 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder8 = builder5.setByteArray(byteArray7);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier9 = builder5.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset11 = builder10.getCharsetDefault();
        byte[] byteArray12 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder13 = builder10.setByteArray(byteArray12);
        java.lang.CharSequence charSequence14 = builder10.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder10.setBufferSize((int) ' ');
        java.io.InputStream inputStream17 = builder16.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset19 = builder18.getCharsetDefault();
        byte[] byteArray20 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder21 = builder18.setByteArray(byteArray20);
        java.nio.charset.Charset charset22 = builder18.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder25 = cSVFormat24.builder();
        java.lang.String str26 = cSVFormat24.getNullString();
        org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse(inputStream17, charset22, cSVFormat24);
        org.apache.commons.csv.CSVParser.Builder builder28 = builder5.setInputStream(inputStream17);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier29 = builder5.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder30 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset31 = builder30.getCharsetDefault();
        int int32 = builder30.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder34 = builder30.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray37 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder38 = builder30.setByteArray(byteArray37);
        org.apache.commons.csv.CSVParser.Builder builder40 = builder30.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder42 = builder30.setBufferSize((int) (byte) 0);
        java.nio.file.Path path43 = builder30.getPath();
        org.apache.commons.csv.CSVParser.Builder builder44 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset45 = builder44.getCharsetDefault();
        int int46 = builder44.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder48 = builder44.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray51 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder52 = builder44.setByteArray(byteArray51);
        org.apache.commons.csv.CSVParser.Builder builder54 = builder44.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder56 = builder44.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder58 = builder44.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder60 = builder58.setCharacterOffset((long) '#');
        java.io.File file61 = builder60.getFile();
        org.apache.commons.csv.CSVParser.Builder builder62 = builder30.setFile(file61);
        org.apache.commons.csv.CSVParser.Builder builder63 = builder5.setFile(file61);
        org.apache.commons.csv.CSVParser.Builder builder64 = builder0.setFile(file61);
        java.util.function.IntUnaryOperator intUnaryOperator65 = null;
        org.apache.commons.csv.CSVParser.Builder builder66 = builder0.setBufferSizeChecker(intUnaryOperator65);
        java.io.OutputStream outputStream67 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder68 = builder0.setOutputStream(outputStream67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVParserSupplier9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertArrayEquals(byteArray12, new byte[] {});
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertArrayEquals(byteArray20, new byte[] {});
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(cSVParser27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(cSVParserSupplier29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8192 + "'", int32 == 8192);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertArrayEquals(byteArray37, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(path43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8192 + "'", int46 == 8192);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertArrayEquals(byteArray51, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(file61);
        org.junit.Assert.assertNull("file61.getParent() == null", file61.getParent());
        org.junit.Assert.assertEquals(file61.toString(), "");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1207");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSizeMax(8192);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setCharSequence((java.lang.CharSequence) "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        java.lang.CharSequence charSequence8 = builder7.getCharSequence();
        java.nio.file.OpenOption[] openOptionArray9 = builder7.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset11 = builder10.getCharsetDefault();
        byte[] byteArray12 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder13 = builder10.setByteArray(byteArray12);
        org.apache.commons.csv.CSVParser.Builder builder15 = builder10.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder10.setBufferSize((int) 'a');
        org.apache.commons.csv.CSVParser cSVParser18 = builder10.get();
        org.apache.commons.csv.CSVParser.Builder builder19 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset20 = builder19.getCharsetDefault();
        int int21 = builder19.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder23 = builder19.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser24 = builder19.getUnchecked();
        org.apache.commons.csv.CSVParser.Builder builder25 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset26 = builder25.getCharsetDefault();
        int int27 = builder25.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder25.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder33 = builder25.setByteArray(byteArray32);
        org.apache.commons.csv.CSVParser.Builder builder35 = builder25.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder37 = builder25.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder39 = builder25.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder41 = builder39.setCharacterOffset((long) '#');
        java.io.File file42 = builder41.getFile();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder19.setFile(file42);
        org.apache.commons.csv.CSVParser.Builder builder44 = builder10.setFile(file42);
        org.apache.commons.csv.CSVParser.Builder builder45 = builder7.setFile(file42);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", charSequence8, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(openOptionArray9);
        org.junit.Assert.assertArrayEquals(openOptionArray9, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertArrayEquals(byteArray12, new byte[] {});
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(cSVParser18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8192 + "'", int21 == 8192);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(cSVParser24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8192 + "'", int27 == 8192);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertArrayEquals(byteArray32, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(file42);
        org.junit.Assert.assertNull("file42.getParent() == null", file42.getParent());
        org.junit.Assert.assertEquals(file42.toString(), "");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1208");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.MONGODB_CSV;
        boolean boolean1 = cSVFormat0.getAutoFlush();
        boolean boolean2 = cSVFormat0.isCommentMarkerSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1209");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVParser5.hasTrailerComment();
        cSVParser5.close();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor8 = cSVParser5.iterator();
        boolean boolean9 = cSVParser5.isClosed();
        boolean boolean10 = cSVParser5.hasTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVRecordItor8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1210");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 100);
        org.apache.commons.csv.CSVParser.Builder builder9 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset10 = builder9.getCharsetDefault();
        int int11 = builder9.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder9.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray16 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder17 = builder9.setByteArray(byteArray16);
        java.nio.charset.Charset charset18 = builder9.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder8.setCharset(charset18);
        org.apache.commons.csv.CSVParser cSVParser20 = builder8.get();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8192 + "'", int11 == 8192);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertArrayEquals(byteArray16, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(cSVParser20);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1211");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.DEFAULT;
        java.lang.Appendable appendable1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter2 = cSVFormat0.print(appendable1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: appendable");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1212");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setTrailingData(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder8.get();
        java.lang.Character char12 = cSVFormat11.getEscapeCharacter();
        java.lang.Character char13 = cSVFormat11.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder14 = org.apache.commons.csv.CSVFormat.Builder.create();
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder14.setEscape((java.lang.Character) 'a');
        java.sql.ResultSet resultSet19 = null;
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder14.setHeader(resultSet19);
        org.apache.commons.csv.CSVFormat cSVFormat21 = builder20.get();
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder20.setSkipHeaderRecord(false);
        boolean boolean24 = cSVFormat11.equals((java.lang.Object) builder23);
        org.apache.commons.csv.CSVFormat cSVFormat25 = builder23.get();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + '#' + "'", char12 == '#');
        org.junit.Assert.assertNull(char13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(cSVFormat25);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1213");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.String[] strArray3 = cSVFormat0.getHeaderComments();
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset5 = builder4.getCharsetDefault();
        int int6 = builder4.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder8 = builder4.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray11 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder12 = builder4.setByteArray(byteArray11);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder4.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder16 = builder4.setBufferSize((int) (byte) 0);
        java.util.function.IntUnaryOperator intUnaryOperator17 = null;
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setBufferSizeChecker(intUnaryOperator17);
        java.nio.file.OpenOption[] openOptionArray19 = builder16.getOpenOptions();
        java.lang.String str20 = cSVFormat0.format((java.lang.Object[]) openOptionArray19);
        java.lang.Character char21 = cSVFormat0.getEscapeCharacter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\r\n" + "'", str2, "\r\n");
        org.junit.Assert.assertNull(strArray3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8192 + "'", int6 == 8192);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertArrayEquals(byteArray11, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(openOptionArray19);
        org.junit.Assert.assertArrayEquals(openOptionArray19, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(char21);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1214");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        org.apache.commons.csv.QuoteMode quoteMode2 = cSVFormat1.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat3 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean4 = cSVFormat3.getSkipHeaderRecord();
        java.lang.String str5 = cSVFormat3.getRecordSeparator();
        boolean boolean6 = cSVFormat3.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder7 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat3);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode10 = null;
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setQuoteMode(quoteMode10);
        java.lang.String[] strArray15 = new java.lang.String[] { "\r\n", "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]", "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder11.setHeader(strArray15);
        java.lang.String str17 = cSVFormat1.format((java.lang.Object[]) strArray15);
        java.lang.Character char18 = cSVFormat1.getQuoteCharacter();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNull(quoteMode2);
        org.junit.Assert.assertNotNull(cSVFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\n" + "'", str5, "\n");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "\r\n", "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]", "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\r\n\"Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]\"Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str17, "\r\n\"Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]\"Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNull(char18);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1215");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 100);
        java.util.function.IntUnaryOperator intUnaryOperator9 = null;
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setBufferSizeChecker(intUnaryOperator9);
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file11 = builder0.getFile();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ByteArrayOrigin#getFile() for byte[] origin [B@4f763888");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1216");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setLenientEof(true);
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.newFormat('#');
        org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean22 = cSVFormat21.getSkipHeaderRecord();
        java.lang.String str23 = cSVFormat21.getRecordSeparator();
        boolean boolean24 = cSVFormat21.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder25 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat21);
        boolean boolean26 = cSVFormat21.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat.Builder builder27 = cSVFormat21.builder();
        org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        org.apache.commons.csv.QuoteMode quoteMode30 = cSVFormat29.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean32 = cSVFormat31.getSkipHeaderRecord();
        java.lang.String str33 = cSVFormat31.getRecordSeparator();
        boolean boolean34 = cSVFormat31.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder35 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat31);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode38 = null;
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder37.setQuoteMode(quoteMode38);
        java.lang.String[] strArray43 = new java.lang.String[] { "\r\n", "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]", "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder44 = builder39.setHeader(strArray43);
        java.lang.String str45 = cSVFormat29.format((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat.Builder builder46 = builder27.setHeaderComments(strArray43);
        java.lang.String str47 = cSVFormat20.format((java.lang.Object[]) strArray43);
        org.apache.commons.csv.CSVFormat.Builder builder48 = builder18.setHeaderComments(strArray43);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertNotNull(cSVFormat21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\n" + "'", str23, "\n");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertNull(quoteMode30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\n" + "'", str33, "\n");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertArrayEquals(strArray43, new java.lang.String[] { "\r\n", "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]", "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" });
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\r\n\"Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]\"Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str45, "\r\n\"Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]\"Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\r\n#Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]#Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str47, "\r\n#Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]#Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1217");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.RFC4180;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.Appendable appendable2 = null;
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        int int5 = builder3.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder3.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray10 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder11 = builder3.setByteArray(byteArray10);
        org.apache.commons.csv.CSVParser.Builder builder13 = builder3.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder15 = builder3.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder3.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset19 = builder18.getCharsetDefault();
        int int20 = builder18.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder18.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder26 = builder18.setByteArray(byteArray25);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder17.setByteArray(byteArray25);
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset29 = builder28.getCharsetDefault();
        int int30 = builder28.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder28.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser33 = builder28.getUnchecked();
        java.lang.CharSequence charSequence34 = builder28.getCharSequence();
        java.nio.file.OpenOption[] openOptionArray35 = builder28.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder36 = builder17.setOpenOptions(openOptionArray35);
        // The following exception was thrown during execution in test generation
        try {
            cSVFormat1.printRecord(appendable2, (java.lang.Object[]) openOptionArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.RFC4180 + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.RFC4180));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8192 + "'", int5 == 8192);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertArrayEquals(byteArray10, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8192 + "'", int20 == 8192);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertArrayEquals(byteArray25, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8192 + "'", int30 == 8192);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(cSVParser33);
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", charSequence34, "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertNotNull(openOptionArray35);
        org.junit.Assert.assertArrayEquals(openOptionArray35, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1218");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser5.iterator();
        boolean boolean7 = cSVParser5.isClosed();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList8 = cSVParser5.getRecords();
        java.util.List<java.lang.String> strList9 = cSVParser5.getHeaderNames();
        java.util.Spliterator<java.lang.String> strSpliterator10 = strList9.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator11 = strList9.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator12 = strList9.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator13 = strList9.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator14 = strList9.spliterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVRecordList8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strSpliterator10);
        org.junit.Assert.assertNotNull(strSpliterator11);
        org.junit.Assert.assertNotNull(strSpliterator12);
        org.junit.Assert.assertNotNull(strSpliterator13);
        org.junit.Assert.assertNotNull(strSpliterator14);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1219");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser5.iterator();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser5.getHeaderMap();
        java.lang.String str8 = cSVParser5.getHeaderComment();
        java.util.Map<java.lang.String, java.lang.Integer> strMap9 = cSVParser5.getHeaderMap();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strMap9);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1220");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getIgnoreHeaderCase();
        boolean boolean2 = cSVFormat0.getTrim();
        java.lang.Character char3 = cSVFormat0.getEscapeCharacter();
        boolean boolean4 = cSVFormat0.getTrailingData();
        boolean boolean5 = cSVFormat0.getTrim();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1221");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat cSVFormat4 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean5 = cSVFormat4.getSkipHeaderRecord();
        java.lang.String str6 = cSVFormat4.getRecordSeparator();
        boolean boolean7 = cSVFormat4.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder8 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat4);
        boolean boolean9 = cSVFormat0.equals((java.lang.Object) cSVFormat4);
        java.lang.String str10 = cSVFormat4.toString();
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset12 = builder11.getCharsetDefault();
        int int13 = builder11.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder11.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder19 = builder11.setByteArray(byteArray18);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder11.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder23 = builder11.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder25 = builder11.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder25.setCharacterOffset((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder29 = builder25.setCharacterOffset((long) 'a');
        java.io.File file30 = builder29.getFile();
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset32 = builder31.getCharsetDefault();
        int int33 = builder31.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder31.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray38 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder39 = builder31.setByteArray(byteArray38);
        org.apache.commons.csv.CSVParser.Builder builder41 = builder31.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder43 = builder31.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder45 = builder31.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder47 = builder45.setCharacterOffset((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder49 = builder45.setCharacterOffset((long) 'a');
        java.nio.charset.Charset charset50 = builder45.getCharset();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVPrinter cSVPrinter51 = cSVFormat4.print(file30, charset50);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\n" + "'", str6, "\n");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str10, "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8192 + "'", int13 == 8192);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertNull("file30.getParent() == null", file30.getParent());
        org.junit.Assert.assertEquals(file30.toString(), "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8192 + "'", int33 == 8192);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertArrayEquals(byteArray38, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(charset50);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1222");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setCharacterOffset((long) (short) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder10.setCharSequence((java.lang.CharSequence) "\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\",,hi!,\"\r\n\",,\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"");
        java.io.Writer writer15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder16 = builder10.setWriter(writer15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1223");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setDelimiter('a');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setTrim(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode12 = cSVFormat11.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder10.setDuplicateHeaderMode(duplicateHeaderMode12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setTrim(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode12 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode12.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1224");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.isNullStringSet();
        boolean boolean2 = cSVFormat0.getTrim();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1225");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setCharacterOffset((long) (byte) 100);
        int int15 = builder0.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder16 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset17 = builder16.getCharsetDefault();
        byte[] byteArray18 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder19 = builder16.setByteArray(byteArray18);
        java.lang.CharSequence charSequence20 = builder16.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder16.setBufferSize((int) ' ');
        java.io.InputStream inputStream23 = builder22.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder24 = builder0.setInputStream(inputStream23);
        org.apache.commons.csv.CSVParser.Builder builder25 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset26 = builder25.getCharsetDefault();
        byte[] byteArray27 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder28 = builder25.setByteArray(byteArray27);
        java.io.InputStream inputStream29 = builder25.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder30 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset31 = builder30.getCharsetDefault();
        byte[] byteArray32 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder33 = builder30.setByteArray(byteArray32);
        java.lang.CharSequence charSequence34 = builder30.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder36 = builder30.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder37 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset38 = builder37.getCharsetDefault();
        byte[] byteArray39 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder40 = builder37.setByteArray(byteArray39);
        java.lang.CharSequence charSequence41 = builder37.getCharSequence();
        java.lang.CharSequence charSequence42 = builder37.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser43 = builder37.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray44 = builder37.getOpenOptions();
        java.nio.charset.Charset charset45 = builder37.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder46 = builder30.setCharset(charset45);
        org.apache.commons.csv.CSVFormat cSVFormat47 = org.apache.commons.csv.CSVFormat.MONGODB_CSV;
        boolean boolean48 = cSVFormat47.getAutoFlush();
        org.apache.commons.csv.CSVParser cSVParser49 = org.apache.commons.csv.CSVParser.parse(inputStream29, charset45, cSVFormat47);
        org.apache.commons.csv.CSVFormat cSVFormat50 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String str51 = cSVFormat50.getDelimiterString();
        boolean boolean52 = cSVFormat50.isCommentMarkerSet();
        org.apache.commons.csv.CSVParser cSVParser53 = org.apache.commons.csv.CSVParser.parse(inputStream23, charset45, cSVFormat50);
        org.apache.commons.csv.CSVPrinter cSVPrinter54 = cSVFormat50.printer();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8192 + "'", int15 == 8192);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] {});
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "" + "'", charSequence20, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(inputStream23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertArrayEquals(byteArray27, new byte[] {});
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(inputStream29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertArrayEquals(byteArray32, new byte[] {});
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "" + "'", charSequence34, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertArrayEquals(byteArray39, new byte[] {});
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "" + "'", charSequence41, "");
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "" + "'", charSequence42, "");
        org.junit.Assert.assertNotNull(cSVParser43);
        org.junit.Assert.assertNotNull(openOptionArray44);
        org.junit.Assert.assertArrayEquals(openOptionArray44, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(cSVFormat47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(cSVParser49);
        org.junit.Assert.assertNotNull(cSVFormat50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "," + "'", str51, ",");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(cSVParser53);
        org.junit.Assert.assertNotNull(cSVPrinter54);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1226");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        org.apache.commons.csv.CSVFormat.Builder builder1 = cSVFormat0.builder();
        boolean boolean2 = cSVFormat0.getTrailingData();
        java.lang.Character char3 = cSVFormat0.getQuoteCharacter();
        java.lang.Character char4 = cSVFormat0.getEscapeCharacter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + '\"' + "'", char3 == '\"');
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\\' + "'", char4 == '\\');
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1227");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean8 = cSVFormat7.getSkipHeaderRecord();
        java.lang.String str9 = cSVFormat7.getRecordSeparator();
        boolean boolean10 = cSVFormat7.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder11 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat7);
        org.apache.commons.csv.QuoteMode quoteMode12 = null;
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder11.setQuoteMode(quoteMode12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder11.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray22 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder11.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder6.setHeaderComments(strArray22);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder6.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder6.setAllowMissingColumnNames(false);
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder6.setLenientEof(false);
        org.apache.commons.csv.CSVFormat cSVFormat31 = builder6.get();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVFormat.Builder builder33 = builder6.setDelimiter("Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The delimiter cannot be a line break");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(cSVFormat7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\n" + "'", str9, "\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertArrayEquals(strArray22, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(cSVFormat31);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1228");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        org.apache.commons.csv.CSVFormat.Builder builder1 = cSVFormat0.builder();
        boolean boolean2 = cSVFormat0.getAllowMissingColumnNames();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1229");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setRecordNumber((long) (short) 10);
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        int int10 = builder8.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder8.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder16 = builder8.setByteArray(byteArray15);
        org.apache.commons.csv.CSVParser.Builder builder18 = builder8.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder20 = builder8.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder22 = builder8.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset24 = builder23.getCharsetDefault();
        int int25 = builder23.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder23.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder31 = builder23.setByteArray(byteArray30);
        org.apache.commons.csv.CSVParser.Builder builder32 = builder22.setByteArray(byteArray30);
        org.apache.commons.csv.CSVParser.Builder builder33 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset34 = builder33.getCharsetDefault();
        int int35 = builder33.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder37 = builder33.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser38 = builder33.getUnchecked();
        java.lang.CharSequence charSequence39 = builder33.getCharSequence();
        java.nio.file.OpenOption[] openOptionArray40 = builder33.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder41 = builder22.setOpenOptions(openOptionArray40);
        java.io.InputStream inputStream42 = builder41.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder43 = builder5.setInputStream(inputStream42);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8192 + "'", int10 == 8192);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertArrayEquals(byteArray15, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8192 + "'", int25 == 8192);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertArrayEquals(byteArray30, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8192 + "'", int35 == 8192);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(cSVParser38);
        org.junit.Assert.assertEquals("'" + charSequence39 + "' != '" + "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", charSequence39, "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertNotNull(openOptionArray40);
        org.junit.Assert.assertArrayEquals(openOptionArray40, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(inputStream42);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1230");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharset(charset4);
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        int int8 = builder6.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder14 = builder6.setByteArray(byteArray13);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder6.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder18 = builder6.setBufferSize((int) (byte) 0);
        java.nio.file.Path path19 = builder6.getPath();
        org.apache.commons.csv.CSVParser.Builder builder20 = builder0.setPath(path19);
        org.apache.commons.csv.CSVParser.Builder builder22 = builder0.setBufferSizeMax((int) '#');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertArrayEquals(byteArray13, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(path19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1231");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setIgnoreHeaderCase(true);
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setRecordSeparator(",");
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder3.setTrailingData(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1232");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean2 = cSVFormat1.getSkipHeaderRecord();
        java.lang.String str3 = cSVFormat1.getRecordSeparator();
        boolean boolean4 = cSVFormat1.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter5 = cSVFormat1.printer();
        boolean boolean6 = cSVFormat1.getIgnoreHeaderCase();
        boolean boolean7 = cSVFormat1.isQuoteCharacterSet();
        org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse("\n", cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\n" + "'", str3, "\n");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVPrinter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(cSVParser8);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1233");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setFile("Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        java.io.File file9 = builder8.getFile();
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset11 = builder10.getCharsetDefault();
        byte[] byteArray12 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder13 = builder10.setByteArray(byteArray12);
        java.lang.CharSequence charSequence14 = builder10.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder10.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder18 = builder10.setRecordNumber((long) (byte) 100);
        java.util.function.IntUnaryOperator intUnaryOperator19 = null;
        org.apache.commons.csv.CSVParser.Builder builder20 = builder18.setBufferSizeChecker(intUnaryOperator19);
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset22 = builder21.getCharsetDefault();
        int int23 = builder21.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder21.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder29 = builder21.setByteArray(byteArray28);
        org.apache.commons.csv.CSVParser.Builder builder30 = builder20.setByteArray(byteArray28);
        org.apache.commons.csv.CSVParser.Builder builder31 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset32 = builder31.getCharsetDefault();
        byte[] byteArray33 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder34 = builder31.setByteArray(byteArray33);
        java.lang.CharSequence charSequence35 = builder31.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder37 = builder31.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder38 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset39 = builder38.getCharsetDefault();
        byte[] byteArray40 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder41 = builder38.setByteArray(byteArray40);
        java.lang.CharSequence charSequence42 = builder38.getCharSequence();
        java.lang.CharSequence charSequence43 = builder38.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser44 = builder38.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray45 = builder38.getOpenOptions();
        java.nio.charset.Charset charset46 = builder38.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder47 = builder31.setCharset(charset46);
        org.apache.commons.csv.CSVParser.Builder builder48 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset49 = builder48.getCharsetDefault();
        byte[] byteArray50 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder51 = builder48.setByteArray(byteArray50);
        java.lang.CharSequence charSequence52 = builder48.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder54 = builder48.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder56 = builder48.setRecordNumber((long) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder57 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset58 = builder57.getCharsetDefault();
        int int59 = builder57.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder61 = builder57.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray64 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder65 = builder57.setByteArray(byteArray64);
        org.apache.commons.csv.CSVParser.Builder builder67 = builder57.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder69 = builder57.setBufferSize((int) (byte) 0);
        java.nio.file.Path path70 = builder57.getPath();
        org.apache.commons.csv.CSVParser.Builder builder71 = builder48.setPath(path70);
        org.apache.commons.csv.CSVParser.Builder builder72 = builder31.setPath(path70);
        org.apache.commons.csv.CSVParser.Builder builder73 = builder20.setPath(path70);
        org.apache.commons.csv.CSVParser.Builder builder74 = builder8.setPath(path70);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(file9);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertArrayEquals(byteArray12, new byte[] {});
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8192 + "'", int23 == 8192);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertArrayEquals(byteArray28, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertArrayEquals(byteArray33, new byte[] {});
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals("'" + charSequence35 + "' != '" + "" + "'", charSequence35, "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(charset39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertArrayEquals(byteArray40, new byte[] {});
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "" + "'", charSequence42, "");
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "" + "'", charSequence43, "");
        org.junit.Assert.assertNotNull(cSVParser44);
        org.junit.Assert.assertNotNull(openOptionArray45);
        org.junit.Assert.assertArrayEquals(openOptionArray45, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(charset49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertArrayEquals(byteArray50, new byte[] {});
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "" + "'", charSequence52, "");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 8192 + "'", int59 == 8192);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertArrayEquals(byteArray64, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(path70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1234");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        java.util.function.IntUnaryOperator intUnaryOperator13 = null;
        org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setBufferSizeChecker(intUnaryOperator13);
        java.nio.file.Path path15 = builder14.getPath();
        org.apache.commons.csv.CSVParser.Builder builder16 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder16.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder19 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset20 = builder19.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder16.setCharset(charset20);
        java.nio.charset.Charset charset22 = builder16.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean24 = cSVFormat23.getSkipHeaderRecord();
        java.lang.String str25 = cSVFormat23.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder26 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat23);
        org.apache.commons.csv.CSVFormat cSVFormat27 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean28 = cSVFormat27.getSkipHeaderRecord();
        java.lang.String str29 = cSVFormat27.getRecordSeparator();
        boolean boolean30 = cSVFormat27.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder31 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat27);
        boolean boolean32 = cSVFormat23.equals((java.lang.Object) cSVFormat27);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse(path15, charset22, cSVFormat23);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(path15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\n" + "'", str25, "\n");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVFormat27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\n" + "'", str29, "\n");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1235");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.lang.String str6 = cSVParser5.getHeaderComment();
        java.util.List<java.lang.String> strList7 = cSVParser5.getHeaderNames();
        java.lang.String str8 = cSVParser5.getHeaderComment();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator9 = cSVParser5.spliterator();
        long long10 = cSVParser5.getRecordNumber();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList11 = cSVParser5.getRecords();
        boolean boolean12 = cSVParser5.hasTrailerComment();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1236");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder2 = cSVFormat1.builder();
        java.lang.String str3 = cSVFormat1.getNullString();
        org.apache.commons.csv.CSVFormat.Predefined predefined5 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat6 = predefined5.getFormat();
        boolean boolean7 = cSVFormat6.getAutoFlush();
        boolean boolean8 = cSVFormat6.getTrim();
        org.apache.commons.csv.CSVParser cSVParser9 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat6);
        boolean boolean10 = cSVParser9.hasTrailerComment();
        java.lang.String str11 = cSVParser9.getHeaderComment();
        long long12 = cSVParser9.getCurrentLineNumber();
        java.util.Spliterator<org.apache.commons.csv.CSVRecord> cSVRecordSpliterator13 = cSVParser9.spliterator();
        boolean boolean14 = cSVFormat1.equals((java.lang.Object) cSVParser9);
        boolean boolean15 = cSVFormat1.getIgnoreEmptyLines();
        org.apache.commons.csv.CSVPrinter cSVPrinter16 = cSVFormat1.printer();
        java.lang.Appendable appendable17 = null;
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset19 = builder18.getCharsetDefault();
        int int20 = builder18.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder18.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder26 = builder18.setByteArray(byteArray25);
        org.apache.commons.csv.CSVParser.Builder builder28 = builder18.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder30 = builder18.setBufferSize((int) (byte) 0);
        java.nio.file.Path path31 = builder18.getPath();
        org.apache.commons.csv.CSVParser.Builder builder32 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset33 = builder32.getCharsetDefault();
        int int34 = builder32.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder36 = builder32.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser37 = builder32.getUnchecked();
        java.lang.CharSequence charSequence38 = builder32.getCharSequence();
        java.nio.file.OpenOption[] openOptionArray39 = builder32.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder40 = builder18.setOpenOptions(openOptionArray39);
        org.apache.commons.csv.CSVParser.Builder builder41 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset42 = builder41.getCharsetDefault();
        int int43 = builder41.getBufferSizeDefault();
        java.nio.file.OpenOption[] openOptionArray44 = builder41.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder45 = builder18.setOpenOptions(openOptionArray44);
        cSVFormat1.printRecord(appendable17, (java.lang.Object[]) openOptionArray44);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + predefined5 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined5.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(cSVParser9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordSpliterator13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(cSVPrinter16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8192 + "'", int20 == 8192);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertArrayEquals(byteArray25, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(path31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8192 + "'", int34 == 8192);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(cSVParser37);
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", charSequence38, "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertNotNull(openOptionArray39);
        org.junit.Assert.assertArrayEquals(openOptionArray39, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8192 + "'", int43 == 8192);
        org.junit.Assert.assertNotNull(openOptionArray44);
        org.junit.Assert.assertArrayEquals(openOptionArray44, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1237");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat(' ');
        boolean boolean2 = cSVFormat1.getTrim();
        boolean boolean3 = cSVFormat1.getIgnoreEmptyLines();
        java.lang.Character char4 = cSVFormat1.getCommentMarker();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(char4);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1238");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        java.sql.ResultSet resultSet21 = null;
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setHeader(resultSet21);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder18.setRecordSeparator('4');
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder24.setIgnoreHeaderCase(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1239");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder2.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder2.setBufferSizeMax(100);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setRecordNumber(0L);
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setBufferSize((int) (short) 10);
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset11 = builder10.getCharsetDefault();
        byte[] byteArray12 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder13 = builder10.setByteArray(byteArray12);
        java.lang.CharSequence charSequence14 = builder10.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder10.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder17 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset18 = builder17.getCharsetDefault();
        int int19 = builder17.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder21 = builder17.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder25 = builder17.setByteArray(byteArray24);
        java.nio.charset.Charset charset26 = builder17.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder16.setCharset(charset26);
        org.apache.commons.csv.CSVParser.Builder builder28 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset29 = builder28.getCharsetDefault();
        int int30 = builder28.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder28.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray35 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder36 = builder28.setByteArray(byteArray35);
        org.apache.commons.csv.CSVParser.Builder builder38 = builder28.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder40 = builder28.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder42 = builder28.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder43 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset44 = builder43.getCharsetDefault();
        int int45 = builder43.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder47 = builder43.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray50 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder51 = builder43.setByteArray(byteArray50);
        org.apache.commons.csv.CSVParser.Builder builder52 = builder42.setByteArray(byteArray50);
        org.apache.commons.csv.CSVParser.Builder builder53 = builder27.setByteArray(byteArray50);
        org.apache.commons.csv.CSVParser.Builder builder54 = builder9.setByteArray(byteArray50);
        int int55 = builder9.getBufferSize();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8192 + "'", int3 == 8192);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertArrayEquals(byteArray12, new byte[] {});
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8192 + "'", int19 == 8192);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8192 + "'", int30 == 8192);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertArrayEquals(byteArray35, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8192 + "'", int45 == 8192);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertArrayEquals(byteArray50, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1240");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        java.sql.ResultSet resultSet21 = null;
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setHeader(resultSet21);
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder18.setRecordSeparator('4');
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder24.setSkipHeaderRecord(false);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder24.setDelimiter(' ');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1241");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getIgnoreHeaderCase();
        boolean boolean2 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVParser.Builder builder3 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset4 = builder3.getCharsetDefault();
        byte[] byteArray5 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder6 = builder3.setByteArray(byteArray5);
        boolean boolean7 = cSVFormat0.equals((java.lang.Object) builder3);
        java.nio.file.OpenOption[] openOptionArray8 = builder3.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder3.setRecordNumber(0L);
        int int11 = builder3.getBufferSizeDefault();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertArrayEquals(byteArray5, new byte[] {});
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(openOptionArray8);
        org.junit.Assert.assertArrayEquals(openOptionArray8, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8192 + "'", int11 == 8192);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1242");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.nio.charset.Charset charset4 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        int int9 = builder7.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder7.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder7.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder19 = builder7.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder7.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) '#');
        java.io.File file24 = builder23.getFile();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder6.setFile(file24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder6.setCharacterOffset((long) 10);
        org.apache.commons.csv.CSVParser.Builder builder29 = builder6.setCharacterOffset((-1L));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence charSequence30 = builder29.getCharSequence();
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1243");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        boolean boolean2 = cSVFormat0.getLenientEof();
        java.lang.String str3 = cSVFormat0.getNullString();
        boolean boolean4 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder5 = cSVFormat0.builder();
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder5.setLenientEof(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1244");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setFile("Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        java.io.OutputStream outputStream9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setOutputStream(outputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1245");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setCharacterOffset((long) (byte) 1);
        java.nio.charset.Charset charset15 = builder14.getCharset();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(charset15);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1246");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setEscape('\"');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder4.setNullString("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder10.setEscape(' ');
        java.lang.Class<?> wildcardClass13 = builder12.getClass();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1247");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder2.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder4 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset5 = builder4.getCharsetDefault();
        byte[] byteArray6 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder7 = builder4.setByteArray(byteArray6);
        java.lang.CharSequence charSequence8 = builder4.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder4.setBufferSize((int) ' ');
        java.io.InputStream inputStream11 = builder10.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder12 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset13 = builder12.getCharsetDefault();
        byte[] byteArray14 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder15 = builder12.setByteArray(byteArray14);
        java.nio.charset.Charset charset16 = builder12.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder19 = cSVFormat18.builder();
        java.lang.String str20 = cSVFormat18.getNullString();
        org.apache.commons.csv.CSVParser cSVParser21 = org.apache.commons.csv.CSVParser.parse(inputStream11, charset16, cSVFormat18);
        org.apache.commons.csv.CSVParser.Builder builder22 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset23 = builder22.getCharsetDefault();
        byte[] byteArray24 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder25 = builder22.setByteArray(byteArray24);
        org.apache.commons.csv.CSVParser.Builder builder27 = builder22.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder29 = builder22.setBufferSize((int) 'a');
        java.nio.charset.Charset charset30 = builder29.getCharsetDefault();
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.newFormat('4');
        org.apache.commons.csv.CSVParser cSVParser33 = org.apache.commons.csv.CSVParser.parse(inputStream11, charset30, cSVFormat32);
        org.apache.commons.csv.CSVParser.Builder builder34 = builder2.setCharset(charset30);
        java.io.RandomAccessFile randomAccessFile35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder36 = builder34.setRandomAccessFile(randomAccessFile35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertArrayEquals(byteArray6, new byte[] {});
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "" + "'", charSequence8, "");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] {});
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(cSVParser21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertArrayEquals(byteArray24, new byte[] {});
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(charset30);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertNotNull(cSVParser33);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1248");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setBufferSize((int) 'a');
        org.apache.commons.csv.CSVParser.Builder builder9 = builder0.setBufferSize((java.lang.Integer) 100);
        java.io.Reader reader10 = builder0.getReader();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(reader10);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1249");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setQuote((java.lang.Character) '#');
        java.sql.ResultSet resultSet23 = null;
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setHeader(resultSet23);
        org.apache.commons.csv.CSVFormat.Predefined predefined25 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat26 = predefined25.getFormat();
        boolean boolean27 = cSVFormat26.getAutoFlush();
        boolean boolean28 = cSVFormat26.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter29 = cSVFormat26.printer();
        org.apache.commons.csv.QuoteMode quoteMode30 = cSVFormat26.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder24.setQuoteMode(quoteMode30);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + predefined25 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined25.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(cSVPrinter29);
        org.junit.Assert.assertTrue("'" + quoteMode30 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode30.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1250");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder15 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset16 = builder15.getCharsetDefault();
        int int17 = builder15.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder15.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder23 = builder15.setByteArray(byteArray22);
        org.apache.commons.csv.CSVParser.Builder builder24 = builder14.setByteArray(byteArray22);
        java.nio.charset.Charset charset25 = builder14.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder14.setBufferSize((java.lang.Integer) 8192);
        org.apache.commons.csv.CSVParser.Builder builder29 = builder14.setCharSequence((java.lang.CharSequence) "\t");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8192 + "'", int17 == 8192);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertArrayEquals(byteArray22, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1251");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean10 = cSVFormat9.getSkipHeaderRecord();
        java.lang.String str11 = cSVFormat9.getRecordSeparator();
        boolean boolean12 = cSVFormat9.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder13 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat9);
        org.apache.commons.csv.QuoteMode quoteMode14 = null;
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setQuoteMode(quoteMode14);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray24 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder13.setHeaderComments(strArray24);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder4.setHeaderComments(strArray24);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setRecordSeparator('4');
        org.apache.commons.csv.CSVFormat cSVFormat29 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean30 = cSVFormat29.getSkipHeaderRecord();
        java.lang.String str31 = cSVFormat29.getRecordSeparator();
        boolean boolean32 = cSVFormat29.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder33 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat29);
        org.apache.commons.csv.QuoteMode quoteMode34 = null;
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder33.setQuoteMode(quoteMode34);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder33.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray44 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder33.setHeaderComments(strArray44);
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder33.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder47.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder51 = builder47.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder53 = builder47.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat cSVFormat54 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean55 = cSVFormat54.getSkipHeaderRecord();
        java.lang.String str56 = cSVFormat54.getRecordSeparator();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode57 = cSVFormat54.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder58 = builder47.setDuplicateHeaderMode(duplicateHeaderMode57);
        org.apache.commons.csv.CSVFormat.Builder builder59 = builder26.setDuplicateHeaderMode(duplicateHeaderMode57);
        org.apache.commons.csv.CSVFormat cSVFormat60 = builder59.get();
        boolean boolean61 = cSVFormat60.getSkipHeaderRecord();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\n" + "'", str11, "\n");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertArrayEquals(strArray24, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(cSVFormat29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\n" + "'", str31, "\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertArrayEquals(strArray44, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(cSVFormat54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\n" + "'", str56, "\n");
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode57 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode57.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1252");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser cSVParser4 = builder3.get();
        java.nio.charset.Charset charset5 = builder3.getCharset();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVParser4);
        org.junit.Assert.assertNotNull(charset5);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1253");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVParser5.hasTrailerComment();
        java.lang.String str7 = cSVParser5.getHeaderComment();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor8 = cSVParser5.iterator();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream9 = cSVParser5.stream();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(cSVRecordItor8);
        org.junit.Assert.assertNotNull(cSVRecordStream9);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1254");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setBufferSize((int) 'a');
        java.nio.file.OpenOption[] openOptionArray8 = builder7.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder7.setCharSequence((java.lang.CharSequence) "\r\n#Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]#Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        java.util.function.IntUnaryOperator intUnaryOperator11 = null;
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setBufferSizeChecker(intUnaryOperator11);
        org.apache.commons.io.IORandomAccessFile iORandomAccessFile13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder14 = builder12.setRandomAccessFile(iORandomAccessFile13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(openOptionArray8);
        org.junit.Assert.assertArrayEquals(openOptionArray8, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1255");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        boolean boolean5 = cSVFormat0.isCommentMarkerSet();
        org.apache.commons.csv.CSVFormat.Builder builder6 = cSVFormat0.builder();
        java.lang.Character char7 = cSVFormat0.getEscapeCharacter();
        org.apache.commons.csv.CSVPrinter cSVPrinter8 = cSVFormat0.printer();
        boolean boolean9 = cSVFormat0.getTrailingDelimiter();
        java.lang.String[] strArray10 = cSVFormat0.getHeader();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(char7);
        org.junit.Assert.assertNotNull(cSVPrinter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strArray10);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1256");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.String str3 = cSVFormat0.toString();
        boolean boolean4 = cSVFormat0.getLenientEof();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\r\n" + "'", str2, "\r\n");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false" + "'", str3, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1257");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        java.lang.Character char3 = cSVFormat0.getCommentMarker();
        org.apache.commons.csv.CSVFormat.Builder builder4 = cSVFormat0.builder();
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuote('4');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNull(char3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1258");
        java.net.URL uRL0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset2 = builder1.getCharsetDefault();
        byte[] byteArray3 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder4 = builder1.setByteArray(byteArray3);
        org.apache.commons.csv.CSVParser.Builder builder6 = builder1.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        int int9 = builder7.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder7.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder7.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder19 = builder7.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder7.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder22 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset23 = builder22.getCharsetDefault();
        int int24 = builder22.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder26 = builder22.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray29 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder30 = builder22.setByteArray(byteArray29);
        org.apache.commons.csv.CSVParser.Builder builder31 = builder21.setByteArray(byteArray29);
        java.nio.charset.Charset charset32 = builder21.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder1.setCharset(charset32);
        org.apache.commons.csv.CSVParser.Builder builder35 = builder33.setBufferSizeMax((int) ' ');
        java.nio.charset.Charset charset36 = builder35.getCharset();
        java.nio.charset.Charset charset37 = builder35.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean39 = cSVFormat38.getSkipHeaderRecord();
        java.lang.String str40 = cSVFormat38.getRecordSeparator();
        boolean boolean41 = cSVFormat38.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter42 = cSVFormat38.printer();
        boolean boolean43 = cSVFormat38.getIgnoreHeaderCase();
        org.apache.commons.csv.QuoteMode quoteMode44 = cSVFormat38.getQuoteMode();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser45 = org.apache.commons.csv.CSVParser.parse(uRL0, charset37, cSVFormat38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertArrayEquals(byteArray3, new byte[] {});
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8192 + "'", int24 == 8192);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertArrayEquals(byteArray29, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(charset32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(cSVFormat38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\n" + "'", str40, "\n");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(cSVPrinter42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + quoteMode44 + "' != '" + org.apache.commons.csv.QuoteMode.ALL_NON_NULL + "'", quoteMode44.equals(org.apache.commons.csv.QuoteMode.ALL_NON_NULL));
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1259");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setQuote((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder18.setLenientEof(false);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder18.setDelimiter('4');
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder26.setQuote('#');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1260");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.toString();
        boolean boolean3 = cSVFormat0.getIgnoreHeaderCase();
        org.apache.commons.csv.QuoteMode quoteMode4 = cSVFormat0.getQuoteMode();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(quoteMode4);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1261");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setTrim(false);
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean10 = cSVFormat9.getSkipHeaderRecord();
        java.lang.String str11 = cSVFormat9.getRecordSeparator();
        boolean boolean12 = cSVFormat9.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder13 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat9);
        org.apache.commons.csv.QuoteMode quoteMode14 = null;
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder13.setQuoteMode(quoteMode14);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder13.setIgnoreSurroundingSpaces(true);
        org.apache.commons.csv.CSVFormat cSVFormat18 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean19 = cSVFormat18.getSkipHeaderRecord();
        java.lang.String str20 = cSVFormat18.getRecordSeparator();
        boolean boolean21 = cSVFormat18.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder22 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat18);
        org.apache.commons.csv.QuoteMode quoteMode23 = null;
        org.apache.commons.csv.CSVFormat.Builder builder24 = builder22.setQuoteMode(quoteMode23);
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder22.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray33 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder22.setHeaderComments(strArray33);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder13.setHeaderComments(strArray33);
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder8.setHeaderComments((java.lang.Object[]) strArray33);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setCommentMarker(' ');
        org.apache.commons.csv.CSVFormat cSVFormat39 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean40 = cSVFormat39.getSkipHeaderRecord();
        java.lang.String str41 = cSVFormat39.getRecordSeparator();
        boolean boolean42 = cSVFormat39.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder43 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat39);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder43.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder47 = builder43.setTrim(false);
        org.apache.commons.csv.CSVFormat.Builder builder49 = builder43.setAutoFlush(true);
        org.apache.commons.csv.CSVFormat.Predefined predefined50 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat51 = predefined50.getFormat();
        boolean boolean52 = cSVFormat51.getIgnoreHeaderCase();
        java.lang.Object[] objArray57 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str58 = cSVFormat51.format(objArray57);
        java.lang.String str59 = cSVFormat51.getRecordSeparator();
        boolean boolean60 = cSVFormat51.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode61 = cSVFormat51.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder43.setQuoteMode(quoteMode61);
        org.apache.commons.csv.CSVFormat cSVFormat64 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        org.apache.commons.csv.QuoteMode quoteMode65 = cSVFormat64.getQuoteMode();
        org.apache.commons.csv.CSVFormat cSVFormat66 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean67 = cSVFormat66.getSkipHeaderRecord();
        java.lang.String str68 = cSVFormat66.getRecordSeparator();
        boolean boolean69 = cSVFormat66.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder70 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat66);
        org.apache.commons.csv.CSVFormat.Builder builder72 = builder70.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode73 = null;
        org.apache.commons.csv.CSVFormat.Builder builder74 = builder72.setQuoteMode(quoteMode73);
        java.lang.String[] strArray78 = new java.lang.String[] { "\r\n", "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]", "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" };
        org.apache.commons.csv.CSVFormat.Builder builder79 = builder74.setHeader(strArray78);
        java.lang.String str80 = cSVFormat64.format((java.lang.Object[]) strArray78);
        org.apache.commons.csv.CSVFormat.Builder builder81 = builder43.setHeader(strArray78);
        org.apache.commons.csv.CSVFormat.Builder builder82 = builder38.setHeader(strArray78);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\n" + "'", str11, "\n");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(cSVFormat18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\n" + "'", str20, "\n");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertArrayEquals(strArray33, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(cSVFormat39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\n" + "'", str41, "\n");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + predefined50 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined50.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str58, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\r\n" + "'", str59, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + quoteMode61 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode61.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertNull(quoteMode65);
        org.junit.Assert.assertNotNull(cSVFormat66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\n" + "'", str68, "\n");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertArrayEquals(strArray78, new java.lang.String[] { "\r\n", "Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]", "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" });
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\r\n\"Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]\"Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false" + "'", str80, "\r\n\"Delimiter=<,> Escape=< > QuoteChar=<\"> NullString=<> RecordSeparator=<\n> SurroundingSpaces:ignored SkipHeaderRecord:false HeaderComments:[100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\", , hi!, \r\n, , 100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"]\"Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1262");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.nio.charset.Charset charset4 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        int int9 = builder7.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder7.setByteArray(byteArray14);
        org.apache.commons.csv.CSVParser.Builder builder17 = builder7.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder19 = builder7.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder21 = builder7.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder21.setCharacterOffset((long) '#');
        java.io.File file24 = builder23.getFile();
        org.apache.commons.csv.CSVParser.Builder builder25 = builder6.setFile(file24);
        org.apache.commons.csv.CSVParser.Builder builder26 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset27 = builder26.getCharsetDefault();
        byte[] byteArray28 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder29 = builder26.setByteArray(byteArray28);
        java.lang.CharSequence charSequence30 = builder26.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder26.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder34 = builder26.setRecordNumber((long) (byte) 0);
        java.nio.charset.Charset charset35 = builder26.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder38 = cSVFormat37.builder();
        java.lang.String str39 = cSVFormat37.getDelimiterString();
        boolean boolean40 = cSVFormat37.getAllowMissingColumnNames();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser41 = org.apache.commons.csv.CSVParser.parse(file24, charset35, cSVFormat37);
            org.junit.Assert.fail("Expected exception of type java.nio.file.AccessDeniedException; message: ");
        } catch (java.nio.file.AccessDeniedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(file24);
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertArrayEquals(byteArray28, new byte[] {});
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "" + "'", charSequence30, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(cSVFormat37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "a" + "'", str39, "a");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1263");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setIgnoreHeaderCase(true);
        java.sql.ResultSetMetaData resultSetMetaData6 = null;
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setHeader(resultSetMetaData6);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setIgnoreEmptyLines(true);
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean11 = cSVFormat10.getSkipHeaderRecord();
        java.lang.String str12 = cSVFormat10.getRecordSeparator();
        boolean boolean13 = cSVFormat10.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder14 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat10);
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder16.setDelimiter('a');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setTrim(true);
        java.sql.ResultSet resultSet21 = null;
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder20.setHeader(resultSet21);
        org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean24 = cSVFormat23.getSkipHeaderRecord();
        java.lang.String str25 = cSVFormat23.getRecordSeparator();
        boolean boolean26 = cSVFormat23.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder27 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat23);
        org.apache.commons.csv.CSVFormat.Builder builder29 = builder27.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder29.setQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode33 = cSVFormat32.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder34 = builder29.setDuplicateHeaderMode(duplicateHeaderMode33);
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder22.setDuplicateHeaderMode(duplicateHeaderMode33);
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder7.setDuplicateHeaderMode(duplicateHeaderMode33);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(cSVFormat23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\n" + "'", str25, "\n");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(cSVFormat32);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode33 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode33.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1264");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser5 = builder0.getUnchecked();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setPath(",");
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setBufferSize((int) (short) 0);
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset11 = builder10.getCharsetDefault();
        int int12 = builder10.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder10.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder18 = builder10.setByteArray(byteArray17);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder10.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder22 = builder10.setBufferSize((int) (byte) 0);
        java.util.function.IntUnaryOperator intUnaryOperator23 = null;
        org.apache.commons.csv.CSVParser.Builder builder24 = builder22.setBufferSizeChecker(intUnaryOperator23);
        java.nio.file.Path path25 = builder24.getPath();
        org.apache.commons.csv.CSVParser.Builder builder26 = builder7.setPath(path25);
        org.apache.commons.csv.CSVParser.Builder builder27 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset28 = builder27.getCharsetDefault();
        byte[] byteArray29 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder30 = builder27.setByteArray(byteArray29);
        java.nio.charset.Charset charset31 = builder27.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder33 = builder27.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder34 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset35 = builder34.getCharsetDefault();
        int int36 = builder34.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder38 = builder34.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray41 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder42 = builder34.setByteArray(byteArray41);
        org.apache.commons.csv.CSVParser.Builder builder44 = builder34.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder46 = builder34.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder48 = builder34.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder50 = builder48.setCharacterOffset((long) '#');
        java.io.File file51 = builder50.getFile();
        org.apache.commons.csv.CSVParser.Builder builder52 = builder33.setFile(file51);
        org.apache.commons.csv.CSVParser.Builder builder54 = builder33.setCharacterOffset((long) 10);
        int int55 = builder54.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder56 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset57 = builder56.getCharsetDefault();
        byte[] byteArray58 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder59 = builder56.setByteArray(byteArray58);
        java.lang.CharSequence charSequence60 = builder56.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder62 = builder56.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder63 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset64 = builder63.getCharsetDefault();
        int int65 = builder63.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder67 = builder63.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray70 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder71 = builder63.setByteArray(byteArray70);
        java.nio.charset.Charset charset72 = builder63.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder73 = builder62.setCharset(charset72);
        org.apache.commons.csv.CSVParser.Builder builder74 = builder54.setCharset(charset72);
        org.apache.commons.csv.CSVFormat cSVFormat75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser76 = org.apache.commons.csv.CSVParser.parse(path25, charset72, cSVFormat75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: format");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8192 + "'", int12 == 8192);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(path25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertArrayEquals(byteArray29, new byte[] {});
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8192 + "'", int36 == 8192);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertArrayEquals(byteArray41, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(file51);
        org.junit.Assert.assertNull("file51.getParent() == null", file51.getParent());
        org.junit.Assert.assertEquals(file51.toString(), "");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8192 + "'", int55 == 8192);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(charset57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertArrayEquals(byteArray58, new byte[] {});
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "" + "'", charSequence60, "");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(charset64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8192 + "'", int65 == 8192);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertArrayEquals(byteArray70, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(charset72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1265");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('4');
        boolean boolean2 = cSVFormat1.isQuoteCharacterSet();
        java.lang.String str3 = cSVFormat1.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder4 = cSVFormat1.builder();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1266");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        java.lang.String str2 = cSVFormat1.toString();
        boolean boolean3 = cSVFormat1.isEscapeCharacterSet();
        java.lang.String str4 = cSVFormat1.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat5 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter6 = cSVFormat5.printer();
        boolean boolean7 = cSVFormat5.getLenientEof();
        boolean boolean8 = cSVFormat5.getIgnoreSurroundingSpaces();
        java.lang.String str9 = cSVFormat5.getRecordSeparator();
        org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean11 = cSVFormat10.getSkipHeaderRecord();
        java.lang.String str12 = cSVFormat10.getRecordSeparator();
        boolean boolean13 = cSVFormat10.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder14 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat10);
        org.apache.commons.csv.QuoteMode quoteMode15 = null;
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder14.setQuoteMode(quoteMode15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder14.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray25 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder26 = builder14.setHeaderComments(strArray25);
        org.apache.commons.csv.CSVFormat.Builder builder28 = builder14.setCommentMarker('a');
        java.sql.ResultSetMetaData resultSetMetaData29 = null;
        org.apache.commons.csv.CSVFormat.Builder builder30 = builder28.setHeader(resultSetMetaData29);
        org.apache.commons.csv.CSVFormat cSVFormat31 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean32 = cSVFormat31.getSkipHeaderRecord();
        java.lang.String str33 = cSVFormat31.getRecordSeparator();
        boolean boolean34 = cSVFormat31.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder35 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat31);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder35.setCommentMarker('a');
        java.lang.String[] strArray42 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" };
        org.apache.commons.csv.CSVFormat.Builder builder43 = builder35.setHeader(strArray42);
        org.apache.commons.csv.CSVFormat.Builder builder45 = builder35.setNullString("");
        org.apache.commons.csv.CSVFormat cSVFormat46 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean47 = cSVFormat46.getSkipHeaderRecord();
        java.lang.String str48 = cSVFormat46.getRecordSeparator();
        boolean boolean49 = cSVFormat46.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder50 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat46);
        org.apache.commons.csv.QuoteMode quoteMode51 = null;
        org.apache.commons.csv.CSVFormat.Builder builder52 = builder50.setQuoteMode(quoteMode51);
        org.apache.commons.csv.CSVFormat.Builder builder54 = builder50.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray61 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder62 = builder50.setHeaderComments(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder63 = builder45.setHeader(strArray61);
        org.apache.commons.csv.CSVFormat.Builder builder64 = builder28.setHeaderComments(strArray61);
        java.lang.String str65 = cSVFormat5.format((java.lang.Object[]) strArray61);
        java.lang.String str66 = cSVFormat1.format((java.lang.Object[]) strArray61);
        java.lang.Character char67 = cSVFormat1.getQuoteCharacter();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str2, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\r\n" + "'", str4, "\r\n");
        org.junit.Assert.assertNotNull(cSVFormat5);
        org.junit.Assert.assertNotNull(cSVPrinter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\r\n" + "'", str9, "\r\n");
        org.junit.Assert.assertNotNull(cSVFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\n" + "'", str12, "\n");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertArrayEquals(strArray25, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(cSVFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\n" + "'", str33, "\n");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertArrayEquals(strArray42, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "\n", "\n", "\n" });
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(cSVFormat46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\n" + "'", str48, "\n");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertArrayEquals(strArray61, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\",,hi!,\"\r\n\",,\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"" + "'", str65, "\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\",,hi!,\"\r\n\",,\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\",,hi!,\"\r\n\",,\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"" + "'", str66, "\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\",,hi!,\"\r\n\",,\"100,\"\"#\"\",false,\"\"Delimiter=<,> Escape=<\"\"\"\"> QuoteChar=<\"\"\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"\"\"");
        org.junit.Assert.assertTrue("'" + char67 + "' != '" + '\"' + "'", char67 == '\"');
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1267");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder7 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset8 = builder7.getCharsetDefault();
        int int9 = builder7.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder7.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray14 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder15 = builder7.setByteArray(byteArray14);
        java.nio.charset.Charset charset16 = builder7.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder17 = builder6.setCharset(charset16);
        org.apache.commons.csv.CSVParser.Builder builder19 = builder17.setRecordNumber((long) 8192);
        java.util.function.IntUnaryOperator intUnaryOperator20 = null;
        org.apache.commons.csv.CSVParser.Builder builder21 = builder19.setBufferSizeChecker(intUnaryOperator20);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8192 + "'", int9 == 8192);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertArrayEquals(byteArray14, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1268");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setLenientEof(false);
        java.sql.ResultSetMetaData resultSetMetaData7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setHeader(resultSetMetaData7);
        java.sql.ResultSet resultSet9 = null;
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setHeader(resultSet9);
        java.sql.ResultSet resultSet11 = null;
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder6.setHeader(resultSet11);
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder12.setAllowMissingColumnNames(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1269");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setCharacterOffset((long) (byte) 1);
        org.apache.commons.csv.CSVParser.Builder builder16 = builder0.setBufferSizeMax(1);
        java.io.File file17 = builder16.getFile();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "");
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1270");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF;
        boolean boolean2 = cSVFormat1.getIgnoreEmptyLines();
        org.apache.commons.csv.CSVParser cSVParser3 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat1);
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(cSVParser3);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1271");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder2 = builder0.setBufferSize((java.lang.Integer) 100);
        int int3 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setCharacterOffset((long) 1);
        org.apache.commons.csv.CSVParser.Builder builder6 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset7 = builder6.getCharsetDefault();
        int int8 = builder6.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder6.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser11 = builder6.getUnchecked();
        org.apache.commons.csv.CSVParser.Builder builder13 = builder6.setPath(",");
        java.nio.file.OpenOption[] openOptionArray14 = builder13.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder5.setOpenOptions(openOptionArray14);
        int int16 = builder5.getBufferSizeDefault();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8192 + "'", int3 == 8192);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8192 + "'", int8 == 8192);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVParser11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(openOptionArray14);
        org.junit.Assert.assertArrayEquals(openOptionArray14, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8192 + "'", int16 == 8192);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1272");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setTrailingData(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = builder8.get();
        boolean boolean12 = cSVFormat11.getTrailingDelimiter();
        boolean boolean13 = cSVFormat11.isEscapeCharacterSet();
        boolean boolean14 = cSVFormat11.getIgnoreEmptyLines();
        org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean16 = cSVFormat15.getSkipHeaderRecord();
        java.lang.String str17 = cSVFormat15.getRecordSeparator();
        boolean boolean18 = cSVFormat15.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder19 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat15);
        org.apache.commons.csv.QuoteMode quoteMode20 = null;
        org.apache.commons.csv.CSVFormat.Builder builder21 = builder19.setQuoteMode(quoteMode20);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder19.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray30 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder31 = builder19.setHeaderComments(strArray30);
        org.apache.commons.csv.CSVFormat.Builder builder33 = builder31.setNullString("a");
        boolean boolean34 = cSVFormat11.equals((java.lang.Object) builder33);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(cSVFormat15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\n" + "'", str17, "\n");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertArrayEquals(strArray30, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1273");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        org.apache.commons.csv.CSVParser.Builder builder5 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder7 = builder5.setRecordNumber((long) (short) 10);
        org.apache.commons.csv.CSVParser cSVParser8 = builder7.get();
        org.apache.commons.csv.CSVParser.Builder builder10 = builder7.setRecordNumber(10L);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset12 = builder11.getCharsetDefault();
        byte[] byteArray13 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder14 = builder11.setByteArray(byteArray13);
        java.lang.CharSequence charSequence15 = builder11.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder17 = builder11.setBufferSize((int) ' ');
        java.io.Reader reader18 = builder17.getReader();
        org.apache.commons.csv.CSVParser.Builder builder19 = builder7.setReader(reader18);
        java.nio.file.OpenOption[] openOptionArray20 = builder7.getOpenOptions();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(cSVParser8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertArrayEquals(byteArray13, new byte[] {});
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "" + "'", charSequence15, "");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(reader18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(openOptionArray20);
        org.junit.Assert.assertArrayEquals(openOptionArray20, new java.nio.file.OpenOption[] {});
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1274");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        java.lang.String str3 = cSVParser2.getFirstEndOfLine();
        long long4 = cSVParser2.getCurrentLineNumber();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor5 = cSVParser2.iterator();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser2.iterator();
        java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList7 = cSVParser2.getRecords();
        boolean boolean8 = cSVParser2.hasHeaderComment();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVParser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(cSVRecordItor5);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertNotNull(cSVRecordList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1275");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setDelimiter('a');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder8.setTrim(true);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode12 = cSVFormat11.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder13 = builder10.setDuplicateHeaderMode(duplicateHeaderMode12);
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder10.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder10.setTrailingData(true);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode12 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode12.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1276");
        org.apache.commons.csv.CSVFormat.Predefined predefined0 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat1 = predefined0.getFormat();
        boolean boolean2 = cSVFormat1.getAutoFlush();
        java.lang.Character char3 = cSVFormat1.getEscapeCharacter();
        java.lang.String[] strArray4 = cSVFormat1.getHeaderComments();
        boolean boolean5 = cSVFormat1.getTrailingData();
        org.junit.Assert.assertTrue("'" + predefined0 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined0.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + '\"' + "'", char3 == '\"');
        org.junit.Assert.assertNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1277");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setRecordNumber((long) (short) 10);
        java.util.function.IntUnaryOperator intUnaryOperator11 = null;
        org.apache.commons.csv.CSVParser.Builder builder12 = builder10.setBufferSizeChecker(intUnaryOperator11);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder10.setBufferSize((int) ' ');
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1278");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker('a');
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setDelimiter('a');
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder12 = builder6.setCommentMarker('#');
        org.apache.commons.csv.CSVFormat.Builder builder14 = builder6.setQuote((java.lang.Character) '4');
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1279");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        boolean boolean4 = cSVFormat0.getAutoFlush();
        java.lang.String[] strArray5 = cSVFormat0.getHeaderComments();
        java.lang.Character char6 = cSVFormat0.getCommentMarker();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strArray5);
        org.junit.Assert.assertNull(char6);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1280");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        boolean boolean2 = cSVFormat0.getLenientEof();
        java.lang.String str3 = cSVFormat0.getNullString();
        java.lang.Character char4 = cSVFormat0.getQuoteCharacter();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + char4 + "' != '" + '\"' + "'", char4 == '\"');
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1281");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        org.apache.commons.csv.CSVFormat.Builder builder3 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder5 = builder3.setIgnoreHeaderCase(true);
        java.sql.ResultSetMetaData resultSetMetaData6 = null;
        org.apache.commons.csv.CSVFormat.Builder builder7 = builder3.setHeader(resultSetMetaData6);
        org.apache.commons.csv.CSVFormat.Builder builder9 = builder7.setTrailingData(true);
        org.apache.commons.csv.CSVFormat.Builder builder11 = builder9.setAllowMissingColumnNames(false);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1282");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser5.iterator();
        long long7 = cSVParser5.getRecordNumber();
        java.util.List<java.lang.String> strList8 = cSVParser5.getHeaderNames();
        java.util.Spliterator<java.lang.String> strSpliterator9 = strList8.spliterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strSpliterator9);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1283");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVParser5.hasTrailerComment();
        cSVParser5.close();
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor8 = cSVParser5.iterator();
        boolean boolean9 = cSVParser5.isClosed();
        cSVParser5.close();
        boolean boolean11 = cSVParser5.isClosed();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(cSVRecordItor8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1284");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier4 = builder0.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset6 = builder5.getCharsetDefault();
        byte[] byteArray7 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder8 = builder5.setByteArray(byteArray7);
        java.lang.CharSequence charSequence9 = builder5.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder5.setBufferSize((int) ' ');
        java.io.InputStream inputStream12 = builder11.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder13 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset14 = builder13.getCharsetDefault();
        byte[] byteArray15 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder16 = builder13.setByteArray(byteArray15);
        java.nio.charset.Charset charset17 = builder13.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder20 = cSVFormat19.builder();
        java.lang.String str21 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse(inputStream12, charset17, cSVFormat19);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder0.setInputStream(inputStream12);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier24 = builder0.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder25 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset26 = builder25.getCharsetDefault();
        int int27 = builder25.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder25.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder33 = builder25.setByteArray(byteArray32);
        org.apache.commons.csv.CSVParser.Builder builder35 = builder33.setBufferSize((java.lang.Integer) (-1));
        org.apache.commons.csv.CSVParser.Builder builder36 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset37 = builder36.getCharsetDefault();
        int int38 = builder36.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder40 = builder36.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray43 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder44 = builder36.setByteArray(byteArray43);
        org.apache.commons.csv.CSVParser.Builder builder46 = builder36.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder48 = builder36.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder50 = builder36.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder52 = builder50.setCharacterOffset((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder54 = builder50.setCharacterOffset((long) 'a');
        java.nio.charset.Charset charset55 = builder50.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder56 = builder33.setCharset(charset55);
        org.apache.commons.csv.CSVParser.Builder builder57 = builder0.setCharset(charset55);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path58 = builder0.getPath();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: InputStreamOrigin#getPath() for ByteArrayInputStream origin java.io.ByteArrayInputStream@1c8f3fae");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVParserSupplier4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "" + "'", charSequence9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertArrayEquals(byteArray15, new byte[] {});
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(cSVParser22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(cSVParserSupplier24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8192 + "'", int27 == 8192);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertArrayEquals(byteArray32, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8192 + "'", int38 == 8192);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertArrayEquals(byteArray43, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1285");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        java.nio.charset.Charset charset2 = builder0.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setBufferSize((int) (byte) 10);
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset6 = builder5.getCharsetDefault();
        byte[] byteArray7 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder8 = builder5.setByteArray(byteArray7);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier9 = builder5.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset11 = builder10.getCharsetDefault();
        byte[] byteArray12 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder13 = builder10.setByteArray(byteArray12);
        java.lang.CharSequence charSequence14 = builder10.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder16 = builder10.setBufferSize((int) ' ');
        java.io.InputStream inputStream17 = builder16.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder18 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset19 = builder18.getCharsetDefault();
        byte[] byteArray20 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder21 = builder18.setByteArray(byteArray20);
        java.nio.charset.Charset charset22 = builder18.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat24 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder25 = cSVFormat24.builder();
        java.lang.String str26 = cSVFormat24.getNullString();
        org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse(inputStream17, charset22, cSVFormat24);
        org.apache.commons.csv.CSVParser.Builder builder28 = builder5.setInputStream(inputStream17);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier29 = builder5.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder30 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset31 = builder30.getCharsetDefault();
        int int32 = builder30.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder34 = builder30.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray37 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder38 = builder30.setByteArray(byteArray37);
        org.apache.commons.csv.CSVParser.Builder builder40 = builder30.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder42 = builder30.setBufferSize((int) (byte) 0);
        java.nio.file.Path path43 = builder30.getPath();
        org.apache.commons.csv.CSVParser.Builder builder44 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset45 = builder44.getCharsetDefault();
        int int46 = builder44.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder48 = builder44.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray51 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder52 = builder44.setByteArray(byteArray51);
        org.apache.commons.csv.CSVParser.Builder builder54 = builder44.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder56 = builder44.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder58 = builder44.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder60 = builder58.setCharacterOffset((long) '#');
        java.io.File file61 = builder60.getFile();
        org.apache.commons.csv.CSVParser.Builder builder62 = builder30.setFile(file61);
        org.apache.commons.csv.CSVParser.Builder builder63 = builder5.setFile(file61);
        org.apache.commons.csv.CSVParser.Builder builder64 = builder0.setFile(file61);
        java.io.Writer writer65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder66 = builder0.setWriter(writer65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVParserSupplier9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertArrayEquals(byteArray12, new byte[] {});
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "" + "'", charSequence14, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(inputStream17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertArrayEquals(byteArray20, new byte[] {});
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(cSVParser27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(cSVParserSupplier29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(charset31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8192 + "'", int32 == 8192);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertArrayEquals(byteArray37, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(path43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(charset45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8192 + "'", int46 == 8192);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertArrayEquals(byteArray51, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(file61);
        org.junit.Assert.assertNull("file61.getParent() == null", file61.getParent());
        org.junit.Assert.assertEquals(file61.toString(), "");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1286");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier4 = builder0.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder5 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset6 = builder5.getCharsetDefault();
        byte[] byteArray7 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder8 = builder5.setByteArray(byteArray7);
        java.lang.CharSequence charSequence9 = builder5.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder11 = builder5.setBufferSize((int) ' ');
        java.io.InputStream inputStream12 = builder11.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder13 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset14 = builder13.getCharsetDefault();
        byte[] byteArray15 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder16 = builder13.setByteArray(byteArray15);
        java.nio.charset.Charset charset17 = builder13.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder20 = cSVFormat19.builder();
        java.lang.String str21 = cSVFormat19.getNullString();
        org.apache.commons.csv.CSVParser cSVParser22 = org.apache.commons.csv.CSVParser.parse(inputStream12, charset17, cSVFormat19);
        org.apache.commons.csv.CSVParser.Builder builder23 = builder0.setInputStream(inputStream12);
        org.apache.commons.csv.CSVParser.Builder builder24 = org.apache.commons.csv.CSVParser.builder();
        org.apache.commons.csv.CSVParser.Builder builder26 = builder24.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder27 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset28 = builder27.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder29 = builder24.setCharset(charset28);
        org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean31 = cSVFormat30.getSkipHeaderRecord();
        java.lang.String str32 = cSVFormat30.getRecordSeparator();
        boolean boolean33 = cSVFormat30.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder34 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat30);
        java.sql.ResultSetMetaData resultSetMetaData35 = null;
        org.apache.commons.csv.CSVFormat.Builder builder36 = builder34.setHeader(resultSetMetaData35);
        org.apache.commons.csv.CSVFormat.Builder builder38 = builder36.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat.Builder builder40 = builder38.setTrailingData(true);
        org.apache.commons.csv.CSVFormat cSVFormat41 = builder38.get();
        java.lang.Character char42 = cSVFormat41.getEscapeCharacter();
        boolean boolean43 = cSVFormat41.getSkipHeaderRecord();
        org.apache.commons.csv.CSVParser cSVParser44 = org.apache.commons.csv.CSVParser.parse(inputStream12, charset28, cSVFormat41);
        java.lang.String str45 = cSVParser44.getTrailerComment();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(cSVParserSupplier4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] {});
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "" + "'", charSequence9, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertArrayEquals(byteArray15, new byte[] {});
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(cSVFormat19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(cSVParser22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(cSVFormat30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\n" + "'", str32, "\n");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(cSVFormat41);
        org.junit.Assert.assertTrue("'" + char42 + "' != '" + '#' + "'", char42 == '#');
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(cSVParser44);
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1287");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        boolean boolean6 = cSVFormat2.getTrailingData();
        org.apache.commons.csv.QuoteMode quoteMode7 = cSVFormat2.getQuoteMode();
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        int int10 = builder8.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder8.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray15 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder16 = builder8.setByteArray(byteArray15);
        org.apache.commons.csv.CSVParser.Builder builder18 = builder8.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder20 = builder8.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder22 = builder8.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder23 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset24 = builder23.getCharsetDefault();
        int int25 = builder23.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder27 = builder23.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray30 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder31 = builder23.setByteArray(byteArray30);
        org.apache.commons.csv.CSVParser.Builder builder32 = builder22.setByteArray(byteArray30);
        java.nio.charset.Charset charset33 = builder22.getCharsetDefault();
        org.apache.commons.csv.CSVParser.Builder builder35 = builder22.setBufferSize((java.lang.Integer) 8192);
        org.apache.commons.csv.CSVParser.Builder builder36 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset37 = builder36.getCharsetDefault();
        byte[] byteArray38 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder39 = builder36.setByteArray(byteArray38);
        java.nio.charset.Charset charset40 = builder36.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder42 = builder36.setCharacterOffset((long) (short) 1);
        org.apache.commons.csv.CSVParser.Builder builder43 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset44 = builder43.getCharsetDefault();
        int int45 = builder43.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder47 = builder43.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray50 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder51 = builder43.setByteArray(byteArray50);
        org.apache.commons.csv.CSVParser.Builder builder53 = builder43.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder55 = builder43.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder57 = builder43.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder59 = builder57.setCharacterOffset((long) '#');
        java.io.File file60 = builder59.getFile();
        org.apache.commons.csv.CSVParser.Builder builder61 = builder42.setFile(file60);
        org.apache.commons.csv.CSVParser.Builder builder63 = builder61.setFile(",");
        java.io.Reader reader64 = null; // flaky "10) test1287(org.apache.commons.csv.randoop.RegressionTest2)": builder61.getReader();
        org.apache.commons.csv.CSVParser.Builder builder65 = null; // flaky "10) test1287(org.apache.commons.csv.randoop.RegressionTest2)": builder35.setReader(reader64);
        org.apache.commons.csv.CSVParser cSVParser66 = null; // flaky "10) test1287(org.apache.commons.csv.randoop.RegressionTest2)": cSVFormat2.parse(reader64);
        org.apache.commons.csv.CSVFormat cSVFormat67 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean68 = cSVFormat67.getSkipHeaderRecord();
        java.lang.String str69 = cSVFormat67.getRecordSeparator();
        boolean boolean70 = cSVFormat67.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter71 = cSVFormat67.printer();
        boolean boolean72 = cSVFormat67.getIgnoreHeaderCase();
        boolean boolean73 = cSVFormat67.isQuoteCharacterSet();
        java.lang.String str74 = cSVFormat67.getRecordSeparator();
        org.apache.commons.csv.CSVParser cSVParser75 = null; // flaky "10) test1287(org.apache.commons.csv.randoop.RegressionTest2)": org.apache.commons.csv.CSVParser.parse(reader64, cSVFormat67);
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + quoteMode7 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode7.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8192 + "'", int10 == 8192);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertArrayEquals(byteArray15, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8192 + "'", int25 == 8192);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertArrayEquals(byteArray30, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(charset33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(charset37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertArrayEquals(byteArray38, new byte[] {});
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(charset40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(charset44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8192 + "'", int45 == 8192);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertArrayEquals(byteArray50, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(file60);
        org.junit.Assert.assertNull("file60.getParent() == null", file60.getParent());
        org.junit.Assert.assertEquals(file60.toString(), "");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
// flaky "9) test1287(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(reader64);
// flaky "9) test1287(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(builder65);
// flaky "7) test1287(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(cSVParser66);
        org.junit.Assert.assertNotNull(cSVFormat67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\n" + "'", str69, "\n");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(cSVPrinter71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\n" + "'", str74, "\n");
// flaky "7) test1287(org.apache.commons.csv.randoop.RegressionTest2)":         org.junit.Assert.assertNotNull(cSVParser75);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1288");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        java.nio.file.Path path13 = builder0.getPath();
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset15 = builder14.getCharsetDefault();
        int int16 = builder14.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder14.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser19 = builder14.getUnchecked();
        java.lang.CharSequence charSequence20 = builder14.getCharSequence();
        java.nio.file.OpenOption[] openOptionArray21 = builder14.getOpenOptions();
        org.apache.commons.csv.CSVParser.Builder builder22 = builder0.setOpenOptions(openOptionArray21);
        java.nio.charset.Charset charset23 = builder0.getCharset();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8192 + "'", int16 == 8192);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(cSVParser19);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", charSequence20, "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertNotNull(openOptionArray21);
        org.junit.Assert.assertArrayEquals(openOptionArray21, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(charset23);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1289");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD;
        org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.newFormat('\"');
        org.apache.commons.csv.CSVFormat.Predefined predefined3 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat4 = predefined3.getFormat();
        java.lang.String str5 = cSVFormat4.toString();
        boolean boolean6 = cSVFormat4.isEscapeCharacterSet();
        boolean boolean7 = cSVFormat2.equals((java.lang.Object) cSVFormat4);
        org.apache.commons.csv.CSVPrinter cSVPrinter8 = cSVFormat2.printer();
        boolean boolean9 = cSVFormat2.getAutoFlush();
        java.lang.String[] strArray10 = cSVFormat2.getHeader();
        boolean boolean11 = cSVFormat0.equals((java.lang.Object) cSVFormat2);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + predefined3 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined3.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str5, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(cSVPrinter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1290");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray7 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setByteArray(byteArray7);
        org.apache.commons.csv.CSVParser.Builder builder10 = builder0.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder12 = builder0.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder14 = builder0.setCharacterOffset((long) (byte) 1);
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 100, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder19 = builder14.setByteArray(byteArray18);
        java.io.InputStream inputStream20 = builder19.getInputStream();
        java.io.File file21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder22 = builder19.setFile(file21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertArrayEquals(byteArray7, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] { (byte) -1, (byte) 100, (byte) 1 });
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(inputStream20);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1291");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.QuoteMode quoteMode7 = null;
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setQuoteMode(quoteMode7);
        org.apache.commons.csv.CSVFormat.Builder builder10 = builder6.setAutoFlush(false);
        org.apache.commons.csv.CSVFormat cSVFormat11 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean12 = cSVFormat11.getSkipHeaderRecord();
        java.lang.String str13 = cSVFormat11.getRecordSeparator();
        boolean boolean14 = cSVFormat11.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder15 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat11);
        org.apache.commons.csv.CSVFormat.Builder builder17 = builder15.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder19 = builder17.setQuote('a');
        org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.EXCEL;
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode21 = cSVFormat20.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder17.setDuplicateHeaderMode(duplicateHeaderMode21);
        org.apache.commons.csv.CSVFormat.Builder builder23 = builder10.setDuplicateHeaderMode(duplicateHeaderMode21);
        org.apache.commons.csv.CSVFormat.Builder builder25 = builder10.setIgnoreSurroundingSpaces(false);
        org.apache.commons.csv.CSVFormat.Builder builder27 = builder10.setNullString("\"\r\n\",\"Delimiter=<,> Escaape=< > QuoteChaar=<a\"> NullString=<> RecordSepaaraator=<\n> SurroundingSpaaces:ignored SkipHeaaderRecord:faalse HeaaderComments:[100,a\"#a\",faalse,a\"Delimiter=<,> Escaape=<a\"a\"> QuoteChaar=<a\"a\"> QuoteMode=<MINIMAL> RecordSepaaraator=<\r\n> EmptyLines:ignored SkipHeaaderRecord:faalsea\", , hi!, \r\n, , 100,a\"#a\",faalse,a\"Delimiter=<,> Escaape=<a\"a\"> QuoteChaar=<a\"a\"> QuoteMode=<MINIMAL> RecordSepaaraator=<\r\n> EmptyLines:ignored SkipHeaaderRecord:faalsea\"]\",\"Delimiter=<,> QuoteChaar=<a\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSepaaraator=<\n> SkipHeaaderRecord:faalse\"");
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(cSVFormat11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\n" + "'", str13, "\n");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(cSVFormat20);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode21 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode21.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1292");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.newFormat('a');
        boolean boolean2 = cSVFormat1.getTrailingDelimiter();
        org.apache.commons.csv.QuoteMode quoteMode3 = cSVFormat1.getQuoteMode();
        java.lang.Character char4 = cSVFormat1.getQuoteCharacter();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(quoteMode3);
        org.junit.Assert.assertNull(char4);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1293");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        org.apache.commons.csv.QuoteMode quoteMode5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setQuoteMode(quoteMode5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder4.setIgnoreSurroundingSpaces(true);
        java.lang.String[] strArray15 = new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" };
        org.apache.commons.csv.CSVFormat.Builder builder16 = builder4.setHeaderComments(strArray15);
        org.apache.commons.csv.CSVFormat.Builder builder18 = builder4.setEscape(' ');
        org.apache.commons.csv.CSVFormat.Builder builder20 = builder18.setRecordSeparator("");
        org.apache.commons.csv.CSVFormat.Builder builder22 = builder18.setEscape('#');
        org.apache.commons.csv.CSVFormat.Predefined predefined23 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat24 = predefined23.getFormat();
        boolean boolean25 = cSVFormat24.getIgnoreHeaderCase();
        java.lang.Object[] objArray30 = new java.lang.Object[] { (byte) 100, '#', false, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" };
        java.lang.String str31 = cSVFormat24.format(objArray30);
        java.lang.String str32 = cSVFormat24.getRecordSeparator();
        boolean boolean33 = cSVFormat24.isQuoteCharacterSet();
        org.apache.commons.csv.QuoteMode quoteMode34 = cSVFormat24.getQuoteMode();
        org.apache.commons.csv.CSVFormat.Builder builder35 = builder22.setQuoteMode(quoteMode34);
        org.apache.commons.csv.CSVFormat.Builder builder37 = builder22.setTrailingDelimiter(true);
        org.apache.commons.csv.CSVFormat.Builder builder39 = builder22.setIgnoreHeaderCase(false);
        org.apache.commons.csv.CSVFormat cSVFormat40 = builder22.get();
        org.apache.commons.csv.CSVFormat.Builder builder41 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat40);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertArrayEquals(strArray15, new java.lang.String[] { "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", "", "hi!", "\r\n", "", "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" });
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + predefined23 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined23.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[100, #, false, Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"" + "'", str31, "100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\r\n" + "'", str32, "\r\n");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + quoteMode34 + "' != '" + org.apache.commons.csv.QuoteMode.MINIMAL + "'", quoteMode34.equals(org.apache.commons.csv.QuoteMode.MINIMAL));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1294");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        java.io.Reader reader7 = builder6.getReader();
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        int int10 = builder8.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder12 = builder8.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser13 = builder8.getUnchecked();
        org.apache.commons.csv.CSVParser.Builder builder14 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset15 = builder14.getCharsetDefault();
        int int16 = builder14.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder18 = builder14.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder22 = builder14.setByteArray(byteArray21);
        org.apache.commons.csv.CSVParser.Builder builder24 = builder14.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder26 = builder14.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder28 = builder14.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder30 = builder28.setCharacterOffset((long) '#');
        java.io.File file31 = builder30.getFile();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder8.setFile(file31);
        org.apache.commons.csv.CSVParser.Builder builder33 = builder6.setFile(file31);
        org.apache.commons.csv.CSVParser.Builder builder35 = builder33.setRecordNumber(100L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(reader7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8192 + "'", int10 == 8192);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(cSVParser13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8192 + "'", int16 == 8192);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertArrayEquals(byteArray21, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(file31);
        org.junit.Assert.assertNull("file31.getParent() == null", file31.getParent());
        org.junit.Assert.assertEquals(file31.toString(), "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1295");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
        java.lang.String str2 = cSVFormat0.getRecordSeparator();
        boolean boolean3 = cSVFormat0.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder4 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat0);
        java.sql.ResultSetMetaData resultSetMetaData5 = null;
        org.apache.commons.csv.CSVFormat.Builder builder6 = builder4.setHeader(resultSetMetaData5);
        org.apache.commons.csv.CSVFormat.Builder builder8 = builder6.setEscape((java.lang.Character) '#');
        org.apache.commons.csv.CSVFormat cSVFormat9 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean10 = cSVFormat9.getSkipHeaderRecord();
        java.lang.String str11 = cSVFormat9.getRecordSeparator();
        boolean boolean12 = cSVFormat9.getTrim();
        org.apache.commons.csv.CSVPrinter cSVPrinter13 = cSVFormat9.printer();
        org.apache.commons.csv.DuplicateHeaderMode duplicateHeaderMode14 = cSVFormat9.getDuplicateHeaderMode();
        org.apache.commons.csv.CSVFormat.Builder builder15 = builder6.setDuplicateHeaderMode(duplicateHeaderMode14);
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\n" + "'", str2, "\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(cSVFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\n" + "'", str11, "\n");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(cSVPrinter13);
        org.junit.Assert.assertTrue("'" + duplicateHeaderMode14 + "' != '" + org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL + "'", duplicateHeaderMode14.equals(org.apache.commons.csv.DuplicateHeaderMode.ALLOW_ALL));
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1296");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        int int2 = builder0.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder4 = builder0.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        org.apache.commons.csv.CSVParser cSVParser5 = builder0.getUnchecked();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder0.setPath(",");
        org.apache.commons.csv.CSVParser.Builder builder9 = builder7.setBufferSizeMax((int) '4');
        java.io.OutputStream outputStream10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser.Builder builder11 = builder9.setOutputStream(outputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: origin");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8192 + "'", int2 == 8192);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1297");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.lang.String[] strArray6 = cSVFormat2.getHeaderComments();
        boolean boolean7 = cSVFormat2.getIgnoreSurroundingSpaces();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1298");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor6 = cSVParser5.iterator();
        java.util.Map<java.lang.String, java.lang.Integer> strMap7 = cSVParser5.getHeaderMap();
        java.util.Map<java.lang.String, java.lang.Integer> strMap8 = cSVParser5.getHeaderMap();
        java.util.List<java.lang.String> strList9 = cSVParser5.getHeaderNames();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNotNull(cSVRecordItor6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1299");
        java.net.URL uRL0 = null;
        org.apache.commons.csv.CSVParser.Builder builder1 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset2 = builder1.getCharsetDefault();
        byte[] byteArray3 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder4 = builder1.setByteArray(byteArray3);
        java.lang.CharSequence charSequence5 = builder1.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder7 = builder1.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset9 = builder8.getCharsetDefault();
        byte[] byteArray10 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder11 = builder8.setByteArray(byteArray10);
        java.lang.CharSequence charSequence12 = builder8.getCharSequence();
        java.lang.CharSequence charSequence13 = builder8.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser14 = builder8.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray15 = builder8.getOpenOptions();
        java.nio.charset.Charset charset16 = builder8.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder17 = builder1.setCharset(charset16);
        java.io.InputStream inputStream18 = builder17.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder19 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset20 = builder19.getCharsetDefault();
        java.nio.charset.Charset charset21 = builder19.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat22 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean23 = cSVFormat22.getSkipHeaderRecord();
        java.lang.String str24 = cSVFormat22.getRecordSeparator();
        boolean boolean25 = cSVFormat22.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder26 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat22);
        org.apache.commons.csv.CSVParser cSVParser27 = org.apache.commons.csv.CSVParser.parse(inputStream18, charset21, cSVFormat22);
        org.apache.commons.csv.CSVFormat cSVFormat28 = org.apache.commons.csv.CSVFormat.RFC4180;
        org.apache.commons.csv.CSVPrinter cSVPrinter29 = cSVFormat28.printer();
        boolean boolean30 = cSVFormat28.getLenientEof();
        java.lang.String str31 = cSVFormat28.getNullString();
        boolean boolean32 = cSVFormat28.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder33 = cSVFormat28.builder();
        java.lang.Character char34 = cSVFormat28.getCommentMarker();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser35 = org.apache.commons.csv.CSVParser.parse(uRL0, charset21, cSVFormat28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: url");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertArrayEquals(byteArray3, new byte[] {});
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + charSequence5 + "' != '" + "" + "'", charSequence5, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertArrayEquals(byteArray10, new byte[] {});
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "" + "'", charSequence12, "");
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "" + "'", charSequence13, "");
        org.junit.Assert.assertNotNull(cSVParser14);
        org.junit.Assert.assertNotNull(openOptionArray15);
        org.junit.Assert.assertArrayEquals(openOptionArray15, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(inputStream18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(cSVFormat22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\n" + "'", str24, "\n");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(cSVParser27);
        org.junit.Assert.assertNotNull(cSVFormat28);
        org.junit.Assert.assertNotNull(cSVPrinter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(char34);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1300");
        org.apache.commons.csv.CSVFormat.Predefined predefined1 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat2 = predefined1.getFormat();
        boolean boolean3 = cSVFormat2.getAutoFlush();
        boolean boolean4 = cSVFormat2.getTrim();
        org.apache.commons.csv.CSVParser cSVParser5 = org.apache.commons.csv.CSVParser.parse("100,\"#\",false,\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"", cSVFormat2);
        java.lang.String str6 = cSVParser5.getHeaderComment();
        java.util.stream.Stream<org.apache.commons.csv.CSVRecord> cSVRecordStream7 = cSVParser5.stream();
        java.util.List<java.lang.String> strList8 = cSVParser5.getHeaderNames();
        java.util.Spliterator<java.lang.String> strSpliterator9 = strList8.spliterator();
        org.junit.Assert.assertTrue("'" + predefined1 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined1.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(cSVParser5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(cSVRecordStream7);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strSpliterator9);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1301");
        org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.TDF;
        org.apache.commons.csv.CSVParser cSVParser2 = org.apache.commons.csv.CSVParser.parse("", cSVFormat1);
        java.lang.String str3 = cSVParser2.getFirstEndOfLine();
        java.lang.String str4 = cSVParser2.getTrailerComment();
        boolean boolean5 = cSVParser2.hasTrailerComment();
        java.lang.String str6 = cSVParser2.getFirstEndOfLine();
        org.junit.Assert.assertNotNull(cSVFormat1);
        org.junit.Assert.assertNotNull(cSVParser2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1302");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder6.setFile("Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        java.io.File file9 = builder8.getFile();
        org.apache.commons.csv.CSVParser.Builder builder10 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset11 = builder10.getCharsetDefault();
        int int12 = builder10.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder14 = builder10.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray17 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder18 = builder10.setByteArray(byteArray17);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder10.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder22 = builder10.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder24 = builder10.setCharacterOffset((long) (byte) 100);
        int int25 = builder10.getBufferSize();
        org.apache.commons.csv.CSVParser.Builder builder26 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset27 = builder26.getCharsetDefault();
        byte[] byteArray28 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder29 = builder26.setByteArray(byteArray28);
        java.lang.CharSequence charSequence30 = builder26.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder26.setBufferSize((int) ' ');
        java.io.InputStream inputStream33 = builder32.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder34 = builder10.setInputStream(inputStream33);
        org.apache.commons.csv.CSVParser.Builder builder35 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset36 = builder35.getCharsetDefault();
        byte[] byteArray37 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder38 = builder35.setByteArray(byteArray37);
        java.io.InputStream inputStream39 = builder35.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder40 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset41 = builder40.getCharsetDefault();
        byte[] byteArray42 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder43 = builder40.setByteArray(byteArray42);
        java.lang.CharSequence charSequence44 = builder40.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder46 = builder40.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder47 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset48 = builder47.getCharsetDefault();
        byte[] byteArray49 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder50 = builder47.setByteArray(byteArray49);
        java.lang.CharSequence charSequence51 = builder47.getCharSequence();
        java.lang.CharSequence charSequence52 = builder47.getCharSequence();
        org.apache.commons.csv.CSVParser cSVParser53 = builder47.getUnchecked();
        java.nio.file.OpenOption[] openOptionArray54 = builder47.getOpenOptions();
        java.nio.charset.Charset charset55 = builder47.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder56 = builder40.setCharset(charset55);
        org.apache.commons.csv.CSVFormat cSVFormat57 = org.apache.commons.csv.CSVFormat.MONGODB_CSV;
        boolean boolean58 = cSVFormat57.getAutoFlush();
        org.apache.commons.csv.CSVParser cSVParser59 = org.apache.commons.csv.CSVParser.parse(inputStream39, charset55, cSVFormat57);
        org.apache.commons.csv.CSVFormat cSVFormat60 = org.apache.commons.csv.CSVFormat.RFC4180;
        java.lang.String str61 = cSVFormat60.getDelimiterString();
        boolean boolean62 = cSVFormat60.isCommentMarkerSet();
        org.apache.commons.csv.CSVParser cSVParser63 = org.apache.commons.csv.CSVParser.parse(inputStream33, charset55, cSVFormat60);
        org.apache.commons.csv.CSVFormat cSVFormat64 = org.apache.commons.csv.CSVFormat.POSTGRESQL_CSV;
        boolean boolean65 = cSVFormat64.getSkipHeaderRecord();
        java.lang.String str66 = cSVFormat64.getRecordSeparator();
        boolean boolean67 = cSVFormat64.getTrim();
        org.apache.commons.csv.CSVFormat.Builder builder68 = org.apache.commons.csv.CSVFormat.Builder.create(cSVFormat64);
        org.apache.commons.csv.CSVFormat.Builder builder70 = builder68.setCommentMarker((java.lang.Character) 'a');
        org.apache.commons.csv.CSVFormat.Builder builder72 = builder68.setEscape('\"');
        org.apache.commons.csv.CSVFormat cSVFormat73 = builder68.get();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.csv.CSVParser cSVParser74 = org.apache.commons.csv.CSVParser.parse(file9, charset55, cSVFormat73);
            org.junit.Assert.fail("Expected exception of type java.nio.file.InvalidPathException; message: Illegal char <<> at index 10: Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<?> SkipHeaderRecord:false");
        } catch (java.nio.file.InvalidPathException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(file9);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "Delimiter=<,> QuoteChar=<\"> QuoteMode=<ALL_NON_NULL> NullString=<> RecordSeparator=<\n> SkipHeaderRecord:false");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8192 + "'", int12 == 8192);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertArrayEquals(byteArray17, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8192 + "'", int25 == 8192);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertArrayEquals(byteArray28, new byte[] {});
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "" + "'", charSequence30, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertArrayEquals(byteArray37, new byte[] {});
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(inputStream39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertArrayEquals(byteArray42, new byte[] {});
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "" + "'", charSequence44, "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(charset48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertArrayEquals(byteArray49, new byte[] {});
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "" + "'", charSequence51, "");
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "" + "'", charSequence52, "");
        org.junit.Assert.assertNotNull(cSVParser53);
        org.junit.Assert.assertNotNull(openOptionArray54);
        org.junit.Assert.assertArrayEquals(openOptionArray54, new java.nio.file.OpenOption[] {});
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(cSVFormat57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(cSVParser59);
        org.junit.Assert.assertNotNull(cSVFormat60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "," + "'", str61, ",");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(cSVParser63);
        org.junit.Assert.assertNotNull(cSVFormat64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\n" + "'", str66, "\n");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(cSVFormat73);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1303");
        org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.POSTGRESQL_TEXT;
        org.apache.commons.csv.CSVPrinter cSVPrinter1 = cSVFormat0.printer();
        boolean boolean2 = cSVFormat0.isNullStringSet();
        org.junit.Assert.assertNotNull(cSVFormat0);
        org.junit.Assert.assertNotNull(cSVPrinter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "org.apache.commons.csv.randoop.RegressionTest2.test1304");
        org.apache.commons.csv.CSVParser.Builder builder0 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset1 = builder0.getCharsetDefault();
        byte[] byteArray2 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder3 = builder0.setByteArray(byteArray2);
        java.lang.CharSequence charSequence4 = builder0.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder6 = builder0.setBufferSize((int) ' ');
        org.apache.commons.csv.CSVParser.Builder builder8 = builder0.setRecordNumber((long) (byte) 100);
        java.util.function.IntUnaryOperator intUnaryOperator9 = null;
        org.apache.commons.csv.CSVParser.Builder builder10 = builder8.setBufferSizeChecker(intUnaryOperator9);
        org.apache.commons.csv.CSVParser.Builder builder11 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset12 = builder11.getCharsetDefault();
        int int13 = builder11.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder15 = builder11.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder19 = builder11.setByteArray(byteArray18);
        org.apache.commons.csv.CSVParser.Builder builder20 = builder10.setByteArray(byteArray18);
        org.apache.commons.csv.CSVParser.Builder builder21 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset22 = builder21.getCharsetDefault();
        byte[] byteArray23 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder24 = builder21.setByteArray(byteArray23);
        java.util.function.Supplier<org.apache.commons.csv.CSVParser> cSVParserSupplier25 = builder21.asSupplier();
        org.apache.commons.csv.CSVParser.Builder builder26 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset27 = builder26.getCharsetDefault();
        byte[] byteArray28 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder29 = builder26.setByteArray(byteArray28);
        java.lang.CharSequence charSequence30 = builder26.getCharSequence();
        org.apache.commons.csv.CSVParser.Builder builder32 = builder26.setBufferSize((int) ' ');
        java.io.InputStream inputStream33 = builder32.getInputStream();
        org.apache.commons.csv.CSVParser.Builder builder34 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset35 = builder34.getCharsetDefault();
        byte[] byteArray36 = new byte[] {};
        org.apache.commons.csv.CSVParser.Builder builder37 = builder34.setByteArray(byteArray36);
        java.nio.charset.Charset charset38 = builder34.getCharset();
        org.apache.commons.csv.CSVFormat cSVFormat40 = org.apache.commons.csv.CSVFormat.newFormat('a');
        org.apache.commons.csv.CSVFormat.Builder builder41 = cSVFormat40.builder();
        java.lang.String str42 = cSVFormat40.getNullString();
        org.apache.commons.csv.CSVParser cSVParser43 = org.apache.commons.csv.CSVParser.parse(inputStream33, charset38, cSVFormat40);
        org.apache.commons.csv.CSVParser.Builder builder44 = builder21.setInputStream(inputStream33);
        org.apache.commons.csv.CSVParser.Builder builder45 = builder10.setInputStream(inputStream33);
        org.apache.commons.csv.CSVParser.Builder builder46 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset47 = builder46.getCharsetDefault();
        int int48 = builder46.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder50 = builder46.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray53 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder54 = builder46.setByteArray(byteArray53);
        org.apache.commons.csv.CSVParser.Builder builder56 = builder54.setBufferSize((java.lang.Integer) (-1));
        org.apache.commons.csv.CSVParser.Builder builder57 = org.apache.commons.csv.CSVParser.builder();
        java.nio.charset.Charset charset58 = builder57.getCharsetDefault();
        int int59 = builder57.getBufferSizeDefault();
        org.apache.commons.csv.CSVParser.Builder builder61 = builder57.setCharSequence((java.lang.CharSequence) "\"100\",\"#\",\"false\",\"Delimiter=<,> Escape=<\"\"> QuoteChar=<\"\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false\"");
        byte[] byteArray64 = new byte[] { (byte) -1, (byte) 1 };
        org.apache.commons.csv.CSVParser.Builder builder65 = builder57.setByteArray(byteArray64);
        org.apache.commons.csv.CSVParser.Builder builder67 = builder57.setPath("");
        org.apache.commons.csv.CSVParser.Builder builder69 = builder57.setBufferSize((int) (byte) 0);
        org.apache.commons.csv.CSVParser.Builder builder71 = builder57.setBufferSize((java.lang.Integer) 100);
        org.apache.commons.csv.CSVParser.Builder builder73 = builder71.setCharacterOffset((long) '#');
        org.apache.commons.csv.CSVParser.Builder builder75 = builder71.setCharacterOffset((long) 'a');
        java.nio.charset.Charset charset76 = builder71.getCharset();
        org.apache.commons.csv.CSVParser.Builder builder77 = builder54.setCharset(charset76);
        org.apache.commons.csv.CSVFormat.Predefined predefined78 = org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV;
        org.apache.commons.csv.CSVFormat cSVFormat79 = predefined78.getFormat();
        java.lang.String str80 = cSVFormat79.toString();
        boolean boolean81 = cSVFormat79.isEscapeCharacterSet();
        boolean boolean82 = cSVFormat79.getTrailingDelimiter();
        org.apache.commons.csv.CSVParser cSVParser83 = org.apache.commons.csv.CSVParser.parse(inputStream33, charset76, cSVFormat79);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertArrayEquals(byteArray2, new byte[] {});
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + charSequence4 + "' != '" + "" + "'", charSequence4, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8192 + "'", int13 == 8192);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertArrayEquals(byteArray18, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertArrayEquals(byteArray23, new byte[] {});
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(cSVParserSupplier25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertArrayEquals(byteArray28, new byte[] {});
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "" + "'", charSequence30, "");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(inputStream33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(charset35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertArrayEquals(byteArray36, new byte[] {});
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(charset38);
        org.junit.Assert.assertNotNull(cSVFormat40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(cSVParser43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8192 + "'", int48 == 8192);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertArrayEquals(byteArray53, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(charset58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 8192 + "'", int59 == 8192);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertArrayEquals(byteArray64, new byte[] { (byte) -1, (byte) 1 });
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(charset76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + predefined78 + "' != '" + org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV + "'", predefined78.equals(org.apache.commons.csv.CSVFormat.Predefined.MONGODB_CSV));
        org.junit.Assert.assertNotNull(cSVFormat79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false" + "'", str80, "Delimiter=<,> Escape=<\"> QuoteChar=<\"> QuoteMode=<MINIMAL> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(cSVParser83);
    }
}
